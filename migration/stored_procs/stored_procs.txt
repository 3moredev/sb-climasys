CREATE PROCEDURE [dbo].[Edit_Insurance_Company_Master]

@p_var_CatShortDescription NVARCHAR(max),
@p_var_ComapnyId int,
@p_var_User_Id NVARCHAR(90),
@p_var_DoctorID NVARCHAR(30)

AS



BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY
IF NOT EXISTS (
SELECT * FROM [dbo].[Insurance_Company_Master] PC
WHERE --PC.Company_Name = @p_var_CatShortDescription
[Company_Id] = @p_var_ComapnyId
--AND PC.DOCTOR_ID = @p_var_DoctorID

)
BEGIN
INSERT INTO [dbo].[Insurance_Company_Master]
(
Company_Name,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name
)
VALUES ( @p_var_CatShortDescription,GetDate(),GetDate(),@p_var_User_Id,@p_var_User_Id)
END
ELSE
BEGIN
UPDATE [dbo].[Insurance_Company_Master]
SET Company_Name = @p_var_CatShortDescription
WHERE [Company_Id] = @p_var_ComapnyId

SELECT 1 AS SAVE_STATUS
END

END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END
















GO
/****** Object:  StoredProcedure [dbo].[Insert_Insurance_Company_Master]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author : INCRUST
-- Create date : 18-June-2016
-- Description : This stored procedure will insert the catagory in Prescription_Category
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[Insert_Insurance_Company_Master]

@p_var_CatShortDescription NVARCHAR(max),
@p_var_ComapnyId int,
@p_var_User_Id NVARCHAR(90),
@p_var_DoctorID NVARCHAR(30)

AS



BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY
IF NOT EXISTS (
SELECT * FROM [dbo].[Insurance_Company_Master] PC
WHERE PC.Company_Name = @p_var_CatShortDescription
and IsDeleted !=1
-- [Company_Id] = @p_var_ComapnyId
--AND PC.DOCTOR_ID = @p_var_DoctorID

)
BEGIN
INSERT INTO [dbo].[Insurance_Company_Master]
(
Company_Name,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name
)
VALUES ( @p_var_CatShortDescription,GetDate(),GetDate(),@p_var_User_Id,@p_var_User_Id)
END
ELSE
BEGIN
UPDATE [dbo].[Insurance_Company_Master]
SET Company_Name = @p_var_CatShortDescription
WHERE Company_Name = @p_var_CatShortDescription
and IsDeleted !=1
SELECT 1 AS SAVE_STATUS
END

END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END
















GO
/****** Object:  StoredProcedure [dbo].[USP_Check_Enable_Print_Discharge]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 31 July 2017
-- Description:	This stored procedure is used to check whether patients invoice and Bill are already created for given IPD Number or Not 
-- =============================================

CREATE PROCEDURE [dbo].[USP_Check_Enable_Print_Discharge]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	IF EXISTS
	(
		SELECT DI.*,DB.* FROM [Discharge_Invoice_Hdr] DI

		INNER JOIN [dbo].[Discharge_Bill_Hdr] DB
		ON		   DI.IPD_RefNo = DB.IPD_RefNo

		WHERE		DI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		DI.Clinic_ID			=   @p_nvar_Clinic_ID	
			AND		DI.Doctor_ID			=   @p_nvar_Doctor_ID 
			AND		DI.IPD_RefNo			=	@p_nvar_IPD_No
			AND		DB.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		DI.Clinic_ID			=   @p_nvar_Clinic_ID	
			AND		DB.Doctor_ID			=   @p_nvar_Doctor_ID 
			AND		DB.IPD_RefNo			=	@p_nvar_IPD_No

		
	)

	BEGIN

	SELECT 1 AS DATAEXIST
	
	END

	ELSE

	BEGIN

	SELECT 0 AS DATAEXIST

	END

	

	
	
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_BillSubCharges]    Script Date: 16-Jan-18 7:50:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Check_Model_Config_Params]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 29 July 2017
-- Description:	This stored procedure is used to check whether patients Bill is already created for given IPD Number or Not 
-- =============================================

Create PROCEDURE [dbo].[USP_Check_Model_Config_Params]

	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	
		SELECT * FROM [dbo].[Model_Config_Params] ms
		WHERE	ms.Config_ID=3


	
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterSymptom]    Script Date: 16-Jan-18 7:52:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Check_Patient_Bill_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 29 July 2017
-- Description:	This stored procedure is used to check whether patients Bill is already created for given IPD Number or Not 
-- =============================================

CREATE PROCEDURE [dbo].[USP_Check_Patient_Bill_Data]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	IF EXISTS
	(
		SELECT * FROM [dbo].[Discharge_Bill_Hdr] DI
		WHERE		DI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		DI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		DI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		DI.IPD_RefNo				=	@p_nvar_IPD_No
	)

	BEGIN

	SELECT 1 AS DATAEXIST


			if exists(	SELECT	VGI.IPD_RefNo,[Bill_No],[Bill_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID,VGI.Payment_By_ID,VGI.Payment_remark ,VGI.Receipt_Number,
		    ISNULL(DD.Referred_Doctor,'') AS Referred_Doctor, ISNULL(AD.InsuranceDetails,'') AS  Company ,DD.Anesthesia,ISNULL(AD.Department,'') as Department
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			inner join Patient_IPD_Receipts PIR
			ON PIR.receipt_number = VGI.receipt_number

			left JOIN	Admission_Data AD
			ON			AD.IPD_RefNo = VGI.IPD_RefNo

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No
)

begin 
	SELECT	VGI.IPD_RefNo,Adjust_Advance,[Bill_No],[Bill_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID,VGI.Payment_By_ID,VGI.Payment_remark ,VGI.Receipt_Number,PIR.Receipt_Date as Receipt_Date
			,DD.Admission_Date,DD.Discharge_Date, DD.Admission_Time , DD.Discharge_Time , AD.Insurancedetails , VGI.TDS
			 ,ISNULL(DD.Referred_Doctor,'') AS Referred_Doctor, ISNULL(AD.InsuranceDetails,'') AS  Company ,DD.Anesthesia,ISNULL(AD.Department,'') as Department
				
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo
				left join admission_data AD on
			AD.IPD_RefNo = @p_nvar_IPD_No

			inner join Patient_IPD_Receipts PIR
			ON PIR.receipt_number = VGI.receipt_number

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No

end
else
begin 
	SELECT	VGI.IPD_RefNo,Adjust_Advance,[Bill_No],[Bill_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID,VGI.Payment_By_ID,VGI.Payment_remark ,VGI.Receipt_Number,'' as Receipt_Date
						,DD.Admission_Date,DD.Discharge_Date, DD.Admission_Time , DD.Discharge_Time , AD.Insurancedetails , VGI.TDS,
						 ISNULL(DD.Referred_Doctor,'') AS Referred_Doctor, ISNULL(AD.InsuranceDetails,'') AS  Company ,DD.Anesthesia,ISNULL(AD.Department,'') as Department
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

						left join admission_data AD on
			AD.IPD_RefNo = @p_nvar_IPD_No


			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No

end


	SELECT	''AS IDCharges,[Date_Of_Service] as HospitalBillDate,[Date_Of_Service] as hdnlblHstplAddDate,[IPD_RefNo],VGI.[Charges_Category],VGI.[Charges_SubCategory],VGI.[Comments],VGI.[Amount],VGI.[Charges_Category]+'*'+CONVERT(VARCHAR(MAX),VGI.[Charges_SubCategory])+'*'+CONVERT(VARCHAR(MAX),VGI.[Amount]) AS ID
				--,VGI.Doctor_ID
				,VGI.No_Of_Units AS UNITS,IBC.Calculation_Type,VGI.Total_Amount
			
			FROM	[dbo].[Discharge_Bill_Details] VGI

			INNER JOIN  IPD_BillData_CHARGESMASTER IBC
			ON			VGI.Charges_Category = IBC.Charges_Category
			AND			VGI.Charges_SubCategory	=	IBC.Charges_SubCategory

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo			=	@p_nvar_IPD_No
			AND		ISNULL(VGI.[Delete_Flag],0)		=	0

			ORDER BY VGI.Date_Of_Service asc-- IBC.SortOrder,


	select Sum(Amount_Received) as Amount_Received from [dbo].[Advance_Collection_details]
	where IPD_RefNo = @p_nvar_IPD_No

	END

	ELSE

	BEGIN

	SELECT 0 AS DATAEXIST

	END 

	

	select DD.Admission_Date , DD.Discharge_Date , DD.Admission_Time , DD.Discharge_Time,AD.[InsuranceDetails],
	 ISNULL(DD.Referred_Doctor,'') AS Referred_Doctor, ISNULL(AD.InsuranceDetails,'') AS  Company ,DD.Anesthesia,ISNULL(AD.Department,'') as Department from Discharge_Data DD 
	left join admission_data AD on
	AD.IPD_RefNo = @p_nvar_IPD_No
	where DD.IPD_RefNo = @p_nvar_IPD_No
	and DD.Patient_ID = @p_nvar_Patient_Id
	and DD.Clinic_ID = @p_nvar_Clinic_ID
	
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterSymptom]    Script Date: 16-Jan-18 7:52:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Check_Patient_Discharge_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 26 July 2017
-- Description:	This stored procedure is used to check whether patients dischrage card is already created for given admission date or not
-- =============================================

CREATE PROCEDURE [dbo].[USP_Check_Patient_Discharge_Data]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id			TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_Admission_Date		DATETIME
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	IF EXISTS
	(
		SELECT * FROM Discharge_Data DI
		WHERE		DI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		DI.Clinic_ID			=   @p_nvar_Clinic_ID	
			AND		DI.Doctor_ID			=   @p_nvar_Doctor_ID 
			AND		DI.[Admission_Date]		=	@p_nvar_Admission_Date
			
	)

	BEGIN

	SELECT 1 AS DATAEXIST

	END

	ELSE

	BEGIN

	SELECT 0 AS DATAEXIST

	END

	

	
	
END


/****** Object:  StoredProcedure [dbo].[USP_Get_BloodGroupDetails]    Script Date: 16-Jan-18 7:55:35 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Check_Patient_Invoice_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 26 July 2017
-- Description:	This stored procedure is used to check whether patients invoice is already created for given IPD Number or Not 
-- =============================================

CREATE PROCEDURE [dbo].[USP_Check_Patient_Invoice_Data]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	IF EXISTS
	(
		SELECT * FROM [Discharge_Invoice_Hdr] DI
		WHERE		DI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		DI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		DI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		DI.IPD_RefNo				=	@p_nvar_IPD_No
	)

	BEGIN

	SELECT 1 AS DATAEXIST










	if exists(	SELECT	VGI.IPD_RefNo,[Invoice_No],[Invoice_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID,VGI.Receipt_Number  ,PIR.Receipt_Date as Receipt_Date
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			inner join Patient_IPD_Receipts PIR
			ON PIR.receipt_number = VGI.receipt_number

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No
)

begin

	SELECT	VGI.IPD_RefNo,[Invoice_No],[Invoice_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID,VGI.Receipt_Number  ,PIR.Receipt_Date as Receipt_Date
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			inner join Patient_IPD_Receipts PIR
			ON PIR.receipt_number = VGI.receipt_number

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No


			end
			else
			begin
					SELECT	VGI.IPD_RefNo,[Invoice_No],[Invoice_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
					ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID,VGI.Receipt_Number as Receipt_Number  ,'' as Receipt_Date
					FROM	[dbo].[Discharge_Invoice_Hdr] VGI
					INNER JOIN Discharge_Data DD
					ON		DD.IPD_RefNo=VGI.IPD_RefNo
					WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
					AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
					--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
					AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No

			end










	SELECT	[IPD_RefNo],VGI.[Description],VGI.[Unit_Price],[Quantity],VGI.[Description]+'*'+CONVERT(VARCHAR(MAX),VGI.[Unit_Price])+'*'+CONVERT(VARCHAR(MAX),VGI.[Quantity]) AS ID,VGI.Doctor_ID
				
			FROM		[dbo].[Discharge_Invoice_Details] VGI

			INNER JOIN  IPD_INVOICE_MEDICINEMASTER INM
			ON			VGI.Description = INM.Description

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No
			AND		ISNULL(VGI.[Delete_Flag],0)	=	0

			ORDER BY INM.SortOrder

	

	END

	ELSE

	BEGIN

	SELECT 0 AS DATAEXIST

	END

	

	
	
END


/****** Object:  StoredProcedure [dbo].[USP_Get_All_Patients_Report]    Script Date: 16-Jan-18 7:55:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_AbdominalFindings]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 20 Sep 2017
-- Description	: This stored procedure will set the delete falg on for abdominal findings
-- Created By	: Varsha Khandre
-- =============================================

 CREATE PROCEDURE [dbo].[USP_Delete_AbdominalFindings]
	
	@p_var_category		NVARCHAR(100),
	@p_var_findings		NVARCHAR(100)
	
 AS

 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	 [dbo].[Gynec_Abdominal_Examination_Master]

			 SET	 Delete_Flag	=	1
			 WHERE	 
					 [Category_Description]	= @p_var_category
			 AND	 [Findings_Description] = @p_var_findings	
						  
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestDataForDeleteAppointment]    Script Date: 16-Jan-18 8:07:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_AttachedReminders]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 30 Dec 2016
-- Description	: This stored procedure will delete the reminders for MR
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_AttachedReminders]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_company_name			VARCHAR(200),
	@p_var_visit_time			TIME,
	@p_var_MR_ID				INT,
	@p_var_AttachedReminder		NVARCHAR(300)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	MR_Visit_Attachments
			
			 WHERE					MR_ID		=	@p_var_MR_ID	
						   AND		Company_Name	=	@p_var_company_name
						   AND		Visit_Date	=	@p_date_TodyasVisitDate
						   AND		Visit_Time	=	@p_var_visit_time
						   AND		Doctor_ID	=	@p_var_Doctor_Id
						   AND		Clinic_ID	=	@p_var_Clinic_Id
						   AND		Shift_ID	=	@p_var_Shift_ID
						   AND		Attachment_Name= @p_var_AttachedReminder
			 END			
	      
		 SELECT 1 AS DELETE_STATUS
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_Gender]    Script Date: 16-Jan-18 8:06:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_AttachedTreatmentFiles]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 03 June 2017
-- Description	: This stored procedure will delete the attachments of treatment plan
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_AttachedTreatmentFiles]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_AttachedFile			NVARCHAR(300)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE 	   Dentist_Patient_Files
			
			 SET		   Delete_Flag=1
			 WHERE					Patient_ID		=	@p_var_Patient_ID	
						   AND		Doctor_ID		=	@p_var_Doctor_Id
						   AND		Clinic_ID		=	@p_var_Clinic_Id
						   AND		FilePath_Name	=	@p_var_AttachedFile
			 END			
	      
		 SELECT 1 AS DELETE_STATUS
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetails]    Script Date: 16-Jan-18 8:12:56 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_BillCharges]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21-June-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_BillCharges]
	
	@p_var_category		NVARCHAR(100),
	@p_var_subcategory	NVARCHAR(100)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	[IPD_BillData_CHARGESMASTER] 

			 SET	Delete_Flag	=	1
			
			 WHERE	[Charges_Category]	= @p_var_category
			 AND	[Charges_SubCategory] = @p_var_subcategory	
						  
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_DischargeCard_Data]    Script Date: 16-Jan-18 8:12:34 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_BillKeywordCharges]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 03-Aug-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Varsha Khandre
-- =============================================

 CREATE PROCEDURE [dbo].[USP_Delete_BillKeywordCharges]
	
	@p_var_keyword		NVARCHAR(100),
	@p_var_category		NVARCHAR(100),
	@p_var_subcategory	NVARCHAR(100)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	 [dbo].[IPD_BillData]

			 SET	 Delete_Flag	=	1
			 WHERE	 [IPD_Keyword]		= @p_var_keyword
			 AND	 [Charges_Category]	= @p_var_category
			 AND	 [Charges_SubCategory] = @p_var_subcategory	
						  
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_MRFilterData]    Script Date: 16-Jan-18 8:12:09 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_BillSubCharges]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21-June-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_BillSubCharges]
	
	
	@p_var_subcategory	NVARCHAR(100)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	[IPD_SubCategory_CHARGESMASTER] 

			 SET	Delete_Flag	=	1
			
			 WHERE	
			 	[Charges_SubCategory] = @p_var_subcategory	
						  
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientTreatment]    Script Date: 16-Jan-18 8:27:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_Catagory]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the catagory in Prescription_Category
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_Catagory]
	
	@p_var_CatShortDescription NVARCHAR(60),
	@p_var_CatLongDescription NVARCHAR(300),
	@p_var_DoctorID				NVARCHAR(30)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   IF NOT EXISTS (
						   SELECT * FROM [dbo].[Prescription_Medicines] PC 
						   WHERE	PC.Cat_Short_Name	=	@p_var_CatShortDescription			   
						   AND		PC.DOCTOR_ID		=	@p_var_DoctorID
						  ) 

			AND NOT EXISTS(
							SELECT * FROM [dbo].[Prescription_SubCategory] PS
							WHERE	Cat_Short_Name=@p_var_CatShortDescription
							AND	PS.DOCTOR_ID		=	@p_var_DoctorID
			)

		  BEGIN 
		  SELECT 1 AS CATAGORY_STATUS;
			 
			 DELETE FROM 	[dbo].[Prescription_Category] 
			
			 WHERE 		Cat_Short_Name			=	@p_var_CatShortDescription AND
						Cat_Long_Description	=	@p_var_CatLongDescription
			AND			DOCTOR_ID				=	@p_var_DoctorID
						
			 END			
	       ELSE
		 
		   SELECT 0 AS CATAGORY_STATUS;

		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Check_Patient_Bill_Data]    Script Date: 16-Jan-18 7:48:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_Detail]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 30 Dec 2016
-- Description	: This stored procedure will delete the medicines for MR
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_Detail]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Patient_ID			NVARCHAR(30),
	@p_var_StepNo				INT,
	@p_var_DetailNo				INT
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			update  [dbo].[Dentist_Patient_TreatmentPlanDetails] set Delete_Flag=1 
			where	[Patient_ID]	=@p_var_Patient_ID
			and		[Doctor_ID]		=@p_var_Doctor_Id 
			and		[Clinic_ID]		=@p_var_Clinic_Id 
			and		[Step_No]		=@p_var_StepNo
			and		[Detail_Step_No]=@p_var_DetailNo
			END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Delete_Catagory]    Script Date: 16-Jan-18 7:50:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_DischargeData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21-June-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_DischargeData]
	
	@p_var_keyword	NVARCHAR(100)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	IPD_DischargeData 

			 SET	Delete_Flag	=	1
			
			 WHERE	[IPD_Keyword]	= @p_var_keyword	
						  
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Delete_Detail]    Script Date: 16-Jan-18 7:50:22 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_Insurance_Company]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author : INCRUST
-- Create date : 18-June-2016
-- Description : This stored procedure will insert the catagory in Prescription_Category
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Delete_Insurance_Company]

@p_var_CatShortDescription NVARCHAR(60),
@p_var_CatShortID    int

AS



BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY


BEGIN
SELECT 1 AS CATAGORY_STATUS;

update  [dbo].[Insurance_Company_Master] set IsDeleted=1

WHERE    Company_Id = @p_var_CatShortID-- AND
-- Cat_Long_Description = @p_var_CatLongDescription
--AND DOCTOR_ID = @p_var_DoctorID
SELECT 1 AS CATAGORY_STATUS;
END





END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END


















/***** Object: StoredProcedure [dbo].[USP_Check_Patient_Bill_Data] Script Date: 16-Jan-18 7:48:27 PM *****/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_InternalMedicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  25-Mar-2016
-- Description	:  This stored procedure will Delete data from gridview internal Medicine
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_InternalMedicine]
	@p_var_Visit_Date datetime,
	@p_var_Patient_Visit_No int,
	@p_var_Shift_Id tinyint,
	@p_var_Clinic_Id nvarchar(10),
	@p_var_Doctor_Id nvarchar(30),
	@p_var_Patient_Id nvarchar(32),
	@p_var_Short_Description nvarchar(80)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Visit_Medicine]
			SET   Delete_Flag = 1
			FROM  [dbo].[Visit_Medicine] VM
			WHERE VM.Visit_Date       = @p_var_Visit_Date 
			AND	  VM.Patient_Visit_No = @p_var_Patient_Visit_No 
			AND	  VM.Shift_ID         = @p_var_Shift_Id 
			AND	  VM.Clinic_ID        = @p_var_Clinic_Id 
			AND	  VM.Doctor_ID        = @p_var_Doctor_Id 
			AND	  VM.Patient_ID = @p_var_Patient_Id 
			AND	  VM.Short_Description = @p_var_Short_Description 		   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_GET_DOCTOR_DETAILS]    Script Date: 16-Jan-18 10:21:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_InternalMedicineOverwrite]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  25-Mar-2016
-- Description	:  This stored procedure will Delete data from gridview internal Medicine
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_InternalMedicineOverwrite]
	@p_var_Visit_Date datetime,
	@p_var_Patient_Visit_No int,
	@p_var_Shift_Id tinyint,
	@p_var_Clinic_Id nvarchar(10),
	@p_var_Doctor_Id nvarchar(30),
	@p_var_Patient_Id nvarchar(32),
	@p_var_Short_Description nvarchar(80)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Visit_Medicine_Overwrite]
			SET   Delete_Indicator = 1
			FROM  [dbo].[Visit_Medicine_Overwrite] VM
			WHERE VM.Visit_Date       = @p_var_Visit_Date 
			AND	  VM.Patient_Visit_No = @p_var_Patient_Visit_No 
			AND	  VM.Shift_ID         = @p_var_Shift_Id 
			AND	  VM.Clinic_ID        = @p_var_Clinic_Id 
			AND	  VM.Doctor_ID        = @p_var_Doctor_Id 
			AND	  VM.Patient_ID		  = @p_var_Patient_Id 
			AND	  VM.Short_Description = @p_var_Short_Description 		   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientMaxVisitNo]    Script Date: 16-Jan-18 8:25:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_InvoiceKeywordMedicines]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 03-Aug-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Varsha Khandre
-- =============================================

 CREATE PROCEDURE [dbo].[USP_Delete_InvoiceKeywordMedicines]
	
	@p_var_keyword		NVARCHAR(1000),
	@p_var_desc			NVARCHAR(100),
	@p_var_unitprice	decimal
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	 [dbo].[IPD_INVOICEDATA]

			 SET	 Delete_Flag	=	1
			 WHERE	 [IPD_Keyword]	= @p_var_keyword
			 AND	 [Description]	= @p_var_desc
			 AND	 	[Quantity]	= @p_var_unitprice
			 
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_PendingRegistrations]    Script Date: 16-Jan-18 8:26:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_InvoiceMedicines]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 03-Aug-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Varsha Khandre
-- =============================================

 CREATE PROCEDURE [dbo].[USP_Delete_InvoiceMedicines]
	
	@p_var_desc			NVARCHAR(100),
	@p_var_unitprice	decimal
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 UPDATE	 [dbo].[IPD_INVOICE_MEDICINEMASTER]

			 SET	 Delete_Flag	=	1
			 WHERE	 [Description]	= @p_var_desc
			 AND	 [Unit_Price]	= @p_var_unitprice
			 
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_System_Param_Record]    Script Date: 16-Jan-18 8:26:35 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_IPD_Document]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will Delete data from gridview Documents
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_IPD_Document]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Patient_Id			NVARCHAR(32),
	@p_var_PatientDocumentID	INT
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY

			DELETE FROM  [dbo].[Discharge_Investigations] 
			WHERE ID				=	@p_var_PatientDocumentID
			AND	  Doctor_ID			=	@p_var_Doctor_Id
			AND	  Patient_ID		=	@p_var_Patient_Id
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Check_Patient_Discharge_Data]    Script Date: 16-Jan-18 7:48:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_LabtestParameter]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  08-July-2016
-- Description	:  This stored procedure will Delete data from gridview Documents
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_LabtestParameter]
	@p_var_Visit_Date datetime,
	@p_var_Patient_Visit_No int,
	@p_var_Shift_Id tinyint,
	@p_var_Clinic_Id nvarchar(10),
	@p_var_Doctor_Id nvarchar(30),
	@p_var_Patient_Id nvarchar(32),
	@p_var_LabTest_Description nvarchar(80),
	@p_var_ParameterName nvarchar(100)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Patient_Visit_LabTestResults]
			SET   Delete_Flag = 1
			FROM  [dbo].[Patient_Visit_LabTestResults] VM
			WHERE VM.Visit_Date       = @p_var_Visit_Date 
			AND	  VM.Patient_Visit_No = @p_var_Patient_Visit_No 
			AND	  VM.Shift_ID         = @p_var_Shift_Id 
			AND	  VM.Clinic_ID        = @p_var_Clinic_Id 
			AND	  VM.Doctor_ID        = @p_var_Doctor_Id 
			AND	  VM.Patient_ID = @p_var_Patient_Id 
			AND	  VM.Lab_Test_Description = @p_var_LabTest_Description 
			AND VM.Parameter_Name=		@p_var_ParameterName   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Delete_IPD_Document]    Script Date: 16-Jan-18 7:52:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterBillingDetail]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 07 Sep 2016
-- Description	: This stored procedure will delete billingdetail from Billing_Detail_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterBillingDetail]
	
	@p_var_GroupDescription				NVARCHAR(60),
	@p_var_SubgroupDescription			NVARCHAR(60),
	@p_var_BillingDetail				NVARCHAR(60)
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	[dbo].[Billing_Details_Master]
			
			 WHERE				  [Billing_Group_Name]		=	@p_var_GroupDescription	
						   AND    [Billing_Subgroup_Name]	=	@p_var_SubgroupDescription
						   AND	  [Billing_Details]			=	@p_var_BillingDetail
						   
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterCompany]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 07 Sep 2016
-- Description	: This stored procedure will delete symptoms from Complaint_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterCompany]
	
	@p_var_company						NVARCHAR(200),
	@p_var_CompanyDescription			NVARCHAR(300),
	@p_var_login						NVARCHAR(30),
	@p_var_todaysdate					DATE
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
			IF EXISTS(
				SELECT * FROM MR_Visits WHERE Visit_Date=@p_var_todaysdate AND Company_Name=@p_var_company
				AND Delete_Flag=0
			)
			BEGIN
			SELECT 0 AS DELETE_STATUS
			END
			ELSE
			BEGIN

			 --DELETE FROM [dbo].[Company_Master]
			 UPDATE Company_Master set Delete_Flag=1
			 WHERE				  [Company_Name]		  = @p_var_company	
						   AND    [Company_Description]	  =	@p_var_CompanyDescription
						   AND	  [LoginName]			  =	@p_var_login
				
				
			SELECT 1 AS DELETE_STATUS
						   
			 END	
			 
			 END
			 		
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END



/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterDisease]    Script Date: 17-Jan-18 12:59:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterDisease]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 07 Sep 2016
-- Description	: This stored procedure will delete symptoms from Complaint_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterDisease]
	
	@p_var_ShortDescription				NVARCHAR(60),
	@p_var_DiagnosisDescription			NVARCHAR(1000),
	@p_var_Priority						INT,
	@p_var_DoctorID						NVARCHAR(30)
	

 AS


 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	[dbo].[Diagnosis_Master]
			
			 WHERE				Short_Description		= @p_var_ShortDescription	
						   AND  Diagnosis_Description	=	@p_var_DiagnosisDescription
						   AND	Priority_Value			=	@p_var_Priority
						   AND	DOCTOR_ID				=	@p_var_DoctorID
						   
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterFindings]    Script Date: 17-Jan-18 12:59:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterFindings]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 28 Feb 2017
-- Description	: This stored procedure will delete Procedures from Doctor_Procedure_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterFindings]
	
	
	@p_var_ProcedureDescription			NVARCHAR(100),
	--@p_var_Priority						INT,
	@p_var_FindingsDescription			NVARCHAR(200)
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			


			
			 DELETE FROM 	Doctor_Procedure_Findings
			
			 WHERE				  
							      Procedure_Description		=	@p_var_ProcedureDescription
						   --AND	  Priority_Value			=	@p_var_Priority
						   AND	  Findings_Description		=	@p_var_FindingsDescription

			 END			
	         
			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END



/****** Object:  StoredProcedure [dbo].[USP_Delete_Masterkeyword]    Script Date: 17-Jan-18 12:59:55 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_Masterkeyword]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will delete keywords from IPD_Keyword Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_Masterkeyword]
	
	@p_var_ShortDescription				NVARCHAR(60),
	@p_var_DiagnosisDescription			NVARCHAR(1000)

 AS

 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 

			IF NOT EXISTS (
						   SELECT * FROM [dbo].[IPD_DischargeData] PC 
						   WHERE  PC.[IPD_Keyword]		  = @p_var_ShortDescription			   	    
						  ) 
			AND NOT EXISTS(SELECT * FROM [dbo].[IPD_BillData] PC 
							WHERE  PC.[IPD_Keyword]	= @p_var_ShortDescription			
						
			)
			AND NOT EXISTS(SELECT * FROM [dbo].[IPD_INVOICEDATA] PC 
							WHERE  PC.[IPD_Keyword]	= @p_var_ShortDescription			
						
			)
			BEGIN 
		  SELECT 1 AS CATAGORY_STATUS;
		
			 DELETE FROM 	[dbo].[IPD_Keywords]
			
			 WHERE				  [Keyword]					  = @p_var_ShortDescription	
						   AND    ISNULL([Description],'')	  =	@p_var_DiagnosisDescription
						   
			 END	
			 ELSE
		 
		   SELECT 0 AS CATAGORY_STATUS;	
			 
			 END	
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END











/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterMedicine]    Script Date: 17-Jan-18 12:59:53 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterMedicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21-June-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterMedicine]
	
	@p_var_MedShortDescription			NVARCHAR(40),
	@p_var_MedicineDescription			NVARCHAR(1000),
	@p_var_Priority						INT,
	@p_var_DoctorID						NVARCHAR(30)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	[dbo].[Medicine_Master]
			
			 WHERE				Short_Description	 = @p_var_MedShortDescription	
						   AND  Medicine_Description =	@p_var_MedicineDescription
						   AND	Priority_Value		 =	@p_var_Priority
						   AND	DOCTOR_ID			 =	@p_var_DoctorID
						   
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END












/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterPrescription]    Script Date: 17-Jan-18 12:59:47 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterPrescription]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21-June-2016
-- Description	: This stored procedure will delete the prescriptionicine in Prescription_Master
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterPrescription]
	
	@p_var_CatShortDescription	NVARCHAR(60),
	@p_var_CatSubDescription	NVARCHAR(300),
	@p_var_MedicineName			NVARCHAR(200),
	@p_var_Brandname			NVARCHAR(200),
	@p_var_DoctorID				NVARCHAR(30)

 AS


 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	[dbo].[Prescription_Medicines] 
			
			 WHERE				Cat_Short_Name		  = @p_var_CatShortDescription	
						   AND  CatSub_Description	  =	@p_var_CatSubDescription
						   AND	Medicine_Name			  =	@p_var_MedicineName
						   AND	Brand_Name			  = @p_var_Brandname
						   AND	DOCTOR_ID	=	@p_var_DoctorID
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END






/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterProcedure]    Script Date: 17-Jan-18 12:59:43 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterProcedure]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 28 Feb 2017
-- Description	: This stored procedure will delete Procedures from Doctor_Procedure_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterProcedure]
	
	
	@p_var_ProcedureDescription			NVARCHAR(100),
	@p_var_Priority						INT,
	@p_str_Doctor_Id					NVARCHAR(100)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			


			--IF NOT EXISTS (
			--			   SELECT * FROM Doctor_Procedure_Findings PC 
			--			   WHERE  PC.Procedure_Description		  = @p_var_ProcedureDescription			   
							
										    
			--			  ) 
			
		 -- BEGIN 
		  SELECT 1 AS CATAGORY_STATUS;

		  DELETE FROM 	Doctor_Procedure_Findings
			
			 WHERE				  
							      Procedure_Description	  =	@p_var_ProcedureDescription

			 DELETE FROM 	Doctor_Procedure_Master
			
			 WHERE				  
							      Procedure_Description	  =	@p_var_ProcedureDescription
						   AND	  Priority_Value		  =	@p_var_Priority
						   and		Doctor_ID					=@p_str_Doctor_Id
			

			 --END			
	   --    ELSE
		 
		  -- SELECT 0 AS CATAGORY_STATUS;
						   
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterSymptom]    Script Date: 17-Jan-18 12:59:41 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MasterSymptom]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 07 Sep 2016
-- Description	: This stored procedure will delete symptoms from Complaint_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MasterSymptom]
	
	@p_var_ShortDescription			NVARCHAR(60),
	@p_var_ComplaintDescription		NVARCHAR(1000),
	@p_var_Priority					INT,
	@p_var_DoctorID					NVARCHAR(30)
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	[dbo].[Complaint_Master]
			
			 WHERE				  Short_Description		  = @p_var_ShortDescription	
						   AND    Complaint_Description	  =	@p_var_ComplaintDescription
						   AND	  Priority_Value		  =	@p_var_Priority
						   AND	  DOCTOR_ID				  =	@p_var_DoctorID
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END



/****** Object:  StoredProcedure [dbo].[USP_Delete_MR]    Script Date: 17-Jan-18 12:59:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 07 Sep 2016
-- Description	: This stored procedure will delete symptoms from Complaint_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MR]
	
	@p_var_company			NVARCHAR(200),
	@p_var_MR_ID			INT,
	@p_dt_todaysdate		DATE
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
			
			
			IF EXISTS
			(
				SELECT * FROM MR_Visits
				WHERE	MR_ID=@p_var_MR_ID
				AND		Visit_Date=@p_dt_todaysdate
				AND		Delete_Flag=0
			)
			BEGIN
			SELECT 0 AS DELETE_STATUS
			END

			ELSE
	
			BEGIN

			 UPDATE [dbo].[MR_Master] set Delete_Flag=1
			 WHERE				 [Company_Name]		  = @p_var_company	
						   AND    MR_ID				  =	@p_var_MR_ID
						  
				
				
			SELECT 1 AS DELETE_STATUS
				
			END
					   
			 END	
			 
		
			 		
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


/****** Object:  StoredProcedure [dbo].[USP_Delete_MRMEDICNE]    Script Date: 17-Jan-18 12:59:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_MRMEDICNE]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 30 Dec 2016
-- Description	: This stored procedure will delete the medicines for MR
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_MRMEDICNE]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_company_name			VARCHAR(200),
	@p_var_visit_time			TIME,
	@p_var_MR_ID				INT,
	@p_var_catshort				NVARCHAR(300),
	@p_var_catsub				NVARCHAR(300),
	@p_var_medicine				NVARCHAR(300),
	@p_var_brand				NVARCHAR(300)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	MR_Added_Prescriptions
			
			 WHERE					MR_ID		=	@p_var_MR_ID	
						   AND		Company_ID	=	@p_var_company_name
						   AND		Visit_Date	=	@p_date_TodyasVisitDate
						   AND		Visit_Time	=	@p_var_visit_time
						   AND		Doctor_ID	=	@p_var_Doctor_Id
						   AND		Clinic_ID	=	@p_var_Clinic_Id
						   AND		Shift_ID	=	@p_var_Shift_ID
						   AND		Cat_Short_Name= @p_var_catshort
						   AND		CatSub_Description=@p_var_catsub
						   AND		Medicine_Name=@p_var_medicine
						   AND		Brand_Name=@p_var_brand
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END



/****** Object:  StoredProcedure [dbo].[USP_Delete_Parameters]    Script Date: 17-Jan-18 12:59:34 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_Parameters]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 21 june 2016
-- Description:	This stored procedure is used to delete parameters of labtest from gridview
-- =============================================
CREATE PROCEDURE [dbo].[USP_Delete_Parameters]
	@p_var_ID			INT,
	@p_var_labtest_id	INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		BEGIN TRY

		

		DELETE FROM Lab_Test_Parameter WHERE ID=@p_var_ID
					AND  Lab_Test_ID=@p_var_labtest_id;
		
		
		
		END TRY

		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH 
END




/****** Object:  StoredProcedure [dbo].[USP_Delete_PatientDocument]    Script Date: 17-Jan-18 12:59:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PatientAppointment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Delete_PatientAppointment]

--	@p_date_Visit_Date				DATETIME,
--	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
--	@p_time_Visit_Time				TIME(7),
--	@p_bit_Reports_Received			BIT,
--	@p_var_User_Id					NVARCHAR(32),
--	@p_bit_In_Person				BIT,
--	@p_nvar_scheduleday				NVARCHAR(2),
	@int_Patient_Visit_No			INT
	
AS
BEGIN
	
	SET NOCOUNT ON;

	
	BEGIN TRY

		BEGIN
			
			
			DECLARE @int_StatusId  INT;

			IF EXISTS(

			SELECT * FROM Patient_Visits
			WHERE	Patient_ID	=	@p_nvar_Patient_ID
			AND		Doctor_ID	=	@p_nvar_Doctor_ID
			AND		Clinic_ID	=	@p_nvar_Clinic_ID
			AND		Patient_Visit_No	=	@int_Patient_Visit_No
			AND		Delete_Flag			=	0
			)

			BEGIN

				UPDATE Patient_Visits SET Delete_Flag = 1
				WHERE	Patient_ID	=	@p_nvar_Patient_ID
				AND		Doctor_ID	=	@p_nvar_Doctor_ID
				AND		Clinic_ID	=	@p_nvar_Clinic_ID
				AND		Patient_Visit_No	=	@int_Patient_Visit_No
				AND		Delete_Flag			=	0

			SELECT 1 AS BOOKING_STATUS;

			END
   
			
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END








--------------------------




/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 11-Jan-18 12:27:52 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PatientDocument]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will Delete data from gridview Documents
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_PatientDocument]
	
	@p_var_Doctor_Id NVARCHAR(30),
	@p_var_Patient_Id NVARCHAR(32),
	@p_var_PatientDocumentID INT
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Patient_Documents]
			SET   Delete_Flag = 1
			FROM  [dbo].[Patient_Documents] PD
			WHERE PD.Patient_DocumentID=@p_var_PatientDocumentID
			AND	  PD.Doctor_ID        = @p_var_Doctor_Id
			AND	  PD.Patient_ID		  =@p_var_Patient_Id
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicine]    Script Date: 17-Jan-18 12:59:29 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PatientDocument_treatment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will Delete data from gridview Documents
-- Created By	:  Snehal Shinde
-- =============================================

Create PROCEDURE [dbo].[USP_Delete_PatientDocument_treatment]
	
	@p_var_Doctor_Id NVARCHAR(30),
	@p_var_Patient_Id NVARCHAR(32),
	@p_var_PatientVisitno INT
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Patient_Documents_Treatment]
			SET   Delete_Flag = 1
			FROM  [dbo].[Patient_Documents_Treatment] PD
			WHERE PD.[Patient_Visit_No]=@p_var_PatientVisitno
			AND	  PD.Doctor_ID        = @p_var_Doctor_Id
			AND	  PD.Patient_ID		  =@p_var_Patient_Id
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicine]    Script Date: 17-Jan-18 12:59:29 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PatientDocumentTreatment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will Delete data from gridview Documents
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_PatientDocumentTreatment]
	  
	@p_var_Doctor_Id        NVARCHAR(30),
	@p_var_Patient_Id         NVARCHAR(32),
	@p_var_PatientDocumentID      INT,
	@p_var_PatientVisitno       int
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Patient_Documents_Treatment]
			SET   [Delete_Flag] = 1
			FROM  [dbo].[Patient_Documents_Treatment] PD
			WHERE PD.ID=@p_var_PatientDocumentID
			--AND	  PD.Doctor_ID        = @p_var_Doctor_Id
			AND	  PD.Patient_ID		  =@p_var_Patient_Id
			AND   PD.Patient_Visit_No=@p_var_PatientVisitno
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicine]    Script Date: 17-Jan-18 12:59:29 PM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PatientDocumentTreatment_Prev]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will Delete data from gridview Documents
-- Created By	:  Snehal Shinde
-- =============================================

Create PROCEDURE [dbo].[USP_Delete_PatientDocumentTreatment_Prev]
	  
	@p_var_Doctor_Id        NVARCHAR(30),
	@p_var_Patient_Id         NVARCHAR(32),
	@p_var_PatientDocumentID      INT,
	@p_var_PatientVisitno       int
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			UPDATE [dbo].[Patient_Documents_Treatment]
			SET   [Delete_Flag] = 1
			FROM  [dbo].[Patient_Documents_Treatment] PD
			WHERE PD.ID=@p_var_PatientDocumentID
			--AND	  PD.Doctor_ID        = @p_var_Doctor_Id
			AND	  PD.Patient_ID		  =@p_var_Patient_Id
			AND   PD.Patient_Visit_No=@p_var_PatientVisitno
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicine]    Script Date: 17-Jan-18 12:59:29 PM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	:  25-Mar-2016
-- Description	:  This stored procedure will Delete data from gridview internal Medicine
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_PrescriptionMedicine]
	@p_var_Visit_Date DATETIME,
	@p_var_Patient_Visit_No INT,
	@p_var_Shift_Id TINYINT,
	@p_var_Clinic_Id NVARCHAR(10),
	@p_var_Doctor_Id NVARCHAR(30),
	@p_var_Patient_Id NVARCHAR(32),
	@p_var_Medicine_Name NVARCHAR(200),
	@p_var_Brand_Name NVARCHAR(200)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 	BEGIN TRY
			UPDATE [dbo].[Visit_Prescription]
			SET Delete_Flag=1
			FROM [dbo].[Visit_Prescription] VP
			WHERE VP.Visit_Date			= @p_var_Visit_Date 
			AND	  VP.Patient_Visit_No	= @p_var_Patient_Visit_No 
			AND	  VP.Shift_ID			= @p_var_Shift_Id 
			AND	  VP.Clinic_ID			= @p_var_Clinic_Id 
			AND	  VP.Doctor_ID		    = @p_var_Doctor_Id 
			AND	  VP.Patient_ID		    = @p_var_Patient_Id 
			AND	  VP.Medicine_Name		= @p_var_Medicine_Name 
			AND	  VP.Brand_Name			= @p_var_Brand_Name 		   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END





/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicineOverwrite]    Script Date: 17-Jan-18 12:59:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_PrescriptionMedicineOverwrite]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 12-May-2016
-- Description	:  This stored procedure will Delete data from gridview internal Medicine
-- Created By	:  Snehal Shinde
-- =============================================

CREATE PROCEDURE [dbo].[USP_Delete_PrescriptionMedicineOverwrite]
	@p_var_Visit_Date DATETIME,
	@p_var_Patient_Visit_No INT,
	@p_var_Shift_Id TINYINT,
	@p_var_Clinic_Id NVARCHAR(10),
	@p_var_Doctor_Id NVARCHAR(30),
	@p_var_Patient_Id NVARCHAR(32),
	@p_var_Medicine_Name NVARCHAR(200),
	@p_var_Brand_Name NVARCHAR(200)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 	BEGIN TRY
			UPDATE [dbo].[Visit_Prescription_Overwrite]
			SET Delete_Indicator=1
			FROM [dbo].[Visit_Prescription_Overwrite] VP
			WHERE VP.Visit_Date			= @p_var_Visit_Date 
			AND	  VP.Patient_Visit_No	= @p_var_Patient_Visit_No 
			AND	  VP.Shift_ID			= @p_var_Shift_Id 
			AND	  VP.Clinic_ID			= @p_var_Clinic_Id 
			AND	  VP.Doctor_ID		    = @p_var_Doctor_Id 
			AND	  VP.Patient_ID		    = @p_var_Patient_Id 
			AND	  VP.Medicine_Name		= @p_var_Medicine_Name 
			AND	  VP.Brand_Name			= @p_var_Brand_Name 		   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Delete_Reminders]    Script Date: 17-Jan-18 12:59:24 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_Reminders]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 30 Dec 2016
-- Description	: This stored procedure will delete the reminders for MR
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_Reminders]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_company_name			VARCHAR(200),
	@p_var_visit_time			TIME,
	@p_var_MR_ID				INT,
	@p_var_ReminderText			NVARCHAR(300)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			 DELETE FROM 	MR_Reminders
			
			 WHERE					MR_ID		=	@p_var_MR_ID	
						   AND		Company_ID	=	@p_var_company_name
						   AND		Visit_Date	=	@p_date_TodyasVisitDate
						   AND		Visit_Time	=	@p_var_visit_time
						   AND		Doctor_ID	=	@p_var_Doctor_Id
						   AND		Clinic_ID	=	@p_var_Clinic_Id
						   AND		Shift_ID	=	@p_var_Shift_ID
						   AND		Reminder_Text= @p_var_ReminderText
			 END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END




/****** Object:  StoredProcedure [dbo].[USP_Delete_SubCatagory]    Script Date: 17-Jan-18 12:59:22 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_SubCatagory]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will delete the subcatagory in Prescription_Category
-- Created By	: Snehal Shinde
-- Modified On  : 01 Nov 2017
-- Modified By  : Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_SubCatagory]
	
	@p_var_CatShortDescription NVARCHAR(60),
	@p_var_CatSubDescription NVARCHAR(300),
	@p_var_doctorID				NVARCHAR(30)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		



		   IF NOT EXISTS (
						   SELECT * FROM [dbo].[Prescription_Medicines] PC 
						   WHERE  PC.Cat_Short_Name		  = @p_var_CatShortDescription AND
						          PC.CatSub_Description	  =	@p_var_CatSubDescription
						   AND	  PC.DOCTOR_ID			  = @p_var_doctorID		   		    
						  )
		  BEGIN 

		   IF EXISTS (
						   SELECT * FROM [dbo].[MR_Added_Prescriptions] MP 
						   WHERE  MP.[Cat_Short_Name]		  = @p_var_CatShortDescription	AND
						          MP.[CatSub_Description]	  =	@p_var_CatSubDescription	AND
								  MP.DOCTOR_ID			  = @p_var_doctorID				   
					 )

		 BEGIN

			SELECT 1 AS CATAGORY_STATUS;

			DELETE FROM 	[dbo].[MR_Added_Prescriptions]  WHERE
			 				Cat_Short_Name		= @p_var_CatShortDescription	AND
							CatSub_Description	= @p_var_CatSubDescription		AND
							Doctor_ID			= @p_var_doctorID

			
			 DELETE FROM 	[dbo].[Prescription_SubCategory] 
			
			 WHERE 		Cat_Short_Name		= @p_var_CatShortDescription	AND
						CatSub_Description	= @p_var_CatSubDescription		AND
						Doctor_ID			= @p_var_doctorID
			--SELECT 1 AS MR_DELETE_STATUS;
		 END

		 ELSE
			BEGIN

		  SELECT 1 AS CATAGORY_STATUS;
			 DELETE FROM 	[dbo].[Prescription_SubCategory] 
			
			 WHERE 		Cat_Short_Name		= @p_var_CatShortDescription	AND
						CatSub_Description	= @p_var_CatSubDescription		AND
						Doctor_ID			= @p_var_doctorID
			 END	
			 
			 END		
	       ELSE
		 
		   SELECT 0 AS CATAGORY_STATUS;
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END




/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysFutureAppointment]    Script Date: 17-Jan-18 12:59:02 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysFutureAppointment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 11 Jan 2018
-- Description: This stored procedure will Delete todays record from Patient visit for future appointment status.
--  created By- Madhura Kale
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Delete_TodaysFutureAppointment]

	@p_nvar_Patient_Id      NVARCHAR(32),
	@p_int_Patient_VisitNo  INT,
	@p_int_Shift_Id         INT,
	@p_nvar_Clinic_Id       NVARCHAR(30),
	@p_nvar_Doctor_Id       NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	
		DELETE FROM	 Patient_Visits 
		  
		 WHERE 
				 Patient_ID       = @p_nvar_Patient_Id 
		   AND	 Patient_Visit_No = @p_int_Patient_VisitNo 
		   AND   Shift_ID         = @p_int_Shift_Id 
		   --AND	 Clinic_ID        = @p_nvar_Clinic_Id 
		   AND	 Doctor_ID        = @p_nvar_Doctor_Id
		   --AND	 Status_ID		  = 12

	END TRY
	BEGIN CATCH
	
		SELECT  ERROR_NUMBER() AS ErrorNumber,
		        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




------------------------------------------------------------




/****** Object:  StoredProcedure [dbo].[USP_Get_AllDoctors]    Script Date: 11-Jan-18 10:41:02 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysVisitRecord]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 22-Mar-2016
-- Description: This stored procedure will Delete TodaysVisitRecord.
-- created By- Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Delete_TodaysVisitRecord]
	@p_nvar_Patient_Id      NVARCHAR(32),
	@p_int_Patient_VisitNo  INT,
	@p_int_Shift_Id         INT,
	@p_nvar_Clinic_Id       NVARCHAR(30),
	@p_nvar_Doctor_Id       NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	
		UPDATE	 Patient_Visits 
		   SET   Delete_Flag = '1'
		 WHERE 
				 Patient_ID       = @p_nvar_Patient_Id 
		   AND	 Patient_Visit_No = @p_int_Patient_VisitNo 
		   AND   Shift_ID         = @p_int_Shift_Id 
		   AND	 Clinic_ID        = @p_nvar_Clinic_Id 
		   --AND	 Doctor_ID        = @p_nvar_Doctor_Id 
		   select 1 as flag 
		  
		   UPDATE	 Patient_Visit_LabTestResults 
		   SET   Delete_Flag = '1'
		 WHERE 
				 Patient_ID       = @p_nvar_Patient_Id 
		   AND	 Patient_Visit_No = @p_int_Patient_VisitNo 
		   AND   Shift_ID         = @p_int_Shift_Id 
		   AND	 Clinic_ID        = @p_nvar_Clinic_Id 
		   --AND	 Doctor_ID        = @p_nvar_Doctor_Id 
		   
	END TRY
	BEGIN CATCH
	
		SELECT  ERROR_NUMBER() AS ErrorNumber,
		        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysVisitRecord_MR]    Script Date: 17-Jan-18 12:58:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysVisitRecord_For_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 30-NOV-2019
-- Description: This stored procedure will Delete TodaysVisitRecord For Services.
-- created By- Incrust
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Delete_TodaysVisitRecord_For_Services]
	@p_nvar_Patient_Id      NVARCHAR(32),
	@p_int_Patient_VisitNo  INT,
	@p_int_Shift_Id         INT,
	@p_nvar_Clinic_Id       NVARCHAR(30),
	@p_nvar_Doctor_Id       NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	
		UPDATE	 Patient_Visits_Services
		   SET   Delete_Flag = '1'
		 WHERE 
				 Patient_ID       = @p_nvar_Patient_Id 
		   AND	 Patient_Visit_No = @p_int_Patient_VisitNo 
		   AND   Shift_ID         = @p_int_Shift_Id 
		   AND	 Clinic_ID        = @p_nvar_Clinic_Id 
		   --AND	 Doctor_ID        = @p_nvar_Doctor_Id 
		   select 1 as flag 
		  
		 --  UPDATE	 Patient_Visit_LabTestResults 
		 --  SET   Delete_Flag = '1'
		 --WHERE 
			--	 Patient_ID       = @p_nvar_Patient_Id 
		 --  AND	 Patient_Visit_No = @p_int_Patient_VisitNo 
		 --  AND   Shift_ID         = @p_int_Shift_Id 
		 --  AND	 Clinic_ID        = @p_nvar_Clinic_Id 
		 --  --AND	 Doctor_ID        = @p_nvar_Doctor_Id 
		   
	END TRY
	BEGIN CATCH
	
		SELECT  ERROR_NUMBER() AS ErrorNumber,
		        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysVisitRecord_MR]    Script Date: 17-Jan-18 12:58:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_TodaysVisitRecord_MR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
--	Author:  INCRUST
--	Create date: 13 Dec 2016
--	Description: This stored procedure will Delete Today's Visit Record Of MR
--	created By-	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Delete_TodaysVisitRecord_MR]
	@p_nvar_MR_Id			INT,
	@p_int_Shift_Id         INT,
	@p_nvar_Clinic_Id       NVARCHAR(30),
	@p_nvar_Doctor_Id       NVARCHAR(30),
	@p_dt_VisitDate			DATE
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	
		UPDATE		[dbo].[MR_Visits]
		   SET		Delete_Flag= 1
		 WHERE 
					MR_ID		= @p_nvar_MR_Id 
			AND		Visit_Date	= @p_dt_VisitDate
			AND		Shift_ID    = @p_int_Shift_Id 
			AND		Clinic_ID   = @p_nvar_Clinic_Id 
			AND		Doctor_ID   = @p_nvar_Doctor_Id

			SELECT 1 AS DELETE_SUCCESSFULL;
	END TRY
	BEGIN CATCH
	
		SELECT  ERROR_NUMBER() AS ErrorNumber,
		        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Delete_TreatmentDetail]    Script Date: 17-Jan-18 12:58:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Delete_TreatmentDetail]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 30 Dec 2016
-- Description	: This stored procedure will delete the medicines for MR
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Delete_TreatmentDetail]
	
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Patient_ID			NVARCHAR(30),
	@p_var_StepNo				INT
	
 AS

 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   
		  BEGIN 
		
			update Dentist_Patient_TreatmentPlan set Delete_Flag=1 
			where	[Patient_ID]=@p_var_Patient_ID
			and		[Doctor_ID]=@p_var_Doctor_Id 
			and		[Clinic_ID]=@p_var_Clinic_Id 
			and		[Step_No]=@p_var_StepNo

			update Dentist_Patient_TreatmentPlanDetails set Delete_Flag=1 
			where	[Patient_ID]=@p_var_Patient_ID
			and		[Doctor_ID]=@p_var_Doctor_Id 
			and		[Clinic_ID]=@p_var_Clinic_Id 
			and		[Step_No]=@p_var_StepNo

			END			
	      
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END




/****** Object:  StoredProcedure [dbo].[USP_DeleteLabTestRecords]    Script Date: 17-Jan-18 12:58:49 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_DeleteLabTestRecords]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 18 june 2016
-- Description:	This stored procedure is used to delete lab test from gridview
-- =============================================
CREATE PROCEDURE [dbo].[USP_DeleteLabTestRecords]

	@p_var_labtestid		INT,
	@p_var_Doctor_ID		NVARCHAR(30)
	
AS
BEGIN
	
	SET NOCOUNT ON;

	--IF NOT EXISTS (
	--					   SELECT * FROM [dbo].Lab_Test_Parameter LTP 
	--					   WHERE  LTP.Lab_Test_ID		  = @p_var_labtestid				    
	--			  )

	BEGIN
	
	DELETE	FROM Lab_Test_Parameter 
	WHERE	Lab_Test_ID	=	@p_var_labtestid
	AND		Doctor_ID	=	@p_var_Doctor_ID

    DELETE FROM Lab_Test_Master
	WHERE		ID=@p_var_labtestid
	AND			Doctor_ID	=	@p_var_Doctor_ID

	SELECT 0 AS STATUS
	END
	
	BEGIN
	SELECT 1 AS STATUS
	END 
END






/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData]    Script Date: 19-Jan-18 6:48:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Abdominal_Examination_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_Abdominal_Examination_Data]

	@p_var_PA_Cat NVARCHAR(60),
	@p_var_PV_Cat NVARCHAR(60),
	@p_var_PS_Cat NVARCHAR(60)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		
		SELECT		[Category_Description],Findings_Description, [Category_Description]+'-'+Findings_Description AS PA_Value
		FROM		[dbo].[Gynec_Abdominal_Examination_Master]
		WHERE		[Category_Description] = @p_var_PA_Cat
		AND			ISNULL(Delete_Flag,0) = 0
		ORDER BY	Findings_Description ASC

		SELECT		[Category_Description],Findings_Description, [Category_Description]+'-'+Findings_Description AS PA_Value
		FROM		[dbo].[Gynec_Abdominal_Examination_Master]
		WHERE		[Category_Description] = @p_var_PV_Cat
		AND			ISNULL(Delete_Flag,0) = 0
		ORDER BY	Findings_Description ASC

		SELECT		[Category_Description],Findings_Description, [Category_Description]+'-'+Findings_Description AS PA_Value
		FROM		[dbo].[Gynec_Abdominal_Examination_Master]
		WHERE		[Category_Description] = @p_var_PS_Cat
		AND			ISNULL(Delete_Flag,0) = 0
		ORDER BY	Findings_Description ASC
		
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON
















/****** Object:  StoredProcedure [dbo].[USP_Get_FamilyDetails]    Script Date: 16-Jan-18 8:03:17 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Active_Medicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Varsha Khandre
-- Create date: 22 Oct 2016
-- Description:	This stored procedure is used to get active medicines
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Active_Medicine]

	
	@p_var_MedShortDescription	NVARCHAR(60),
	@p_var_DoctorID				NVARCHAR(30)
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT Active FROM Medicine_Master 
	WHERE	Short_Description	=	@p_var_MedShortDescription
	AND		DOCTOR_ID			=	@p_var_DoctorID

END






GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Active_Prescription]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Varsha Khandre
-- Create date: 22 Oct 2016
-- Description:	This stored procedure is used to get active prescriptions
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Active_Prescription]

	@p_var_PresShortDescription		NVARCHAR(60),
	@p_var_PresSubDescription		NVARCHAR(60),
	@p_var_PresMedicineName			NVARCHAR(60),
	@p_var_PresBrandName			NVARCHAR(60),
	@p_var_DoctorID				NVARCHAR(30)
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT Active FROM Prescription_Medicines 
	WHERE	Cat_Short_Name		=	@p_var_PresShortDescription
	AND		CatSub_Description	=	@p_var_PresSubDescription
	AND		Medicine_Name		=	@p_var_PresMedicineName
	AND		Brand_Name			=	@p_var_PresBrandName
	AND		DOCTOR_ID			=	@p_var_DoctorID

END




GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AdmissionCard_data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  22 Feb 2019
-- Description :  This stored procedure will Save the Data In Patient Master table for duplicate patient
--  created By :  Vinay Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_AdmissionCard_data]
 @P_nvar_Patient_ID nvarchar(32)
 ,@P_nvar_Doctor_ID nvarchar(32)
 ,@P_nvar_Clinic_ID nvarchar(32)
 ,@p_var_IPD_Ref_No NVARCHAR(32)


AS
begin

 SET NOCOUNT ON;
	BEGIN TRY


          
		  		     SELECT * FROM [dbo].[Admission_Data] WHERE 
			 [Patient_ID]=@P_nvar_Patient_ID
		--   AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND [Clinic_ID]=@P_nvar_Clinic_ID
		   AND [IPD_RefNo]=@p_var_IPD_Ref_No


		    SELECT  max(advance_date) as Advance_Date  ,
				    min(advance_date) as First_Advance_Date  
		    from [dbo].[Admission_Data]  ad
				 inner join Advance_Collection_details ads
				 on ad.IPD_RefNo=ads.IPD_RefNo
				 WHERE 
			 ad.[Patient_ID]=@P_nvar_Patient_ID
		--   AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND ad.[Clinic_ID]=@P_nvar_Clinic_ID
		   AND ad.[IPD_RefNo]=@p_var_IPD_Ref_No

		   END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_AdvanceDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 28 June 2017
-- Description: This stored procedure will Get The patient Details in patient Profile Page
-- Created By : Varsha Khandre
-- ======================================================================================
Create PROCEDURE [dbo].[USP_GET_AdvanceDetails]

	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_IPD_NO				NVARCHAR(30),
	@p_var_Patient_ID			NVARCHAR(32)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY



			Select 
			 CONVERT(NVARCHAR, Advance_Date, 106) as Advance_Date, 
			Amount_Received as Advance from Advance_Collection_details 
			where 
			Patient_ID = @p_var_Patient_ID And
			Clinic_ID = @p_var_Clinic_ID  and 
			IPD_RefNo = @p_var_IPD_NO



			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END


















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_All_Patients_Report]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  12 Sep 2017
-- Description	:  This stored procedure will get top defaulters those amount is pending
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_All_Patients_Report]
	
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_var_Language_ID	  INT,
	@p_var_Clinic_ID	  NVARCHAR(32)

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		
		BEGIN
		
		;WITH PatientVisitCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,PV.Patient_ID
										FROM [dbo].[Patient_Master]	PM
                                        
										INNER JOIN   Patient_Visits PV  ON PM.ID=PV.Patient_ID
										--AND		PM.Doctor_ID	=	PV.Doctor_ID
										
										WHERE	Status_ID=5
										AND		Delete_Flag= 0 
                                        
										GROUP BY PV.Patient_ID
									) 
		 
			SELECT	PM.ID,pm.First_Name+' '+pm.Middle_Name+' '+ pm.Last_Name as Full_Name,
					pm.Folder_No,
					Mobile_1 = CASE WHEN datalength(Mobile_1)=0 
			        THEN '--' 
					ELSE Mobile_1 END,

					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
					,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
					,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
					GT.Gender_Description,
					AT.Area_Name,
					ISNULL(CONVERT(NVARCHAR,PVC.PatientCount,100),'--') AS PatientCount,
					ISNULL(PVC.PatientCount,0) AS PC

					
			FROM	Patient_Master pm
			
			
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			INNER JOIN	Area_Translations AT
			ON		PM.Area_ID = AT.Area_ID

			LEFT JOIN PatientVisitCount PVC
			ON	pm.ID = PVC.Patient_ID

			

			WHERE	
					--pm.Doctor_ID	=   @p_var_Doctor_ID
					GT.Language_Id = @p_var_Language_ID
			AND		AT.Language_Id = @p_var_Language_ID

			ORDER BY PVC.PatientCount DESC
			
		END

		
	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END



















/****** Object:  StoredProcedure [dbo].[USP_Get_Active_Prescription]    Script Date: 16-Jan-18 7:55:09 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AllDoctors]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Get_AllDoctors]

	@p_int_LanguageId  INT,
	@p_str_clinic_ID	NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

		    SELECT		UM.ID,
					DM.Prefix,
					UM.Login_Id,
					UM.First_Name,
					
					UM.Password,
					RM.Role_Name,
					RM.Role_Id,
					
					UM.Language_Id,
					UM.Is_Active,
					(DM.Prefix + ' ' + UM.First_Name +' - '+ Speciality) as NameWithPrefix,
					DM.Doctor_ID
					
					
					
				  FROM		User_Master UM
			inner JOIN 		User_Role UR
					ON		UM.ID=UR.User_ID 
			INNER JOIN		Role_Master RM
					ON		UR.Role_Id=RM.Role_Id
			
			INNER JOIN		Language_Master LM
					ON		UM.Language_Id=LM.Language_Id

			INNER Join		Doctor_Master DM
					--ON		DM.First_Name =UM.First_Name
					ON DM.Doctor_ID=UM.Doctor_ID
					
			
			WHERE	--UM.Login_Id = @p_nvar_Login_Id 
					UM.Language_Id = @p_int_LanguageId 
			AND		UR.Is_Default_Clinic = 1
			AND		UR.Role_Id = 2
			AND		UR.Clinic_ID=@p_str_clinic_ID
			and		DM.OPD_DR = 1

			SELECT	distinct Prefix,DM.First_Name,DM.Doctor_ID,   (Prefix + ' ' + DM.First_Name +' - '+ Speciality) as NameWithPrefix
			FROM	Doctor_Master DM

		inner join User_Master UM
		ON  UM.Doctor_ID =DM.Doctor_ID


			where OPD_DR = 1
			AND Is_Active=1

		
			SELECT distinct Speciality
			  FROM  Doctor_Master

            SELECT	distinct Prefix,DM.First_Name,DM.Doctor_ID,   (Prefix + ' ' + DM.First_Name +' - '+ Speciality) as NameWithPrefix
			FROM	Doctor_Master DM

				inner join User_Master UM
				ON  UM.Doctor_ID =DM.Doctor_ID

				inner join [dbo].[System_Params] sp
				on sp.[Doctor_ID]= DM.Doctor_ID

			where OPD_DR = 1  
		    AND Is_Active=1 and [IS_MAIN_DOCTOR]=1
	
		
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AllDoctors_ADHOC]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Get_AllDoctors_ADHOC]

	@p_int_LanguageId  INT,
	@p_str_clinic_ID	NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

		
		SELECT	 Prefix,First_Name,Doctor_ID,   (Prefix + ' ' + First_Name +' - '+ Speciality) as NameWithPrefix
			FROM	Doctor_Master

		

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END




GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AllDoctors_For_Patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_AllDoctors_For_Patient]

	@p_int_LanguageId  INT,
	@p_str_clinic_ID	NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

		SELECT		UM.ID,
					DM.Prefix,
					UM.Login_Id,
					UM.First_Name,
					
					UM.Password,
					RM.Role_Name,
					RM.Role_Id,
					
					UM.Language_Id,
					UM.Is_Active,
					(DM.Prefix + ' ' + UM.First_Name +' - '+ Speciality) as NameWithPrefix
					
					
					
				  FROM		User_Master UM
			INNER JOIN 		User_Role UR
					ON		UM.ID=UR.User_ID 
			INNER JOIN		Role_Master RM
					ON		UR.Role_Id=RM.Role_Id
			
			INNER JOIN		Language_Master LM
					ON		UM.Language_Id=LM.Language_Id

			INNER Join		Doctor_Master DM
					ON		DM.First_Name =UM.First_Name
					
			
			WHERE	--UM.Login_Id = @p_nvar_Login_Id 
					UM.Language_Id = @p_int_LanguageId 
			AND		UR.Is_Default_Clinic = 1
			AND		UR.Role_Id = 2
			AND		UR.Clinic_ID=@p_str_clinic_ID

			SELECT	 Prefix,First_Name,Doctor_ID,   (Prefix + ' ' + First_Name+' '+Last_Name +' - '+ Speciality) as NameWithPrefix
			FROM	Doctor_Master

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_Operator]    Script Date: 30-Jan-18 3:46:16 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Amount]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_Amount]

@p_var_CatDescription		NVARCHAR(100),
@p_var_CatSubDescription	NVARCHAR(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   SELECT	Amount,SortOrder,Comments
   FROM		[dbo].[IPD_BillData_CHARGESMASTER]
   WHERE	[Charges_Category] = @p_var_CatDescription
   AND		[Charges_SubCategory] = @p_var_CatSubDescription

   SELECT	SortOrder
   FROM		[dbo].[IPD_SubCategory_CHARGESMASTER]
   WHERE	
   			[Charges_SubCategory] = @p_var_CatSubDescription

END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AmountStatus]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_AmountStatus]
	@p_int_LanguageId  INT,
	@p_str_clinic_ID	NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

		SELECT		UM.ID,
					
					UM.Login_Id,
					UM.First_Name,
					UM.Password,
					RM.Role_Name,
					RM.Role_Id,
					
					UM.Language_Id,
					UM.Is_Active
					
					
					
				  FROM		User_Master UM
			INNER JOIN 		User_Role UR
					ON		UM.ID=UR.User_ID 
			INNER JOIN		Role_Master RM
					ON		UR.Role_Id=RM.Role_Id
			
			INNER JOIN		Language_Master LM
					ON		UM.Language_Id=LM.Language_Id
					
			
			WHERE	--UM.Login_Id = @p_nvar_Login_Id 
					UM.Language_Id = @p_int_LanguageId 
			AND		UR.Is_Default_Clinic = 1
			AND		UR.Role_Id = 2
			AND		UR.Clinic_ID=@p_str_clinic_ID

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON
















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AreaDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  24-Mar-2016
-- Description  :  This stored procedure will Get the Area,city,State and Country Record.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_AreaDetails]
	@p_nvar_AreaName      NVARCHAR(100),
	@p_int_Language_Id    INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  
				AM.ID,
				AM.City_ID,
				AM.State_ID,
				AM.Country_ID,
				AT.Language_Id,CT.City_Name,ST.State_Name
		  FROM  Area_Master AM,
			    Area_Translations AT inner join City_Translations CT on AT.City_ID= CT.City_ID
									 inner join State_Translations ST on At.State_ID=ST.State_ID
         WHERE 
				AM.ID          =  AT.Area_ID 
		   AND	AT.Area_Name   =  @p_nvar_AreaName 
		   AND	AT.Language_Id =  @p_int_Language_Id
		   
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

















/****** Object:  StoredProcedure [dbo].[USP_Get_Amount]    Script Date: 16-Jan-18 7:55:16 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AreaName]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  24-Mar-2016
-- Description  :  This stored procedure will Get the Area Name by Area_Id.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_AreaName]
	@p_int_Area_Id   INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  
				AT.Area_Name,
				AT.Language_Id
		  FROM  Area_Master AM,
			    Area_Translations AT
         WHERE 
				AM.ID      = AT.Area_ID AND
				AT.Area_ID = @p_int_Area_Id
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END

















/****** Object:  StoredProcedure [dbo].[USP_Get_CatagoryData]    Script Date: 16-Jan-18 7:56:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_AreaWisePatients]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  12 Sep 2017
-- Description	:  This stored procedure will get all area wise patients
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_AreaWisePatients]

 @p_var_Language_ID		INT
	
 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		BEGIN
		;WITH PatientCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,AM.ID
										FROM [dbo].[Patient_Master]	PM
                                        INNER JOIN   Area_Master AM  ON AM.ID=PM.Area_ID
                                        GROUP BY AM.ID
							)

		SELECT		Area_ID,AMT.Area_Name,ISNULL([Is_Activate],0) AS Is_Activate,ISNULL(CONVERT(NVARCHAR,MRC.PatientCount,100),'--') AS PatientCount,
					ISNULL(MRC.PatientCount,0) AS PC

		FROM		Area_Master AM

		INNER JOIN	Area_Translations AMT 
		ON			AM.ID=AMT.Area_ID 
		AND			AMT.City_ID = AM.City_ID
		AND			AMT.Country_ID = AM.Country_ID

		 LEFT JOIN PatientCount MRC ON
		 AM.ID = MRC.ID

		 WHERE	AMT.Language_Id = @p_var_Language_ID
		 
		 ORDER BY MRC.PatientCount DESC



		 ;WITH PatientCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,AM.ID
										FROM [dbo].[Patient_Master]	PM
                                        INNER JOIN   Area_Master AM  ON AM.ID=PM.Area_ID
                                        GROUP BY AM.ID
							)

		SELECT		Area_ID,AMT.Area_Name,ISNULL([Is_Activate],0) AS Is_Activate,ISNULL(CONVERT(NVARCHAR,MRC.PatientCount,100),'--') AS PatientCount,
					ISNULL(MRC.PatientCount,0) AS PC

		FROM		Area_Master AM

		INNER JOIN	Area_Translations AMT 
		ON			AM.ID=AMT.Area_ID 
		AND			AMT.City_ID = AM.City_ID
		AND			AMT.Country_ID = AM.Country_ID

		 LEFT JOIN PatientCount MRC ON
		 AM.ID = MRC.ID

		 WHERE	AMT.Language_Id = @p_var_Language_ID
		 AND	ISNULL([Is_Activate],0) = 1
		 
		 ORDER BY MRC.PatientCount DESC


		 ;WITH PatientCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,AM.ID
										FROM [dbo].[Patient_Master]	PM
                                        INNER JOIN   Area_Master AM  ON AM.ID=PM.Area_ID
                                        GROUP BY AM.ID
							)

		SELECT		Area_ID,AMT.Area_Name,ISNULL([Is_Activate],0) AS Is_Activate,ISNULL(CONVERT(NVARCHAR,MRC.PatientCount,100),'--') AS PatientCount,
					ISNULL(MRC.PatientCount,0) AS PC

		FROM		Area_Master AM

		INNER JOIN	Area_Translations AMT 
		ON			AM.ID=AMT.Area_ID 
		AND			AMT.City_ID = AM.City_ID
		AND			AMT.Country_ID = AM.Country_ID

		 LEFT JOIN PatientCount MRC ON
		 AM.ID = MRC.ID

		 WHERE	AMT.Language_Id = @p_var_Language_ID
		 AND	ISNULL([Is_Activate],0) = 0
		 
		 ORDER BY MRC.PatientCount DESC

		END
		
	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END



















/****** Object:  StoredProcedure [dbo].[USP_Get_AreaName]    Script Date: 16-Jan-18 7:55:23 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_BLDMedicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_BLDMedicine]
@p_var_Short_Description	NVARCHAR(40)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		SELECT 	Morning,Afternoon,Night,No_Of_Days,Instruction
		FROM	Medicine_Master
		WHERE   Short_Description=@p_var_Short_Description
		
		
	
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON
















/****** Object:  StoredProcedure [dbo].[USP_Get_AreaWisePatients]    Script Date: 16-Jan-18 7:55:25 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_BLDPrescription]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_BLDPrescription]
@p_var_CatShort_Description	NVARCHAR(60),
@p_var_CatSub_Description	NVARCHAR(200),
@p_var_MedicineName	NVARCHAR(200),
@p_var_Brand_Name	NVARCHAR(200)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		SELECT 	Morning,Afternoon,Night,No_Of_Days,Instruction
		FROM	Prescription_Medicines
		WHERE   Cat_Short_Name		=	@p_var_CatShort_Description 
		AND		CatSub_Description	=	@p_var_CatSub_Description
		AND     Medicine_Name		=	@p_var_MedicineName
		AND     Brand_Name			=	@p_var_Brand_Name

		
		
	
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON
















/****** Object:  StoredProcedure [dbo].[USP_Get_BLDMedicine]    Script Date: 16-Jan-18 7:55:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_BloodGroupDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  21-Mar-2016
-- Description  :  This stored procedure will Get BloodGroup Details.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_BloodGroupDetails]

AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY
			SELECT  
						ID,
						BloodGroup_Description
			  FROM		BloodGroup_Master

			  SELECT  
						ID,
						[Payment_Description]
			  FROM		[dbo].[Payment_type_Master]
			  ORDER BY ID ASC

			  SELECT  
						ID,
						[Title_Description]
			  FROM		[dbo].[Patient_Title]
			  ORDER BY ID ASC

			  SELECT  
						ID,
						[FollowUp_Description]
			  FROM		[dbo].[Follow-Up_type]
			  ORDER BY ID ASC


			   SELECT  
						ID,
				[Followup_After]
			  FROM	[dbo].[Followup_After_Master]
			  ORDER BY ID ASC

			    SELECT  
						ID,
					[Schedule_Description]
			  FROM	[dbo].[Schedule_Master]
			  ORDER BY ID ASC


			      SELECT  
						ID,
					[Group]
			  FROM	[dbo].[Balance_Impression_Finding]
			  ORDER BY ID ASC

			  SELECT  
						ID,
				[Followup_After],Days
			  FROM	[dbo].[Followup_After_Master]
			  ORDER BY ID ASC





	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END

















/****** Object:  StoredProcedure [dbo].[USP_Get_BLDPrescription]    Script Date: 16-Jan-18 7:55:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_BookDoctors]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[USP_Get_BookDoctors]

	@p_int_LanguageId  INT,
	@p_str_clinic_ID	NVARCHAR(30),
	@p_str_doctor_Id	NVARCHAR(100)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

		    SELECT		UM.ID,
					DM.Prefix,
					UM.Login_Id,
					UM.First_Name,
					
					UM.Password,
					RM.Role_Name,
					RM.Role_Id,
					
					UM.Language_Id,
					UM.Is_Active,
					(DM.Prefix + ' ' + UM.First_Name +' - '+ Speciality) as NameWithPrefix,
					DM.Doctor_ID
					
					
					
				  FROM		User_Master UM
			inner JOIN 		User_Role UR
					ON		UM.ID=UR.User_ID 
			INNER JOIN		Role_Master RM
					ON		UR.Role_Id=RM.Role_Id
			
			INNER JOIN		Language_Master LM
					ON		UM.Language_Id=LM.Language_Id

			INNER Join		Doctor_Master DM
					--ON		DM.First_Name =UM.First_Name
					ON DM.Doctor_ID=UM.Doctor_ID
					
			
			WHERE	--UM.Login_Id = @p_nvar_Login_Id 
					UM.Language_Id = @p_int_LanguageId 
			AND		UR.Is_Default_Clinic = 1
			AND		UR.Role_Id = 2
			AND		UR.Clinic_ID=@p_str_clinic_ID
			and		DM.OPD_DR = 1

			SELECT	distinct Prefix,DM.First_Name,DM.Doctor_ID,   (Prefix + ' ' + DM.First_Name +' - '+ Speciality) as NameWithPrefix
			FROM	Doctor_Master DM

		inner join User_Master UM
		ON  UM.Doctor_ID =DM.Doctor_ID


			where OPD_DR = 1
			AND Is_Active=1
			and DM.Doctor_ID=@p_str_doctor_Id
		
			SELECT distinct Speciality
			  FROM  Doctor_Master

            SELECT	distinct Prefix,DM.First_Name,DM.Doctor_ID,   (Prefix + ' ' + DM.First_Name +' - '+ Speciality) as NameWithPrefix
			FROM	Doctor_Master DM

				inner join User_Master UM
				ON  UM.Doctor_ID =DM.Doctor_ID

				inner join [dbo].[System_Params] sp
				on sp.[Doctor_ID]= DM.Doctor_ID

			where OPD_DR = 1  
		    AND Is_Active=1 and [IS_MAIN_DOCTOR]=1
	
		
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_CatagoryData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_CatagoryData]
	
@p_var_doctorID			NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
	SELECT 	Cat_Short_Name,Cat_Long_Description,Cat_Short_Name+'-'+Cat_Long_Description as Catagory
	FROM	Prescription_Category
	WHERE	DOCTOR_ID	=	@p_var_doctorID
	ORDER BY Cat_Short_Name ASC
		
		
	SELECT Cat_Short_Name,CatSub_Description
	FROM	Prescription_SubCategory
	WHERE	DOCTOR_ID	=	@p_var_doctorID
	ORDER BY Cat_Short_Name ASC
	

	SELECT	Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction
	FROM	Prescription_Medicines
	WHERE	DOCTOR_ID	=	@p_var_doctorID
	ORDER BY Cat_Short_Name ASC


	SELECT Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Priority_Value
	FROM [dbo].[MR_Added_Prescriptions]
	ORDER BY Cat_Short_Name ASC

	SELECT Procedure_Description
	FROM Doctor_Procedure_Master
	ORDER BY Procedure_Description ASC

	SELECT 	[Billing_Group_Name]
	FROM	[dbo].[Billing_Group_Master]
	WHERE	Doctor_ID=@p_var_doctorID
	ORDER BY [Billing_Group_Name] ASC


	SELECT	[IPD_Keyword],ISNULL([Diagnosis],'') AS [Diagnosis],ISNULL([Complaints],'') AS [Complaints],
			ISNULL([History],'') AS [History],ISNULL([Investigations],'') AS [Investigations],
			ISNULL([OE],'') AS [OE],ISNULL([SE],'') AS [SE],ISNULL([Procedure],'') AS [Procedure],
			ISNULL([Treatment],'') AS [Treatment],ISNULL([Discharge],'') AS [Discharge],ISNULL([Instructions],'') AS [Instructions],ISNULL([Operative_Notes_Description],'') AS [Operative_Notes_Description]
	
	FROM   [dbo].[IPD_DischargeData]
	
	WHERE  [Delete_Flag] = 0
	ORDER BY [IPD_Keyword]




	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON

















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_CatagoryData_billing_Group]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_CatagoryData_billing_Group]
	
@p_var_doctorID			NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
	SELECT 	Billing_Group_Name
	FROM	[dbo].[Billing_Group_Master]
	WHERE	DOCTOR_ID	=	@p_var_doctorID
	ORDER BY Billing_Group_Name ASC
		

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON

















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_CityDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  24-Mar-2016
-- Description  :  This stored procedure will Get the Area,city,State and Country Record.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_CityDetails]
	@p_nvar_CityName      NVARCHAR(100),
	@p_int_Language_Id    INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  
				
				CM.ID,
				CM.State_ID,
				CM.Country_ID,
				CT.Language_Id,CT.City_Name,ST.State_Name
		  FROM  City_Master CM, City_Translations CT 
									 inner join State_Translations ST on CT.State_ID=ST.State_ID
         WHERE 
				CM.ID          =  CT.City_ID 
		   AND	CT.City_Name   =  @p_nvar_CityName 
		   AND	CT.Language_Id =  @p_int_Language_Id

		   Select State_Name ,Sm.ID from State_Master SM inner join State_Translations ST on Sm.ID=ST.State_ID
		   where SM.ID='OTH' and
		   SM.Country_ID='IND'
		   
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

















/****** Object:  StoredProcedure [dbo].[USP_Get_AreaDetails]    Script Date: 16-Jan-18 7:55:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ClinicDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 15 june 16
-- Description:	This stored procedure is used to get clinic details
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ClinicDetails]

	@p_var_doctor_id   NVARCHAR(30),
	@_var_Language_ID	int
	
AS
BEGIN
	--SELECT DISTINCT Clinic_Name,Phone_No,Area_Name,Shift_Day,CM.Clinic_Address
	--FROM Clinic_Master CM,Area_Translations,Doctor_Clinic_Shift,Shift_Master
	--WHERE CM.Doctor_ID=@p_var_doctor_id
	--AND   CM.Country_ID=Area_Translations.Country_ID
	--AND	  CM.Area_ID=Area_Translations.Area_ID
	--AND	  Shift_Master.Shift_ID=Doctor_Clinic_Shift.Shift_ID
	--AND	  CM.Is_Print=1

	SELECT DISTINCT CM.Clinic_Name,CM.Phone_No,AT.Area_Name,CM.Clinic_Address,CIT.City_Name,CM.Pincode,CM.Clinic_ID
	FROM Clinic_Master CM

	INNER JOIN Area_Translations AT ON  AT.Area_ID=CM.Area_ID 

	INNER JOIN Country_Translations CT ON CT.Country_ID=AT.Country_ID

	INNER JOIN [dbo].[City_Translations] CIT ON CIT.[City_ID]=CM.City_ID
	
	WHERE CM.Doctor_ID=@p_var_doctor_id
	
	AND	  CM.IS_Print=1

	AND	  CIT.Language_ID=@_var_Language_ID

	order by Clinic_ID 

	SELECT DISTINCT Start_Time,End_Time
	FROM   Doctor_Clinic_Shift DS,Shift_Master
	WHERE DS.Doctor_ID=@p_var_doctor_id
	AND	  Shift_Master.Shift_ID=DS.Shift_ID;

		SELECT DISTINCT CM.Clinic_Name,CM.Phone_No,AT.Area_Name,CM.Clinic_Address,CIT.City_Name,CM.Pincode,CM.Clinic_ID
	FROM Clinic_Master CM

	INNER JOIN Area_Translations AT ON  AT.Area_ID=CM.Area_ID 

	INNER JOIN Country_Translations CT ON CT.Country_ID=AT.Country_ID

	INNER JOIN [dbo].[City_Translations] CIT ON CIT.[City_ID]=CM.City_ID
	

	order by Clinic_ID 


	select * from License_Key
END





GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ClinicShifts]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 12-Mar-2016
-- Description: This stored procedure will return Shfts for the day for the user.
-- created By- Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ClinicShifts]
	@p_nvar_Doctor_Id  nvarchar(30),
	@p_nvar_ClinicId  nvarchar(10),
	@P_nvar_TodaysDay nvarchar(20)

AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
	;WITH  ShifTimes As 
				(  SELECT	SM.Shift_ID,SM.Start_Time AS Start_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours
									
					FROM	Shift_Master SM
					INNER JOIN Doctor_Clinic_Shift DCS 
							ON SM.Shift_ID = DCS.Shift_ID
					INNER JOIN Clinic_Master CM
							ON DCS.Clinic_ID = CM.Clinic_ID
					INNER JOIN Doctor_Master DM
							ON DM.Doctor_ID = CM.Doctor_ID 
					WHERE	DM.Doctor_ID = @p_nvar_Doctor_Id
					AND		CM.Clinic_ID = @p_nvar_ClinicId
					AND		SM.Shift_Day = @P_nvar_TodaysDay
					AND		DCS.Doctor_ID= @p_nvar_Doctor_Id
			)
			
			
			SELECT Shift_ID, Description,Start_Time FROM ShifTimes		
			ORDER BY DiffInHours ASC	
			
       
/*
		SELECT	SM.Shift_ID,                         
				SM.Description+' - '+SM.Shift_Day+' - '+ 
				CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description'
	    FROM	Shift_Master SM
				INNER JOIN 
				Doctor_Clinic_Shift DCS
				ON	SM.Shift_ID = DCS.Shift_ID
				INNER JOIN
				Clinic_Master CM
				ON DCS.Clinic_ID = CM.Clinic_ID
				INNER JOIN
				Doctor_Master DM
				ON DM.Doctor_ID = CM.Doctor_ID 
		WHERE	DM.Doctor_ID = @p_nvar_Doctor_Id
		AND		CM.Clinic_ID = @p_nvar_ClinicId
		AND		SM.Shift_Day = @P_nvar_TodaysDay ;
*/

	END TRY
	BEGIN CATCH
	SELECT	ERROR_NUMBER() AS ErrorNumber,
			ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ClinicShiftsTime]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 12-Mar-2016
-- Description: This stored procedure will return Shfts for the day for the user.
-- created By- Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ClinicShiftsTime]
	@p_nvar_Shift_Id  TINYINT
	AS
	BEGIN
	  SELECT    CONVERT(VARCHAR(8),SM.Start_Time,108) AS Shift_Start_Time,
			    CONVERT(NVARCHAR(8),SM.End_Time,108) as Shift_End_Time

      FROM  	Shift_Master SM 
	  WHERE     SM.Shift_ID= @p_nvar_Shift_Id
			              
						  END







GO
/****** Object:  StoredProcedure [dbo].[USP_Get_CollectionStatment_For_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  20 Nov 2017
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_CollectionStatment_For_Operator]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time ,
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108)  as Visit_Date 

			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )

					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

			and PV.Status_ID=5
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					''As Is_follow_Up 
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			
			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES, null as discount,null as Original_Discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time


			
	end
	else
	begin

	
	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=5
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=5

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=5
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=5
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=5
			ORDER BY Visit_Time


			


	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_CollectionStatment_For_Operator_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  12 DEC 2019
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator services
-- Created By   :  Linakshi
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_CollectionStatment_For_Operator_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time ,
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108)  as Visit_Date 

			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )

					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

			and PV.Status_ID=8
/*Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					''As Is_follow_Up 
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			
			AND		GT.Language_Id	=	@p_language_ID  */
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=8 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES, null as discount,null as Original_Discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time


			
	end
	else
	begin

	
	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=8
--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID
					
					 
--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	=	@p_date_TodyasVisitDate
			
--			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
--			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
--			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=8 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=8

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=8
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=8
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and PV.Status_ID=8
			ORDER BY Visit_Time


			


	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Company]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 12-Dec-2016
-- Description: This stored procedure will Get all company list
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Company]

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		UPPER(Company_Name) AS Company_Name,Company_Description,LoginName,LoginPassword,ISNULL(Delete_Flag,0) AS Delete_Flag
		  FROM			[dbo].[Company_Master]
		  WHERE			Delete_Flag=0
		  ORDER BY		[Company_Name] ASC	
		  
		   
					
		SELECT First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,MR_ID
		FROM MR_Master
		WHERE Delete_Flag=0




		SELECT 
		 ROW_NUMBER() OVER (PARTITION BY MV.Company_Name  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS ROWNUM, 
                                    
		First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,UPPER(MM.Company_Name) AS Company_Name,MM.Short_Name,MM.Mobile_No,MV.MR_ID,
				MV.Visit_Date AS Visitdate,MV.Visit_Time AS GETVISITTIME,MV.Shift_ID,(convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,MV.Status_ID,
				CONVERT(NVARCHAR, Visit_Date, 106) AS Visit_date,LEFT(SM.Description,1) AS ShiftDesc,
				CONVERT(NVARCHAR, Visit_Date, 106)+'-'+(convert(varchar(11),MV.Visit_Time, 108))+'-'+LEFT(SM.Description,1) AS CombineVisitDetails,
				SR.Status_Description,SR.ID AS Status_ID
		 FROM MR_Visits MV
		INNER JOIN MR_Master MM

					ON MM.MR_ID=MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID

		INNER JOIN [dbo].[Shift_Master] SM
				
					ON MV.Shift_ID = SM.Shift_ID

		INNER JOIN  Status_Ref SR
                    ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
		WHERE MV.Status_ID=5
		AND MV.Delete_Flag=0
		AND	MM.Delete_Flag=0
		order by MV.Visit_date DESC,MV.Visit_Time DESC
		  

		  SELECT	UPPER(Company_Name) AS Company_Name,MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name AS MRName,MM.Short_Name,MM.Mobile_No,ISNULL(Delete_Flag,0) AS Delete_Flag,MM.MR_ID
		  FROM		[dbo].[MR_Master] MM
		 
		  WHERE			Delete_Flag=0
		  ORDER BY		[Company_Name] 	

		  /************Company Names with MR Count************/


		  ;WITH MRCount AS (SELECT UPPER(CM.Company_Name) AS Company_Name,
                                        COUNT(MM.MR_ID) AS MRCOUNT FROM [dbo].[Company_Master] CM
                                        INNER JOIN   MR_Master MM  ON                  MM.[Company_Name]=CM.[Company_Name]
                                        WHERE MM.Delete_Flag=0
                                        GROUP BY UPPER(CM.Company_Name) 
							)

		SELECT   UPPER(CM.Company_Name) AS Company_Name,CM.Company_Description,CM.LoginName,CM.LoginPassword,ISNULL(CM.Delete_Flag,0) AS Delete_Flag,
		ISNULL(MRC.MRCOUNT,0) AS MRCount
               FROM              [dbo].[Company_Master] CM

               
              
               LEFT JOIN MRCount MRC 
               ON CM.[Company_Name] = MRC.Company_Name

               WHERE                    CM.Delete_Flag=0

				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ConsolidatedFamilyFees]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =================[ClinicMgmtCentral]============================
-- Author		:  INCRUST
-- Create date	:  26-Mar-2016
-- Description	:  This stored procedure will Get the Total fees with consolidated data.
-- Created By	:  Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_ConsolidatedFamilyFees]
	@p_var_folder_no	  NVARCHAR(30),
	@p_var_Doctor_ID	  NVARCHAR(30)

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
	 SET NOCOUNT ON;
     BEGIN TRY

			 ;WITH FeesCollectionData AS 
		 (SELECT 
				SUM(PV.Fees_To_Collect) as DOCTOR,SUM(PV.Fees_Collected) as COMPOUNDER,pv.Financial_Year,
					(SUM(PV.Fees_To_Collect) - SUM(PV.Discount)) - SUM(PV.Fees_Collected)  as BALANCE,
					 SUM(PV.Discount) as Discount,(SUM(PV.Fees_To_Collect) - SUM(PV.Discount))   as Dues
				FROM   Patient_Visits pv
				
		WHERE  --pv.Doctor_ID  =   @p_var_Doctor_ID AND
			  pv.Folder_No  =   @p_var_Folder_No 
		AND	   pv.Delete_Flag= 0 
		AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
		AND pv.Status_ID=5
		GROUP BY PV.Financial_Year

		UNION ALL


		SELECT 
				SUM(PV.Fees_To_Collect) as DOCTOR,SUM(PV.Fees_Collected) as COMPOUNDER,pv.Financial_Year,
					(SUM(PV.Fees_To_Collect) - SUM(PV.Discount)) - SUM(PV.Fees_Collected)  as BALANCE,
					 SUM(PV.Discount) as Discount,(SUM(PV.Fees_To_Collect) - SUM(PV.Discount))   as Dues
				FROM   Patient_Visits_Services pv
				
		WHERE  --pv.Doctor_ID  =   @p_var_Doctor_ID AND
			  pv.Folder_No  =   @p_var_Folder_No 
		AND	   pv.Delete_Flag= 0 
		AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
		AND pv.Status_ID=8
		GROUP BY PV.Financial_Year
		UNION ALL

		SELECT SUM(0) as DOCTOR,SUM(PV.Fees_Collected) as COMPOUNDER,pv.Financial_Year,(SUM(0)- SUM(PV.Fees_Collected)) as BALANCE,0 as Discount,0 as Dues
		
		FROM Patient_Payments_AdHoc PV
		INNER JOIN Patient_Master pm  
		ON     pm.ID		 =	 Pv.Patient_ID 
			  --and PM.Doctor_ID = PV.Doctor_ID
		WHERE  --pv.Doctor_ID  =   @p_var_Doctor_ID AND
			  pm.Folder_No  =   @p_var_Folder_No 
		AND	   pv.Delete_Flag= 0 
        AND	  pv.Fees_Collected IS NOT NULL 
			GROUP BY PV.Financial_Year 
		)
		--SELECT DOCTOR, COMPOUNDER,  BALANCE,Financial_Year
				
		--FROM FeesCollectionData
		--ORDER BY Financial_Year DESC
		SELECT sum(DOCTOR) AS DOCTOR, sum(COMPOUNDER) AS COMPOUNDER,  sum(BALANCE) AS BALANCE,Financial_Year , sum(Discount) as Discount,sum(Dues) as Dues
		FROM FeesCollectionData
		GROUP BY Financial_Year 
		ORDER BY Financial_Year DESC
	 END TRY
     BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH
 END




















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ConsolidatedFamilyFees_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =================[ClinicMgmtCentral]============================
-- Author		:  INCRUST
-- Create date	:  26-Mar-2016
-- Description	:  This stored procedure will Get the Total fees with consolidated data.
-- Created By	:  Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ConsolidatedFamilyFees_Operator]
	@p_var_folder_no	  NVARCHAR(30),
		@p_var_Doctor_ID	  NVARCHAR(30)

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
	 SET NOCOUNT ON;
     BEGIN TRY

			 ;WITH FeesCollectionData AS 
		 (SELECT 
				SUM(PV.Fees_To_Collect) as DOCTOR,SUM(PV.Fees_Collected) as COMPOUNDER,pv.Financial_Year,
						(SUM(PV.Fees_To_Collect) - SUM(PV.Discount)) - SUM(PV.Fees_Collected) as BALANCE,
					 SUM(PV.Discount) as Discount,(SUM(PV.Fees_To_Collect) - SUM(PV.Discount))   as Dues

					
				FROM   Patient_Visits pv
				
		WHERE  --pv.Doctor_ID  =   @p_var_Doctor_ID
		         pv.Folder_No  =   @p_var_Folder_No 
		AND	   pv.Delete_Flag= 0 
		AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
		AND pv.Status_ID=5
		GROUP BY PV.Financial_Year
		
		UNION ALL
		SELECT 
				SUM(PV.Fees_To_Collect) as DOCTOR,SUM(PV.Fees_Collected) as COMPOUNDER,pv.Financial_Year,
						(SUM(PV.Fees_To_Collect) - SUM(PV.Discount)) - SUM(PV.Fees_Collected) as BALANCE,
					 SUM(PV.Discount) as Discount,(SUM(PV.Fees_To_Collect) - SUM(PV.Discount))   as Dues

					
				FROM   Patient_Visits_Services pv
				
		WHERE  --pv.Doctor_ID  =   @p_var_Doctor_ID
		         pv.Folder_No  =   @p_var_Folder_No 
		AND	   pv.Delete_Flag= 0 
		AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
		AND pv.Status_ID=8
		GROUP BY PV.Financial_Year

		UNION ALL

		SELECT SUM(0) as DOCTOR,SUM(PV.Fees_Collected) as COMPOUNDER,pv.Financial_Year,(SUM(0)- SUM(PV.Fees_Collected)) as BALANCE,0 as Discount,0 as Dues
		
		FROM Patient_Payments_AdHoc PV
		INNER JOIN Patient_Master pm  
		ON     pm.ID		 =	 Pv.Patient_ID 
		--and 			   PM.Doctor_ID = PV.Doctor_ID

		WHERE -- pv.Doctor_ID  =   @p_var_Doctor_ID
			    pm.Folder_No  =   @p_var_Folder_No 
		AND	   pv.Delete_Flag= 0 
        AND	  pv.Fees_Collected IS NOT NULL 
			GROUP BY PV.Financial_Year 
		)
		--SELECT DOCTOR, COMPOUNDER,  BALANCE,Financial_Year
				
		--FROM FeesCollectionData
		--ORDER BY Financial_Year DESC
		SELECT sum(DOCTOR) AS DOCTOR, sum(COMPOUNDER) AS COMPOUNDER,  sum(BALANCE) AS BALANCE,Financial_Year, sum(Discount) as Discount,sum(Dues) as Dues
		FROM FeesCollectionData
		GROUP BY Financial_Year 
		ORDER BY Financial_Year DESC
	 END TRY
     BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH
 END




















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ConsolidatedFees]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 26-Mar-2016
-- Description	: This stored procedure will Get the Total fees.
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_ConsolidatedFees]
    @p_var_patient_Id	     NVARCHAR(32),
    @p_int_Patient_visit_no  INT,
	@p_var_folder_no	     NVARCHAR(30),
	@p_var_financial_year    INT,
	@p_var_Clinic_ID	     NVARCHAR(10),
	@p_var_Doctor_ID	     NVARCHAR(30)

 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
  SET NOCOUNT ON; 
  BEGIN TRY
     SELECT (SUM(PV.Fees_Collected)+ SUM(ISNULL(PPA.Fees_Collected,0))) as COMPOUNDER,SUM(PV.Fees_To_Collect) as DOCTOR,SUM(PV.Fees_To_Collect)-(SUM(PV.Fees_Collected)+SUM(ISNULL(PPA.Fees_Collected,0))) as BALANCE
     FROM    Patient_Visits PV 
	 LEFT JOIN Patient_Payments_AdHoc PPA
	 ON PV.Patient_ID=PPA.Patient_ID AND
	 PV.Doctor_ID=PPA.Doctor_ID AND
	 PV.Clinic_ID=PPA.Clinic_ID AND
	 PV.Financial_Year=PPA.Financial_Year
     WHERE   PV.Folder_No		=	@p_var_folder_no		
	 AND	 PV.Financial_Year	=	@p_var_financial_year	
	 AND     PV.Patient_ID      =   @p_var_patient_Id
	 AND     PV.Patient_Visit_No=   @p_int_Patient_visit_no	
	 AND	 PV.Clinic_ID	    =   @p_var_Clinic_ID	    
	 AND	 PV.Doctor_ID	    =   @p_var_Doctor_ID  

  END TRY
  BEGIN CATCH
    SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
  END CATCH
 END




















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DailyCollection_For_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  20 Nov 2017
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_DailyCollection_For_Operator]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time ,
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108)  as Visit_Date 

			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect, 
				    IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
                    PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=3 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=9 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )

					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					''As Is_follow_Up 
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			
			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES, null as discount,null as Original_Discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time


			
	end
	else
	begin

	
	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=3 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=9 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			        ,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time


			


	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DailyCollection_For_Operator_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  20 Nov 2017
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_DailyCollection_For_Operator_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time ,
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108)  as Visit_Date 

			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )

					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

/*Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name,
					''As Is_follow_Up 
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			
			AND		GT.Language_Id	=	@p_language_ID  */
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=8 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES, null as discount,null as Original_Discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time


			
	end
	else
	begin

	
	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=8 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time


			


	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DailyCollection_For_Operator_without_shift]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  20 Nov 2017
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Varsha Khandre
-- =============================================
create  PROCEDURE [dbo].[USP_Get_DailyCollection_For_Operator_without_shift]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			
			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID,DM.Prefix+' '+DM.First_Name As doctr_name
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time


			
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DashboardData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	22 june 2017
-- Description	:	This stored procedure will validate the user and password.
--					If not a valid user will return 0 else will return 1   
-- created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_DashboardData]


AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.

	SET NOCOUNT ON;


	BEGIN TRY
	declare @perday int

	select 
@perday = iif( count(distinct(visit_date)) =  0 ,1 , count(distinct(visit_date)))  from Patient_Visits where Delete_Flag = 0

	select 
(Select   year(Installation_Date) as dtYear  from license_key) as dtYear,
(Select   Installation_Date as Installation_Date  from license_key) as Installation_Date,

(select count(ID) from Patient_Master )  as TotalPatients ,
(select count(ID) as lastdays from Patient_Master where Created_On > (select (getdate()-30)) ) as lastdays,
(select  count(gender_ID) as F  from Patient_Master where Gender_ID = 'F'  group by Gender_ID  ) as Female ,
(select  count(gender_ID) as M  from Patient_Master where Gender_ID = 'M'  group by Gender_ID  ) as Male,
( select count(patient_id) as patientsVisits from Patient_Visits where Delete_Flag = 0) as patientsVisits,
 (select count(patient_ID) / @perday as perday from Patient_Visits where Delete_Flag = 0) as perday,
 (select Count(patient_ID) as prescription from Visit_Prescription_Overwrite) as prescription,

(Select Valid_To  from license_key) as License_End_date

select Doctor_ID from System_Params  where IS_MAIN_DOCTOR = 1


select * from license_key  






	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END


















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DefaultAutorefreshTimer]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 15-July-2016
-- Description	: This stored procedure will Get default prescription count for doctor
-- Created By	: Snehal Shinde
-- =============================================
 Create PROCEDURE [dbo].[USP_Get_DefaultAutorefreshTimer]
	@p_var_Doctor_ID	     NVARCHAR(30)

 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
  SET NOCOUNT ON; 
  BEGIN TRY
    SELECT	Default_Autorefresh_Timer
	FROM	 System_Params  
	WHERE	 Doctor_ID	    =   @p_var_Doctor_ID  

  END TRY
  BEGIN CATCH
    SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
  END CATCH
 END




















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DefaultFees]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 15 june 16
-- Description:	stored procedure to get doctors default fees
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_DefaultFees]
	
	@p_var_doctor_id	NVARCHAR(30)
	
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT Default_Fees,Compounder_Overwrite
	FROM System_Params
	WHERE Doctor_ID=@p_var_doctor_id
END








GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DefaultPrescriptionCount]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 15-July-2016
-- Description	: This stored procedure will Get default prescription count for doctor
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_DefaultPrescriptionCount]
	@p_var_Doctor_ID	     NVARCHAR(30)

 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
  SET NOCOUNT ON; 
  BEGIN TRY
    SELECT	 Default_Prescription_Count 
	FROM	 System_Params  
	WHERE	 Doctor_ID	    =   @p_var_Doctor_ID  

  END TRY
  BEGIN CATCH
    SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
  END CATCH
 END




















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DischargeDataBydate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  01-Jul-2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_DischargeDataBydate]
   
	@p_date_TodyasVisitDate     DATE,
	@p_date_ToVisitDate         DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
					--Patient Name - IPD no - Ref No - Admission Date and time  - Discharge Date and time - Company –

			select
			 CASE 
				WHEN pm.Middle_Name IS NULL
					THEN (PM.First_Name +' '+ PM.Last_Name)
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name ,  DD.IPD_RefNo , DD.IPD_No , 
						ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date ,
			ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date,  
					DD.Patient_ID ,  AD.InsuranceDetails
					
					from Discharge_Data DD

			Left join Patient_Master PM
			ON
			PM.ID = DD.Patient_ID

			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DD.IPD_RefNo

			where DD.Discharge_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			--and 	AD.IPD_RefNo= ''
			--and DD.Doctor_ID	=	@p_nvar_Doctor_ID


						select
			 CASE 
					WHEN pm.Middle_Name IS NULL
					THEN (PM.First_Name +' '+ PM.Last_Name)
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name ,  DD.IPD_RefNo , DD.IPD_No , 
						ISNULL(CONVERT(VARCHAR(11),AD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date ,
			ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date,  
					DD.Patient_ID ,  AD.InsuranceDetails
					
					from Discharge_Data DD

			Left join Patient_Master PM
			ON
			PM.ID = DD.Patient_ID

			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DD.IPD_RefNo

			where DD.Admission_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			--and DD.Doctor_ID	=	@p_nvar_Doctor_ID
		   and 	AD.IPD_RefNo !=''
		
		
		select
			 CASE 
					WHEN pm.Middle_Name IS NULL
					THEN (PM.First_Name +' '+ PM.Last_Name)
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name ,  DD.IPD_RefNo , DD.IPD_No , 
						ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date ,
			ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date,  
					DD.Patient_ID ,  AD.InsuranceDetails,
					PM.Mobile_1, CONVERT(VARCHAR(11),DD.FollowUp_Date,106) as FollowUp_Date,DD.Keyword

					from Discharge_Data DD

			Left join Patient_Master PM
			ON
			PM.ID = DD.Patient_ID

			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DD.IPD_RefNo

			where DD.FollowUp_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			--and DD.Doctor_ID	=	@p_nvar_Doctor_ID
		
		ORDER BY DD.FollowUp_Date ASC

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DiseaseData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 07 Sep 2016
-- Description  : This stored procedure will get the Disease Record for manage disease
--  created By  : Varsha Khanre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_DiseaseData]
@p_var_DoctorID				NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

	SELECT		Short_Description,Diagnosis_Description,Priority_Value
	FROM		[dbo].[Diagnosis_Master]
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY	Short_Description ASC

	SELECT		Procedure_Description,Priority_Value
	FROM		Doctor_Procedure_Master
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY	Procedure_Description ASC

	SELECT		Procedure_Description,Priority_Value,Findings_Description
	FROM		Doctor_Procedure_Findings
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY	Procedure_Description ASC,Findings_Description ASC

	SELECT		[Billing_Details],[Billing_Subgroup_Name],[Billing_Group_Name],[Visit_Type]
	
	FROM		[dbo].[Billing_Details_Master]
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY	Billing_Group_Name ASC

	SELECT		[Keyword],[Description]
	FROM		[dbo].[IPD_Keywords] DM
	ORDER BY	[Keyword] ASC


	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON


















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Doctor_count]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 15-July-2016
-- Description	: This stored procedure will Get default prescription count for doctor
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_Doctor_count]
	

 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
  SET NOCOUNT ON; 
  BEGIN TRY
    SELECT count(*) as doctor_count
	FROM	 Doctor_Master  
	

  END TRY
  BEGIN CATCH
    SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
  END CATCH
 END

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_DOCTOR_DETAILS]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 14 june 16
-- Description:	Stored Procedure to get doctor details
-- =============================================
CREATE PROCEDURE [dbo].[USP_GET_DOCTOR_DETAILS]
	
	@p_var_doctor_id  NVARCHAR(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT  Prefix,First_Name,Last_Name,Practising_Year,Doctor_Qual,LEFT(Middle_Name,1)+'.' AS Middle_nameWITHDOT,Registration_No,Middle_Name,EmailID
	FROM Doctor_Master DM 
	WHERE  DM.Doctor_ID=@p_var_doctor_id;
END









/****** Object:  StoredProcedure [dbo].[USP_Delete_DischargeData]    Script Date: 16-Jan-18 7:50:24 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_Doctor_Waiting_patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Madhura kale>
-- Create date: <21-feb-2018>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_GET_Doctor_Waiting_patient] 
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_doctor_id	NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE
	
AS
BEGIN

	SET NOCOUNT ON;
	                            SELECT Patient_ID ,Doctor_ID,Status_ID
                                
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			PV.Doctor_ID	=	@p_var_Doctor_Id AND
                                 			PV.Visit_Date	=   @p_date_TodyasVisitDate
								 AND			Status_ID IN (1,2)  
								 --AND			Status_ID =12        
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								
  
	
END

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_Doctor_Waiting_Status]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Madhura kale>
-- Create date: <21-feb-2018>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_GET_Doctor_Waiting_Status] 
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_doctor_id	NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE
	
AS
BEGIN

	SET NOCOUNT ON;
	                            SELECT Patient_ID ,Doctor_ID,Status_ID
                                
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			PV.Doctor_ID	=	@p_var_Doctor_Id AND
                                 			PV.Visit_Date	=   @p_date_TodyasVisitDate
								 --AND			Status_ID IN (1,2)  
								 AND			Status_ID =12        
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								
  
	
END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Doctors_Before_Submit]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ===============================================================================================
-- Author		:  INCRUST
-- Create date	:  12 Oct 2017
-- Description	:  This stored procedure will get all docotrs and checkout status 
-- Created By	:  Varsha Khandre
-- ==============================================================================================


CREATE PROCEDURE [dbo].[USP_Get_Doctors_Before_Submit]

	@p_nvar_Clinic_ID	  NVARCHAR(30),
	@p_nvar_Doctor_ID	  NVARCHAR(30)

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		

		
		 ;WITH DoctorsAndStatus AS 
		 (
			SELECT DM.Prefix+' '+DM.First_Name+' '+DM.Last_Name+' - '+ DM.Speciality AS Name, DM.Doctor_ID AS ID FROM Doctor_Master DM
		
			UNION ALL

			SELECT	Status_Description AS Name,CAST(ISNULL(ID,'') AS varchar(10)) AS ID
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=1 or ID=2 or ID=3  or ID=4  or ID=5 or ID=6 or ID=11 or ID=12))
			
			AND		Clinic_ID = @p_nvar_Clinic_ID
		)

		SELECT Name, ID
		FROM DoctorsAndStatus
		WHERE ID != @p_nvar_Doctor_ID
		
		
		
	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END







-------------------------------------------------





/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_Previous_Visits]    Script Date: 11-Jan-18 11:54:02 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DoctorStatusReference]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The patient Details in patient Profile Page
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_Get_DoctorStatusReference]
	@p_var_Doctor_ID			NVARCHAR(30)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			
			SELECT		SR.ID
			FROM		Status_Ref SR
			WHERE		SR.Doctor_ID=@p_var_Doctor_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_DoctorTodaysVisit]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The doctor Todays Visit Details
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_Get_DoctorTodaysVisit]
	@Todays_Patient_VisitDate DATE,
	@p_var_Shift_ID           INT,
	@p_var_Clinic_ID          NVARCHAR(32),
	@p_var_Doctor_ID          NVARCHAR(32)
AS

BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 BEGIN TRY 
        SELECT	    PM.First_Name +' '+PM.Middle_Name+' '+ PM.Last_Name as Full_Name,
				    SR.Status_Description,
				    PV.Patient_ID,
				    PV.Appointment_Sr_No,
					PV.Shift_ID,
					PV.Status_ID
		FROM        Patient_Visits PV 
		INNER JOIN  Patient_Master PM on PM.ID=PV.Patient_ID
		INNER JOIN  Status_Ref SR on PV.Status_ID=SR.ID 
		AND			convert(date,Visit_Date,101) =  convert(date,@Todays_Patient_VisitDate,101)	
		WHERE       PV.Shift_ID =@p_var_Shift_ID 
		AND         PV.Clinic_ID=@p_var_Clinic_ID 
		AND         PV.Doctor_ID=@p_var_Doctor_ID
		AND			SR.Doctor_ID=@p_var_Doctor_ID
		AND			PV.Delete_Flag = 0
	    ORDER BY    SR.ID 
			
		
  END TRY
  BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
  END CATCH		
 END

















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FamilyDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 22 Aug 2016
-- Description:	To get family details according to family folder
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_FamilyDetails]
	@p_var_FolderName  NVARCHAR(30),
	@p_int_LanguageId             INT
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	  BEGIN TRY
	       IF EXISTS ( 
		              SELECT  Folder_No
		              FROM    Patient_Master
                      WHERE   Folder_No =@p_var_FolderName
                     )
                     BEGIN
                        --SELECT 1 AS FAMILY_STATUS;
                        
                        SELECT PM.Last_Name,
                               PM.Mobile_1,
                               PM.Area_ID,AT.Area_Name,
							   CT.City_Name,
							   ST.State_Name,
							   PM.Pincode,
                               Folder_No
                        FROM   Patient_Master PM INNER JOIN Area_Translations AT ON AT.Area_ID=PM.Area_ID
												 INNER JOIN Gender_Translations GT ON PM.Gender_ID=GT.Gender_ID AND GT.Language_Id=AT.Language_Id
												 INNER JOIN City_Translations CT ON PM.City_ID=CT.City_ID AND GT.Language_Id=CT.Language_Id
												 INNER JOIN State_Translations ST ON PM.State_ID=ST.State_ID AND GT.Language_Id=ST.Language_Id
                        WHERE Folder_No=@p_var_FolderName
						AND   GT.Language_Id=@p_int_LanguageId
						
                       
                     END
            -- ELSE
		        --SELECT 0 AS FAMILY_STATUS;
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
/****** Object:  StoredProcedure [dbo].[USP_Get_LoginDetails]    Script Date: 16-Jan-18 8:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FamilyFolderDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  05-May-2016
-- Description :  This stored procedure will Get Folder wise Family Details  
--  created By :  suyog khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_FamilyFolderDetails]
	@p_var_FolderName  NVARCHAR(30),
	@p_int_LanguageId             INT
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	  BEGIN TRY
	       IF EXISTS ( 
		              SELECT  Folder_No
		              FROM    Patient_Master
                      WHERE   Folder_No =@p_var_FolderName
                     )
                     BEGIN
                        SELECT 1 AS FAMILY_STATUS;
                        
                        SELECT First_Name+' '+Middle_Name+' '+Last_Name as Name,
                               Mobile_1,Age_Given,
                               Date_Of_Birth,PM.Gender_ID,GT.Gender_Description,PM.Area_ID,AT.Area_Name,
                               Folder_No,
							    DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
								,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
								,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc


                        FROM   Patient_Master PM INNER JOIN Area_Translations AT ON AT.Area_ID=PM.Area_ID
												 INNER JOIN Gender_Translations GT ON PM.Gender_ID=GT.Gender_ID AND GT.Language_Id=AT.Language_Id
												 INNER JOIN City_Translations CT ON PM.City_ID=CT.City_ID AND GT.Language_Id=CT.Language_Id
                        WHERE Folder_No=@p_var_FolderName
						AND   GT.Language_Id=@p_int_LanguageId
						
                       
                     END
             ELSE
		        SELECT 0 AS FAMILY_STATUS;
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FeesToCollectDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_FeesToCollectDoctor]
	@p_var_doctor_id	NVARCHAR(100),
	@p_var_patient_id	NVARCHAR(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    BEGIN
	
	SET NOCOUNT ON;

    SELECT  TOP 1 ISNULL(Fees_To_Collect,'0.00') AS Fees_To_Collect,ISNULL(Original_Billed_Amount,'0.00') AS Original_Billed_Amount,
			Fees_Collected
	FROM	Patient_Visits
	WHERE	Doctor_ID=@p_var_doctor_id
	AND		Patient_ID=@p_var_patient_id
	ORDER BY Visit_Date DESC
	
	
END

END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFolderAmount]    Script Date: 16-Jan-18 8:13:34 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FindingsData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_FindingsData]

	@p_var_ProcedureDescription NVARCHAR(MAX),
	@p_var_Doctor_ID			NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
	print(@p_var_ProcedureDescription);
		;with record as
		(
		select String as str_id from splitFunction(@p_var_ProcedureDescription,',')

		)
		--SELECT * FROM record
		SELECT	DPF.Procedure_Description,DPF.Findings_Description,DPF.Findings_Description +'--'+DPF.Procedure_Description AS Finding_Proc
		FROM	Doctor_Procedure_Findings DPF
		INNER JOIN record R ON R.str_id=DPF.Procedure_Description
		AND	Doctor_ID=@p_var_Doctor_ID


		SELECT Procedure_Description
		FROM Doctor_Procedure_Findings
		WHERE Findings_Description=@p_var_ProcedureDescription
		AND	Doctor_ID=@p_var_Doctor_ID


		;with Group_Record as
		(
		select String as str_id from splitFunction(@p_var_ProcedureDescription,',')

		)
		SELECT	GI.[Group_Description],GI.[Instructions_Description],GI.Sequence_No,GI.[Instructions_Description] +'--'+GI.[Group_Description] AS Instruction_Group
		FROM	[dbo].[Group_Instructions] GI
		INNER JOIN Group_Record R ON R.str_id=GI.Group_Description
		AND	Doctor_ID=@p_var_Doctor_ID
		ORDER BY GI.Group_Description,GI.Sequence_No
		
	END TRY

	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON



--SELECT * FROM Doctor_Procedure_Findings

--Nasal Endoscopy,NasoPharyngoscopy












/****** Object:  StoredProcedure [dbo].[USP_Get_FeesToCollectDoctor]    Script Date: 16-Jan-18 8:06:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FolderName]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author      :  INCRUST
-- Create date :  29-Mar-2016
-- Description :  This stored procedure will validate the user and password.
--                If not a valid user will return 0 else will return 1   
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_FolderName]
	
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
			   
		SELECT  DISTINCT Folder_No
		FROM   Patient_Master
       

	 
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Get_FindingsData]    Script Date: 16-Jan-18 8:06:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FutureAppointments_All_New]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 13 nOV 2017
-- Description: This stored procedure will show appointment available on given date.
-- created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_FutureAppointments_All_New]

--	@p_nvar_Doctor_Id			nvarchar(30),
	@p_nvar_ClinicId			nvarchar(10),
	@P_nvar_FutureDate			DATE,
	@p_var_Language_ID			INT
	
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY

	   SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, --CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,
			replace(CONVERT(VARCHAR(11),PV.Visit_Date,106),' ','-')as Visit_Date,
			PV.Visit_Date as fulldate,
			PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,

			Visit_Time as full_time,

			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			fu.FollowUp_Description as follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration


         	FROM	Patient_Visits PV
         	INNER JOIN Patient_Master PM
         	ON		PV.Patient_ID	=	PM.ID
         
         	INNER JOIN	Doctor_Master DM
         	ON		PV.Doctor_ID	=	DM.Doctor_ID
         
         	INNER JOIN	Gender_Translations GT
         	ON			PM.Gender_ID=GT.Gender_ID
         
            INNER JOIN  Status_Ref SR
             ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

			 left join [Follow-Up_type] fu
		       on PV.follow_up_type=fu.ID
         
         	WHERE	Delete_Flag		=	0
         	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
         	AND		Visit_Date		>=	@P_nvar_FutureDate

			--AND     Visit_Time   >= CONVERT (time, CURRENT_TIMESTAMP) 

         	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	2 AND Status_ID		!=	1 )
         	AND		GT.Language_Id	=	@p_var_Language_ID
         
         	ORDER BY fulldate asc, 
         	--STR_TO_DATE(Visit_Time,'%h.%i%p') ASC
         	full_time ASC
			         



	END TRY
	BEGIN CATCH
	SELECT	ERROR_NUMBER() AS ErrorNumber,
			ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_FutureAppointments_ForGivenDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 13 nOV 2017
-- Description: This stored procedure will show appointment available on given date.
-- created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_FutureAppointments_ForGivenDate]

	@p_nvar_Doctor_Id			nvarchar(30),
	@p_nvar_ClinicId			nvarchar(10),
	@P_nvar_FutureDate			datetime,
	@p_var_Language_ID			INT
	
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,



			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


	WHERE	Delete_Flag		=	0
	AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	2  AND Status_ID		!=	1 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time ASC


	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID,  DM.Prefix + ' '+DM.First_Name AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description,PV.Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID,STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,
				FU.FollowUp_Description AS follow_up_type
	FROM		Patient_Visits PV
	INNER JOIN	Patient_Master PM
	ON			PV.Patient_ID	=	PM.ID
	INNER JOIN	Doctor_Master DM
	ON			PV.Doctor_ID	=	DM.Doctor_ID
	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

	 INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	
	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type

	WHERE		Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND			Visit_Date		>	GETDATE()
	AND			( Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	2 AND Status_ID		!=	1 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY	Visit_Time ASC

	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' '+DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description,
			CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date, --PV.Visit_Date,
			PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID,STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time
			--
			,PV.Visit_Date as fulldate,
			Visit_Time as full_time
			,FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration
			--
	FROM		Patient_Visits PV
	INNER JOIN	Patient_Master PM
	ON			PV.Patient_ID	=	PM.ID
	INNER JOIN	Doctor_Master DM
	ON			PV.Doctor_ID	=	DM.Doctor_ID
	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID
	 INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	
	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type

	WHERE	Delete_Flag		=	0
	AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		>=	convert(datetime, convert(varchar(10), getdate(), 102))
	AND		( Status_ID		!=	5	AND Status_ID	!=	4 AND  Status_ID		!=	2  AND Status_ID		!=	1)
	AND		GT.Language_Id	=	@p_var_Language_ID

	--ORDER BY Visit_Time ASC
	ORDER BY fulldate asc, full_time ASC

	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID,DM.Prefix + ' '+ DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description,
			CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date, --PV.Visit_Date,
			PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID,STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time

			--
			,PV.Visit_Date as fulldate,
			Visit_Time as full_time
			,FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration
			--


	FROM		Patient_Visits PV
	INNER JOIN	Patient_Master PM
	ON			PV.Patient_ID	=	PM.ID
	INNER JOIN	Doctor_Master DM
	ON			PV.Doctor_ID	=	DM.Doctor_ID
	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID
	 INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	
	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type

	WHERE		Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND			Visit_Date		=	@P_nvar_FutureDate
	AND			(Status_ID		!=	5	  AND  Status_ID	!=	4  AND Status_ID		!=	2 AND Status_ID		!=	1 )
	AND			GT.Language_Id	=	@p_var_Language_ID

--	ORDER BY	Visit_Time ASC		
    ORDER BY fulldate asc, full_time ASC   

	END TRY
	BEGIN CATCH
	SELECT	ERROR_NUMBER() AS ErrorNumber,
			ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END









/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails]    Script Date: 31-Jan-18 3:22:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Gender]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	22 Aug 2017
-- Description	:	This stored procedure will get the Master Data of tables
-- Created By	:	Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Gender]
	@p_int_LanguageId  INT
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		SELECT	Gender_ID AS ID, Gender_Description AS GENDER
		FROM	Gender_Translations
		WHERE	Language_Id = @p_int_LanguageId;

		SELECT	[Refer_ID] AS ID,[Refer_By_Description] AS REFER_BY
		FROM	[dbo].[Refer_By_Translations]
		WHERE	Language_Id	=	@p_int_LanguageId;

		SELECT	1 AS TABLE6,[Treatment_Plan_Status_ID],[Treatment_Plan_Status_Description]
		FROM	[dbo].[Treatment_Plan_Status_Translations]
		WHERE	Language_Id	=	@p_int_LanguageId
		ORDER BY	Treatment_Plan_Status_ID

		SELECT 	[Billing_VisitType_ID],[Billing_VisitType_Description]
		FROM	[dbo].[Billing_VisitType_Translations]
		WHERE	Language_Id	=	@p_int_LanguageId
		ORDER BY [Billing_VisitType_Description] ASC

		SELECT	[Marital_Status_ID] AS ID,[Marital_Status_Description] AS Marital_Status
		FROM	[dbo].[Marital_Status_Translations]
		WHERE	Language_Id = @p_int_LanguageId;

		SELECT  [ID],[Occupation_Description]
		FROM	Occupation_Master

		SELECT [RD_ID] AS D_ID, [Doctor_Name] FROM [dbo].[Referrel_Doctors_List]
		WHERE Language_Id = @p_int_LanguageId
					ORDER BY [Doctor_Name] ASC;

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON
















/****** Object:  StoredProcedure [dbo].[USP_Get_FutureAppointments_ForGivenDate]    Script Date: 16-Jan-18 8:06:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_GridCount]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  16 May 2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   : Snehal Shinde
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_GridCount]
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT
AS
BEGIN

SET NOCOUNT ON;
	BEGIN TRY


SELECT Count(*) as count	FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =0
			END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END







/****** Object:  StoredProcedure [dbo].[USP_Delete_AttachedReminders]    Script Date: 16-Jan-18 7:49:17 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Gync_Ovulation_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ================================================
-- Template generated from Template Explorer using:
-- Create Procedure (New Menu).SQL
--
-- Use the Specify Values for Template Parameters 
-- command (Ctrl-Shift-M) to fill in the parameter 
-- values below.
--
-- This block of comments will not be included in
-- the definition of the procedure.
-- ================================================
-- =============================================
-- Author	  : Madhura Kale
-- Create date: 28 Dec 2017
-- Description: This stored procedure will get Patients Ovulation induction Data
-- Created By: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Gync_Ovulation_Data]
	
	@p_var_Clinic_ID				NVARCHAR(10),
	@p_var_Doctor_ID				NVARCHAR(32),
	@p_var_Patient_ID				NVARCHAR(32)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   BEGIN TRY
   SELECT	replace(CONVERT(NVARCHAR, DP.[O_Date], 106), ' ', '-') AS Visit_Date,[Day],[RT],[LT],[ET],[Clinical Notes] AS Clinical_Notes,DP.[Patient_Visit_No],
			LEFT(SM.Description,1) AS ShiftDesc, DP.Shift_ID
						
			FROM		[dbo].[Visit_Ovulation_Induction_Data] DP

			INNER JOIN	Patient_Visits PV
			ON			DP.Clinic_ID=PV.Clinic_ID
			AND			DP.Doctor_ID=PV.Doctor_ID
			AND			DP.Patient_ID=PV.Patient_ID
			AND			DP.Visit_Date=PV.Visit_Date
			AND			DP.Patient_Visit_No=PV.Patient_Visit_No
			AND			DP.Shift_ID=PV.Shift_ID

			INNER JOIN [dbo].[Shift_Master] SM
                    ON DP.Shift_ID = SM.Shift_ID

			WHERE		DP.Clinic_ID =@p_var_Clinic_ID 
			AND			DP.Doctor_ID =@p_var_Doctor_ID	
			AND			DP.Patient_ID=@p_var_Patient_ID
			AND			ISNULL(DP.Delete_Flag,0)=0	
			
			AND			ISNULL(PV.Delete_Flag,0)=0	

	

	
    END TRY
			BEGIN CATCH
			SELECT 
						ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
END

/****** Object:  StoredProcedure [dbo].[USP_Get_GridCount]    Script Date: 16-Jan-18 8:06:48 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_Gynec_Delivery_Registraion]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The patient Details in patient Profile Page
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_GET_Gynec_Delivery_Registraion]
  --  @p_var_DeliveryReg_ID	    NVARCHAR(20),
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Patient_ID			NVARCHAR(32)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY

		declare @delReg_id nvarchar(50)

	if exists (select * from Gynec_Delivery_Registration where Patient_ID = @p_var_Patient_ID and Clinic_ID = @p_var_Clinic_ID)

begin 
	Select * from Gynec_Delivery_Registration dr 
	left  join [dbo].BloodGroup_Master BM on BM.ID = dr.Blood_Group
	where --DeliveryReg_ID = @p_var_DeliveryReg_ID 
    Clinic_ID = @p_var_Clinic_ID and Patient_ID = @p_var_Patient_ID;

    select * from Patient_Master PM
	where  ID = @p_var_Patient_ID and Clinic_ID = @p_var_Clinic_ID; 

	
	Select  @delReg_id = DeliveryReg_ID from Gynec_Delivery_Registration 
	where  Clinic_ID = @p_var_Clinic_ID and Patient_ID = @p_var_Patient_ID;


	Select * from Gynec_USG_Summary_Delivery_Reg where DeliveryReg_ID = @delReg_id;


	
end 
else
 begin

   select  top(1)* from Patient_Visits PV
   where PV.Patient_ID = @p_var_Patient_ID and pv.Status_ID in (4,5) order by pv.Patient_Visit_No desc;
  -- where PV.Patient_ID = @p_var_Patient_ID and Pv.Clinic_ID = @p_var_Clinic_ID order by pv.Patient_Visit_No desc;

   select
    PMCD.Habits_Comments,
	BloodGroup_ID = BM.ID,
	pm.First_Name,
	pm.Last_Name,
	PM.Age_Given
    from Patient_Master PM
    left  join [dbo].[Patient_Master_ChronicData] PMCD on PMCD.Patient_ID = PM.ID
    left  join [dbo].BloodGroup_Master BM on BM.ID = PM.BloodGroup_ID

   where  PM.ID = @p_var_Patient_ID and PM.Clinic_ID = @p_var_Clinic_ID; 


  end




	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 16-Jan-18 8:12:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_HolidayDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_HolidayDetails]
	
	@p_var_doctor_id		NVARCHAR(30),
	@p_var_clinic_id		NVARCHAR(10)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT Holiday_Date,Holiday_Description,Remarks
	FROM  Clinic_Doctor_Holidays
	WHERE Doctor_ID=@p_var_doctor_id AND Clinic_ID=@p_var_clinic_id

END






/****** Object:  StoredProcedure [dbo].[USP_Get_Gync_Ovulation_Data]    Script Date: 16-Jan-18 8:06:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Hospital_Bill]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE[dbo].[USP_Get_Hospital_Bill]

   @p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100),
	@p_nvar_Invoice_No			NVARCHAR(100)
AS

BEGIN
	SET NOCOUNT ON;

     --SELECT	[IPD_RefNo],[Bill_No],VGI.[Charges_Category],VGI.[Charges_SubCategory],VGI.[Comments],VGI.[Amount],VGI.[Charges_Category]+'*'+CONVERT(VARCHAR(MAX),VGI.[Charges_SubCategory])+'*'+CONVERT(VARCHAR(MAX),VGI.[Amount]) AS ID
	    SELECT VGI.Date_Of_Service as HospitalChargesDate,[IPD_RefNo],[Bill_No],VGI.[Charges_Category],VGI.[Charges_SubCategory],VGI.[Comments],VGI.[Amount],VGI.[Total_Amount],
	        VGI.No_Of_Units,VGI.[Charges_Category]+'*'+CONVERT(VARCHAR(MAX),VGI.[Amount]) AS ID, VGI.[Calculation_Type]	
	 	
			FROM	[dbo].[Discharge_Bill_Details] VGI

			INNER JOIN  IPD_BillData_CHARGESMASTER IBC
			ON			VGI.Charges_Category = IBC.Charges_Category
			--AND			VGI.Charges_SubCategory	=	IBC.Charges_SubCategory

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.Bill_No					=	@p_nvar_Invoice_No
			AND		ISNULL(VGI.[Delete_Flag],0)		=	0

			ORDER BY Date_Of_Service asc --IBC.SortOrder
END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ImpressionFinding]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  21-Mar-2016
-- Description  :  This stored procedure will Get BloodGroup Details.
--  created By  :  Suyog Khairnar
-- =============================================
Create  PROCEDURE [dbo].[USP_Get_ImpressionFinding]
@p_var_Doctor_ID		NVARCHAR(30)
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY
			
			  

			 

			      SELECT  
						ID,
					[Group]
			  FROM	[dbo].[Balance_Impression_Finding] BF
			  where BF.Doctor_ID=@p_var_Doctor_ID
			  ORDER BY ID ASC
			 





	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ImpressionFindingDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  21-Mar-2016
-- Description  :  This stored procedure will Get BloodGroup Details.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ImpressionFindingDetails]
@p_var_Doctor_ID          NVARCHAR(32),
@p_var_ID         INT

AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 BEGIN TRY 
        SELECT	  [Group],[Subgroup_Name],[ID]
	
		FROM       [dbo].[Balance_Impression_Finding]
		
		WHERE       ID =@p_var_ID  -- in(1,2,3) 	
	   -- ORDER BY    ID 
			
		
  END TRY
  BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
  END CATCH		
 END


























/****** Object:  StoredProcedure [dbo].[USP_Get_BLDPrescription]    Script Date: 16-Jan-18 7:55:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_IPDTodaysDash_Status_Completed]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  01-Jul-2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_IPDTodaysDash_Status_Completed]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	
			;with AdvanceBillCollectionData as(
			
			select  convert(nvarchar(50),  DBH.Bill_Date, 106) As Bill_Date, DBH.Bill_No As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
				THEN	PM.First_Name +' '+ PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , convert(nvarchar(50), DD.Admission_Date, 106) as Admission_Date, 
					ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date , AD.InsuranceDetails , DBH.Collected_Amount 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Hospital Bill' As Service_Render , DBH.Bill_Date as Date , DBH.Patient_ID
			
			 from 
			[dbo].[Discharge_Bill_Hdr] DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo

			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
			and PIR.Receipt_Date=DBH.Created_On
					where 
					--DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Bill_Date between @p_date_TodyasVisitDate and @p_date_TodyasVisitDate


			Union ALL
			select convert(nvarchar(50),  DBH.Advance_Date, 106) As Bill_Date, '' As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
					THEN PM.First_Name+' '+ PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No ,  convert(nvarchar(50), DD.Admission_Date, 106) as Admission_Date, 
					 ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date , AD.InsuranceDetails , DBH.Amount_Received 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Advance' As Service_Render , DBH.Date as Date , DBH.Patient_ID
			
			 from 
			[dbo].Advance_Collection_details DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number and DBH.Receipt_Date=PIR.Receipt_Date
			where 
					--DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Advance_Date between @p_date_TodyasVisitDate and @p_date_TodyasVisitDate
			)

			select * from AdvanceBillCollectionData order by date , IPD_RefNo asc

			

			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Keyword_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 20 July 2017
-- Description: This stored procedure will Get Keyword Discharge, Invoice and Bill Master Data.
-- Created By : Varsha Khandre
-- Modified By: 
--Modified On : 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Keyword_MasterData]

@p_var_Keyword	NVARCHAR(100),
@p_var_SubCat	NVARCHAR(100)

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY
					
		SELECT	[IPD_Keyword],[Diagnosis],[Complaints],[History],[Investigations],[OE],[SE],
				[Procedure],[Treatment],[Discharge],[Instructions],[Operative_Notes_Description]
		FROM	[dbo].[IPD_DischargeData]
		WHERE	[IPD_Keyword] = @p_var_Keyword
		AND		[Delete_Flag] = 0

		SELECT	[IPD_Keyword],IND.[Description],IMM.Unit_Price,[Quantity],IND.[Description]+'*'+CONVERT(VARCHAR(MAX),IMM.Unit_Price)+'*'+CONVERT(VARCHAR(MAX),[Quantity]) AS ID
		FROM	[dbo].[IPD_INVOICEDATA] IND
		
		INNER JOIN [dbo].[IPD_INVOICE_MEDICINEMASTER] IMM
		ON		IMM.[Description] = IND.[Description]

		WHERE	[IPD_Keyword] = @p_var_Keyword
		AND		IMM.[Delete_Flag] = 0
		AND		IND.[Delete_Flag] = 0
		ORDER BY IMM.[SortOrder]

		SELECT  ISNULL(Unit_Price,0) AS Unit_Price
		FROM	IPD_INVOICE_MEDICINEMASTER IPD
		WHERE	IPD.Description = @p_var_Keyword

		SELECT	[IPD_Keyword],IND.[Charges_Category],IND.[Charges_SubCategory],IND.Comments,IMM.[Amount],IND.[Charges_Category]+'*'+IND.[Charges_SubCategory]+'*'+CONVERT(VARCHAR(MAX),[Amount]) AS ID
		FROM	[dbo].[IPD_BillData] IND
		
		INNER JOIN [dbo].[IPD_BillData_CHARGESMASTER] IMM
		ON		IMM.[Charges_Category] = IND.[Charges_Category]
		AND		IMM.Charges_SubCategory = IND.Charges_SubCategory

		WHERE	[IPD_Keyword] = @p_var_Keyword
		AND		IMM.[Delete_Flag] = 0
		AND		IND.[Delete_Flag] = 0
		ORDER BY IMM.[SortOrder]
		  
		SELECT  Charges_SubCategory,[Amount],Comments
		--Changed from
		
		FROM	[IPD_BillData_CHARGESMASTER] IPD
		
		
	
		WHERE	IPD.[Charges_Category] = @p_var_Keyword
		AND		IPD.Charges_SubCategory = @p_var_SubCat
		AND		IPD.Delete_Flag=0
		ORDER BY IPD.[SortOrder]

		SELECT	[Keyword],[Description]
		FROM	[dbo].[IPD_Keywords]
		WHERE	[Keyword] = @p_var_Keyword
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_Hospital_Bill]    Script Date: 16-Jan-18 8:06:55 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Keyword_MasterData_Hospital]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 2
-- Description: This stored procedure will Get Keyword Discharge, Invoice and Bill Master Data.
-- Created By : Varsha Khandre
-- Modified By: 
--Modified On : 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Keyword_MasterData_Hospital]

@p_var_Keyword	NVARCHAR(100),
@p_var_SubCat	NVARCHAR(100),
@p_nvar_IPD_No	NVARCHAR(100)

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY
					
		SELECT	[IPD_Keyword],[Diagnosis],[Complaints],[History],[Investigations],[OE],[SE],
				[Procedure],[Treatment],[Discharge],[Instructions],[Operative_Notes_Description]
		FROM	[dbo].[IPD_DischargeData]
		WHERE	[IPD_Keyword] = @p_var_Keyword
		AND		[Delete_Flag] = 0

		SELECT	[IPD_Keyword],IND.[Description],IMM.Unit_Price,[Quantity],IND.[Description]+'*'+CONVERT(VARCHAR(MAX),IMM.Unit_Price)+'*'+CONVERT(VARCHAR(MAX),[Quantity]) AS ID
		FROM	[dbo].[IPD_INVOICEDATA] IND
		
		INNER JOIN [dbo].[IPD_INVOICE_MEDICINEMASTER] IMM
		ON		IMM.[Description] = IND.[Description]

		WHERE	[IPD_Keyword] = @p_var_Keyword
		AND		IMM.[Delete_Flag] = 0
		AND		IND.[Delete_Flag] = 0
		ORDER BY IMM.[SortOrder]

		SELECT  ISNULL(Unit_Price,0) AS Unit_Price
		FROM	IPD_INVOICE_MEDICINEMASTER IPD
		WHERE	IPD.Description = @p_var_Keyword

		--SELECT	[IPD_Keyword],IND.[Charges_Category],IND.[Charges_SubCategory],IND.Comments,IMM.[Amount],IND.[Charges_Category]+'*'+IND.[Charges_SubCategory]+'*'+CONVERT(VARCHAR(MAX),[Amount]) AS ID
		--FROM	[dbo].[IPD_BillData] IND
		
		--INNER JOIN [dbo].[IPD_BillData_CHARGESMASTER] IMM
		--ON		IMM.[Charges_Category] = IND.[Charges_Category]
		--AND		IMM.Charges_SubCategory = IND.Charges_SubCategory

		--WHERE	[IPD_Keyword] = @p_var_Keyword
		--AND		IMM.[Delete_Flag] = 0
		--AND		IND.[Delete_Flag] = 0
		--ORDER BY IMM.[SortOrder]
		 
	   ;with  tt as   (
	   SELECT	IND.[IPD_Keyword],IND.[Charges_Category],IND.[Charges_SubCategory],IND.Comments
	        ,IMM.[Amount],IND.[Charges_Category]+'*'+IND.[Charges_SubCategory]+'*'+CONVERT(VARCHAR(MAX),[Amount]) AS ID
			,IMM.Calculation_Type 

		FROM	[dbo].[IPD_BillData] IND
		
		INNER JOIN [dbo].[IPD_BillData_CHARGESMASTER] IMM
		ON		IMM.[Charges_Category] = IND.[Charges_Category]
		AND		IMM.Charges_SubCategory = IND.Charges_SubCategory

		WHERE	[IPD_Keyword] = @p_var_Keyword
		AND		IMM.[Delete_Flag] = 0
		AND		IND.[Delete_Flag] = 0
		
		 ) Select ''AS IDCharges,'' as HospitalBillDate,'' as hdnlblHstplAddDate,
		      tt.IPD_Keyword,tt.Charges_Category,tt.[Charges_SubCategory],tt.Comments,tt.[Amount],tt.ID,
 
               CASE tt.Calculation_Type 
					WHEN 'Units' THEN '1'
					WHEN 'Hours' THEN DD.OT_Hours
					--ROUND( cast( datepart(hour, DD.OT_Hours) as int) + ( cast( datepart(minute, DD.OT_Hours) as int) /60), 0)
					WHEN 'Days' THEN DD.Admitted_Days
				END AS UNITS,
				tt.Calculation_Type,
				Amount as Total_Amount	

       from  tt
	   inner JOIN  Discharge_Data DD ON   DD.Keyword=tt.IPD_Keyword  and	DD.IPD_RefNo=@p_nvar_IPD_No
		  


		SELECT  Charges_SubCategory,[Amount],Comments
		--Changed from
		 ,DD.Admitted_Days,DD.OT_Hours, IPD.Calculation_Type
		 ,CASE IPD.Calculation_Type 
					WHEN 'Units' THEN '1'
					WHEN 'Hours' THEN DD.OT_Hours
				    WHEN 'Days' THEN DD.Admitted_Days
		 END AS UNITS

		FROM	[IPD_BillData_CHARGESMASTER] IPD
		
		LEFT JOIN  Discharge_Data DD
			ON   DD.IPD_RefNo=@p_nvar_IPD_No	
	
		WHERE	IPD.[Charges_Category] = @p_var_Keyword
		AND		IPD.Charges_SubCategory = @p_var_SubCat
		AND		IPD.Delete_Flag=0
		ORDER BY IPD.[SortOrder]

		SELECT	[Keyword],[Description]
		FROM	[dbo].[IPD_Keywords]
		WHERE	[Keyword] = @p_var_Keyword
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_Hospital_Bill]    Script Date: 16-Jan-18 8:06:55 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabsSummary_Report]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  14 Sep 2017
-- Description	:  This stored procedure will get all labs suggested report
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_LabsSummary_Report]

 @p_var_DoctorID		NVARCHAR(30),
 @p_var_FromDate		DATE,
 @p_var_Todate			DATE
	
 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		BEGIN
		;WITH LabCount AS (
                                       SELECT COUNT(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										FROM Patient_Visit_LabTestAsked	PVL
                                        INNER JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description and am.Doctor_ID=PVL.Doctor_ID
                                        INNER JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
										AND	PV.Status_ID = 5
										AND PV.Delete_Flag = 0
										AND PVL.Delete_Flag=0
									--	AND PVL.Doctor_ID = @p_var_DoctorID
									--	AND PV.Doctor_ID = @p_var_DoctorID
										GROUP BY PVL.Lab_Test_Description
							)

		SELECT	distinct AM.ID,AM.Lab_Test_Description,ISNULL(CONVERT(NVARCHAR,MRC.LabCount,100),'--') AS LabCount,
					ISNULL(MRC.LabCount,0) AS PC

		FROM		Lab_Test_Master AM

		 INNER JOIN LabCount MRC ON
		 AM.Lab_Test_Description = MRC.Lab_Test_Description

		 WHERE AM.Doctor_ID = @p_var_DoctorID
		 

		-- ORDER BY MRC.LabCount DESC



		 ;WITH LabCount_InDates AS (
          --                             SELECT COUNT(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										--FROM Patient_Visit_LabTestAsked	PVL
          --                              INNER JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description
          --                              INNER JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										--AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
										--AND	PV.Status_ID = 5
										--AND PV.Delete_Flag = 0
										--AND PVL.Delete_Flag=0
										--AND PVL.Doctor_ID = @p_var_DoctorID
										--AND PV.Doctor_ID = @p_var_DoctorID
										--AND PV.Visit_Date BETWEEN @p_var_FromDate and @p_var_Todate
										--GROUP BY PVL.Lab_Test_Description


										SELECT count(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										FROM Patient_Visit_LabTestAsked	PVL


                                      inner JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description and am.Doctor_ID=PVL.Doctor_ID
                                        inner JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
									AND	PV.Status_ID = 5
										AND PV.Delete_Flag = 0
										AND PVL.Delete_Flag=0
									--	AND PVL.Doctor_ID = @p_var_DoctorID
									--	AND PV.Doctor_ID = @p_var_DoctorID
										AND PV.Visit_Date BETWEEN @p_var_FromDate and @p_var_Todate
										GROUP BY PVL.Lab_Test_Description
							)

		SELECT		 AM.ID,AM.Lab_Test_Description,ISNULL(CONVERT(NVARCHAR,MRC.LabCount,100),'--') AS LabCount,
					ISNULL(MRC.LabCount,0) AS PC

		FROM		Lab_Test_Master AM

		 INNER JOIN LabCount_InDates MRC ON
		 AM.Lab_Test_Description = MRC.Lab_Test_Description

		 WHERE AM.Doctor_ID = @p_var_DoctorID
		 

		 ORDER BY MRC.LabCount DESC

		END
		
	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END



















/****** Object:  StoredProcedure [dbo].[USP_Get_Keyword_MasterData]    Script Date: 16-Jan-18 8:06:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabSummary_For_DownloadReport]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 15 Sep 2017
-- Description: This stored procedure will Get Patient Labs suggested reports for download
-- Created By : Varsha Khandre
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_LabSummary_For_DownloadReport]

	@p_var_Doctor_Id		 NVARCHAR(30),
	@p_var_LanguageID		 INT,
	@p_var_fromdate			DATE,
	@p_var_todate			DATE

AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		
						;WITH 	Patient_Visits_With_Lab AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY  PV.Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Patient_ID,PV.Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,
									
									pm.First_Name+' '+pm.Middle_Name+' '+ pm.Last_Name as Full_Name,
									pm.Folder_No,
									Mobile_1 = CASE WHEN datalength(PM.Mobile_1)=0 
									THEN '--' 
									ELSE PM.Mobile_1 END,

									DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
									,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
									,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
									GT.Gender_Description,
									AT.Area_Name,

									PVL.Lab_Test_Description,
									 replace(CONVERT(NVARCHAR, pv.Visit_Date, 106), ' ', '-') AS SuggestedDate
									
									, (ISNULL(DM.Prefix,'') + ' ' + ISNULL(DM.First_Name, '')) AS SuggestedByDocName

                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Patient_Master PM
									ON	PV.Patient_ID = PM.ID
									--AND	PV.Doctor_ID = PM.Doctor_ID

									INNER JOIN	Gender_Translations GT
									ON			PM.Gender_ID=GT.Gender_ID

									INNER JOIN	Area_Translations AT
									ON		PM.Area_ID = AT.Area_ID

									INNER JOIN Patient_Visit_LabTestAsked PVL
									ON		PV.Visit_Date = PVL.Visit_Date
									AND		PV.Patient_Visit_No = PVL.Patient_Visit_No
									AND		PV.Patient_ID = PVL.Patient_ID
									AND		PV.Shift_ID = PVL.Shift_ID
									AND		PV.Doctor_ID = PVL.Doctor_ID

									/* 1 2018-01-10 ************/

									INNER JOIN Doctor_Master DM ON DM.Doctor_ID = PVL.Doctor_ID

									/************ 1 */


									INNER JOIN Lab_Test_Master LM
									ON	PVL.Lab_Test_Description = LM.Lab_Test_Description
									AND LM.Doctor_ID = PVL.Doctor_ID

									/*
									LEFT JOIN 
									(
										 SELECT DISTINCT Lab_Test_Description FROM Lab_Test_Master
									) LM ON  LM.Lab_Test_Description = PVL.Lab_Test_Description
									*/
								

                                    
                        WHERE		
--							        PV.Doctor_ID  = @p_var_Doctor_Id AND
								     Status_ID = 5
						AND         PV.Delete_Flag = 0    
						AND			PVL.Delete_Flag = 0
						AND			PV.Reports_Asked = 1   
						AND			GT.Language_Id = @p_var_LanguageID
						AND			AT.Language_Id = @p_var_LanguageID 
                        and 	    PV.Visit_Date BETWEEN @p_var_fromdate AND @p_var_todate 
                )
				
				SELECT * from Patient_Visits_With_Lab 
				order by Visit_Date desc, Lab_Test_Description asc
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END




/****** Object:  StoredProcedure [dbo].[USP_Get_PatientPreviousVisitDetails]    Script Date: 25-Jan-18 5:21:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTest]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Lab Test Data Feom Lab_Test_Master
-- Created By : Nilesh Wani
-- Modified By: Varsha Khandre
--Modified On : 28 July 2017
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTest]
@p_var_Doctor_ID NVARCHAR(32)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		ID,Lab_Test_Description,Priority_Value
		  FROM			Lab_Test_Master 
		  WHERE			Doctor_ID=@p_var_Doctor_ID
		  ORDER BY		Priority_Value,Lab_Test_Description ASC	 
					
		SELECT	[Keyword]
		FROM	IPD_Keywords

		SELECT [Description],[Unit_Price]
		FROM   [dbo].[IPD_INVOICE_MEDICINEMASTER]
		WHERE  Delete_Flag=0
		ORDER BY	[SortOrder]

		SELECT	[Charges_Category],[Charges_SubCategory],[Charges_Category]+' * '+[Charges_SubCategory] AS Cat_SubCat
		FROM	[IPD_BillData_CHARGESMASTER] IPD
		WHERE	Delete_Flag=0
		ORDER BY	[SortOrder]

		SELECT	DISTINCT [Charges_Category]
		FROM	[IPD_BillData_CHARGESMASTER] IPD
		WHERE	Delete_Flag=0

		SELECT DISTINCT [Charges_SubCategory],[SortOrder],CAST(ISNULL([SortOrder],'') AS varchar(10))+'-'+[Charges_SubCategory] AS SUBVAL
		FROM	[IPD_SubCategory_CHARGESMASTER] IPD
		WHERE	Delete_Flag=0
		ORDER BY	[SortOrder]

			
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_LabSummary_For_DownloadReport]    Script Date: 16-Jan-18 8:07:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestAndParameter]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author     : INCRUST
-- Create date: 21-June-2016
-- Description: This stored procedure will Get The Lab Test And Parameter Data From Lab_Test_Parameter
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestAndParameter]
@p_var_DoctorID		NVARCHAR(32),
@p_var_LabTestId	NVARCHAR(100)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		LTP.ID,LTP.Lab_Test_ID,LTM.Lab_Test_Description,LTM.ID,LTP.Parameter_Name,Convert(varchar(100),LTP.ID)+'&&&'+Convert(varchar(100),LTP.Lab_Test_ID) as ConcatId
		  FROM			Lab_Test_Parameter LTP,Lab_Test_Master LTM  
		  WHERE			LTP.Doctor_ID=@p_var_DoctorID	AND
						LTM.Doctor_ID=@p_var_DoctorID	AND
						LTM.Lab_Test_Description=@p_var_LabTestId
				AND		LTP.Lab_Test_ID=LTM.ID;


		 SELECT			LTP.[Procedure_Description],LTP.[Procedure_Description],LTM.[Procedure_Description],LTM.[Procedure_Description],LTP.[Findings_Description],Convert(varchar(100),LTP.[Procedure_Description])+'&&&'+Convert(varchar(100),LTP.[Findings_Description]) as ConcatId
		  FROM			[dbo].[Doctor_Procedure_Findings] LTP,[dbo].[Doctor_Procedure_Master] LTM  
		  WHERE			LTP.Doctor_ID=@p_var_DoctorID	AND
						LTM.Doctor_ID=@p_var_DoctorID	AND
						LTM.[Procedure_Description]=@p_var_LabTestId
				AND		LTP.[Procedure_Description]=LTM.[Procedure_Description];
					
	  
		  
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_Get_LabTest]    Script Date: 16-Jan-18 8:07:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestDataForDeleteAppointment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date:23 Aug 16
-- Description:	Stored Procedure to get lab test details to delete patients appointment
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestDataForDeleteAppointment]
	@p_nvar_Patient_Id      NVARCHAR(32),
    @p_int_Patient_Visit_No INT,
    @p_nvar_Doctor_Id       NVARCHAR(30),
    @p_nvar_Clinic_Id       NVARCHAR(10),
    @P_nvar_Shift_Id        INT,
	@P_VisitDate			DateTime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   SELECT * FROM Patient_Visit_LabTestResults WHERE 
		Patient_ID = @p_nvar_Patient_Id
   AND	Patient_Visit_No = @p_int_Patient_Visit_No
   AND	Doctor_ID = @p_nvar_Doctor_Id
   AND	Clinic_ID = @p_nvar_Clinic_Id
   AND	Shift_ID = @P_nvar_Shift_Id
   AND	Visit_Date = @P_VisitDate
END

/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestAndParameter]    Script Date: 16-Jan-18 8:07:06 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Lab Test Data Feom Lab_Test_Master
-- Created By : Nilesh Wani
-- Modified By: Varsha Khandre
--Modified On : 28 July 2017
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestDetails]
@p_var_Patient_ID NVARCHAR(32)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

--set rowcount 10
--select distinct(pv.patient_visit_no),* 
--from Patient_Visit_LabTestResults pv 
--where Patient_ID = '02-05-2019-020964' group by pv.patient_visit_no order by pv.patient_visit_no desc


			set rowcount 10
			select distinct(patient_visit_no)  from Patient_Visit_LabTestResults where Patient_ID = @p_var_Patient_ID group by patient_visit_no order by patient_visit_no desc
			select Visit_Date,Lab_Test_Description from Patient_Visit_LabTestResults  where Patient_ID = @p_var_Patient_ID order by visit_date desc 

	
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_LabSummary_For_DownloadReport]    Script Date: 16-Jan-18 8:07:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestDetails1]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Lab Test Data Feom Lab_Test_Master
-- Created By : Nilesh Wani
-- Modified By: Varsha Khandre
--Modified On : 28 July 2017
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestDetails1]
@p_var_Patient_ID NVARCHAR(32)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

--set rowcount 10
--select distinct(pv.patient_visit_no),* 
--from Patient_Visit_LabTestResults pv 
--where Patient_ID = '02-05-2019-020964' group by pv.patient_visit_no order by pv.patient_visit_no desc


			set rowcount 10
			select distinct(Patient_Visit_No)  from Patient_Visit_LabTestResults where Patient_ID = @p_var_Patient_ID group by Patient_Visit_No order by Patient_Visit_No desc
			select Visit_Date,Lab_Test_Description,Patient_Visit_No from Patient_Visit_LabTestResults  where Patient_ID = @p_var_Patient_ID order by visit_date desc 

	
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestDetails12]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Lab Test Data Feom Lab_Test_Master
-- Created By : Nilesh Wani
-- Modified By: Varsha Khandre
--Modified On : 28 July 2017
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestDetails12]
@p_var_Patient_ID NVARCHAR(32)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

--set rowcount 10
--select distinct(pv.patient_visit_no),* 
--from Patient_Visit_LabTestResults pv 
--where Patient_ID = '02-05-2019-020964' group by pv.patient_visit_no order by pv.patient_visit_no desc
--select * from Patient_Visit_LabTestResults 
			

			set rowcount 10
			select distinct(Patient_Visit_No),Lab_Test_Description,Parameter_Name,Test_Parameter_Value, (CONVERT(VARCHAR(11),Visit_Date,106)) AS Visit_Date
			from Patient_Visit_LabTestResults 
			where Patient_ID = @p_var_Patient_ID
			--group by Patient_Visit_No 
			order by Patient_Visit_No desc


			--select Visit_Date,Patient_Visit_No,Lab_Test_Description from Patient_Visit_LabTestResults  where Patient_ID = @p_var_Patient_ID order by visit_date desc 
			--Changes done in Date Format 
			select Patient_Visit_No,Lab_Test_Description,Parameter_Name,Test_Parameter_Value,
             (CONVERT(VARCHAR(11),Visit_Date,106)) AS Visit_Date
            from Patient_Visit_LabTestResults  where Patient_ID = @p_var_Patient_ID order by visit_date desc 

	
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END



GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestID]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author     : INCRUST
-- Create date: 22-June-2016
-- Description: This stored procedure will Get The Lab Test Id Lab_Test_Master
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestID]
@p_var_DoctorID			NVARCHAR(30),
@p_var_LabTestDescription	NVARCHAR(80)

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT ID from Lab_Test_Master LTM
		  WHERE			LTM.Doctor_ID=@p_var_DoctorID	AND
						LTM.Lab_Test_Description=@p_var_LabTestDescription
				
					
	  
		  
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_Delete_AbdominalFindings]    Script Date: 16-Jan-18 7:49:06 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestParameter]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 15-June-2016
-- Description: This stored procedure will Get The Lab Test Data Feom Lab_Test_Master
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_LabTestParameter]
@p_var_DoctorID NVARCHAR(32),
@p_var_LabTestId NVARCHAR(80)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		LTP.ID,LTM.Lab_Test_Description,Parameter_Name
		  FROM			Lab_Test_Parameter LTP  LEFT JOIN Lab_Test_Master LTM ON LTP.Lab_Test_ID=LTM.ID 
						and LTP.Doctor_ID=LTM.Doctor_ID
		  WHERE			LTP.Doctor_ID=@p_var_DoctorID	AND
						LTM.Lab_Test_Description=@p_var_LabTestId
					
	  
		  
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END















/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintdata_PopUp]    Script Date: 15-Mar-18 8:02:19 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LastPatientVisitDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Visit Dates
-- Created By : Nilesh Wani
-- ===========================================================
CREATE PROCEDURE [dbo].[USP_Get_LastPatientVisitDate]
	@p_var_Patient_ID		 NVARCHAR(32),
	@p_var_Doctor_Id		 NVARCHAR(30),
	@p_var_Clinic_Id		 NVARCHAR(10),
	@p_var_Status_ID		 TINYINT,
	@p_var_Shift_ID		 TINYINT

AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		
		
		;WITH PreviousVisits AS 
             (
                    SELECT    PV.Visit_Date,PV.Patient_ID,PV.Patient_Visit_No,PV.Status_ID,PV.Visit_Time,PV.Shift_ID,
                    ROW_NUMBER() OVER (  PARTITION BY Patient_ID ,Visit_Date ORDER BY        PV.Shift_ID DESC ) AS ROWNUM,
                    SM.Description AS ShiftDescription,LEFT(SM.Description,1) AS ShiftDesc
                    FROM           Patient_Visits PV
                    INNER JOIN [dbo].[Shift_Master] SM
                    ON PV.Shift_ID = SM.Shift_ID
                    WHERE          Patient_ID = @p_var_Patient_ID
                    AND                   Doctor_ID  = @p_var_Doctor_Id 
                    AND                   Visit_Date != GETDATE()        
                    AND                   Status_ID = 5 
                    AND                   Delete_Flag = 0                                      
                    
             )

             SELECT  Visit_Date , replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) AS Visit_DateTime,
             Patient_ID,Patient_Visit_No,Shift_id, Status_ID,ShiftDescription,CONVERT(VARCHAR(11),Visit_Date,106) as PrevDate,ShiftDesc
             FROM PreviousVisits  
             ORDER BY      Visit_Date DESC, ROWNUM, Visit_time DESC



		SELECT  TOP 1  Visit_Date,Patient_ID,Patient_Visit_No,Status_ID,Visit_Time,Shift_ID,CONVERT(VARCHAR(11),Visit_Date,106) as PrevDate
			FROM		  Patient_Visits
			WHERE		  Patient_ID = @p_var_Patient_ID 
			AND			  Doctor_ID  = @p_var_Doctor_Id 
			AND			  Clinic_ID  = @p_var_Clinic_Id 
		    AND	
					  Visit_Date <= GETDATE()
			AND			  Status_ID = 5 
			AND			  Delete_Flag = 0						  
			ORDER BY      Visit_Date DESC, Visit_time DESC
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END














/****** Object:  StoredProcedure [dbo].[USP_Get_LabTestParameter]    Script Date: 16-Jan-18 8:07:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LastVisitNo]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  14-Mar-2016
-- Description  :  This stored procedure will Get Last VisitNo.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_LastVisitNo]
	@p_nvar_Patient_Id   nvarchar(32)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
			SELECT  
					Patient_Last_Visit_No
			  FROM  Patient_Master
             WHERE
                    ID=@p_nvar_Patient_Id  
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END

















/****** Object:  StoredProcedure [dbo].[USP_Get_LastPatientVisitDate]    Script Date: 16-Jan-18 8:07:14 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LoginDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12-Mar-2016
-- Description	:	This stored procedure will validate the user and password.
--					If not a valid user will return 0 else will return 1   
-- created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_LoginDetails]
	@p_nvar_Login_Id	NVARCHAR(60),
	@p_nvar_Password	NVARCHAR(100),
	@P_nvar_TodaysDay	NVARCHAR(20),
	@P_nvar_Language_Id INT
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @DOCTOR_ID NVARCHAR(30);

	BEGIN TRY
		IF EXISTS 
		(	
			SELECT  Login_Id,
					Password,
					Role_Name 
			FROM	User_Role UR join 
					Role_Master RM on RM.Role_Id=UR.Role_Id join 
					User_Master UM on UR.User_ID=UM.ID 
			WHERE	Login_Id = @p_nvar_Login_Id 
			AND		Password = @p_nvar_Password  COLLATE SQL_Latin1_General_CP1_CS_AS
		)
		BEGIN

			SELECT 1 AS LOGIN_STATUS;


			SELECT  UM.ID,
					DM.Doctor_ID,
					CM.Clinic_ID,
					UM.Login_Id,
					UM.First_Name,
					UM.Password,
					RM.Role_Name,
					RM.Role_Id,
					ISNULL(DM.First_Name,'') +' '+ ISNULL(DM.Middle_Name,'') +' '+ ISNULL(DM.Last_Name,'') as 'DoctorName', 
					CM.Clinic_Name,
					UM.Language_Id,
					UM.Is_Active,
					
					
					CASE WHEN DatePart(Month, Getdate()) >= 4
			            THEN DatePart(Year, Getdate()) + 1 
						ELSE DatePart(Year, Getdate()) END	AS Financial_Year,
						DMO.Model_ID,MCP.Config_ID,MCP.IS_Enabled
				   


				  FROM		User_Master UM
			INNER JOIN 		User_Role UR
					ON		UM.ID=UR.User_ID 
			INNER JOIN		Role_Master RM
					ON		UR.Role_Id=RM.Role_Id
			INNER JOIN		Doctor_Master DM
					ON		UM.Doctor_ID=DM.Doctor_ID
			INNER JOIN		Clinic_Master CM
					ON		DM.Doctor_ID=CM.Doctor_ID AND 
							UR.[Clinic_ID] = CM.Clinic_ID
			INNER JOIN		Language_Master LM
					ON		UM.Language_Id=LM.Language_Id
			INNER JOIN		Doctor_Model DMO
				    ON		--DMO.Doctor_ID = DM.Doctor_ID AND
							DMO.Clinic_ID =  CM.Clinic_ID
			INNER JOIN		Model M
					ON		DMO.Model_ID = M.Model_ID
			LEFT JOIN		Model_Config_Params MCP
					ON		M.Model_ID = MCP.Model_ID
			LEFT JOIN		System_Params SP
					ON		SP.Doctor_ID=DM.Doctor_ID			
			
			WHERE	UM.Login_Id = @p_nvar_Login_Id 
			AND		UM.Language_Id=@P_nvar_Language_Id 
			AND		UR.Is_Default_Clinic = 1;

			
			
			;WITH  ShifTimes As 
			(  SELECT	SM.Shift_ID,                         
							SM.Description+' - '+SM.Shift_Day+' - '+
							LEFT(CONVERT(NVARCHAR(255),SM.Start_Time,108),2)+' - '+LEFT(CONVERT(NVARCHAR(255),SM.End_Time,108),2) as 
							'Description',

							CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
								+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 108))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
								+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 108))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
								+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 108)))
								END DiffInHours

					FROM
							Shift_Master SM, 
							Doctor_Clinic_Shift DCS,
							Clinic_Master CM,
							Doctor_Master DM
					WHERE
							SM.Shift_Day=@P_nvar_TodaysDay AND	
							SM.Shift_ID=DCS.Shift_ID AND
							DCS.Clinic_ID=CM.Clinic_ID AND
							DCS.Doctor_ID=CM.Doctor_ID AND
							DCS.Doctor_ID = DM.Doctor_ID
			)
			SELECT Shift_ID, Description FROM ShifTimes		
			ORDER BY DiffInHours ASC		


		    SELECT  Role_ID, Role_Name
			FROM    Role_Master 
			WHERE   Role_Name 
			NOT IN	
		   (SELECT  RM.Role_Name
			FROM	User_Master UM, 
					User_Role UR, 
					Role_Master RM, 
					Doctor_Master DM, 
					Clinic_Master CM,
					Language_Master LM
			WHERE	UM.ID=UR.User_ID 
			AND     UR.Role_Id=RM.Role_Id 
			AND		UM.Doctor_ID=DM.Doctor_ID 
			AND		DM.Doctor_ID=CM.Doctor_ID 
			--AND		UM.Default_Clinic_ID=CM.Clinic_ID 
			AND		UM.Language_Id=LM.Language_Id 
			AND		UM.Login_Id = @p_nvar_Login_Id 
			AND		UM.Language_Id=@P_nvar_Language_Id 
			)
				
			
			  
			SELECT * FROM System_Params SP

			LEFT JOIN		Doctor_Master DM
			ON		SP.Doctor_ID=DM.Doctor_ID

			INNER JOIN  Clinic_Master CM
			ON	SP.Clinic_ID = CM.Clinic_ID
			AND	SP.Doctor_ID = CM.Doctor_ID

			INNER JOIN User_Master UM
			ON SP.Doctor_ID = UM.Doctor_ID
			AND SP.Clinic_ID = UM.Clinic_ID

			WHERE	UM.Login_Id = @p_nvar_Login_Id
			AND		UM.Language_Id=@P_nvar_Language_Id 



			--SELECT * FROM [dbo].[User_Master] UM
			--inner JOIN		Doctor_Master DM
			--ON		UM.Doctor_ID=DM.Doctor_ID
			--where Login_Id=@p_nvar_Login_Id

			SELECT Doctor_ID from System_Params




			IF EXISTS(SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[License_Key]') AND type in (N'U'))

			BEGIN
				SELECT ISNULL(License_Key,'') AS License_Key FROM License_Key LK
				
			END
			

			

			      SELECT * FROM [dbo].[User_Master] UM
				inner JOIN		Doctor_Master DM
				ON		UM.Doctor_ID=DM.Doctor_ID
				where Login_Id=@p_nvar_Login_Id


				
			 
		END 
		ELSE
			SELECT 0 AS LOGIN_STATUS;
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_LastVisitNo]    Script Date: 16-Jan-18 8:07:18 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_LoginUserBackup]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12-Mar-2016
-- Description	:	This stored procedure will validate the user and password.
--					If not a valid user will return 0 else will return 1   
-- created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_LoginUserBackup]
	@p_nvar_Login_Id	NVARCHAR(1000)
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
		
		

				IF EXISTS 
				(

			      SELECT * FROM [dbo].[User_Master] UM
				where Login_Id=@p_nvar_Login_Id
				)
				BEGIN
				SELECT 1 AS LOGIN_STATUS;

				 SELECT * FROM [dbo].[User_Master] UM
				where Login_Id=@p_nvar_Login_Id
		

				
			 
		END 
		ELSE
			SELECT 0 AS LOGIN_STATUS;
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ======================================================================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- ======================================================================================

 CREATE PROCEDURE [dbo].[USP_Get_MasterLists]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_int_patientVisitNo		INT
	


 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
	

		SELECT  PV.Weight_IN_KGS,
		PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,
		PV.Asthama,PV.Hypertension,PV.Diabetes,PV.Cholestrol,
		PV.IHD,PV.TH,PV.Instructions,PV.Fees_To_Collect,
	          PV.Diabetes,PV.Cholestrol,PV.Fees_To_Collect,
			  PV.Instructions,PV.Patient_Visit_No,
			  Pv.Status_ID,PV.Smoking,PV.Tobaco,PV.Alchohol,
			  PV.Habits_Comments,PV.Allergy_dtls,PV.Discount        
      FROM	  Patient_Visits PV 
	  INNER JOIN Patient_Master PM ON	  pv.Patient_ID	=	PM.ID   
	                        
      WHERE	  PV.Patient_ID			=	@p_nvar_Patient_Id	
	  AND	  PV.Shift_ID			=   @p_tint_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_nvar_Clinic_ID    
      AND     PV.Doctor_ID			=   @p_nvar_Doctor_ID 
	  AND	  PV.Visit_Date			=	@p_date_TodyasVisitDate
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
	  AND     PV.Delete_Flag		= 0 




	  
	SELECT   Short_Description+' '+':'+' '+Complaint_Description  AS Symptoms_Description,Short_Description+'*'+Complaint_Description  AS ID,Complaint_Description,
			 ISNULL([Complaint_Comment],'') AS Complaint_Comment
     FROM     Visit_Complaints VC

     WHERE    VC.Patient_ID			=	@p_nvar_Patient_Id	   
	 AND	  VC.Shift_ID			=   @p_tint_Shift_Id			
	 AND	  VC.Clinic_ID			=   @p_nvar_Clinic_ID	    
	 AND	  VC.Doctor_ID			=   @p_nvar_Doctor_ID   
	 AND	  VC.Visit_Date			=	@p_date_TodyasVisitDate
	 AND	  VC.Patient_Visit_No	=	@p_int_patientVisitNo
	 AND      VC.Delete_Flag		=   0 
    
		SELECT   Short_Description+' '+':'+' '+Desease_Description AS Diagnosis_Description, Short_Description+'*'+Desease_Description AS ID,Desease_Description
     FROM     Visit_Diagnosis VD
     WHERE    VD.Patient_ID			=	@p_nvar_Patient_Id	    
	 AND	  VD.Shift_ID			=   @p_tint_Shift_Id			
	 AND	  VD.Clinic_ID			=   @p_nvar_Clinic_ID	    
	 AND	  VD.Doctor_ID			=   @p_nvar_Doctor_ID 
	 AND	  VD.Visit_Date			=	@p_date_TodyasVisitDate
	 AND	  VD.Patient_Visit_No	=	@p_int_patientVisitNo
	 AND      VD.Delete_Flag		=   0 	     
     
		SELECT   Dressing_Description,Dressing_Description as Short_Description ,Dressing_Description as LongDressing_Description--, substring(Dressing_Description, 1, CHARINDEX(':',Dressing_Description)-1) Short_Description,
								--substring(Dressing_Description, CHARINDEX(':',Dressing_Description)+1, LEN(Dressing_Description)) LongDressing_Description
     FROM     Visit_Dressing  DD
     WHERE    DD.Patient_ID			=	@p_nvar_Patient_Id	    
	 AND	  DD.Shift_ID			=   @p_tint_Shift_Id			
	 AND	  DD.Clinic_ID			=   @p_nvar_Clinic_ID	    
	 AND	  DD.Doctor_ID			=   @p_nvar_Doctor_ID   
	 AND	  DD.Visit_Date			=	@p_date_TodyasVisitDate
	 AND	  DD.Patient_Visit_No	=	@p_int_patientVisitNo
	 AND      DD.Delete_Flag		=   0 	     	  


	
		IF EXISTS( SELECT VM.Short_Description +' '+':'+' '+VM.Medicine_Description AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,REPLACE(Short_Description, '''', '') AS MED_REPLACE
				 FROM	  Visit_Medicine_Overwrite VM INNER JOIN Patient_Visits PV
				 ON		  VM.Patient_ID=PV.Patient_ID
				 WHERE    VM.Patient_ID			=	@p_nvar_Patient_Id	
				 AND	  VM.Shift_ID			=   @p_tint_Shift_Id		
				 AND	  VM.Clinic_ID			=   @p_nvar_Clinic_ID	
				 AND	  VM.Doctor_ID			=   @p_nvar_Doctor_ID   
				 AND	  VM.Visit_Date			=	@p_date_TodyasVisitDate
				 AND	  VM.Patient_Visit_No	=	@p_int_patientVisitNo
				 AND      PV.Status_ID			=	5
				 AND      VM.Delete_Indicator	=   0 	
				 AND      VM.Delete_Flag		=   0
				)
				BEGIN
					 SELECT   VM.Short_Description +' '+':'+' '+VM.Medicine_Description AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,REPLACE(Short_Description, '''', '') AS MED_REPLACE
					 FROM	  Visit_Medicine_Overwrite VM
					 WHERE    VM.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VM.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VM.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VM.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VM.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VM.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VM.Delete_Indicator	=   0 	
					 AND      VM.Delete_Flag		=	0
				END
				ELSE
				BEGIN
					 SELECT   VM.Short_Description --+' '+':'+' '+VM.Medicine_Description 
					          AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,REPLACE(Short_Description, '''', '') AS MED_REPLACE
					 FROM	  Visit_Medicine VM
					 WHERE    VM.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VM.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VM.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VM.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VM.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VM.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VM.Delete_Flag		=   0 	     
			    END

		IF EXISTS(  
		SELECT   VP.Medicine_Name+' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace ,'' as Generic_Name

					 FROM	  Visit_Prescription_Overwrite VP  INNER JOIN Patient_Visits PV
					 ON		  VP.Patient_ID=PV.Patient_ID
				     WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      PV.Status_ID			=	5
					 AND      VP.Delete_Indicator   =   0 	 
					 AND      VP.Delete_Flag		=	0
				)
				BEGIN
					 SELECT   VP.Medicine_Name-- +' '+':'+' '+VP.Brand_Name
					  AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name

					 FROM	  Visit_Prescription_Overwrite VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator	=   0 	 
					 AND      VP.Delete_Flag		=	0
					 order by Sequence_Id  
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name

					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 	
					 order by Sequence_Id       
			    END
			 
			 
		SELECT   Lab_Test_Description as ID
			 FROM     Patient_Visit_LabTestAsked PVL  
			 WHERE    PVL.Patient_ID		=	@p_nvar_Patient_Id	
			 AND	  PVL.Shift_ID			=   @p_tint_Shift_Id		
			 AND	  PVL.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND	  PVL.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND	  PVL.Visit_Date		=	@p_date_TodyasVisitDate
			 AND	  PVL.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND      PVL.Delete_Flag		=   0
	 

		;WITH MaxDateTime AS 
	(
			SELECT  ROW_NUMBER() OVER (PARTITION BY Patient_ID ORDER BY VISIT_DATE DESC , VISIT_TIME DESC )  AS ROWNUM,
			Patient_Visit_No FROM Patient_Visits  where Patient_Visit_No < @p_int_patientVisitNo AND 
			Patient_ID			=	@p_nvar_Patient_Id
		AND Doctor_ID		=   @p_nvar_Doctor_ID  
		AND Delete_Flag		= 0 
	),
	LastVisitNo AS 
	(
		SELECT ROWNUM,Patient_Visit_No FROM MaxDateTime WHERE ROWNUM = 1
	)
		 SELECT TOP 1 PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,PV.Asthama,PV.Hypertension,PV.Diabetes,PV.Cholestrol,PV.IHD,PV.TH,PV.Instructions,PV.Fees_To_Collect,
	          PV.Diabetes,PV.Cholestrol,PV.Fees_To_Collect,PV.Instructions,PV.Patient_Visit_No,Pv.Status_ID,PV.Smoking,PV.Tobaco,PV.Alchohol,PV.Habits_Comments,PV.Allergy_dtls     
      FROM	  Patient_Visits PV INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID	=	PM.ID     
	  LEFT JOIN     LastVisitNo LVN ON  PV.Patient_Visit_No = LVN.Patient_Visit_No                 
      WHERE	  PV.Patient_ID			=	@p_nvar_Patient_Id	
	 
      AND     PV.Doctor_ID			=   @p_nvar_Doctor_ID 
	
	  --AND	  PV.Patient_Visit_No	=	@p_int_visit_no
	  AND     PV.Delete_Flag		= 0 
	  ORDER BY PV.Patient_Visit_No DESC


		SELECT		Procedure_Description,Findings_Description,[Findings_Comment],Procedure_Description AS PRO_REPLACE,Findings_Description AS FIND_REPLACE
			FROM		Visit_Procedure_Findings VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0

		

		SELECT		[Group_Description],[Instructions_Description],Sequence_No
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_nvar_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VGI.Visit_Date			=	@p_date_TodyasVisitDate
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo
			 ORDER BY VGI.Group_Description,VGI.Sequence_No


		SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			  AND		VGI.Patient_Visit_No			= @p_int_patientVisitNo

		SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			  AND		VGI.Patient_Visit_No			= @p_int_patientVisitNo
			 AND		VGI.Receipt_Type != 'L'

		SELECT [Fees_Collected]

		FROM	[dbo].[Patient_Payments_AdHoc] PPA

		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			 AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
			 AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
			 AND		PPA.[Shift_ID]								=	@p_tint_Shift_Id

		SELECT   Lab_Test_Description as ID
		FROM  [dbo].[Patient_Visit_LabTestResults]    PVL  

		WHERE    PVL.Patient_ID		=	@p_nvar_Patient_Id	
		AND	  PVL.Shift_ID			=   @p_tint_Shift_Id		
		AND	  PVL.Clinic_ID			=   @p_nvar_Clinic_ID	
		AND	  PVL.Doctor_ID			=   @p_nvar_Doctor_ID 
		AND	  PVL.Visit_Date		=	@p_date_TodyasVisitDate
		AND	  PVL.Patient_Visit_No	=	@p_int_patientVisitNo
		AND      PVL.Delete_Flag		=   0


		IF EXISTS(

			SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
			FROM	 [dbo].[Patient_Visit_BillingInfoOverwrite]  PVB
			WHERE   PVB.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		PVB.[Shift_ID]			=   @p_tint_Shift_Id		
			AND		PVB.[Clinic_ID]			=   @p_nvar_Clinic_ID	
			AND		PVB.[Doctor_ID]			=   @p_nvar_Doctor_ID 
			--AND		PVB.[Visit_Date]		=	@p_date_TodyasVisitDate
			--AND		PVB.[Delete_Flag]		=   0
			AND		PVB.Patient_Visit_No	=	@p_int_patientVisitNo
		)

		BEGIN

			SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
			FROM	 [dbo].[Patient_Visit_BillingInfoOverwrite]  PVB
			WHERE   PVB.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		PVB.[Shift_ID]			=   @p_tint_Shift_Id		
			AND		PVB.[Clinic_ID]			=   @p_nvar_Clinic_ID	
			AND		PVB.[Doctor_ID]			=   @p_nvar_Doctor_ID 
			--AND		PVB.[Visit_Date]			=	@p_date_TodyasVisitDate
			AND		PVB.[Delete_Flag]		=   0
			AND		PVB.Patient_Visit_No	=	@p_int_patientVisitNo

		END

		ELSE

		BEGIN

		SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
		FROM   [dbo].[Patient_Visit_BillingInfo]   PVB
		WHERE   PVB.[Patient_ID]			=	@p_nvar_Patient_Id	
		--AND		PVB.[Shift_ID]			=   @p_tint_Shift_Id		
		AND		PVB.[Clinic_ID]			=   @p_nvar_Clinic_ID	
		AND		PVB.[Doctor_ID]			=   @p_nvar_Doctor_ID 
	    --	AND		PVB.[Visit_Date]			=	@p_date_TodyasVisitDate
		--AND		PVB.[Delete_Flag]		=   0
		AND		PVB.Patient_Visit_No	=	@p_int_patientVisitNo

		END

		SELECT DISTINCT 1 AS TABLE0, [Step_No],[Advised_Details],[Notation_Sequence1],[Notation_Sequence2],
								[Notation_Sequence3],[Notation_Sequence4],REPLACE(CONVERT(NVARCHAR, Advised_Date, 106), ' ', '-') AS Advised_Date,
								[Treatment_Plan_Status_ID],[Comments]
			FROM		Dentist_Patient_TreatmentPlan PVL

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Delete_Flag = 0

		SELECT DISTINCT 1 AS TABLE1, [Step_No],[Detail_Step_No],[Actual_Treatment],[Remarks]
			FROM		[dbo].[Dentist_Patient_TreatmentPlanDetails] PVL

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Delete_Flag = 0


		SELECT		[Category_Description],Findings_Description,Category_Description+'*'+Findings_Description AS ID
			FROM	[dbo].[Visit_Abdominal_Examination_Findings] VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0
			 --AND		VPF.Category_Description = 'PA'


		SELECT		[Category_Description],Findings_Description,Category_Description+'*'+Findings_Description AS ID
			FROM	[dbo].[Visit_Abdominal_Examination_Findings] VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0
			 AND		VPF.Category_Description = 'PV'
			 
		SELECT		[Category_Description],Findings_Description,Category_Description+'*'+Findings_Description AS ID
			FROM	[dbo].[Visit_Abdominal_Examination_Findings] VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0
			 AND		VPF.Category_Description = 'PS' 


			 SELECT   Balance_Details,Balance_Group_Name,Balance_Subgroup_Name,Balance_Group_Name+'*'+Balance_Subgroup_Name+'*'+Balance_Details AS Balance_ID,[Balance_comment]
		FROM   [dbo].[Patient_Visit_Balanceinfo]   PVBI
		WHERE   PVBI.[Patient_ID]			=	@p_nvar_Patient_Id	
		AND		PVBI.[Shift_ID]			    =    @p_tint_Shift_Id		
		AND		PVBI.[Clinic_ID]			=   @p_nvar_Clinic_ID	
		AND		PVBI.[Doctor_ID]			=   @p_nvar_Doctor_ID 
		--AND		PVBI.[Visit_Date]			=	@p_date_TodyasVisitDate
		AND		PVBI.[Delete_Flag]		=   0
		AND		PVBI.Patient_Visit_No	=	@p_int_patientVisitNo

			IF EXISTS(  SELECT   VP.Medicine_Name+' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,VP.Brand_Name as Generic_Name
					 FROM	  Visit_Prescription_Overwrite VP  INNER JOIN Patient_Visits PV
					 ON		  VP.Patient_ID=PV.Patient_ID
				     WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      PV.Status_ID			=	5
					 AND      VP.Delete_Indicator   =   0 	 
					 AND      VP.Delete_Flag		=	0
				)
				BEGIN
					 SELECT   VP.Medicine_Name-- +' '+':'+' '+VP.Brand_Name
					  AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,+' '+'('+' '+VP.Brand_Name +' )'  as Generic_Name
					 FROM	  Visit_Prescription_Overwrite VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator	=   0 	 
					 AND      VP.Delete_Flag		=	0
					 order by Sequence_Id  
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,+' '+'('+' '+VP.Brand_Name +' )'  as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 	
					 order by Sequence_Id       
			    END
			 
			IF EXISTS(  
		SELECT   VP.Medicine_Name+' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace ,'' as Generic_Name,
		CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription_Overwrite VP  INNER JOIN Patient_Visits PV
					 ON		  VP.Patient_ID=PV.Patient_ID
				     WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      PV.Status_ID			=	5
					 AND      VP.Delete_Indicator   =   0 	 
					 AND      VP.Delete_Flag		=	0
				)
				BEGIN
					 SELECT   VP.Medicine_Name-- +' '+':'+' '+VP.Brand_Name
					  AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name,
					  CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription_Overwrite VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator	=   0 	 
					 AND      VP.Delete_Flag		=	0
					 order by Sequence_Id  
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name,
					 CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days

					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 	
					 order by Sequence_Id       
			    END 



   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END







/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor]    Script Date: 28-Feb-18 4:00:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ======================================================================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- ======================================================================================

 CREATE PROCEDURE [dbo].[USP_Get_MasterLists_Services]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_int_patientVisitNo		INT
	


 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
	

		SELECT  PV.Weight_IN_KGS,
		PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,
		PV.Asthama,PV.Hypertension,PV.Diabetes,PV.Cholestrol,
		PV.IHD,PV.TH,PV.Instructions,PV.Fees_To_Collect,
	          PV.Diabetes,PV.Cholestrol,PV.Fees_To_Collect,
			  PV.Instructions,PV.Patient_Visit_No,
			  Pv.Status_ID,PV.Smoking,PV.Tobaco,PV.Alchohol,
			  PV.Habits_Comments,PV.Allergy_dtls,PV.Discount     
      FROM	  Patient_Visits_Services PV 
	  INNER JOIN Patient_Master PM ON	  pv.Patient_ID	=	PM.ID   
	                        
      WHERE	  PV.Patient_ID			=	@p_nvar_Patient_Id	
	  AND	  PV.Shift_ID			=   @p_tint_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_nvar_Clinic_ID    
      AND     PV.Doctor_ID			=   @p_nvar_Doctor_ID 
	  AND	  PV.Visit_Date			=	@p_date_TodyasVisitDate
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
	  AND     PV.Delete_Flag		= 0 



	  
	SELECT   Short_Description+' '+':'+' '+Complaint_Description  AS Symptoms_Description,Short_Description+'*'+Complaint_Description  AS ID,Complaint_Description,
			 ISNULL([Complaint_Comment],'') AS Complaint_Comment
     FROM     Visit_Complaints VC

     WHERE    VC.Patient_ID			=	@p_nvar_Patient_Id	   
	 AND	  VC.Shift_ID			=   @p_tint_Shift_Id			
	 AND	  VC.Clinic_ID			=   @p_nvar_Clinic_ID	    
	 AND	  VC.Doctor_ID			=   @p_nvar_Doctor_ID   
	 AND	  VC.Visit_Date			=	@p_date_TodyasVisitDate
	 AND	  VC.Patient_Visit_No	=	@p_int_patientVisitNo
	 AND      VC.Delete_Flag		=   0 
    
		SELECT   Short_Description+' '+':'+' '+Desease_Description AS Diagnosis_Description, Short_Description+'*'+Desease_Description AS ID,Desease_Description
     FROM     Visit_Diagnosis VD
     WHERE    VD.Patient_ID			=	@p_nvar_Patient_Id	    
	 AND	  VD.Shift_ID			=   @p_tint_Shift_Id			
	 AND	  VD.Clinic_ID			=   @p_nvar_Clinic_ID	    
	 AND	  VD.Doctor_ID			=   @p_nvar_Doctor_ID 
	 AND	  VD.Visit_Date			=	@p_date_TodyasVisitDate
	 AND	  VD.Patient_Visit_No	=	@p_int_patientVisitNo
	 AND      VD.Delete_Flag		=   0 	     
     
		SELECT   Dressing_Description,Dressing_Description as Short_Description ,Dressing_Description as LongDressing_Description--, substring(Dressing_Description, 1, CHARINDEX(':',Dressing_Description)-1) Short_Description,
								--substring(Dressing_Description, CHARINDEX(':',Dressing_Description)+1, LEN(Dressing_Description)) LongDressing_Description
     FROM     Visit_Dressing  DD
     WHERE    DD.Patient_ID			=	@p_nvar_Patient_Id	    
	 AND	  DD.Shift_ID			=   @p_tint_Shift_Id			
	 AND	  DD.Clinic_ID			=   @p_nvar_Clinic_ID	    
	 AND	  DD.Doctor_ID			=   @p_nvar_Doctor_ID   
	 AND	  DD.Visit_Date			=	@p_date_TodyasVisitDate
	 AND	  DD.Patient_Visit_No	=	@p_int_patientVisitNo
	 AND      DD.Delete_Flag		=   0 	     	  


	
		IF EXISTS( SELECT VM.Short_Description +' '+':'+' '+VM.Medicine_Description AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,REPLACE(Short_Description, '''', '') AS MED_REPLACE
				 FROM	  Visit_Medicine_Overwrite VM INNER JOIN Patient_Visits_Services PV
				 ON		  VM.Patient_ID=PV.Patient_ID
				 WHERE    VM.Patient_ID			=	@p_nvar_Patient_Id	
				 AND	  VM.Shift_ID			=   @p_tint_Shift_Id		
				 AND	  VM.Clinic_ID			=   @p_nvar_Clinic_ID	
				 AND	  VM.Doctor_ID			=   @p_nvar_Doctor_ID   
				 AND	  VM.Visit_Date			=	@p_date_TodyasVisitDate
				 AND	  VM.Patient_Visit_No	=	@p_int_patientVisitNo
				 AND      PV.Status_ID			=	5
				 AND      VM.Delete_Indicator	=   0 	
				 AND      VM.Delete_Flag		=   0
				)
				BEGIN
					 SELECT   VM.Short_Description +' '+':'+' '+VM.Medicine_Description AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,REPLACE(Short_Description, '''', '') AS MED_REPLACE
					 FROM	  Visit_Medicine_Overwrite VM
					 WHERE    VM.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VM.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VM.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VM.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VM.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VM.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VM.Delete_Indicator	=   0 	
					 AND      VM.Delete_Flag		=	0
				END
				ELSE
				BEGIN
					 SELECT   VM.Short_Description --+' '+':'+' '+VM.Medicine_Description 
					          AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,REPLACE(Short_Description, '''', '') AS MED_REPLACE
					 FROM	  Visit_Medicine VM
					 WHERE    VM.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VM.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VM.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VM.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VM.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VM.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VM.Delete_Flag		=   0 	     
			    END

		IF EXISTS(  
		SELECT   VP.Medicine_Name+' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace ,'' as Generic_Name

					 FROM	  Visit_Prescription_Overwrite VP  INNER JOIN Patient_Visits_Services PV
					 ON		  VP.Patient_ID=PV.Patient_ID
				     WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      PV.Status_ID			=	5
					 AND      VP.Delete_Indicator   =   0 	 
					 AND      VP.Delete_Flag		=	0
				)
				BEGIN
					 SELECT   VP.Medicine_Name-- +' '+':'+' '+VP.Brand_Name
					  AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name

					 FROM	  Visit_Prescription_Overwrite VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator	=   0 	 
					 AND      VP.Delete_Flag		=	0
					 order by Sequence_Id  
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name

					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 	
					 order by Sequence_Id       
			    END
			 
			 
		SELECT   Lab_Test_Description as ID
			 FROM     Patient_Visit_LabTestAsked PVL  
			 WHERE    PVL.Patient_ID		=	@p_nvar_Patient_Id	
			 AND	  PVL.Shift_ID			=   @p_tint_Shift_Id		
			 AND	  PVL.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND	  PVL.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND	  PVL.Visit_Date		=	@p_date_TodyasVisitDate
			 AND	  PVL.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND      PVL.Delete_Flag		=   0
	 

		;WITH MaxDateTime AS 
	(
			SELECT  ROW_NUMBER() OVER (PARTITION BY Patient_ID ORDER BY VISIT_DATE DESC , VISIT_TIME DESC )  AS ROWNUM,
			Patient_Visit_No FROM Patient_Visits_Services  where Patient_Visit_No < @p_int_patientVisitNo AND 
			Patient_ID			=	@p_nvar_Patient_Id
		AND Doctor_ID		=   @p_nvar_Doctor_ID  
		AND Delete_Flag		= 0 
	),
	LastVisitNo AS 
	(
		SELECT ROWNUM,Patient_Visit_No FROM MaxDateTime WHERE ROWNUM = 1
	)
		 SELECT TOP 1 PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,PV.Asthama,PV.Hypertension,PV.Diabetes,PV.Cholestrol,PV.IHD,PV.TH,PV.Instructions,PV.Fees_To_Collect,
	          PV.Diabetes,PV.Cholestrol,PV.Fees_To_Collect,PV.Instructions,PV.Patient_Visit_No,Pv.Status_ID,PV.Smoking,PV.Tobaco,PV.Alchohol,PV.Habits_Comments,PV.Allergy_dtls     
      FROM	  Patient_Visits PV INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID	=	PM.ID     
	  LEFT JOIN     LastVisitNo LVN ON  PV.Patient_Visit_No = LVN.Patient_Visit_No                 
      WHERE	  PV.Patient_ID			=	@p_nvar_Patient_Id	
	 
      AND     PV.Doctor_ID			=   @p_nvar_Doctor_ID 
	
	  --AND	  PV.Patient_Visit_No	=	@p_int_visit_no
	  AND     PV.Delete_Flag		= 0 
	  ORDER BY PV.Patient_Visit_No DESC


		SELECT		Procedure_Description,Findings_Description,[Findings_Comment],Procedure_Description AS PRO_REPLACE,Findings_Description AS FIND_REPLACE
			FROM		Visit_Procedure_Findings VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0

		

		SELECT		[Group_Description],[Instructions_Description],Sequence_No
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_nvar_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VGI.Visit_Date			=	@p_date_TodyasVisitDate
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo
			 ORDER BY VGI.Group_Description,VGI.Sequence_No


		SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			  AND		VGI.Patient_Visit_No			= @p_int_patientVisitNo

		SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			  AND		VGI.Patient_Visit_No			= @p_int_patientVisitNo
			 AND		VGI.Receipt_Type != 'L'

		SELECT [Fees_Collected]

		FROM	[dbo].[Patient_Payments_AdHoc] PPA

		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			 AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
			 AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
			 AND		PPA.[Shift_ID]								=	@p_tint_Shift_Id

		SELECT   Lab_Test_Description as ID
		FROM  [dbo].[Patient_Visit_LabTestResults]    PVL  

		WHERE    PVL.Patient_ID		=	@p_nvar_Patient_Id	
		AND	  PVL.Shift_ID			=   @p_tint_Shift_Id		
		AND	  PVL.Clinic_ID			=   @p_nvar_Clinic_ID	
		AND	  PVL.Doctor_ID			=   @p_nvar_Doctor_ID 
		AND	  PVL.Visit_Date		=	@p_date_TodyasVisitDate
		AND	  PVL.Patient_Visit_No	=	@p_int_patientVisitNo
		AND      PVL.Delete_Flag		=   0


		IF EXISTS(

			SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
			FROM	 [dbo].[Patient_Visit_Services_BillingInfoOverwrite]  PVB
			WHERE   PVB.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		PVB.[Shift_ID]			=   @p_tint_Shift_Id		
			AND		PVB.[Clinic_ID]			=   @p_nvar_Clinic_ID	
			--AND		PVB.[Doctor_ID]			=   @p_nvar_Doctor_ID --Changed
			--AND		PVB.[Visit_Date]		=	@p_date_TodyasVisitDate
			--AND		PVB.[Delete_Flag]		=   0
			AND		PVB.Patient_Visit_No	=	@p_int_patientVisitNo
		)

		BEGIN

			SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
			FROM	 [dbo].[Patient_Visit_Services_BillingInfoOverwrite]  PVB
			WHERE   PVB.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		PVB.[Shift_ID]			=   @p_tint_Shift_Id		
			AND		PVB.[Clinic_ID]			=   @p_nvar_Clinic_ID	
			--AND		PVB.[Doctor_ID]			=   @p_nvar_Doctor_ID  --Changed
			--AND		PVB.[Visit_Date]			=	@p_date_TodyasVisitDate
			AND		PVB.[Delete_Flag]		=   0
			AND		PVB.Patient_Visit_No	=	@p_int_patientVisitNo

		END

		ELSE

		BEGIN

		SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
		FROM   [dbo].Patient_Visit_Services_BillingInfo   PVB
		WHERE   PVB.[Patient_ID]			=	@p_nvar_Patient_Id	
		--AND		PVB.[Shift_ID]			=   @p_tint_Shift_Id		
		AND		PVB.[Clinic_ID]			=   @p_nvar_Clinic_ID	
		--AND		PVB.[Doctor_ID]			=   @p_nvar_Doctor_ID --Changed
		--AND		PVB.[Visit_Date]			=	@p_date_TodyasVisitDate
		--AND		PVB.[Delete_Flag]		=   0
		AND		PVB.Patient_Visit_No	=	@p_int_patientVisitNo

		END

		SELECT DISTINCT 1 AS TABLE0, [Step_No],[Advised_Details],[Notation_Sequence1],[Notation_Sequence2],
								[Notation_Sequence3],[Notation_Sequence4],REPLACE(CONVERT(NVARCHAR, Advised_Date, 106), ' ', '-') AS Advised_Date,
								[Treatment_Plan_Status_ID],[Comments]
			FROM		Dentist_Patient_TreatmentPlan PVL

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Delete_Flag = 0

		SELECT DISTINCT 1 AS TABLE1, [Step_No],[Detail_Step_No],[Actual_Treatment],[Remarks]
			FROM		[dbo].[Dentist_Patient_TreatmentPlanDetails] PVL

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Delete_Flag = 0


		SELECT		[Category_Description],Findings_Description,Category_Description+'*'+Findings_Description AS ID
			FROM	[dbo].[Visit_Abdominal_Examination_Findings] VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0
			 --AND		VPF.Category_Description = 'PA'


		SELECT		[Category_Description],Findings_Description,Category_Description+'*'+Findings_Description AS ID
			FROM	[dbo].[Visit_Abdominal_Examination_Findings] VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0
			 AND		VPF.Category_Description = 'PV'
			 
		SELECT		[Category_Description],Findings_Description,Category_Description+'*'+Findings_Description AS ID
			FROM	[dbo].[Visit_Abdominal_Examination_Findings] VPF
			WHERE		VPF.Patient_ID		=	@p_nvar_Patient_Id	
			 AND		VPF.Shift_ID			=   @p_tint_Shift_Id		
			 AND		VPF.Clinic_ID			=   @p_nvar_Clinic_ID	
			 AND		VPF.Doctor_ID			=   @p_nvar_Doctor_ID 
			 AND		VPF.Visit_Date		=	@p_date_TodyasVisitDate
			 AND		VPF.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND		VPF.Delete_Flag		=   0
			 AND		VPF.Category_Description = 'PS' 


			 SELECT   Balance_Details,Balance_Group_Name,Balance_Subgroup_Name,Balance_Group_Name+'*'+Balance_Subgroup_Name+'*'+Balance_Details AS Balance_ID,[Balance_comment]
		FROM   [dbo].[Patient_Visit_Balanceinfo]   PVBI
		WHERE   PVBI.[Patient_ID]			=	@p_nvar_Patient_Id	
		AND		PVBI.[Shift_ID]			    =    @p_tint_Shift_Id		
		AND		PVBI.[Clinic_ID]			=   @p_nvar_Clinic_ID	
		AND		PVBI.[Doctor_ID]			=   @p_nvar_Doctor_ID 
		--AND		PVBI.[Visit_Date]			=	@p_date_TodyasVisitDate
		AND		PVBI.[Delete_Flag]		=   0
		AND		PVBI.Patient_Visit_No	=	@p_int_patientVisitNo

			IF EXISTS(  SELECT   VP.Medicine_Name+' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,VP.Brand_Name as Generic_Name
					 FROM	  Visit_Prescription_Overwrite VP  INNER JOIN Patient_Visits PV
					 ON		  VP.Patient_ID=PV.Patient_ID
				     WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      PV.Status_ID			=	5
					 AND      VP.Delete_Indicator   =   0 	 
					 AND      VP.Delete_Flag		=	0
				)
				BEGIN
					 SELECT   VP.Medicine_Name-- +' '+':'+' '+VP.Brand_Name
					  AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,+' '+'('+' '+VP.Brand_Name +' )'  as Generic_Name
					 FROM	  Visit_Prescription_Overwrite VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator	=   0 	 
					 AND      VP.Delete_Flag		=	0
					 order by Sequence_Id  
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,+' '+'('+' '+VP.Brand_Name +' )'  as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 	
					 order by Sequence_Id       
			    END
			 
			IF EXISTS(  
		SELECT   VP.Medicine_Name+' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace ,'' as Generic_Name,
		CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription_Overwrite VP  INNER JOIN Patient_Visits PV
					 ON		  VP.Patient_ID=PV.Patient_ID
				     WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      PV.Status_ID			=	5
					 AND      VP.Delete_Indicator   =   0 	 
					 AND      VP.Delete_Flag		=	0
				)
				BEGIN
					 SELECT   VP.Medicine_Name-- +' '+':'+' '+VP.Brand_Name
					  AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name,
					  CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription_Overwrite VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator	=   0 	 
					 AND      VP.Delete_Flag		=	0
					 order by Sequence_Id  
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,'' as Generic_Name,
					 CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days

					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_nvar_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_tint_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_nvar_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_nvar_Doctor_ID   
					 AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 	
					 order by Sequence_Id       
			    END 



				

	  --	  	SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			--FROM		[dbo].[Patient_Receipts_Services] VGI

			--INNER JOIN Patient_Title PT
			--ON	VGI.Title=PT.ID

			--WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			-- AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			-- AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			-- AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			-- AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			-- AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			----  AND		VGI.Patient_Visit_No			= @p_int_patientVisitNo

				 select pv.Receipt_Number,rs.Receipt_Date,pv.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date  from Patient_Visits_Services pv
				  LEFT JOIN Patient_Receipts_Services rs 
				on  pv.Receipt_Number=rs.Receipt_Number
					INNER JOIN Patient_Title PT
			ON	rs.Title=PT.ID
	  	WHERE		rs.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		rs.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		rs.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		rs.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		rs.[Shift_ID]				=	@p_tint_Shift_Id
			 --AND		VGI.Receipt_Type != 'L'
			 --AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type
			 AND		pv.Patient_Visit_No			=	@p_int_patientVisitNo
			 --AND		PPA.Receipt_Number							=	@p_nvar_p

   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END







/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor]    Script Date: 28-Feb-18 4:00:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MedicineData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_MedicineData]
	
@p_var_DoctorID				NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

	SELECT Short_Description,Medicine_Description,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction
	FROM Medicine_Master
	WHERE DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY Short_Description ASC
	
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON











GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MedicineDDl]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===================================================================================================================================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Data From Medicine_Master,Complaint_Master,Dressing_Master,Diagnosis_Master,Prescription_Medicines
-- Created By : Nilesh Wani
-- ====================================================================================================================================================
CREATE PROCEDURE [dbo].[USP_Get_MedicineDDl]

AS
BEGIN

     SET NOCOUNT ON;
     BEGIN TRY
	       
    		SELECT  Short_Description+'*'+Medicine_Description AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Medicine_Description))) as Medicine_Description
			FROM    Medicine_Master  WHERE [Active] = 1 and Priority_Value=0
			ORDER BY Priority_Value,Short_Description ASC

			SELECT  Short_Description+'*'+Medicine_Description AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Medicine_Description))) as Medicine_Description
			FROM    Medicine_Master  WHERE [Active] = 1 and Priority_Value !=0
			ORDER BY Priority_Value,Short_Description ASC

      END TRY
      BEGIN CATCH
            SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
      END CATCH
     
 END

















/****** Object:  StoredProcedure [dbo].[USP_Get_MedicineData]    Script Date: 16-Jan-18 8:11:41 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRCompanyDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  05-May-2016
-- Description :  This stored procedure will Get Folder wise Family Details  
--  created By :  suyog khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_MRCompanyDetails]
	@p_var_CompanyName  NVARCHAR(300)
	
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	  BEGIN TRY
	       IF EXISTS ( 
		              SELECT  [Company_Name]
		              FROM    MR_Master
                      WHERE   [Company_Name] =@p_var_CompanyName
					  AND	Delete_Flag=0
                     )
                     BEGIN
                        SELECT 1 AS FAMILY_STATUS;
                        
                        SELECT MM.[First_Name]+' '+MM.[Middle_Name]+' '+MM.[Last_Name] as Name,MM.[Short_Name],MM.[Mobile_No],UPPER(Company_Name) AS Company_Name
                               
                              
                        FROM   MR_Master MM
						
                        WHERE [Company_Name]=@p_var_CompanyName
						AND	Delete_Flag=0
						
						
                       
                     END
             ELSE
		        SELECT 0 AS FAMILY_STATUS;
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MedicineDDl]    Script Date: 16-Jan-18 8:11:43 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRCurrentShift]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	14 Dec 2016
-- Description	:	This stored procedure will validate the user and password for MR Login
--					If not a valid user will return 0 else will return 1   
-- created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_MRCurrentShift]
	@P_nvar_TodaysDay	NVARCHAR(20)
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
		
			

			;WITH  ShifTimes As 
			(  SELECT DISTINCT	SM.Shift_ID,SM.Start_Time AS Start_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours

					FROM
							Shift_Master SM, 
							Doctor_Clinic_Shift DCS,
							Clinic_Master CM,
							Doctor_Master DM
					WHERE
							SM.Shift_Day=@P_nvar_TodaysDay AND	
							SM.Shift_ID=DCS.Shift_ID AND
							DCS.Clinic_ID=CM.Clinic_ID AND
							DCS.Doctor_ID=CM.Doctor_ID AND
							DCS.Doctor_ID = DM.Doctor_ID
			)
			SELECT Shift_ID, Description FROM ShifTimes		
			ORDER BY DiffInHours ASC				
			 
		
		
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRCompanyDetails]    Script Date: 16-Jan-18 8:11:45 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_MRDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14 Dec 2016
-- Description: This stored procedure will Get The MR Details in MR Add Medicine Page
-- Created By : Varsha Khandre
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_GET_MRDetails]
	@Todays_MR_VisitDate		DATE,
	@p_var_Shift_ID			    TINYINT,
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(30),
	@p_var_MR_ID				INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY

			SELECT		MM.First_Name +' '+ MM.Middle_Name+' '+MM.Last_Name AS Full_Name,MM.Short_Name,MV.Clinic_ID,MV.Doctor_ID,MV.Shift_ID,MV.Status_ID,MV.Visit_Date,
						UPPER(MM.Company_Name) AS Company_Name,MV.Visit_Time
			FROM		[dbo].[MR_Visits] MV
			INNER JOIN  [dbo].[MR_Master] MM on MV.MR_ID=MM.MR_ID 
			WHERE	    convert(date,Visit_Date,101) = convert(date,@Todays_MR_VisitDate,101) 
			AND         MV.Shift_ID = @p_var_Shift_ID   
			AND         MV.Clinic_ID= @p_var_Clinic_ID  
			AND         MV.Doctor_ID= @p_var_Doctor_ID  
			AND         MV.MR_ID=@p_var_MR_ID	  
			AND			MV.Delete_Flag = 0
			AND			MM.Delete_Flag=0

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRCurrentShift]    Script Date: 16-Jan-18 8:11:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRDocumentLists]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_MRDocumentLists]
	@p_nvar_MRId				INT,
	@p_nvar_DoctorId			NVARCHAR(30),
	@P_nvar_Clinic_ID			NVARCHAR(30),
	@p_nvar_shift_ID			INT,
	@p_nvar_visit_date			DATE,
	@p_nvar_visit_time			TIME,
	@p_nvar_Company_ID			NVARCHAR(200)
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
      SELECT  Cast([Attachement_ID] as nvarchar(1000))+'_'+[Attachment_Name] as Document,[Attachement_ID],Attachment_Name
      FROM	 [dbo].[MR_Visit_Attachments]
	                   
      WHERE	MR_ID		=	@p_nvar_MRId		  
      AND   Doctor_ID   =	@p_nvar_DoctorId 
	  AND	Clinic_ID	=	@P_nvar_Clinic_ID
	  AND	Shift_ID	=	@p_nvar_shift_ID
	  AND	Visit_Date	=	@p_nvar_visit_date
	  AND	Visit_Time	=	@p_nvar_visit_time
	  AND	Company_Name=	@p_nvar_Company_ID


	  SELECT MR_Photo FROM MR_Master
	  WHERE	MR_ID=@p_nvar_MRId
	  AND	Doctor_ID=@p_nvar_DoctorId
	 
	  
	
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




















/****** Object:  StoredProcedure [dbo].[USP_GET_MRDetails]    Script Date: 16-Jan-18 8:12:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRFilterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 21 Dec 2016
-- Description: This stored procedure will Get all MR details according to filter.
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_MRFilterData]
@p_var_From_Visit_Date			DATE,
@p_var_To_Visit_Date			DATE,
@p_var_Company_Name				NVARCHAR(100),
@p_var_MR_Name					NVARCHAR(100)
AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  
		SELECT 
		 ROW_NUMBER() OVER (  PARTITION BY MV.Company_Name  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS ROWNUM, 
                                    
		First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,UPPER(MM.Company_Name) AS Company_Name,MM.Short_Name,MM.Mobile_No,MV.MR_ID,
				MV.Visit_Date AS Visitdate,MV.Visit_Time AS GETVISITTIME,MV.Shift_ID,(convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,MV.Status_ID,
				   CONVERT(NVARCHAR, Visit_Date, 106) AS Visit_date,LEFT(SM.Description,1) AS ShiftDesc,
				   CONVERT(NVARCHAR, Visit_Date, 106)+'-'+(convert(varchar(11),MV.Visit_Time, 108))+'-'+LEFT(SM.Description,1) AS CombineVisitDetails,
				   SR.Status_Description,SR.ID AS Status_ID
		 FROM MR_Visits MV
		INNER JOIN MR_Master MM
				ON MM.MR_ID=MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID
		INNER JOIN [dbo].[Shift_Master] SM
				ON MV.Shift_ID = SM.Shift_ID
		INNER JOIN  Status_Ref SR
                    ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
		WHERE MV.Status_ID=5
		AND MV.Delete_Flag=0
		AND MV.Visit_Date between @p_var_From_Visit_Date and  @p_var_To_Visit_Date
		AND MM.Delete_Flag=0
		order by MV.Visit_Date



		SELECT 
		 ROW_NUMBER() OVER (  PARTITION BY MV.Company_Name  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS ROWNUM, 
                                    
		First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,UPPER(MM.Company_Name) AS Company_Name,MM.Short_Name,MM.Mobile_No,MV.MR_ID,
				MV.Visit_Date AS Visitdate,MV.Visit_Time AS GETVISITTIME,MV.Shift_ID,(convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,MV.Status_ID,
				  CONVERT(NVARCHAR, Visit_Date, 106) AS Visit_date,LEFT(SM.Description,1) AS ShiftDesc,
				  CONVERT(NVARCHAR, Visit_Date, 106)+'-'+(convert(varchar(11),MV.Visit_Time, 108))+'-'+LEFT(SM.Description,1) AS CombineVisitDetails,
				  SR.Status_Description,SR.ID AS Status_ID
		 FROM MR_Visits MV
		INNER JOIN MR_Master MM
				ON MM.MR_ID=MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID
		INNER JOIN [dbo].[Shift_Master] SM
				ON MV.Shift_ID = SM.Shift_ID
		INNER JOIN  Status_Ref SR
                    ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
		WHERE MV.Status_ID=5
		AND MV.Delete_Flag=0
		AND MV.Visit_Date between @p_var_From_Visit_Date and  @p_var_To_Visit_Date
		AND	MV.Company_Name=@p_var_Company_Name
		AND MM.Delete_Flag=0
		order by  MV.Visit_Date



		SELECT 
		 ROW_NUMBER() OVER (  PARTITION BY MV.Company_Name  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS ROWNUM, 
                                    
		First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,UPPER(MM.Company_Name) AS Company_Name,MM.Short_Name,MM.Mobile_No,MV.MR_ID,
				MV.Visit_Date AS Visitdate,MV.Visit_Time AS GETVISITTIME,MV.Shift_ID,(convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,MV.Status_ID,
				   CONVERT(NVARCHAR, Visit_Date, 106) AS Visit_date,LEFT(SM.Description,1) AS ShiftDesc,
				   CONVERT(NVARCHAR, Visit_Date, 106)+'-'+(convert(varchar(11),MV.Visit_Time, 108))+'-'+LEFT(SM.Description,1) AS CombineVisitDetails,
				   SR.Status_Description,SR.ID AS Status_ID
		 FROM MR_Visits MV
		INNER JOIN MR_Master MM
				ON MM.MR_ID=MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID
		INNER JOIN [dbo].[Shift_Master] SM
				ON MV.Shift_ID = SM.Shift_ID
		INNER JOIN  Status_Ref SR
                    ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
		WHERE MV.Status_ID=5
		AND MV.Delete_Flag=0
		AND MV.Visit_Date between @p_var_From_Visit_Date and  @p_var_To_Visit_Date
		AND	MV.Company_Name=@p_var_Company_Name
		AND	MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name=@p_var_MR_Name
		AND MM.Delete_Flag=0
		order by  MV.Visit_Date



		SELECT 
		 ROW_NUMBER() OVER (  PARTITION BY MV.Company_Name  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS ROWNUM, 
                                    
		First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,UPPER(MM.Company_Name) AS Company_Name,MM.Short_Name,MM.Mobile_No,MV.MR_ID,
				MV.Visit_Date AS Visitdate,MV.Visit_Time AS GETVISITTIME,MV.Shift_ID,(convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,MV.Status_ID,
				  CONVERT(NVARCHAR, Visit_Date, 106) AS Visit_date,LEFT(SM.Description,1) AS ShiftDesc,
				  CONVERT(NVARCHAR, Visit_Date, 106)+'-'+(convert(varchar(11),MV.Visit_Time, 108))+'-'+LEFT(SM.Description,1) AS CombineVisitDetails,
				  SR.Status_Description,SR.ID AS Status_ID
		 FROM MR_Visits MV
		INNER JOIN MR_Master MM
				ON MM.MR_ID=MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID
		INNER JOIN [dbo].[Shift_Master] SM
				ON MV.Shift_ID = SM.Shift_ID
		INNER JOIN  Status_Ref SR
                    ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
		WHERE MV.Status_ID=5
		AND MV.Delete_Flag=0
		--AND MV.Visit_Date between @p_var_From_Visit_Date and  @p_var_To_Visit_Date
		AND	MV.Company_Name=@p_var_Company_Name
		AND MM.Delete_Flag=0
		--AND	MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name=@p_var_MR_Name
		order by  MV.Visit_Date
		  


		SELECT 
		 ROW_NUMBER() OVER (  PARTITION BY MV.Company_Name  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS ROWNUM, 
                                    
		First_Name+' '+Middle_Name+' '+Last_Name AS MRFULLNAME,UPPER(MM.Company_Name) AS Company_Name,MM.Short_Name,MM.Mobile_No,MV.MR_ID,
				MV.Visit_Date AS Visitdate,MV.Visit_Time AS GETVISITTIME,MV.Shift_ID,(convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,MV.Status_ID,
				   CONVERT(NVARCHAR, Visit_Date, 106) AS Visit_date,LEFT(SM.Description,1) AS ShiftDesc,
				   CONVERT(NVARCHAR, Visit_Date, 106)+'-'+(convert(varchar(11),MV.Visit_Time, 108))+'-'+LEFT(SM.Description,1) AS CombineVisitDetails,
				   SR.Status_Description,SR.ID AS Status_ID
		 FROM MR_Visits MV
		INNER JOIN MR_Master MM
				ON MM.MR_ID=MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID
		INNER JOIN [dbo].[Shift_Master] SM
				ON MV.Shift_ID = SM.Shift_ID
		INNER JOIN  Status_Ref SR
                    ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
		WHERE MV.Status_ID=5
		AND MV.Delete_Flag=0
		--AND MV.Visit_Date between @p_var_From_Visit_Date and  @p_var_To_Visit_Date
		AND	MV.Company_Name=@p_var_Company_Name
		AND	MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name=@p_var_MR_Name
		AND MM.Delete_Flag=0
		order by  MV.Visit_Date
		  
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRDocumentLists]    Script Date: 16-Jan-18 8:12:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRLoginDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	14 Dec 2016
-- Description	:	This stored procedure will validate the user and password for MR Login
--					If not a valid user will return 0 else will return 1   
-- created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_MRLoginDetails]
	
	@p_nvar_Login_Id	NVARCHAR(60),
	@p_nvar_Password	NVARCHAR(100),
	@P_nvar_TodaysDay	NVARCHAR(20),
	@p_nvar_MRName		NVARCHAR(100),
	@p_nvar_Mobile		NVARCHAR(20)
	
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
		IF EXISTS 
		(	
			SELECT  [LoginName],
					[LoginPassword]
			
			FROM	[dbo].[Company_Master]
					
			WHERE	[LoginName] = @p_nvar_Login_Id 
			AND		[LoginPassword] = @p_nvar_Password  COLLATE SQL_Latin1_General_CP1_CS_AS
			AND		Delete_Flag=0
		)
		BEGIN

			SELECT 1 AS LOGIN_STATUS;
			SELECT  
					DM.Doctor_ID,
					CM.Clinic_ID,
					CMR.LoginName,
					CMR.LoginPassword,
					DM.First_Name +' '+ DM.Middle_Name +' '+ DM.Last_Name as 'DoctorName', 
					CM.Clinic_Name,
					MM.MR_ID
				  FROM	[Company_Master] CMR
			
			INNER JOIN MR_Master MM
			
			ON 	MM.Company_Name=CMR.Company_Name		
			
			INNER JOIN		Doctor_Master DM
					ON		MM.Doctor_ID=DM.Doctor_ID
			INNER JOIN		Clinic_Master CM
					ON		DM.Doctor_ID=CM.Doctor_ID 							
			
			WHERE	CMR.LoginName = @p_nvar_Login_Id 
			AND		MM.First_Name +' '+ MM.Middle_Name +' '+ MM.Last_Name =@p_nvar_MRName
			AND		MM.Mobile_No	=	@p_nvar_Mobile
			AND		MM.Delete_Flag	=	0
			AND		CMR.Delete_Flag	=	0
			

			;WITH  ShifTimes As 
			(  SELECT	SM.Shift_ID,SM.Start_Time AS Start_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours

					FROM
							Shift_Master SM, 
							Doctor_Clinic_Shift DCS,
							Clinic_Master CM,
							Doctor_Master DM
					WHERE
							SM.Shift_Day=@P_nvar_TodaysDay AND	
							SM.Shift_ID=DCS.Shift_ID AND
							DCS.Clinic_ID=CM.Clinic_ID AND
							DCS.Doctor_ID=CM.Doctor_ID AND
							DCS.Doctor_ID = DM.Doctor_ID
			)
			SELECT Shift_ID, Description FROM ShifTimes		
			ORDER BY DiffInHours ASC				
			 
		END 
		ELSE
			SELECT 0 AS LOGIN_STATUS;
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Delete_BillKeywordCharges]    Script Date: 16-Jan-18 7:49:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRPrescriptionDetails_For_Doctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:  INCRUST
-- Create date: 20 Dec 2016
-- Description: This stored procedure will get Mr prescription for doctor
--  created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_MRPrescriptionDetails_For_Doctor]
@p_var_MR_Id			nvarchar(32),
@p_var_Shift_Id			TINYINT,
@p_var_Clinic_ID		nvarchar(10),
@p_var_Doctor_ID		nvarchar(30),
@p_var_VisitDate		DATE,
@p_var_VisitTime		TIME,
@p_var_Company_ID		NVARCHAR(200)
--@p_int_patientVisitNo		INT

AS
BEGIN

	

    -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY


   SELECT MP.Medicine_Name,PM.Morning,PM.Afternoon,PM.Night,PM.No_Of_Days,PM.Instruction,Visit_Date,Shift_ID,Clinic_ID,
		  MP.Doctor_ID,MP.Brand_Name,MP.CatSub_Description,MP.Cat_Short_Name,MP.Marketed_By,MP.Priority_Value,ISNULL(PM.Active,0) AS Active
   FROM [dbo].[MR_Added_Prescriptions] MP

   LEFT JOIN Prescription_Medicines PM
   ON		PM.Cat_Short_Name=MP.Cat_Short_Name
   AND		PM.CatSub_Description=MP.CatSub_Description
   AND		PM.Medicine_Name=MP.Medicine_Name
   AND		PM.Brand_Name=MP.Brand_Name

   WHERE     MP.MR_ID		 =	@p_var_MR_Id				AND
        	 MP.Shift_ID	     =   @p_var_Shift_Id		AND
			 MP.Clinic_ID	     =   @p_var_Clinic_ID	    AND
			 MP.Doctor_ID	     =   @p_var_Doctor_ID		AND
			 MP.Visit_Date		 =	@p_var_VisitDate		AND
			 MP.Visit_Time		 =	@p_var_VisitTime		AND
			 MP.Company_ID		=	@p_var_Company_ID

			 ORDER BY Priority_Value ASC
			
           
   SELECT   Reminder_ID,Reminder_Text
			FROM        [dbo].[MR_Reminders] MR
			WHERE       MR.Visit_Date	=	@p_var_VisitDate  
			AND 	    MR.Company_ID	=	@p_var_Company_ID 
			AND 	    MR.Clinic_ID	=	@p_var_Clinic_ID 
			AND		    MR.Doctor_ID	=	@p_var_Doctor_ID			
			AND			MR.Visit_Time	=	@p_var_VisitTime
			AND			MR.Shift_ID	     =   @p_var_Shift_Id
			AND			MR.MR_ID		 =	@p_var_MR_Id
			
	SELECT MR_ID,Status_ID,Visit_Date,ISNULL(Rating,0) AS Rating,Notes from MR_Visits MV
			WHERE		MV.Visit_Date	=	@p_var_VisitDate  
			AND 	    MV.Company_Name	=	@p_var_Company_ID 
			AND 	    MV.Clinic_ID	=	@p_var_Clinic_ID 
			AND		    MV.Doctor_ID	=	@p_var_Doctor_ID			
			AND			MV.Visit_Time	=	@p_var_VisitTime
			AND			MV.Shift_ID	     =   @p_var_Shift_Id
			AND			MV.MR_ID		 =	@p_var_MR_Id
			
	SELECT MP.Medicine_Name,PM.Morning,PM.Afternoon,PM.Night,PM.No_Of_Days,PM.Instruction,Visit_Date,Shift_ID,Clinic_ID,
		  MP.Doctor_ID,MP.Brand_Name,MP.CatSub_Description,MP.Cat_Short_Name,MP.Marketed_By,ISNULL(PM.Priority_Value,0) AS Priority_Value,ISNULL(PM.Active,0) AS Active
   FROM [dbo].[MR_Added_Prescriptions] MP

   LEFT JOIN Prescription_Medicines PM
   ON		PM.Cat_Short_Name=MP.Cat_Short_Name
   AND		PM.CatSub_Description=MP.CatSub_Description
   AND		PM.Medicine_Name=MP.Medicine_Name
   AND		PM.Brand_Name=MP.Brand_Name

    WHERE     MP.MR_ID		 =	@p_var_MR_Id				AND
        	 MP.Shift_ID	     =   @p_var_Shift_Id		AND
			 MP.Clinic_ID	     =   @p_var_Clinic_ID	    AND
			 MP.Doctor_ID	     =   @p_var_Doctor_ID		AND
			 MP.Visit_Date		 =	@p_var_VisitDate		AND
			 MP.Visit_Time		 =	@p_var_VisitTime		AND
			 MP.Company_ID		=	@p_var_Company_ID

			 ORDER BY MP.Priority_Value ASC

	SELECT  Cast([Attachement_ID] as nvarchar(1000))+'_'+[Attachment_Name] as Document,[Attachement_ID],Attachment_Name,[Folder_Path]
      FROM	 [dbo].[MR_Visit_Attachments]
	                   
      WHERE	MR_ID		=	@p_var_MR_Id		  
      AND   Doctor_ID   =	@p_var_Doctor_ID 
	  AND	Clinic_ID	=	@p_var_Clinic_ID
	  AND	Shift_ID	=	@p_var_Shift_Id
	  AND	Visit_Date	=	@p_var_VisitDate
	  AND	Visit_Time	=	@p_var_VisitTime
			 
   END TRY
   BEGIN CATCH
       SELECT 
        ERROR_NUMBER() AS ErrorNumber
          ,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
     
 END


















/****** Object:  StoredProcedure [dbo].[USP_Get_MRLoginDetails]    Script Date: 16-Jan-18 8:12:13 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRPreviousVisit]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author	  :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure get MR Previous Visit Data
-- Created By: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_MRPreviousVisit]
	@p_var_Visit_Date			DATE,
	@p_var_CompanyName			NVARCHAR(100),
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(32),
	@p_var_MRID					INT,
	@p_var_Visit_Time			NVARCHAR(50)
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY

			SELECT	 1 AS TABLE0,  Visit_Date,MR_ID,Visit_Time,PV.Shift_ID,UPPER(Company_Name) AS Company_Name,LEFT(SM.Description,1) AS ShiftDesc,
						REPLACE(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' - '+ CONVERT(varchar(15), CAST(Visit_Time AS TIME),100)+ ' - '+LEFT(SM.Description,1) AS Visit_Date_Time_Shift,
						[Notes],ISNULL([Rating],0) AS Rating
						
			FROM		MR_Visits PV
			
			INNER JOIN [dbo].[Shift_Master] SM
                    ON PV.Shift_ID = SM.Shift_ID
			
			WHERE		Visit_Date=@p_var_Visit_Date 
			AND         Company_Name=@p_var_CompanyName 
			AND			Clinic_ID =@p_var_Clinic_ID 
			AND			Doctor_ID =@p_var_Doctor_ID	
			AND			Visit_Time=@p_var_Visit_Time
			AND			MR_ID=	@p_var_MRID	
			AND			Delete_Flag=0
							
			
			SELECT    1 AS TABLE1,   Reminder_ID,Reminder_Text
			FROM        [dbo].[MR_Reminders]
			WHERE       Visit_Date=@p_var_Visit_Date  
			AND 	    Company_ID=@p_var_CompanyName 
			AND 	    Clinic_ID=@p_var_Clinic_ID 
			AND		    Doctor_ID=@p_var_Doctor_ID			
			AND			Visit_Time=@p_var_Visit_Time
			AND			MR_ID=	@p_var_MRID	
			


			SELECT 1 AS TABLE2,  VP.Medicine_Name,VP.Brand_Name,VP.Cat_Short_Name,VP.CatSub_Description,Company_ID,ISNULL(PM.Priority_Value,0) AS Priority_Value,PM.Active,PM.Morning,PM.Afternoon,PM.Night,PM.No_Of_Days,PM.Instruction,PM.Marketed_By
			FROM	[dbo].[MR_Added_Prescriptions]   VP

			INNER JOIN Prescription_Medicines PM
			ON		PM.Cat_Short_Name=VP.Cat_Short_Name
			AND		PM.CatSub_Description=VP.CatSub_Description
			AND		PM.Medicine_Name=VP.Medicine_Name
			AND		PM.Brand_Name=VP.Brand_Name


			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Company_ID=	@p_var_CompanyName 
			AND 		Clinic_ID=	@p_var_Clinic_ID
			AND			VP.Doctor_ID=	@p_var_Doctor_ID	
			AND			Visit_Time=@p_var_Visit_Time
			AND			MR_ID=	@p_var_MRID	



			 SELECT 1 AS TABLE3, PV.Visit_Date,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name AS MRNAME
			  FROM	  MR_Visits PV INNER JOIN MR_Master PM
			  ON	  pv.MR_ID	=	PM.MR_ID                      
			  WHERE	  PV.Company_Name		=	@p_var_CompanyName
			  AND 	  Clinic_ID			    =   @p_var_Clinic_ID	
	          AND     Visit_Date            =   @p_var_Visit_Date 
			  AND     PV.Doctor_ID			=   @p_var_Doctor_ID 
			  AND	  PV.Visit_Time			=@p_var_Visit_Time
			  AND     PV.Delete_Flag		= 0
			  AND	  PV.MR_ID=	@p_var_MRID	
			  
			  
			  /***********Get Data of previous visit from MR_Added_Prescription table************/ 

			  SELECT 1 AS TABLE5,  VP.Medicine_Name,VP.Brand_Name,VP.Cat_Short_Name,VP.CatSub_Description,Company_ID,ISNULL(PM.Priority_Value,0) AS Priority_Value,VP.Active,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,PM.Marketed_By,
								ISNULL(VP.Priority_Value,0) AS MRPriority_Value
			FROM	[dbo].[MR_Added_Prescriptions]   VP

					INNER JOIN Prescription_Medicines PM

		   ON		PM.Cat_Short_Name=VP.Cat_Short_Name
		   AND		PM.CatSub_Description=VP.CatSub_Description
		   AND		PM.Medicine_Name=VP.Medicine_Name
		   AND		PM.Brand_Name=VP.Brand_Name

			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Company_ID=	@p_var_CompanyName 
			AND 		Clinic_ID=	@p_var_Clinic_ID
			AND			VP.Doctor_ID=	@p_var_Doctor_ID	
			AND			Visit_Time=@p_var_Visit_Time




            END TRY
			BEGIN CATCH
			SELECT 
						ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
     
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRPrescriptionDetails_For_Doctor]    Script Date: 16-Jan-18 8:12:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRPreviousVisitDates]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 16 DEC 2016
-- Description: This stored procedure will Get Previos visit dates of MR
-- Created By : Nilesh Wani
-- ===========================================================
CREATE PROCEDURE [dbo].[USP_Get_MRPreviousVisitDates]
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_company_name			VARCHAR(200),
	@p_var_visit_time			TIME
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		


							;WITH LastVisitDate AS 
                           (
                                 SELECT MR_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE,Company_Name
                                 FROM MR_Visits PV
                           
                           
                                 WHERE			PV.Doctor_ID	=	@p_var_Doctor_Id
                                 AND			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_var_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_var_Clinic_Id
                                 AND			PV.Delete_Flag  =	0
								AND				PV.Visit_Time	=	@p_var_visit_time
								 AND			PV.Company_Name   =   @p_var_company_name
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Company_Name  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.MR_ID,PV.Visit_Date,MM.Short_Name AS ShortName,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,MM.Short_Name
                        FROM        MR_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN MR_Master MM
									ON PV.MR_ID=MM.MR_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Company_Name=LV.Company_Name
                        WHERE        
                                    PV.Doctor_ID  =@p_var_Doctor_Id
                        AND         CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND         Status_ID = 5 
                        AND         PV.Delete_Flag = 0  
						AND			MM.Delete_Flag=0
                                 
                                        
                                            
                )

				SELECT TOP 20 Visit_Date,Visit_Time, replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) AS Visit_DateTime,
				REPLACE(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' - '+ CONVERT(varchar(15), CAST(Visit_Time AS TIME),100)+ ' - '+ShiftDesc AS Visit_Date_Time_Shift,
				REPLACE(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' - '+ CONVERT(varchar(15), CAST(Visit_Time AS TIME),100)+ ' - '+ShiftDesc+' - '+ShortName AS Visit_Date_Time_Shift_Name,Short_Name,
           MR_ID,Shift_id, Status_ID,ShiftDesc FROM PreviousVisits 
		   
		   order by ROWNUM ASC
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END














/****** Object:  StoredProcedure [dbo].[USP_Get_MRPreviousVisit]    Script Date: 16-Jan-18 8:12:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRPreviousVisitDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author	  :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Save the Data In Patient Master table
-- Created By: Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_MRPreviousVisitDetails]
	@p_var_Visit_Date			DATE,
	@p_var_CompanyName			NVARCHAR(100),
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(32),
	--@p_var_Shift_ID				NVARCHAR(32),
	@p_var_Visit_Time			NVARCHAR(50)
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY

			SELECT	 1 AS TABLE0,  Visit_Date,MR_ID,Visit_Time,PV.Shift_ID,UPPER(Company_Name) AS Company_Name,LEFT(SM.Description,1) AS ShiftDesc,
						REPLACE(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' - '+ CONVERT(varchar(15), CAST(Visit_Time AS TIME),100)+ ' - '+LEFT(SM.Description,1) AS Visit_Date_Time_Shift,
						[Notes],ISNULL([Rating],0) AS Rating
						
			FROM		MR_Visits PV
			
			INNER JOIN [dbo].[Shift_Master] SM
                    ON PV.Shift_ID = SM.Shift_ID
			
			WHERE		Visit_Date=@p_var_Visit_Date 
			AND         Company_Name=@p_var_CompanyName 
			AND			Clinic_ID =@p_var_Clinic_ID 
			AND			Doctor_ID =@p_var_Doctor_ID	
			AND			Visit_Time=@p_var_Visit_Time		
			AND			Delete_Flag=0
							
			
			SELECT    1 AS TABLE1,   Reminder_ID,Reminder_Text
			FROM        [dbo].[MR_Reminders]
			WHERE       Visit_Date=@p_var_Visit_Date  
			AND 	    Company_ID=@p_var_CompanyName 
			AND 	    Clinic_ID=@p_var_Clinic_ID 
			AND		    Doctor_ID=@p_var_Doctor_ID			
			AND			Visit_Time=@p_var_Visit_Time
			


			SELECT 1 AS TABLE2,  VP.Medicine_Name,VP.Brand_Name,VP.Cat_Short_Name,VP.CatSub_Description,Company_ID,ISNULL(PM.Priority_Value,0) AS Priority_Value,PM.Active,PM.Morning,PM.Afternoon,PM.Night,PM.No_Of_Days,PM.Instruction,PM.Marketed_By,
								ISNULL(VP.Priority_Value,0) AS MRPriority_Value
			FROM	[dbo].[MR_Added_Prescriptions]   VP

					INNER JOIN Prescription_Medicines PM

		   ON		PM.Cat_Short_Name=VP.Cat_Short_Name
		   AND		PM.CatSub_Description=VP.CatSub_Description
		   AND		PM.Medicine_Name=VP.Medicine_Name
		   AND		PM.Brand_Name=VP.Brand_Name

			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Company_ID=	@p_var_CompanyName 
			AND 		Clinic_ID=	@p_var_Clinic_ID
			AND			VP.Doctor_ID=	@p_var_Doctor_ID	
			AND			Visit_Time=@p_var_Visit_Time




			 SELECT 1 AS TABLE3, PV.Visit_Date,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name AS MRNAME
			  FROM	  MR_Visits PV INNER JOIN MR_Master PM
			  ON	  pv.MR_ID	=	PM.MR_ID                      
			  WHERE	  PV.Company_Name		=	@p_var_CompanyName
			  AND 	  Clinic_ID			    =   @p_var_Clinic_ID	
	          AND     Visit_Date            =   @p_var_Visit_Date 
			  AND     PV.Doctor_ID			=   @p_var_Doctor_ID 
			  AND	  PV.Visit_Time			=@p_var_Visit_Time
			  AND     PV.Delete_Flag		= 0 

			  SELECT 1 AS TABLE4,  Cast([Attachement_ID] as nvarchar(1000))+'_'+[Attachment_Name] as Document,[Attachement_ID],Attachment_Name
			FROM	 [dbo].[MR_Visit_Attachments]
	                   
			  WHERE	 
				    Doctor_ID   =	@p_var_Doctor_ID 
			  AND	Clinic_ID	=	@p_var_Clinic_ID
			  
			  AND	Visit_Date	=	@p_var_Visit_Date
			  AND	Visit_Time	=	@p_var_Visit_Time




			  SELECT 1 AS TABLE5,  VP.Medicine_Name,VP.Brand_Name,VP.Cat_Short_Name,VP.CatSub_Description,Company_ID,ISNULL(PM.Priority_Value,0) AS Priority_Value,VP.Active,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,PM.Marketed_By,
								ISNULL(VP.Priority_Value,0) AS MRPriority_Value
			FROM	[dbo].[MR_Added_Prescriptions]   VP

					INNER JOIN Prescription_Medicines PM

		   ON		PM.Cat_Short_Name=VP.Cat_Short_Name
		   AND		PM.CatSub_Description=VP.CatSub_Description
		   AND		PM.Medicine_Name=VP.Medicine_Name
		   AND		PM.Brand_Name=VP.Brand_Name

			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Company_ID=	@p_var_CompanyName 
			AND 		Clinic_ID=	@p_var_Clinic_ID
			AND			VP.Doctor_ID=	@p_var_Doctor_ID	
			AND			Visit_Time=@p_var_Visit_Time




            END TRY
			BEGIN CATCH
			SELECT 
						ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
     
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRPreviousVisitDates]    Script Date: 16-Jan-18 8:12:22 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_MRStatus]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  13 Dec 2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a MR
-- Created By   :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_MRStatus]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	--@p_int_Role_ID				INT,
	@p_nvar_MR_ID				INT
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

			IF EXISTS(
				SELECT * FROM MR_Added_Prescriptions MV
				WHERE MV.Visit_Date	=	@p_date_TodyasVisitDate
					AND		MV.Shift_ID		=	@p_int_Shift_ID 
					AND		MV.Clinic_ID	=	@p_nvar_Clinic_ID 
					AND		MV.Doctor_ID	=	@p_nvar_Doctor_ID  
					AND     MV.MR_ID=@p_nvar_MR_ID
			)
			
			BEGIN
			SELECT 1 AS MEDICINE
			END
			ELSE
			BEGIN
			SELECT 0 AS MEDICINE
			END

			IF EXISTS(
				SELECT * FROM MR_Reminders MR
				WHERE		MR.Visit_Date	=	@p_date_TodyasVisitDate
					AND		MR.Shift_ID		=	@p_int_Shift_ID 
					AND		MR.Clinic_ID	=	@p_nvar_Clinic_ID 
					AND		MR.Doctor_ID	=	@p_nvar_Doctor_ID  
					AND     MR.MR_ID=@p_nvar_MR_ID
			)

			
			BEGIN
			SELECT 1 AS REMINDER
			END
			ELSE
			BEGIN
			SELECT 0 AS REMINDER
			END

			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRPreviousVisitDetails]    Script Date: 16-Jan-18 8:12:24 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_OPDDailyCollection_For_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  20 Nov 2017
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_OPDDailyCollection_For_Operator]
   
	@p_date_FROMdate            DATE,
	@p_date_TOdate              DATE,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN


	SET NOCOUNT ON;
	BEGIN TRY

		 IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TempPatientBillingInfo]') AND type in (N'U'))
DROP TABLE [dbo].[TempPatientBillingInfo]


DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @cols= STUFF((SELECT distinct ',' + QUOTENAME(BillingDetails) 
                    from  (select BDM.Doctor_ID,BDM.Billing_Group_Name +'-'+ BDM.Billing_Subgroup_Name+'-' +BDM.Billing_Details
 AS BillingDetails from [dbo].[Billing_Details_Master] BDM

 LEFT JOIN [dbo].[Patient_Visit_BillingInfoOverwrite] PVB

				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
 
 ) X

            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

		set @query = ' WITH MBillingDetails AS ( SELECT Doctor_ID,Clinic_Id,Shift_Id,Patient_Id,Patient_Visit_No,Visit_Date,'+ '''Patient Visit''' + ' AS Visit_Type, ' + @cols + '
             from 
             (
                select BDM.Doctor_ID,BDM.Billing_Group_Name+' + '''-''' + '+BDM.Billing_Subgroup_Name+' + '''-''' + '+BDM.Billing_Details AS BillingDetails,
				PVB.Clinic_Id,PVB.Shift_Id,PVB.Patient_Id,PVB.Patient_Visit_No,PVB.Visit_Date,PVB.Collected_Fees  
				 from [dbo].[Billing_Details_Master] BDM
				LEFT JOIN [dbo].[Patient_Visit_BillingInfoOverwrite] PVB
				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
			) x
            pivot 
            (
                max(Collected_Fees)
                for BillingDetails in (' + @cols + ')
            ) p ) SELECT * INTO [dbo].[TempPatientBillingInfo] FROM  MBillingDetails'

	--print @query
execute(@query);
	--if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			
			--REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			--convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' ),
					DM.Base_Location

			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

			and  pv.Status_ID = 5

Union All

			SELECT  
			--REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			   -- convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					,DM.Base_Location
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Date;
			


			
------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime1 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln1 as(
	
			SELECT  
			--REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			--convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
					 ,PM.Clinic_ID
					 	,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime1 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 5

Union All

			SELECT  
				--REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			  --  convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					 ,PPA.Clinic_ID
					 ,DM.Base_Location

			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				   Adhoc_Fees As 'Adhoc (A)',
				   				BIO.*,
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark',
				   Base_Location AS 	'Base Location'


				   


			
			 from get_daily_colln1 GIC
			 
			 
			  LEFT JOIN		[dbo].[TempPatientBillingInfo]   BIO  
				ON			GIC.Doctor_ID=BIO.Doctor_ID
				AND			GIC.Clinic_ID=BIO.Clinic_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				--AND		convert(char(8),  GIC.Visit_Date, 106)	=convert(char(8),  BIO.Visit_Date, 106)
				AND			GIC.Patient_Visit_No = BIO.Patient_Visit_No
			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



		------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime11 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln11 as(
	
			SELECT  
			--REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
		--	convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
						,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime11 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 5
Union All

			SELECT  
				--REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			   -- convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					,DM.Base_Location

			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				   Adhoc_Fees As 'Adhoc (A)',
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark'
				     , Base_Location AS 	'Base Location'
				 
				  

				   


			
			 from get_daily_colln11 GIC
			 

			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



			


		



	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_OPDDailyCollection_For_Operator_comprehensive_billing]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  20 Nov 2017
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_OPDDailyCollection_For_Operator_comprehensive_billing]
   
	@p_date_FROMdate            DATE,
	@p_date_TOdate              DATE,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN


	SET NOCOUNT ON;
	BEGIN TRY

	
	--if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' ),
					DM.Base_Location

			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

			and  pv.Status_ID = 5

Union All

			SELECT  
				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					,DM.Base_Location
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Date;
			


			
------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime1 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln1 as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
					 ,PM.Clinic_ID
					 	,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime1 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 5

Union All

			SELECT  
				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					 ,PPA.Clinic_ID
					 ,DM.Base_Location

			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				   Adhoc_Fees As 'Adhoc (A)',
				   			
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark',
				   Base_Location AS 	'Base Location'


				   


			
			 from get_daily_colln1 GIC
			 

			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



		------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime11 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln11 as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
						,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime11 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 5
Union All

			SELECT  
				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					,DM.Base_Location

			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				   Adhoc_Fees As 'Adhoc (A)',
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark'
				     , Base_Location AS 	'Base Location'
				 
				  

				   


			
			 from get_daily_colln11 GIC
			 

			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



			


		



	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_OPDDailyCollection_For_Operator_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  11-DEC-2019
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator Service
-- Created By   :  
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_OPDDailyCollection_For_Operator_Services]
   
	@p_date_FROMdate            DATE,
	@p_date_TOdate              DATE,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN


	SET NOCOUNT ON;
	BEGIN TRY



	--if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' ),
					DM.Base_Location

			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

			and  pv.Status_ID = 8

--Union All

--			SELECT  
--				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
--			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
--					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID,
--					DM.Prefix+' '+DM.First_Name As doctr_name
--					,'Adhoc - Followup' as Is_follow_Up
--					,DM.Base_Location
					 
--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
--		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

--			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Date;
			


			
------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime1 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln1 as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
					 ,PM.Clinic_ID
					 	,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime1 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 8

--Union All

--			SELECT  
--				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
--			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
--					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID,
--					DM.Prefix+' '+DM.First_Name As doctr_name
--					,'Adhoc - Followup' as Is_follow_Up
--					 ,PPA.Clinic_ID
--					 ,DM.Base_Location

--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
--		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

--			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				   Adhoc_Fees As 'Adhoc (A)',
				   				BIO.*,
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark',
				   Base_Location AS 	'Base Location'


				   


			
			 from get_daily_colln1 GIC
			 
			 
			  LEFT JOIN		[dbo].[TempPatientBillingInfo4]   BIO  
				ON			GIC.Doctor_ID=BIO.Doctor_ID
				AND			GIC.Clinic_ID=BIO.Clinic_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				--AND		convert(char(8),  GIC.Visit_Date, 106)	=convert(char(8),  BIO.Visit_Date, 106)
				--AND			GIC.Patient_Visit_No = BIO.Patient_Visit_No
			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



		------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime11 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln11 as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
						,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime11 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 8
--Union All

--			SELECT  
--				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
--			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
--					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID,
--					DM.Prefix+' '+DM.First_Name As doctr_name
--					,'Adhoc - Followup' as Is_follow_Up
--					,DM.Base_Location

--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
--		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

--			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				   Adhoc_Fees As 'Adhoc (A)',
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark'
				     , Base_Location AS 	'Base Location'
				 
				  

				   


			
			 from get_daily_colln11 GIC
			 

			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



			


		



	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_AdmissionCard_data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 31 July 2017
-- Description:	This stored procedure is used to check whether patients invoice and Bill are already created for given IPD Number or Not 
-- =============================================

CREATE PROCEDURE [dbo].[USP_Get_Patient_AdmissionCard_data]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_RefNo	    	NVARCHAR(32),
	@p_nvar_IPD_Date			datetime
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT	ADV.[IPD_RefNo],
	ISNULL(CONVERT(VARCHAR(11),AD.[Admission_Date],106) +'-' + CONVERT(VARCHAR(11),AD.Admission_Time,108),'') AS Admission_Date,
	ad.ReasonOfAdmission as ReasonOfAdmission,
	ADV.Receipt_Number,adv.Date ,
	ADV.[IPD_RefNo],
	IIF(ad.isInsurance <> '0','Yes','No' ) as isInsurance, 
	ISNULL(CONVERT(VARCHAR(11),ADV.Advance_Date,106),'') AS DateofAdvance 
	, ADV.Doctor_ID ,ADV.Amount_Received
		,ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106) +'-' + CONVERT(VARCHAR(11),DD.Discharge_Time,108),'') AS Discharge_Date,

			SUM(ADV.Amount_Received) OVER () AS SumTotal,ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106),'') AS Validischargedate
				
			FROM		[dbo].Advance_Collection_details ADV

			INNER JOIN	Admission_Data AD
			ON			ADV.IPD_RefNo = AD.IPD_RefNo

					left JOIN	Discharge_Data DD
			ON			DD.IPD_RefNo = AD.IPD_RefNo

			WHERE	ADV.[Patient_ID]			=	@p_nvar_Patient_Id	
			and     ADV.Clinic_ID			=   @p_nvar_Clinic_ID			
			AND		ADV.IPD_RefNo				=   @p_nvar_IPD_RefNo 

			ORDER BY ADV.[IPD_RefNo] DESC



			    
	SELECT	ADV.Amount_Received ,ADV.Advance_Date, ADV.Payment_By_ID , ADV.Payment_Remark , ADv.Receipt_Number , ADv.Receipt_Date
			FROM		[dbo].Advance_Collection_details ADV

			INNER JOIN	Admission_Data AD
			ON			ADV.IPD_RefNo = AD.IPD_RefNo
			--Inner JOin  [dbo].[Payment_type_Master] PTM
			--ON			PTM.ID     = ADV.Payment_By_ID

			WHERE	ADV.[Patient_ID]			=	@p_nvar_Patient_Id	
			and     ADV.Clinic_ID			=   @p_nvar_Clinic_ID			
			AND		ADV.IPD_RefNo				=   @p_nvar_IPD_RefNo 
			AND		ADV.Date				=   @p_nvar_IPD_Date 



	
			select AD.Admission_Date , Ad.IPDFileNo , Ad.Department ,
			Ad.ReasonOfAdmission , ad.InsuranceDetails ,
			IIF(ad.isInsurance <> '0','Yes','No' ) as isInsurance, 
		    Ad.PackageRemarks
				,
			DBH.Bill_No  , DBH.Bill_Date ,
			DIH.Invoice_No , Ad.Admission_Time , dd.Discharge_Date , dd.Discharge_Time,
			AD.RoomNo,AD.BedNo
		
			from Admission_Data AD

			left join [dbo].[Discharge_Bill_Hdr] DBH
			on DBH.IPD_RefNo = AD.IPD_RefNo

			left join [dbo].[Discharge_Invoice_Hdr] DIH
			on DIH.IPD_RefNo = AD.IPD_RefNo
			
			left join [dbo].Discharge_Data DD
			on DD.IPD_RefNo = AD.IPD_RefNo
			
			where  Ad.IPD_RefNo = @p_nvar_IPD_RefNo and
				   Ad.[Patient_ID]			=	@p_nvar_Patient_Id	

			select sum(Amount_Received )
			as Amount from [Advance_Collection_details] 
			where IPD_RefNo = @p_nvar_IPD_RefNo and
			[Patient_ID]	=	@p_nvar_Patient_Id	
			


			
END


/****** Object:  StoredProcedure [dbo].[USP_Get_MRStatus]    Script Date: 16-Jan-18 8:12:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_All_Discharge_Cards]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 31 July 2017
-- Description:	This stored procedure is used to check whether patients invoice and Bill are already created for given IPD Number or Not 
-- =============================================

CREATE PROCEDURE [dbo].[USP_Get_Patient_All_Discharge_Cards]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT	[IPD_RefNo],[Admission_Time],[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Time],[Weight],[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],ISNULL([Keyword],'') AS Keyword,
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			--ISNULL(CONVERT(VARCHAR(11),VGI.[Admission_Date],106),'') AS Admission_Date,
			--ISNULL(CONVERT(VARCHAR(11),VGI.[Discharge_Date],106),'') AS Discharge_Date,

			ISNULL(CONVERT(VARCHAR(11),VGI.[Admission_Date],106)+'-' + CONVERT(VARCHAR(11), VGI.admission_time,108),'') AS Admission_Date,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Discharge_Date],106)+'-' + CONVERT(VARCHAR(11), VGI.Discharge_Time,108),'') AS Discharge_Date,

			VGI.Patient_ID
			,ISNULL((select  Sum(ACD.Amount_Received) as Amount_Received from Advance_Collection_details ACD   where ACD.IPD_RefNo = VGI.IPD_RefNo group by ACD.IPD_RefNo) , 0) as Amount_Received
				
			FROM		[dbo].[Discharge_Data] VGI

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID


			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
		--	AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 

			ORDER BY [IPD_RefNo] DESC

	SELECT	[IPD_RefNo],[Admission_Time],[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Time],[Weight],[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],ISNULL([Keyword],'') AS Keyword,
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Admission_Date],106),'') AS Admission_Date,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Discharge_Date],106),'') AS Discharge_Date,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name
			
				
			FROM		[dbo].[Discharge_Data] VGI

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID


			WHERE	--VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
					VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		ISNULL(VGI.Is_Printed,0)	=	0

			ORDER BY [IPD_RefNo] DESC

	SELECT	[IPD_RefNo],[Invoice_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Invoice_Date],106),'') AS Invoice_Date
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	--VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
					VGI.Doctor_ID				=   @p_nvar_Doctor_ID
			AND		ISNULL(VGI.Is_Printed,0)	=	0	

			ORDER BY [IPD_RefNo] DESC
			
	SELECT	VGI.IPD_RefNo,[Bill_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Bill_Date],106),'') AS Bill_Date,
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name
				
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	--VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
					VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		ISNULL(VGI.Is_Printed,0)	=	0	
			ORDER BY [IPD_RefNo] DESC
			

			    
	SELECT 	VGI.[IPD_RefNo],VGI.[Admission_Time],[Treating_Doctor],VGI.[IPD_No],
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Admission_Date],106)+'-' + CONVERT(VARCHAR(11), VGI.admission_time,108),'') AS Admission_Date,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Discharge_Date],106)+'-' + CONVERT(VARCHAR(11), VGI.Discharge_Time,108),'') AS Discharge_Date,
			Ad.reasonofadmission,
			IIF(ad.isInsurance <> '0','Yes','No' ) as isInsurance,
			Ad.InsuranceDetails,
	        ISNULL((select  Sum(ACD.Amount_Received) as Amount_Received from Advance_Collection_details ACD   where ACD.IPD_RefNo = VGI.IPD_RefNo group by ACD.IPD_RefNo) , 0) as Amount_Received
	
			
				
			FROM		[dbo].Admission_Data AD

			INNER JOIN	Patient_Master PM
			ON			AD.Patient_ID = PM.ID
			
			
			left JOIN	[Discharge_Data] VGI
			ON			VGI.IPD_RefNo = AD.IPD_RefNo 



			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
		--	AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 

			ORDER BY [IPD_RefNo] DESC


SELECT	VGI.[IPD_RefNo],VGI.[Admission_Time],[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Time],[Weight],[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],ISNULL([Keyword],'') AS Keyword,
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			--ISNULL(CONVERT(VARCHAR(11),VGI.[Admission_Date],106),'') AS Admission_Date,
			--ISNULL(CONVERT(VARCHAR(11),VGI.[Discharge_Date],106),'') AS Discharge_Date
						ISNULL(CONVERT(VARCHAR(11),VGI.[Admission_Date],106)+'-' + CONVERT(VARCHAR(11), VGI.admission_time,108),'') AS Admission_Date,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Discharge_Date],106)+'-' + CONVERT(VARCHAR(11), VGI.Discharge_Time,108),'') AS Discharge_Date,	VGI.Patient_ID,
			ISNULL((select  Sum(ACD.Amount_Received) as Amount_Received from Advance_Collection_details ACD   where ACD.IPD_RefNo = VGI.IPD_RefNo group by ACD.IPD_RefNo) , 0) as Amount_Received,
		    ---------------
			ad2.reasonofadmission,
			IIF(ad2.isInsurance <> '0','Yes','No' ) as isInsurance,
			ad2.InsuranceDetails,
			ISNULL(CONVERT(VARCHAR(11),DD.Advance_Date,106),'') AS DateofAdvance, 
			DD.Receipt_Number,DD.Date

			FROM		[dbo].[Discharge_Data] VGI

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			LEFT JOIN Admission_Data ad2
			ON VGI.IPD_RefNo = ad2.IPD_RefNo 
		
		    				left JOIN	Advance_Collection_details DD
			ON			VGI.IPD_RefNo = DD.IPD_RefNo 

			WHERE	--VGI.[Patient_ID]			=	@p_nvar_Patient_Id
				    VGI.Discharge_Date  IS NULL	
		--	AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 

			ORDER BY CONVERT (datetime, VGI.Admission_Date, 103) ASC


END


/****** Object:  StoredProcedure [dbo].[USP_Get_MRStatus]    Script Date: 16-Jan-18 8:12:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_AreaCode]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_AreaCode]

	@p_var_Pincode		NVARCHAR(60)
	
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
     if exists(
                           
                  SELECT Area_id      

                  FROM        Area_Translations
			
		        	WHERE	
		
					Area_id	=	'99999' 
              union

					select Area_id
					from [dbo].[Pincode_Translations]
					where Pincode=@p_var_Pincode
			)
			begin
			select 1 as SAVE_STATUS 
			end
			else
			begin
			select 0 as SAVE_STATUS 
			end
		  
			
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_SELECT_folderdetails]    Script Date: 16-Jan-18 8:16:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_Chronic_Filter]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 13 Sep 2017
-- Description: This stored procedure will Get Patient Last Visit Dates Chronic details for report
-- Created By : Varsha Khandre
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_Patient_Chronic_Filter]

	@p_var_Doctor_Id		 NVARCHAR(30),
	@p_var_Condition		 NVARCHAR(MAX)

AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		DECLARE @Excquery NVARCHAR (MAX)

      
SET @Excquery  =';WITH PatientVisitCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,PV.Patient_ID
										FROM [dbo].[Patient_Master]	PM
                                        
										INNER JOIN   Patient_Visits PV  ON PM.ID=PV.Patient_ID
										--AND		PM.Doctor_ID	=	PV.Doctor_ID
										
										WHERE	Status_ID=5
										AND		Delete_Flag= 0 
                                        
										GROUP BY PV.Patient_ID
									) ,
							PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
									PM.ID,
                                    PV.Patient_ID,Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,
									
									ISNULL(Blood_Pressure,'''') AS Blood_Pressure,
									ISNULL(Sugar,'''') AS Sugar,

									CASE WHEN IHD = 1 THEN ''Y'' ELSE ''N'' END AS IHD,
									CASE WHEN Cholestrol = 1 THEN ''Y'' ELSE ''N'' END AS Cholestrol,
									CASE WHEN Asthama = 1 THEN ''Y'' ELSE ''N'' END AS Asthama,
									CASE WHEN TH = 1 THEN ''Y'' ELSE ''N'' END AS TH,
									CASE WHEN Hypertension = 1 THEN ''Y'' ELSE ''N'' END AS Hypertension,
									CASE WHEN Diabetes = 1 THEN ''Y'' ELSE ''N'' END AS Diabetes,

									pm.First_Name+'' ''+pm.Middle_Name+'' ''+ pm.Last_Name as Full_Name,
									pm.Folder_No,
									Mobile_1 = CASE WHEN datalength(Mobile_1)=0 
									THEN ''--'' 
									ELSE Mobile_1 END,

									DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
									,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
									,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
									GT.Gender_Description,
									AT.Area_Name,
									PV1.PatientCount as PC,
								    CASE WHEN PV1.PatientCount = 0 THEN ''--'' ELSE PV1.PatientCount END  as PatientCount

                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Patient_Master PM
									ON	PV.Patient_ID = PM.ID
									--AND	PV.Doctor_ID = PM.Doctor_ID

									INNER JOIN	Gender_Translations GT
									ON			PM.Gender_ID=GT.Gender_ID

									INNER JOIN	Area_Translations AT
									ON		PM.Area_ID = AT.Area_ID

                                    LEFT JOIN PatientVisitCount PV1 ON PV1.Patient_ID = PV.Patient_ID
                        WHERE        
                                    --PV.Doctor_ID  = '+@p_var_Doctor_Id+' AND
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + '' '' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < SYSDATETIME()
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0 
						
						
                )
				
				SELECT * from PreviousVisits 
				where ROWNUM=1 AND ' +@p_var_Condition +'
			ORDER BY PC DESC	
				'

			exec (@Excquery)
				
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END














/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_All_Discharge_Cards]    Script Date: 16-Jan-18 8:12:28 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_ConsolidateReceiptAmountData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Get_Patient_ConsolidateReceiptAmountData]

@p_var_Clinic_ID NVARCHAR(10),
@p_var_Doctor_ID NVARCHAR(30),
@p_var_Patient_ID NVARCHAR(32),
@p_var_From_Visit_Date DATE,
@p_var_To_Visit_Date DATE

AS
BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY


;With CollectedAmount AS
(

SELECT SUM([Fees_Collected]) AS [Receipt_Amount]

FROM Patient_Visits VGI

WHERE VGI.[Patient_ID] = @p_var_Patient_ID
AND VGI.Clinic_ID = @p_var_Clinic_ID
--AND VGI.Doctor_ID = @p_var_Doctor_ID
AND VGI.Status_ID = 5
AND VGI.Visit_Date BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
AND VGI.Receipt_Number IS NULL

UNION ALL

SELECT SUM([Fees_Collected]) AS [Receipt_Amount]

FROM [dbo].[Patient_Payments_AdHoc] PPA
WHERE PPA.[Patient_ID] = @p_var_Patient_ID
AND PPA.Clinic_ID = @p_var_Clinic_ID
-- AND PPA.Doctor_ID = @p_var_Doctor_ID
AND CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
AND PPA.Receipt_Number IS NULL

)

SELECT SUM(Receipt_Amount) AS Receipt_Amount FROM CollectedAmount

SELECT Fees_Collected, 'Dr. ' + DM.First_Name AS Doctor,
--replace(CONVERT(NVARCHAR, VGI.Visit_Date, 106), ' ', '-')  + ' '  + STUFF (RIGHT (' '+ CONVERT(varchar(15), VGI.Visit_Time,0),7),6,0,' ')   AS Pay_Date,
replace(CONVERT(NVARCHAR, VGI.Visit_Date, 106), ' ', '-') + ' ' + STUFF (RIGHT ('0'+ CONVERT(varchar(15), VGI.Visit_Time,0),7),6,0,' ') AS Pay_Date,
VGI.Payment_Remark,PTM.Payment_Description AS Payment_By,'Visit' AS Type,replace(CONVERT(NVARCHAR, VGI.Visit_Date, 106), ' ', '-') + ' ' + STUFF (RIGHT ('0'+ CONVERT(varchar(15), VGI.Visit_Time,0),7),6,0,' ') AS Pay_Date_Sort
FROM Patient_Visits VGI INNER JOIN Doctor_Master DM ON
VGI.Doctor_ID=DM.Doctor_ID
INNER Join Payment_type_Master PTM ON
VGI.Payment_By_ID=PTM.ID
WHERE VGI.Patient_ID = @p_var_Patient_ID AND Fees_Collected Not IN ('0.00','0','00')
AND VGI.Clinic_ID = @p_var_Clinic_ID

AND VGI.Status_ID = 5
AND VGI.Visit_Date BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
AND VGI.Receipt_Number IS NULL

UNION ALL

SELECT PPA.Fees_Collected,'Dr. ' + DM.First_Name AS Doctor,
--PPA.Payment_Date AS Pay_Date,
replace(CONVERT(NVARCHAR, PPA.Payment_Date, 106), ' ', '-') + ' ' + REPLACE(REPLACE(RIGHT('0'+LTRIM(RIGHT(CONVERT(varchar,PPA.Payment_Date,100),7)),7),'AM',' AM'),'PM',' PM') AS Pay_Date,
PPA.Payment_Remark,
PTM.Payment_Description AS Payment_By,'Adhoc' AS Type,PPA.Payment_Date AS Pay_Date_Sort
FROM Patient_Payments_AdHoc PPA
INNER JOIN Payment_type_Master PTM ON
PPA.Payment_By_ID=PTM.ID
INNER JOIN Doctor_Master DM ON
PPA.Doctor_ID=DM.Doctor_ID
WHERE PPA.Patient_ID = @p_var_Patient_ID AND Fees_Collected Not IN ('0.00','0','00')
AND PPA.Clinic_ID = @p_var_Clinic_ID

AND CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
AND PPA.Receipt_Number IS NULL

ORDER BY Pay_Date_Sort DESC

END TRY
BEGIN CATCH
SELECT
ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_ConsolidateReceiptAmountData_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[USP_Get_Patient_ConsolidateReceiptAmountData_Services]

@p_var_Clinic_ID NVARCHAR(10),
@p_var_Doctor_ID NVARCHAR(30),
@p_var_Patient_ID NVARCHAR(32),
@p_var_From_Visit_Date DATE,
@p_var_To_Visit_Date DATE

AS
BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY


;With CollectedAmount AS
(

SELECT SUM([Fees_Collected]) AS [Receipt_Amount]

FROM Patient_Visits_Services VGI

WHERE VGI.[Patient_ID] = @p_var_Patient_ID
AND VGI.Clinic_ID = @p_var_Clinic_ID
--AND VGI.Doctor_ID = @p_var_Doctor_ID
AND VGI.Status_ID = 8
AND VGI.Visit_Date BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
AND VGI.Receipt_Number IS NULL

-- UNION ALL

-- SELECT SUM([Fees_Collected]) AS [Receipt_Amount]

--FROM [dbo].[Patient_Payments_AdHoc] PPA
--WHERE PPA.[Patient_ID] = @p_var_Patient_ID
-- AND PPA.Clinic_ID = @p_var_Clinic_ID
---- AND PPA.Doctor_ID = @p_var_Doctor_ID
-- AND CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
-- AND PPA.Receipt_Number IS NULL

)

SELECT SUM(Receipt_Amount) AS Receipt_Amount FROM CollectedAmount

SELECT Fees_Collected, 'Dr. ' + DM.First_Name AS Doctor,
--VGI.Visit_Date AS Pay_Date,
replace(CONVERT(NVARCHAR, VGI.Visit_Date, 106), ' ', '-') + ' ' + STUFF (RIGHT ('0'+ CONVERT(varchar(15), VGI.Visit_Time,0),7),6,0,' ') AS Pay_Date,
VGI.Payment_Remark,PTM.Payment_Description AS Payment_By,'Visit' AS Type,replace(CONVERT(NVARCHAR, VGI.Visit_Date, 106), ' ', '-') + ' ' + STUFF (RIGHT ('0'+ CONVERT(varchar(15), VGI.Visit_Time,0),7),6,0,' ') AS Visit_Date_Sort
FROM Patient_Visits_Services VGI INNER JOIN [dbo].[Doctor_Master] DM ON
VGI.Doctor_ID=DM.Doctor_ID
INNER Join Payment_type_Master PTM ON
VGI.Payment_By_ID=PTM.ID
WHERE VGI.Patient_ID = @p_var_Patient_ID AND Fees_Collected Not IN ('0.00','0','00')
AND VGI.Clinic_ID = @p_var_Clinic_ID

AND VGI.Status_ID = 8
AND VGI.Visit_Date BETWEEN @p_var_From_Visit_Date AND @p_var_To_Visit_Date
AND VGI.Receipt_Number IS NULL
ORDER BY Visit_Date_Sort DESC

END TRY
BEGIN CATCH
SELECT
ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_DischargeCard_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 21 July 2017
-- Description:	This stored procedure is used to get patient discharge card data data
-- =============================================

CREATE PROCEDURE [dbo].[USP_Get_Patient_DischargeCard_Data]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100),
	@p_nvar_Invoice_No			NVARCHAR(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT	VGI.[IPD_RefNo],VGI.[Admission_Date],VGI.[Admission_Time],VGI.[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Date],[Discharge_Time],[Weight],VGI.[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],ISNULL([Keyword],'') AS Keyword,
			[Operation_Start_Date],[Operation_End_Date],[Operation_Start_Time],[Operation_End_Time],ISNULL([Operative_Notes],'') AS Operative_Notes,
			ISNULL([Remark],'') AS Remark,ISNULL([Follow_up_comments],'') AS Follow_up_comments,[Anesthesia],VGI.Doctor_ID ,ReasonForDischarge,Dm.Emergency_Number
			, ISNULL(AD.InsuranceDetails,'') AS  Company,VGI.Referred_Doctor,VGI.[Condition_Discharge],VGI.[Footer],VGI.Printed_On_Date,VGI.Printed_On_Date_OP
			,VGI.Room,VGI.BedNo,[Admitted_Days],[OT_hours],AD.Department,VGI.[FollowUp_Date]

			FROM		[dbo].[Discharge_Data] VGI

			inner join Doctor_Master DM on DM.doctor_ID = @p_nvar_Doctor_ID

			left join admission_data AD on
			AD.IPD_RefNo = @p_nvar_IPD_No



			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			--AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No

	SELECT  [IPD_RefNo],[Attachment_Path],ID

	FROM	[dbo].[Discharge_Investigations] DI
	WHERE			DI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		DI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		DI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		DI.IPD_RefNo				=	@p_nvar_IPD_No

	SELECT	[IPD_RefNo],[Invoice_No],VGI.[Description],VGI.[Unit_Price],VGI.[Quantity],VGI.[Description]+'*'+CONVERT(VARCHAR(MAX),VGI.[Unit_Price])+'*'+CONVERT(VARCHAR(MAX),VGI.[Quantity]) AS ID,Doctor_ID
				
			FROM		[dbo].[Discharge_Invoice_Details] VGI

			INNER JOIN	IPD_INVOICE_MEDICINEMASTER INM
			ON			INM.Description = VGI.Description

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.[Invoice_No]			=	@p_nvar_Invoice_No
			AND		ISNULL(VGI.[Delete_Flag],0)		=	0

			ORDER BY INM.SortOrder


	SELECT	[IPD_RefNo],[Invoice_No],[Invoice_Date],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],Doctor_ID
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
		--	AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.[Invoice_No]			=	@p_nvar_Invoice_No


	SELECT	'' AS IDCharges, VGI.Date_Of_Service as HospitalBillDate, VGI.Date_Of_Service as hdnlblHstplAddDate,[IPD_RefNo],[Bill_No],VGI.[Charges_Category],VGI.[Charges_SubCategory],VGI.[Comments],VGI.[Amount],VGI.[Charges_Category]+'*'+CONVERT(VARCHAR(MAX),VGI.[Charges_SubCategory])+'*'+CONVERT(VARCHAR(MAX),VGI.[Amount]) AS ID,Doctor_ID
	        ,VGI.[Total_Amount] ,VGI.No_Of_Units as UNITS,VGI.Calculation_Type
				
			FROM	[dbo].[Discharge_Bill_Details] VGI

			INNER JOIN  IPD_BillData_CHARGESMASTER IBC
			ON			VGI.Charges_Category = IBC.Charges_Category
			AND			VGI.Charges_SubCategory	=	IBC.Charges_SubCategory

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
		--	AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.Bill_No					=	@p_nvar_Invoice_No
			AND		ISNULL(VGI.[Delete_Flag],0)		=	0

			ORDER BY VGI.Date_Of_Service asc -- IBC.SortOrder

	SELECT	VGI.IPD_RefNo,[Bill_No],[Bill_Date],VGI.Adjust_Advance,[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,VGI.Doctor_ID, AD.Insurancedetails , VGI.TDS
				
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo 

		
			left join admission_data AD on
			AD.IPD_RefNo = VGI.IPD_RefNo 



			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			--AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.IPD_RefNo				=	@p_nvar_IPD_No
			AND		VGI.Bill_No					=	@p_nvar_Invoice_No

		
		SELECT	[Obstetric_History],
				[Date_Of_Delivery],
				[Time_Of_Delivery],
				[Labour_Name],
				[Operative_Interference],
				[Indication],
				[Puerperium],
				[Child_Sex],
				[Wt_At_Birth],
				[Wt_At_Discharge],
				[Clinic_ID],
				[Doctor_ID],
				[Shift_ID],
				[Patient_ID],
				IPD_Ref_Id
						,[Date_Of_Delivery1]
				,[Time_Of_Delivery1]
				,[Child_Sex1]
				,[Wt_At_Birth1]
				,[Wt_At_Discharge1]
				,[Date_Of_Delivery2]
				,[Time_Of_Delivery2]
				,[Child_Sex2]
				,[Wt_At_Birth2]
				,[Wt_At_Discharge2]
				,[remark]
		FROM	[dbo].[IPD_Labour_Card] VGI
		WHERE	VGI.IPD_Ref_Id		=	@p_nvar_IPD_No	
		--AND		VGI.IPD_RefNo	=	@p_nvar_IPD_No
		
		
		
		
			select Sum(Amount_Received) as Amount_Received from [dbo].[Advance_Collection_details]
			where IPD_RefNo = @p_nvar_IPD_No

		
		
			 select max(advance_date) as Last_Adavance_date  from Advance_Collection_details where IPD_RefNo = @p_nvar_IPD_No

	
END


/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_ConsolidateReceiptAmountData]    Script Date: 16-Jan-18 8:12:32 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_FeesDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author : INCRUST
-- Create date : 25-Mar-2016
-- Description : This stored procedure will get patient details pop up
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_FeesDetails]
@p_var_Patient_Id NVARCHAR(32),
@p_var_Doctor_ID NVARCHAR(30)

AS
BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY




;WITH FeesCollectionData AS
(
SELECT Pv.Patient_ID,
pm.First_Name+' '+pm.Last_Name as Full_Name,
pv.Patient_Visit_No,
pv.Visit_Date AS Visit_Date,
pv.Fees_To_Collect AS Bill,
pv.Fees_Collected as Collected,
pm.Folder_No,
((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance ,
pv.Discount as Discount ,
(pv.Fees_To_Collect - pv.Discount ) as Dues ,
STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,
LEFT(SM.Description,1) AS ShiftDescription,
SR.Status_Description AS Status_Description,
null AS ISadhoc,ISNULL(pv.[Receipt_Number],'') AS Receipt_Number,
ISNULL(pv.Receipt_Type,'') AS Receipt_Type,
DM.Prefix+' '+DM.First_Name AS DoctorName--,
--''AS Visit_Time_sss
FROM Patient_Master pm

INNER JOIN Patient_Visits pv

ON pm.ID = Pv.Patient_ID
--PM.Doctor_ID = PV.Doctor_ID

INNER JOIN Shift_Master SM
ON pv.Shift_ID=SM.Shift_ID

INNER JOIN Status_Ref SR
ON pv.Status_ID=SR.ID

INNER JOIN Doctor_Master DM ON
DM.Doctor_ID = PV.Doctor_ID

WHERE pm.ID = @p_var_Patient_Id
--AND pm.Doctor_ID = @p_var_Doctor_ID
AND pv.Delete_Flag= 0
AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
AND pv.Fees_Collected IS NOT NULL
AND pv.Status_ID=5

UNION ALL

SELECT Pv.Patient_ID,
pm.First_Name+' '+pm.Last_Name as Full_Name,
pv.Patient_Visit_No,
pv.Visit_Date AS Visit_Date,
pv.Fees_To_Collect AS Bill,
pv.Fees_Collected as Collected,
pm.Folder_No,
((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance ,
pv.Discount as Discount ,
(pv.Fees_To_Collect - pv.Discount ) as Dues ,
STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,
LEFT(SM.Description,1) AS ShiftDescription,
SR.Status_Description AS Status_Description,
null AS ISadhoc,ISNULL(pv.[Receipt_Number],'') AS Receipt_Number,
'' AS Receipt_Type,
DM.Prefix+' '+DM.First_Name AS DoctorName--,
--''AS Visit_Time_sss
FROM Patient_Master pm

INNER JOIN Patient_Visits_Services pv

ON pm.ID = Pv.Patient_ID
--PM.Doctor_ID = PV.Doctor_ID

INNER JOIN Shift_Master SM
ON pv.Shift_ID=SM.Shift_ID

INNER JOIN Status_Ref SR
ON pv.Status_ID=SR.ID

INNER JOIN Doctor_Master DM ON
DM.Doctor_ID = PV.Doctor_ID

WHERE pm.ID = @p_var_Patient_Id
--AND pm.Doctor_ID = @p_var_Doctor_ID
AND pv.Delete_Flag= 0
AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
AND pv.Fees_Collected IS NOT NULL
AND pv.Status_ID=8

UNION ALL

SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
[Fees_Collected] AS Collected , pm.Folder_No, 0 - [Fees_Collected] AS Balance, 0 as Discount , 0 as Dues,right(convert(varchar,Payment_Date),7) AS Visit_Time,

LEFT(SM.Description,1) AS ShiftDescription,null,'Y' AS ISadhoc,ISNULL(PV.[Receipt_Number],'') AS Receipt_Number,
ISNULL(PV.Receipt_Type,'') AS Receipt_Type, PV.Attended_By AS DoctorName


FROM Patient_Payments_AdHoc PV

INNER JOIN Patient_Master pm
ON pm.ID = Pv.Patient_ID
--PM.Doctor_ID = PV.Doctor_ID

INNER JOIN Shift_Master SM
ON PV.Shift_ID=SM.Shift_ID


INNER JOIN Doctor_Master DM ON
DM.Doctor_ID = PV.Doctor_ID


WHERE pm.ID = @p_var_Patient_Id
--AND pm.Doctor_ID = @p_var_Doctor_ID
AND pv.Delete_Flag = 0
)

SELECT Patient_ID, Full_Name, Patient_Visit_No, replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') + ' - ' + Visit_Time + ' - ' +CONVERT(varchar(15),ShiftDescription)
AS LAST_VISIT_DATE,
Visit_Date,
Bill, Collected, Folder_No, Balance,Discount,Dues,Visit_Time,Status_Description,ISadhoc,Receipt_Type+' '+Receipt_Number as Receipt_Number,DoctorName
FROM FeesCollectionData
ORDER BY Visit_Date desc
--ORDER BY LAST_VISIT_DATE DESC




IF EXISTS(
SELECT Folder_No FROM Patient_Master WHERE
ID=@p_var_Patient_Id
--AND Doctor_ID=@p_var_Doctor_ID
)

BEGIN
SELECT Folder_No AS Folder_No,First_Name+' '+Last_Name as Full_Name
FROM Patient_Master
WHERE ID=@p_var_Patient_Id
--AND Doctor_ID=@p_var_Doctor_ID
END




END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END



/***** Object: StoredProcedure [dbo].[USP_Get_Hospital_Bill] Script Date: 24-Oct-2018 4:07:37 PM *****/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_FeesDetails_TopDefault]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will get patient's folder pending amount details on pop up
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_Patient_FeesDetails_TopDefault]

	@p_var_Patient_Id	  NVARCHAR(32),
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_var_Clinic_ID	  NVARCHAR(32),
	@p_var_Language_ID	  INT

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		

		
		 ;WITH FeesCollectionData AS 
		 (
			SELECT	DISTINCT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,
					(pv.Fees_To_Collect - (pv.Fees_Collected )) as Balance,convert(char(8), pv.Visit_Time, 108) AS Visit_Time,
					LEFT(SM.Description,1) AS ShiftDescription,SR.Status_Description AS Status_Description,null AS ISadhoc,
					CM.Clinic_Name
					
			FROM	Patient_Master pm 
			
			INNER JOIN Patient_Visits pv
			
			ON		pm.ID			=	Pv.Patient_ID and
					PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Shift_Master SM
			ON			pv.Shift_ID=SM.Shift_ID

			INNER JOIN	Status_Ref SR
			ON			pv.Status_ID=SR.ID

			INNER JOIN	Clinic_Master CM
			ON			PV.Clinic_ID=CM.Clinic_ID
			
			WHERE	pm.ID			=	@p_var_Patient_Id
			AND		pm.Doctor_ID	=   @p_var_Doctor_ID
			AND	   pv.Delete_Flag= 0 
			AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND pv.Fees_Collected IS NOT NULL 
			AND pv.Status_ID=5
			--AND	pv.Clinic_ID=@p_var_Clinic_ID
		
			UNION ALL

			SELECT DISTINCT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
					Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
					[Fees_Collected] AS Collected , pm.Folder_No,	0 - [Fees_Collected]  AS Balance,
					convert(char(8), convert(time,Payment_Date), 108) AS Visit_Time,
					LEFT(SM.Description,1) AS ShiftDescription,null,'Y' AS ISadhoc,
					CM.Clinic_Name
					
					
			FROM	Patient_Payments_AdHoc PV

			INNER JOIN Patient_Master pm  
			ON		pm.ID			=	Pv.Patient_ID and
					PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN Shift_Master SM
			ON		PV.Shift_ID=SM.Shift_ID

			INNER JOIN Clinic_Master CM
			ON			PV.Clinic_ID=CM.Clinic_ID


			WHERE	pm.ID			=	@p_var_Patient_Id
			AND		pm.Doctor_ID	=   @p_var_Doctor_ID
			AND		pv.Delete_Flag	=	0 
			--AND		pv.Clinic_ID=@p_var_Clinic_ID
		)

		SELECT		Patient_ID, Full_Name, Patient_Visit_No,  Visit_Date,
					Bill, Collected, Folder_No, Balance,Visit_Time,ShiftDescription,Status_Description,ISadhoc,Clinic_Name
		FROM		FeesCollectionData
		ORDER BY	Visit_Date ASC
		
		
		
		
		IF EXISTS(
			SELECT Folder_No FROM Patient_Master WHERE 
			ID=@p_var_Patient_Id
			AND	Doctor_ID=@p_var_Doctor_ID
		)

		BEGIN
			SELECT	Folder_No AS  Folder_No,First_Name+' '+Last_Name as Full_Name,GT.Gender_Description,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					PM.Mobile_1
			FROM	Patient_Master PM

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	ID=@p_var_Patient_Id
			AND		Doctor_ID=@p_var_Doctor_ID
			AND		GT.Language_Id=@p_var_Language_ID
		END

		
		

	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END






/****** Object:  StoredProcedure [dbo].[USP_Get_AllDoctors]    Script Date: 25-Jan-18 11:05:58 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_FeesDetails_TopDefaulter]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  07-Jul-2016
-- Description	:  This stored procedure will get patient's folder pending amount details on pop up
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_Patient_FeesDetails_TopDefaulter]

	@p_var_Patient_Id	  NVARCHAR(32),
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_var_Clinic_ID	  NVARCHAR(32),
	@p_var_Language_ID	  INT

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		

		
		 ;WITH FeesCollectionData AS 
		 (
			SELECT	DISTINCT 	Pv.Patient_ID,
			pm.First_Name+' '+pm.Last_Name as Full_Name,
			pv.Patient_Visit_No,
			pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,
					pv.Fees_Collected   as Collected,
					pm.Folder_No,
					((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance ,
					 pv.Discount as Discount ,
					 (pv.Fees_To_Collect - pv.Discount ) as Dues ,
					STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,
					LEFT(SM.Description,1) AS ShiftDescription,
					SR.Status_Description AS Status_Description,
					null AS ISadhoc,ISNULL(pv.[Receipt_Number],'') AS Receipt_Number,
					ISNULL(pv.Receipt_Type,'') AS Receipt_Type,
					DM.Prefix+' '+DM.First_Name AS DoctorName--,
					--''AS Visit_Time_sss
			FROM	Patient_Master pm 
			
			INNER JOIN Patient_Visits pv
			
			ON		pm.ID			=	Pv.Patient_ID --and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Shift_Master SM
			ON			pv.Shift_ID=SM.Shift_ID

			INNER JOIN	Status_Ref SR
			ON			pv.Status_ID=SR.ID

			INNER JOIN	Clinic_Master CM
			ON			PV.Clinic_ID=CM.Clinic_ID
			
			 INNER JOIN Doctor_Master DM ON
               DM.Doctor_ID = PV.Doctor_ID

			WHERE	pm.ID			=	@p_var_Patient_Id
			--AND		pm.Doctor_ID	=   @p_var_Doctor_ID
			AND	   pv.Delete_Flag= 0 
			AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND pv.Fees_Collected IS NOT NULL 
			AND pv.Status_ID=5
			--AND	pv.Clinic_ID=@p_var_Clinic_ID
		    UNION ALL

			SELECT	DISTINCT 
						Pv.Patient_ID,
			pm.First_Name+' '+pm.Last_Name as Full_Name,
			pv.Patient_Visit_No,
			pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,
					pv.Fees_Collected   as Collected,
					pm.Folder_No,
					((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance ,
					 pv.Discount as Discount ,
					 (pv.Fees_To_Collect - pv.Discount ) as Dues ,
					STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,
					LEFT(SM.Description,1) AS ShiftDescription,
					SR.Status_Description AS Status_Description,
					null AS ISadhoc,ISNULL(pv.[Receipt_Number],'') AS Receipt_Number,
				'' AS Receipt_Type,
					DM.Prefix+' '+DM.First_Name AS DoctorName--,
			FROM	Patient_Master pm 
			
			INNER JOIN Patient_Visits_Services pv
			
			ON		pm.ID			=	Pv.Patient_ID --and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Shift_Master SM
			ON			pv.Shift_ID=SM.Shift_ID

			INNER JOIN	Status_Ref SR
			ON			pv.Status_ID=SR.ID

			INNER JOIN	Clinic_Master CM
			ON			PV.Clinic_ID=CM.Clinic_ID

				 INNER JOIN Doctor_Master DM ON
               DM.Doctor_ID = PV.Doctor_ID

			WHERE	pm.ID			=	@p_var_Patient_Id
			--AND		pm.Doctor_ID	=   @p_var_Doctor_ID
			AND	   pv.Delete_Flag= 0 
			AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND pv.Fees_Collected IS NOT NULL 
			AND pv.Status_ID=8
			

			UNION ALL

			SELECT DISTINCT 	 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
					Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
					[Fees_Collected] AS Collected , pm.Folder_No,	0 - [Fees_Collected]  AS Balance, 0 as Discount  , 0 as Dues,right(convert(varchar,Payment_Date),7) AS Visit_Time,
				
					LEFT(SM.Description,1) AS ShiftDescription,null,'Y' AS ISadhoc,ISNULL(PV.[Receipt_Number],'') AS Receipt_Number,
					ISNULL(PV.Receipt_Type,'') AS Receipt_Type, PV.Attended_By AS DoctorName
					
				
					
			FROM	Patient_Payments_AdHoc PV

			INNER JOIN Patient_Master pm  
			ON		pm.ID			=	Pv.Patient_ID and
					PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN Shift_Master SM
			ON		PV.Shift_ID=SM.Shift_ID

			INNER JOIN Clinic_Master CM
			ON			PV.Clinic_ID=CM.Clinic_ID

		

  INNER JOIN Doctor_Master DM ON
               DM.Doctor_ID = PV.Doctor_ID


			WHERE	pm.ID			=	@p_var_Patient_Id
			--AND		pm.Doctor_ID	=   @p_var_Doctor_ID
			AND		pv.Delete_Flag	=	0 
			--AND		pv.Clinic_ID=@p_var_Clinic_ID
		)

			SELECT Patient_ID, Full_Name, Patient_Visit_No,  replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  +  Visit_Time + ' - '  +CONVERT(varchar(15),ShiftDescription)
                                 AS LAST_VISIT_DATE,
				Bill, Collected, Folder_No, Balance,Discount,Dues,Visit_Time,Status_Description,ISadhoc,Receipt_Type+' '+Receipt_Number as Receipt_Number,DoctorName
		FROM FeesCollectionData
		ORDER BY Visit_Date desc
		
		
		
		IF EXISTS(
			SELECT Folder_No FROM Patient_Master WHERE 
			ID=@p_var_Patient_Id
			--AND	Doctor_ID=@p_var_Doctor_ID
		)

		BEGIN
			SELECT	Folder_No AS  Folder_No,First_Name+' '+Last_Name as Full_Name,GT.Gender_Description,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					PM.Mobile_1
			FROM	Patient_Master PM

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	ID=@p_var_Patient_Id
		--	AND		Doctor_ID=@p_var_Doctor_ID
			AND		GT.Language_Id=@p_var_Language_ID
		END

		
		

	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END






/***** Object:  StoredProcedure [dbo].[USP_Get_AllDoctors]    Script Date: 25-Jan-18 11:05:58 AM *****/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_HospitalBill_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  [dbo].[USP_Get_Patient_HospitalBill_Data]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100),
	@p_nvar_Invoice_No			NVARCHAR(100)
AS
BEGIN
	
	SET NOCOUNT ON;

   
	
	SELECT	[IPD_RefNo],[Invoice_No],VGI.[Description],VGI.[Unit_Price],VGI.[Quantity],VGI.[Description]+'*'+CONVERT(VARCHAR(MAX),VGI.[Unit_Price])+'*'+CONVERT(VARCHAR(MAX),VGI.[Quantity]) AS ID
				
			FROM		[dbo].[Discharge_Invoice_Details] VGI

			INNER JOIN	IPD_INVOICE_MEDICINEMASTER INM
			ON			INM.Description = VGI.Description

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.[Invoice_No]			=	@p_nvar_Invoice_No
			AND		ISNULL(VGI.[Delete_Flag],0)		=	0

			ORDER BY INM.SortOrder;

END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_InvoiceBill_Data]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_InvoiceBill_Data]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100),
	@p_nvar_Invoice_No			NVARCHAR(100)
AS
BEGIN
	
	SELECT	[IPD_RefNo],[Invoice_No],VGI.[Description],VGI.[Unit_Price],VGI.[Quantity],VGI.[Description]+'*'+CONVERT(VARCHAR(MAX),VGI.[Unit_Price])+'*'+CONVERT(VARCHAR(MAX),VGI.[Quantity]) AS ID
				
			FROM		[dbo].[Discharge_Invoice_Details] VGI

			INNER JOIN	IPD_INVOICE_MEDICINEMASTER INM
			ON			INM.Description = VGI.Description

			WHERE	VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			--AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			AND		VGI.[Invoice_No]			=	@p_nvar_Invoice_No
			AND		ISNULL(VGI.[Delete_Flag],0)		=	0

			ORDER BY INM.SortOrder
	
END

/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_FeesDetails_TopDefault]    Script Date: 16-Jan-18 8:12:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_LastVisitNumber]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date:12 july 2016
-- Description:	This stored procedure is used to get patient last visit number 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_LastVisitNumber]
	@p_var_Doctor_Id		 NVARCHAR(100),
	@p_var_Clinic_ID			NVARCHAR(100),
	@p_var_Patient_ID			NVARCHAR(100)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT MAX(Patient_Visit_No) -1 AS Patient_Last_Visit
	FROM	Patient_Visits
	WHERE	Doctor_ID= @p_var_Doctor_Id
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID;
	
	SELECT MAX(Patient_Visit_No)  Patient_Visit_No
	FROM	Patient_Visits
	WHERE	Doctor_ID= @p_var_Doctor_Id
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID;
END


/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_InvoiceBill_Data]    Script Date: 16-Jan-18 8:12:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_Previous_Visits]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ============================================================================================================
-- Author     :  INCRUST
-- Create date: 10 OCT 2017
-- Description: This stored procedure will Get The Patients Previous Visit Visit Dates
-- Created By : Varsha Khandre
-- ============================================================================================================

CREATE PROCEDURE [dbo].[USP_Get_Patient_Previous_Visits]

	@p_var_Patient_ID		 NVARCHAR(32),
	@p_var_Doctor_Id		 NVARCHAR(30),
	@p_var_Clinic_Id		 NVARCHAR(10),
	@p_date_TodyasVisitDate     DATE
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY

		
                         ;WITH  PreviousVisits AS 
                (
                        SELECT     DISTINCT ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      PV.Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,PV.Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,PV.Instructions,PV.Fees_To_Collect,
									PV.Fees_Collected,Medicine_Name=STUFF((SELECT ', ' + Medicine_Name
													   FROM Visit_Prescription_Overwrite b 
													   WHERE b.Patient_ID=PV.Patient_ID
																				AND	b.Visit_Date=PV.Visit_Date
																				AND	b.Patient_Visit_No=PV.Patient_Visit_No
																				AND	b.Doctor_ID=pv.Doctor_ID
																				AND	b.Clinic_ID=PV.Clinic_ID
																				AND b.Delete_Indicator=0
													   FOR XML PATH('')), 1, 2, ''),
									PV.Weight_IN_KGS,PV.Visit_Comments,Observation,
									'Patient_Visit' AS Visit_Type,
									Complaints=STUFF((SELECT ', ' + Complaint_Description
													   FROM Visit_Complaints b 
													   WHERE	b.Patient_ID=PV.Patient_ID
																AND	b.Visit_Date=PV.Visit_Date
																AND	b.Patient_Visit_No=PV.Patient_Visit_No
																AND	b.Doctor_ID=pv.Doctor_ID
																AND	b.Clinic_ID=PV.Clinic_ID
																AND b.Delete_Flag=0
													   FOR XML PATH('')), 1, 2, ''),
									FUT.[FollowUp_Description] AS FollowUp_Description,
									Diagnosis=STUFF((SELECT ', ' + Desease_Description
													   FROM Visit_Diagnosis b 
													   WHERE	b.Patient_ID=PV.Patient_ID
																AND	b.Visit_Date=PV.Visit_Date
																AND	b.Patient_Visit_No=PV.Patient_Visit_No
																AND	b.Doctor_ID=pv.Doctor_ID
																AND	b.Clinic_ID=PV.Clinic_ID
																AND b.Delete_Flag=0
													   FOR XML PATH('')), 1, 2, ''),
									DM.Prefix+' '+DM.First_Name  AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END,
									ISNULL(PV.[Addendum],'') AS Addendum
													  
									

                        FROM        Patient_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									LEFT JOIN [dbo].[Follow-Up_type] FUT
									ON	  PV.[follow_up_type]	=	FUT.ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID
									
                                   
                        WHERE        
                                    --PV.Doctor_ID  =@p_var_Doctor_Id
                                 CONVERT(DATETIME, CONVERT(CHAR(8),PV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    <= CONVERT(DATETIME, CONVERT(CHAR(8),GETDATE(),112) + ' ' + CONVERT(CHAR(8), GETDATE(),108))
                                                                           
                        AND               Status_ID = 5 
                        AND               PV.Delete_Flag = 0
						AND			PV.Patient_ID=@p_var_Patient_ID
						--AND			PV.Clinic_ID=  @p_var_Clinic_Id	--newly added


                                 
                                        
                                            
                )

				      SELECT    replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') AS Visit_Date , 
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ISNULL(Medicine_Name,'') AS Medicine_Name,
								Instructions,
								Fees_To_Collect,
								Fees_Collected,
								ISNULL(Weight_IN_KGS,0) AS Weight_IN_KGS,
								ISNULL(Visit_Comments,'') AS Visit_Comments,
								
								Visit_Type,
								Complaints,
								Observation,
								FollowUp_Description,
								Diagnosis,
								DoctorName,
								--DoctorName +' '+ P+' '+L+' '+R AS PLR,
								P+' '+L+' '+R AS PLR,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108) +' - '+ShiftDesc AS Visit_Date_Shift,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108)+ ' * '  +	CONVERT(varchar(15), Shift_id) + ' * '  +replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')
								+ ' * '  + convert(nvarchar(max), Patient_Visit_No,108)  AS DATE_TIME_NUMBER,Doctor_ID  as prevDoctor_ID,
								Addendum
								
					FROM PreviousVisits order by ROWNUM ASC
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END







/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 29-Jan-18 11:39:55 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintdata_PopUp]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 21-Mar-2017
-- Description: This stored procedure will Get Patient Receipt Data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_RePrintdata_PopUp]

	@p_var_Receipt_no								NVARCHAR(10),
	@p_var_language_ID									INT,
	@p_var_Patient_Id								  NVARCHAR(32)


AS
BEGIN

declare @Visit_type nvarchar(10)





	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY



	  

		  SELECT		 @Visit_type = VGI.Visit_Type 
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE		VGI.Receipt_Number			=	@p_var_Receipt_no	
			AND			GT.Language_Id				=	@p_var_language_ID
		    AND          VGI.Patient_ID				=   @p_var_Patient_Id


			if (@Visit_type = 'V')
			begin
					  SELECT		VGI.[Receipt_Number],VGI.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						VGI.To_Date,VGI.From_Date,VGI.Patient_Visit_No,VGI.Doctor_ID,
					PTM.Payment_Description as Payment_Description 
						,PV.Payment_Remark as  Payment_Remark
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			left Join patient_Visits PV
			on PV.Patient_ID = VGI.Patient_ID 
			and PV.Receipt_Number  = @p_var_Receipt_no

			left join Payment_type_Master PTM 
			on PTM.ID = PV.payment_by_ID

			WHERE		VGI.Receipt_Number			=	@p_var_Receipt_no	
			AND			GT.Language_Id				=	@p_var_language_ID
		    AND          VGI.Patient_ID				=   @p_var_Patient_Id
			end
			else
			begin
						SELECT VGI.[Receipt_Number],VGI.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						VGI.To_Date,VGI.From_Date,VGI.Patient_Visit_No,VGI.Doctor_ID,
						PTM.Payment_Description as Payment_Description 
						,PPA.Payment_Remark as  Payment_Remark
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			
			left Join Patient_Payments_AdHoc PPA
			on PPA.Patient_ID = VGI.Patient_ID 
			and PPA.Receipt_Number  = @p_var_Receipt_no

			left join Payment_type_Master PTM 
			on PTM.ID = PPA.payment_by_ID


			WHERE		VGI.Receipt_Number			=	@p_var_Receipt_no	
			AND			GT.Language_Id				=	@p_var_language_ID
		    AND          VGI.Patient_ID				=   @p_var_Patient_Id
			end



			
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_Previous_Visits]    Script Date: 16-Jan-18 8:12:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintdata_PopUp_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author     : INCRUST
-- Create date: 17-Dec-2019
-- Description: This stored procedure will Get Patient Receipt Data Services
-- Created By : Vasudha
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_RePrintdata_PopUp_Services]

	@p_var_Receipt_no								NVARCHAR(15),
	@p_var_language_ID									INT,
	@p_var_Patient_Id								  NVARCHAR(32)


AS
BEGIN

declare @Visit_type nvarchar(10)





	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY



	  

		  SELECT		 @Visit_type = VGI.Visit_Type 
			FROM		[dbo].[Patient_Receipts_Services] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE		VGI.Receipt_Number			=	@p_var_Receipt_no	
			AND			GT.Language_Id				=	@p_var_language_ID
		    AND          VGI.Patient_ID				=   @p_var_Patient_Id


			if (@Visit_type = 'S')
			begin
					  SELECT		VGI.[Receipt_Number],VGI.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						VGI.To_Date,VGI.From_Date,VGI.Patient_Visit_No,VGI.Doctor_ID,
					PTM.Payment_Description as Payment_Description 
						,PV.Payment_Remark as  Payment_Remark
			FROM		[dbo].[Patient_Receipts_Services] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			inner Join Patient_Visits_Services PV
			on PV.Patient_ID = VGI.Patient_ID 
			and PV.Receipt_Number  = @p_var_Receipt_no

			left join Payment_type_Master PTM 
			on PTM.ID = PV.payment_by_ID

			WHERE		VGI.Receipt_Number			=	@p_var_Receipt_no	
			AND			GT.Language_Id				=	@p_var_language_ID
		    AND          VGI.Patient_ID				=   @p_var_Patient_Id
			end
			else
			begin
						SELECT VGI.[Receipt_Number],VGI.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						VGI.To_Date,VGI.From_Date,VGI.Patient_Visit_No,VGI.Doctor_ID,
						PTM.Payment_Description as Payment_Description 
						,PPA.Payment_Remark as  Payment_Remark
			FROM		[dbo].[Patient_Receipts_Services] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			
			left Join Patient_Payments_AdHoc PPA
			on PPA.Patient_ID = VGI.Patient_ID 
			and PPA.Receipt_Number  = @p_var_Receipt_no

			left join Payment_type_Master PTM 
			on PTM.ID = PPA.payment_by_ID


			WHERE		VGI.Receipt_Number			=	@p_var_Receipt_no	
			AND			GT.Language_Id				=	@p_var_language_ID
		    AND          VGI.Patient_ID				=   @p_var_Patient_Id
			end



			
				
          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_Previous_Visits]    Script Date: 16-Jan-18 8:12:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintReceiptData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 21-Mar-2017
-- Description: This stored procedure will Get Patient Receipt Data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_RePrintReceiptData]

	@p_var_Clinic_ID									NVARCHAR(10),
	@p_var_Doctor_ID									NVARCHAR(30),
	@p_var_Patient_ID									NVARCHAR(32),
	@p_var_language_ID									INT

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		[Receipt_Number],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,PM.Gender_ID,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						ISNULL(CONVERT(VARCHAR(11),VGI.From_Date,106),'') AS From_Date,
						ISNULL(CONVERT(VARCHAR(11),VGI.To_Date,106),'') AS To_Date,
						ISNULL(VT.[Visit_Type_Description],'') AS Visit_Type,
						VGI.Doctor_ID

			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			LEFT JOIN [dbo].[Visit_Type] VT
			ON	VGI.Visit_Type=VT.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE		VGI.[Patient_ID]			=	@p_var_Patient_ID	
			 AND		VGI.Clinic_ID				=   @p_var_Clinic_ID	
			 --AND		VGI.Doctor_ID				=   @p_var_Doctor_ID
			 AND		GT.Language_Id				=	@p_var_language_ID
			 ORDER BY Receipt_Number DESC;
			--ORDER BY CONVERT(datetime, Receipt_Date ) DESC;


			 SELECT		PM.First_Name+' '+PM.Last_Name AS Patient_Name,
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,PM.Gender_ID
			FROM		Patient_Master PM

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
		  
			WHERE		PM.ID						=	@p_var_Patient_ID	
			 --AND		PM.Doctor_ID				=   @p_var_Doctor_ID
			 AND		GT.Language_Id				=	@p_var_language_ID

          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintdata_PopUp]    Script Date: 16-Jan-18 8:12:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintReceiptData_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 21-Mar-2017
-- Description: This stored procedure will Get Patient Receipt Data
-- Created By : Varsha Khandre
-- =============================================
Create PROCEDURE [dbo].[USP_Get_Patient_RePrintReceiptData_Operator]

	@p_var_Clinic_ID									NVARCHAR(10),
	@p_var_Doctor_ID									NVARCHAR(30),
	@p_var_Patient_ID									NVARCHAR(32),
	@p_var_language_ID									INT

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		[Receipt_Number],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,PM.Gender_ID,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						ISNULL(CONVERT(VARCHAR(11),VGI.From_Date,106),'') AS From_Date,
						ISNULL(CONVERT(VARCHAR(11),VGI.To_Date,106),'') AS To_Date,
						ISNULL(VT.[Visit_Type_Description],'') AS Visit_Type

			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			LEFT JOIN [dbo].[Visit_Type] VT
			ON	VGI.Visit_Type=VT.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE		VGI.[Patient_ID]			=	@p_var_Patient_ID	
			 AND		VGI.Clinic_ID				=   @p_var_Clinic_ID	
			 --AND		VGI.Doctor_ID				=   @p_var_Doctor_ID
			 AND		GT.Language_Id				=	@p_var_language_ID



			 SELECT		PM.First_Name+' '+PM.Last_Name AS Patient_Name,
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,PM.Gender_ID
			FROM		Patient_Master PM

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
		  
			WHERE		PM.ID						=	@p_var_Patient_ID	
			-- AND		PM.Doctor_ID				=   @p_var_Doctor_ID
			 AND		GT.Language_Id				=	@p_var_language_ID

          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END






GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintReceiptData_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author     : INCRUST
-- Create date: 17-Dec-2019
-- Description: This stored procedure will Get Patient Receipt Data for Services
-- Created By : Vasudha
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_RePrintReceiptData_Services]

	@p_var_Clinic_ID									NVARCHAR(10),
	@p_var_Doctor_ID									NVARCHAR(30),
	@p_var_Patient_ID									NVARCHAR(32),
	@p_var_language_ID									INT

AS
BEGIN

	  -- SET NOCOUNT ON added to prevent extra result sets from
	  -- interfering with SELECT statements.
	  SET NOCOUNT ON;
	  BEGIN TRY

		  SELECT		[Receipt_Number],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,ISNULL(CONVERT(VARCHAR(11),[Receipt_Date],106),'') AS [Receipt_Date],
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,PM.Gender_ID,
						VGI.Patient_ID,
						VGI.Treatment_Details,
						VGI.Shift_ID,
						ISNULL(CONVERT(VARCHAR(11),VGI.From_Date,106),'') AS From_Date,
						ISNULL(CONVERT(VARCHAR(11),VGI.To_Date,106),'') AS To_Date,
						ISNULL(VT.[Visit_Type_Description],'') AS Visit_Type,
						VGI.Doctor_ID

			FROM		[dbo].[Patient_Receipts_Services] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			INNER JOIN	Patient_Master PM
			ON	VGI.Patient_ID=PM.ID

			LEFT JOIN [dbo].[Visit_Type] VT
			ON	VGI.Visit_Type=VT.ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE		VGI.[Patient_ID]			=	@p_var_Patient_ID	
			 AND		VGI.Clinic_ID				=   @p_var_Clinic_ID	
			 --AND		VGI.Doctor_ID				=   @p_var_Doctor_ID
			 AND		GT.Language_Id				=	@p_var_language_ID



			 SELECT		PM.First_Name+' '+PM.Last_Name AS Patient_Name,
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description,PM.Gender_ID
			FROM		Patient_Master PM

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
		  
			WHERE		PM.ID						=	@p_var_Patient_ID	
			 --AND		PM.Doctor_ID				=   @p_var_Doctor_ID
			 AND		GT.Language_Id				=	@p_var_language_ID

          END TRY
		  BEGIN CATCH
		  SELECT 
			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintdata_PopUp]    Script Date: 16-Jan-18 8:12:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_TreatmentPlans]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author	  :  INCRUST
-- Create date: 30 May 2017
-- Description: This stored procedure will get Patients Treatment Plan details
-- Created By: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Patient_TreatmentPlans]
	@p_var_Clinic_ID				NVARCHAR(10),
	@p_var_Doctor_ID				NVARCHAR(32),
	@p_var_Patient_ID				NVARCHAR(32),
	@p_var_StepNo					BIGINT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   BEGIN TRY
   SELECT DISTINCT 1 AS TABLE0, [Step_No],[Advised_Details],[Notation_Sequence1],[Notation_Sequence2],
   [Notation_Sequence3],[Notation_Sequence4],REPLACE(CONVERT(NVARCHAR, Advised_Date, 106), ' ', '-') AS Advised_Date,
   [Treatment_Plan_Status_ID],[Comments]
						
			FROM		Dentist_Patient_TreatmentPlan DP

			INNER JOIN	Patient_Visits PV
			ON			DP.Clinic_ID=PV.Clinic_ID
			--AND			DP.Doctor_ID=PV.Doctor_ID
			AND			DP.Patient_ID=PV.Patient_ID
			--AND			DP.Patient_Visit_No=PV.Patient_Visit_No

			WHERE		DP.Clinic_ID =@p_var_Clinic_ID 
			--AND			DP.Doctor_ID =@p_var_Doctor_ID	
			AND			DP.Patient_ID=@p_var_Patient_ID
			AND			ISNULL(DP.Delete_Flag,0)=0	
			--AND			PV.Status_ID=5
			AND			ISNULL(PV.Delete_Flag,0)=0	

	SELECT DISTINCT 1 AS TABLE1, [Step_No],[Detail_Step_No],[Actual_Treatment],[Remarks],CONVERT(VARCHAR(11),DP.Visit_Date,106) AS Visit_Date
 
			FROM		[dbo].[Dentist_Patient_TreatmentPlanDetails] DP

			INNER JOIN Patient_Visits PV
			ON			DP.Clinic_ID=PV.Clinic_ID
			--AND			DP.Doctor_ID=PV.Doctor_ID
			AND			DP.Patient_ID=PV.Patient_ID
			--AND			DP.Patient_Visit_No=PV.Patient_Visit_No

			WHERE		DP.Clinic_ID	=	@p_var_Clinic_ID 
			--AND			DP.Doctor_ID	=	@p_var_Doctor_ID	
			AND			DP.Patient_ID	=	@p_var_Patient_ID
			AND			DP.[Step_No]	=	@p_var_StepNo
			AND			ISNULL(DP.Delete_Flag,0)=0	
			--AND			PV.Status_ID=5
			AND			ISNULL(PV.Delete_Flag,0)=0		

	SELECT DISTINCT 2 AS TABLE2, [FilePath_Name]
 
			FROM	[dbo].[Dentist_Patient_Files] DP
			
			INNER JOIN Patient_Visits PV
			ON			DP.Clinic_ID=PV.Clinic_ID
			--AND			DP.Doctor_ID=PV.Doctor_ID
			AND			DP.Patient_ID=PV.Patient_ID
			--AND			DP.Patient_Visit_No=PV.Patient_Visit_No	

			WHERE		DP.Clinic_ID =@p_var_Clinic_ID 
			--AND			DP.Doctor_ID =@p_var_Doctor_ID	
			AND			DP.Patient_ID=@p_var_Patient_ID
			AND			ISNULL(DP.Delete_Flag,0)=0
			--AND			PV.Status_ID=5
			AND			ISNULL(PV.Delete_Flag,0)=0		
			

    END TRY
			BEGIN CATCH
			SELECT 
						ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
END

/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintReceiptData]    Script Date: 16-Jan-18 8:12:48 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientAppointmentDetails]
	@p_var_Patient_Id		NVARCHAR(32),
	@p_var_Shift_Id			TINYINT,
	@p_var_Clinic_ID		NVARCHAR(10),
	@p_var_Doctor_ID		NVARCHAR(30),
	@p_int_patientVisitNo	INT,
	@p_int_Language_Id		INT
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY


	if EXISTS (
    SELECT  PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
			PM.First_Name +' '+ PM.Last_Name as Partial_Name,
			PM.Age_Given,
			PM.Date_Of_Birth,
			PV.Folder_No,
			PV.Visit_Date,
			PV.Weight_IN_KGS,
			PV.Height_In_CMS,
			PV.Pulse,
			PV.Blood_Pressure,
	        ISNULL(PV.Diabetes,0) AS Diabetes,
			ISNULL(PV.Cholestrol,0) AS Cholestrol,
			PV.Fees_To_Collect,
			PV.Instructions,
			PV.Folder_No,
			PV.Financial_Year,
			PV.Patient_Visit_No,
			Pv.Status_ID,
			Instructions,
			Observation,
			Fees_Collected,
			discount,
			Original_discount,
			Comment,
			PM.First_Name +' '+PM.Last_Name  as FirstLastName,
			PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
			ISNULL(On_Call_Status,0) AS On_Call_Status,
			PV.Impression,
			PM.Gender_ID,
			GT.Gender_Description,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			PM.Mobile_1,
			PV.Weight_IN_KGS,
			RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS Refer_Doctor_Details,
			PM.Refer_ID,
			--RT.[Refer_By_Description],
			RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
			PV.[Payment_By_ID],PV.Payment_Remark,
			ISNULL([follow_up],'') AS follow_up,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL([TPR],'') AS TPR,
			[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			FUT.[FollowUp_Description] AS FollowUp_Description,
		--	ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
		 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		    PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person, 
				pv.Doctor_ID,
			DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
			,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]
			,PTM.Payment_Description
			,pv.follow_up
			,pv.Receipt_Number
		    ,rs.Receipt_Date
			,rs.Receipt_Amount
			,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
			
			,PV.Doctor_Address
			,PV.Doctor_Mobile
			,PV.Doctor_Email
			,pv.Followup_After as ptfollowupafter


      FROM	  Patient_Visits PV 
	  
	  INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID=PM.ID

	  INNER JOIN Gender_Translations GT
	  ON		PM.Gender_ID		=	GT.Gender_ID 
	  
	   LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  PV.[follow_up_type]	=	FUT.ID

	  LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

				left join  [dbo].Doctor_Master DMS
		on DMS.Doctor_ID=PV.Doctor_ID

		left join  [dbo].[Followup_After_Master] FAM
		on FAM.[ID]=PV.Followup_After

	   INNER JOIN Payment_type_Master PTM
	  ON	  PTM.ID=PV.payment_by_ID

	   LEFT JOIN Patient_Receipts rs 
	  on  pv.Receipt_Number=rs.Receipt_Number

      WHERE	  PV.Patient_ID			=	@p_var_Patient_Id	
	--  AND	  PV.Shift_ID			=   @p_var_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_var_Clinic_ID    
      --AND     PV.Doctor_ID			=   @p_var_Doctor_ID
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
      AND     PV.Delete_Flag		=   0
	  AND	  GT.Language_Id		=	@p_int_Language_Id
	 )
	 begin 
	  SELECT  PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
			PM.First_Name +' '+ PM.Last_Name as Partial_Name,
			PM.Age_Given,
			PM.Date_Of_Birth,
			PV.Folder_No,
			PV.Visit_Date,
			PV.Weight_IN_KGS,
			PV.Height_In_CMS,
			PV.Pulse,
			PV.Blood_Pressure,
	        ISNULL(PV.Diabetes,0) AS Diabetes,
			ISNULL(PV.Cholestrol,0) AS Cholestrol,
			PV.Fees_To_Collect,
			PV.Instructions,
			PV.Folder_No,
			PV.Financial_Year,
			PV.Patient_Visit_No,
			Pv.Status_ID,
			Instructions,
			Observation,
			Fees_Collected,
			discount,
			Original_discount,
			Comment,
			PM.First_Name +' '+PM.Last_Name  as FirstLastName,
			PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
			ISNULL(On_Call_Status,0) AS On_Call_Status,
			PV.Impression,
			PM.Gender_ID,
			GT.Gender_Description,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			PM.Mobile_1,
			PV.Weight_IN_KGS,
			RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details,
			PV.Refer_ID,
			RT.[Refer_By_Description],
			RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
			PV.[Payment_By_ID],PV.Payment_Remark,
			ISNULL([follow_up],'') AS follow_up,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL([TPR],'') AS TPR,
			[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			FUT.[FollowUp_Description] AS FollowUp_Description,
		--	ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
		 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		    PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person, 
				pv.Doctor_ID,
			DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
			,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]
			,PTM.Payment_Description
			,pv.follow_up
			,Pv.Complaints_by_Patient_per_visit
		    ,pv.Receipt_Number
		    ,rs.Receipt_Date
			,rs.Receipt_Amount
			,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
          
			,PV.Doctor_Address
			,PV.Doctor_Mobile
			,PV.Doctor_Email
				,pv.Followup_After as ptfollowupafter

	  FROM	  Patient_Visits PV 
	  
	  INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID=PM.ID

	  INNER JOIN Gender_Translations GT
	  ON		PM.Gender_ID		=	GT.Gender_ID 
	  
	   LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  PV.[follow_up_type]	=	FUT.ID

	  LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

				left join  [dbo].Doctor_Master DMS
		on DMS.Doctor_ID=PV.Doctor_ID

		left join  [dbo].[Followup_After_Master] FAM
		on FAM.[ID]=PV.Followup_After

	   INNER JOIN Payment_type_Master PTM
	  ON	  PTM.ID=PV.payment_by_ID

	    LEFT JOIN Patient_Receipts rs 
	  on  pv.Receipt_Number=rs.Receipt_Number

      WHERE	  PV.Patient_ID			=	@p_var_Patient_Id	
	--  AND	  PV.Shift_ID			=   @p_var_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_var_Clinic_ID    
      --AND     PV.Doctor_ID			=   @p_var_Doctor_ID
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
      AND     PV.Delete_Flag		=   0
	  AND	  GT.Language_Id		=	@p_int_Language_Id
	 end
	 else 
	 begin
	 	  SELECT  PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
			PM.First_Name +' '+ PM.Last_Name as Partial_Name,
			PM.Age_Given,
			PM.Date_Of_Birth,
			PV.Folder_No,
			PV.Visit_Date,
			PV.Weight_IN_KGS,
			PV.Height_In_CMS,
			PV.Pulse,
			PV.Blood_Pressure,
	        ISNULL(PV.Diabetes,0) AS Diabetes,
			ISNULL(PV.Cholestrol,0) AS Cholestrol,
			PV.Fees_To_Collect,
			PV.Instructions,
			PV.Folder_No,
			PV.Financial_Year,
			PV.Patient_Visit_No,
			Pv.Status_ID,
			Instructions,
			Observation,
			Fees_Collected,
			discount,
			Original_discount,
			Comment,
			PM.First_Name +' '+PM.Last_Name  as FirstLastName,
			PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
			ISNULL(On_Call_Status,0) AS On_Call_Status,
			PV.Impression,
			PM.Gender_ID,
			GT.Gender_Description,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			PM.Mobile_1,
			PV.Weight_IN_KGS,
			RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details,
			PV.Refer_ID,
			RT.[Refer_By_Description],
			RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS ,--Changed
		--	RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
			PV.[Payment_By_ID],PV.Payment_Remark,
			ISNULL([follow_up],'') AS follow_up,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL([TPR],'') AS TPR,
			[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			FUT.[FollowUp_Description] AS FollowUp_Description,
		--	ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
		 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		    PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person, 
				pv.Doctor_ID,
			DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
			,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]

			,pv.follow_up
			,Pv.Complaints_by_Patient_per_visit
			,pv.Receipt_Number
		    ,rs.Receipt_Date
			,rs.Receipt_Amount
			,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
           
			,PV.Doctor_Address
			,PV.Doctor_Mobile
			,PV.Doctor_Email
				,pv.Followup_After as ptfollowupafter

	  FROM	  Patient_Visits PV 
	  
	  INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID=PM.ID

	  INNER JOIN Gender_Translations GT
	  ON		PM.Gender_ID		=	GT.Gender_ID 
	  
	   LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  PV.[follow_up_type]	=	FUT.ID

	  LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

				left join  [dbo].Doctor_Master DMS
		on DMS.Doctor_ID=PV.Doctor_ID

		left join  [dbo].[Followup_After_Master] FAM
		on FAM.[ID]=PV.Followup_After

		  LEFT JOIN Patient_Receipts rs 
	  on  pv.Receipt_Number=rs.Receipt_Number

      WHERE	  PV.Patient_ID			=	@p_var_Patient_Id	
	--  AND	  PV.Shift_ID			=   @p_var_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_var_Clinic_ID    
      --AND     PV.Doctor_ID			=   @p_var_Doctor_ID
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
      AND     PV.Delete_Flag		=   0
	  AND	  GT.Language_Id		=	@p_int_Language_Id



	 end
      
	    SELECT PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,
			  ISNULL(PV.Asthama,0) AS Asthama,
			  ISNULL(PV.Hypertension,0) AS Hypertension,
			  ISNULL(PV.Diabetes,0) AS Diabetes,
			  ISNULL(PV.Cholestrol,0) AS Cholestrol,
			  ISNULL(PV.IHD,0) AS IHD,
			  ISNULL(PV.TH,0) AS TH,
			  PV.Instructions,
			  PV.Fees_To_Collect,
	          ISNULL(PV.Diabetes,0) AS Diabetes,
			  ISNULL(PV.Cholestrol,0) AS Cholestrol,
			  PV.Instructions,
			  PV.Patient_Visit_No,
			  Pv.Status_ID,
			  ISNULL(PV.Smoking,0) AS Smoking,
			  ISNULL(PV.Tobaco,0) AS Tobaco,
			  ISNULL(PV.Alchohol,0) AS Alchohol,
			  ISNULL(PV.Pregnant,0)AS Pregnant,
			  ISNULL(PV.Discount,0)AS Discount,

			  PV.Habits_Comments,
			  PV.Allergy_dtls,
			  Instructions,Observation,
			  Original_Billed_Amount,Symptom_Comment ,On_Call_Status,PV.Fees_Collected,PV.Comment,
		   	PV.discount,
			PV.Original_discount,
			  ISNULL(PV.Impression,'') AS Impression,
			  ISNULL(PV.[Payment_By_ID],0) AS [Payment_By_ID],PV.Payment_Remark,
			  PTM.[Payment_Description],
			  ISNULL([follow_up],'') AS follow_up,
			  ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			  FUT.[FollowUp_Description] AS FollowUp_Description,
			  --ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
			   REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			   PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person ,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			   	,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Visit_Date,PV.Followup_After as followupafter_Id,Treatment_comment,Treatment_plan,[Impression_Finding]
				,pv.follow_up
				,pv.Receipt_Number
			    ,rs.Receipt_Date
				,rs.Receipt_Amount
				,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
			    ,PV.Refer_ID
				,RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details
				,PV.Doctor_Address
				,PV.Doctor_Mobile
				,PV.Doctor_Email
					,pv.Followup_After as ptfollowupafter

			  FROM	  Patient_Visits PV
			  
			  INNER JOIN Patient_Master PM
			  ON	  pv.Patient_ID	=	PM.ID 
			  
			  LEFT JOIN [dbo].[Payment_type_Master] PTM
			  ON	  pv.[Payment_By_ID]	=	PTM.ID

			  LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  pv.[follow_up_type]	=	FUT.ID

			  left join  [dbo].[Followup_After_Master] FAM
	        	on FAM.[ID]=PV.[Followup_After]
  
			  LEFT JOIN Patient_Receipts rs 
			  on  pv.Receipt_Number=rs.Receipt_Number

			                       
			  WHERE	  PV.Patient_ID			=	@p_var_Patient_ID
			  AND 	  PV.Clinic_ID			    =   @p_var_Clinic_ID	
			  --AND     PV.Doctor_ID			=   @p_var_Doctor_ID 
			  AND	  PV.Shift_Id				=	@p_var_Shift_ID	
	          AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
			  AND     PV.Delete_Flag		= 0

		SELECT		distinct [Group_Description]
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_var_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_var_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_var_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_var_Doctor_ID 
			 --AND		VGI.Visit_Date			=	@p_date_TodyasVisitDate
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo


		SELECT		[Group_Description],[Instructions_Description]
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_var_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_var_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_var_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_var_Doctor_ID 
			 --AND		VGI.Visit_Date			=	@p_date_TodyasVisitDate
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo
			 ORDER BY VGI.Group_Description,VGI.Sequence_No

		--SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name,
	CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 

		SELECT   Lab_Test_Description as ID
			 FROM     Patient_Visit_LabTestAsked PVL  
			 WHERE    PVL.Patient_ID		=	@p_var_Patient_Id	
			 AND	  PVL.Shift_ID			=   @p_var_Shift_Id		
			 AND	  PVL.Clinic_ID			=   @p_var_Clinic_ID	
			 AND	  PVL.Doctor_ID			=   @p_var_Doctor_ID 
			 --AND	  PVL.Visit_Date		=	@p_date_TodyasVisitDate
			 AND	  PVL.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND      PVL.Delete_Flag		=   0

		SELECT ID,Status_Description
		FROM Status_Ref
		WHERE ID=3


		IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,'( ' +VP.Brand_Name+ ' )' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,'( ' +VP.Brand_Name+ ' )' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions], '( ' +VP.Brand_Name+ ' )'  as Generic_Name

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 
		END


		IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END


		SELECT	[Category_Description],[Findings_Description]
		FROM	[dbo].[Visit_Abdominal_Examination_Findings]
		WHERE	Patient_ID			=	@p_var_Patient_Id	
		--AND		Shift_ID			=   @p_var_Shift_Id		
		AND		Clinic_ID			=   @p_var_Clinic_ID	
		AND		Doctor_ID			=   @p_var_Doctor_ID 
		AND		Patient_Visit_No	=	@p_int_patientVisitNo
		




		select Show_Gynec from System_Params where Doctor_ID=@p_var_Doctor_ID

		
		SELECT	[Balance_Group_Name] as Balance_Type,[Balance_Subgroup_Name] as Balance_Subgroup_Name,[Balance_Details] AS Balance_Details,[Balance_comment],[Balance_id] As ID
		FROM	[dbo].[Patient_Visit_Balanceinfo]
		WHERE	Patient_ID			=	@p_var_Patient_Id	
		--AND		Shift_ID			=   @p_var_Shift_Id		
		AND		Clinic_ID			=   @p_var_Clinic_ID	
		AND		Doctor_ID			=   @p_var_Doctor_ID 
		AND		Patient_Visit_No	=	@p_int_patientVisitNo	 
		AND     Delete_Flag		=   0 
		


			SELECT  [ID],[Schedule]
					 FROM	 [dbo].[Visit_Schedule]VS
					 WHERE    VS.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VS.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VS.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VS.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VS.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VS.Delete_Flag		=   0 
					 -- order by [Sequence_Id] 


			SELECT  [ID],[Schedule]
					 FROM	  [dbo].[Visit_Schedule_Print] VSP
					 WHERE    VSP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VSP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VSP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VSP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VSP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VSP.Delete_Flag		=   0 
					  --order by [Sequence_Id] 



				SELECT 
				ISNULL(VP.[Followup_Up_Type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				FA.[Followup_After] as Followup_After,[Additional_Instruction],
              [Instruction]

				FROM		[dbo].[Visit_Additional_Print] VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.Followup_Up_Type	=	FUT.ID


				--LEFT JOIN [dbo].[Schedule_Master] SD
				--ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					-- AND      VP.Delete_Flag		!=    1 
					 --order by [Sequence_Id] 

		SELECT 
				ISNULL(VD.[Followup_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				FA.[Followup_After] as Followup_After,[Instruction] as Instruction
              

				FROM		[dbo].[Visit_plans_details] VD

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VD.Followup_type	=	FUT.ID


				--LEFT JOIN [dbo].[Schedule_Master] SD
				--ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VD.[Followup_After]	=	FA.ID


					 WHERE    VD.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VD.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VD.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VD.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VD.Delete_Flag		!=    1 
					 --order by [Sequence_Id] 



					 
	IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name,
		   CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name,
					 CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name,
				CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END
		
		IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END

				IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions]

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 





		END


			IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,'' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,'' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions], ''  as Generic_Name

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 
		END

		IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )' as Generic_Name,
		  CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )' as Generic_Name,
		  CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days



					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )' as Generic_Name,
		   CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END

		IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name,
		  CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
		  ,CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name,
		  CASE WHEN No_Of_Days = 0 THEN null ELSE No_Of_Days END as No_Of_Days
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END


		IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,'( ' +VP.Brand_Name+ ' )' as Generic_Name
					,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,'( ' +VP.Brand_Name+ ' )' as Generic_Name
					,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days 
					FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions], '( ' +VP.Brand_Name+ ' )'  as Generic_Name,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 
		END

		IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,'' as Generic_Name
		,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,'' as Generic_Name,
		CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions], ''  as Generic_Name
				,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 
		END


   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails]    Script Date: 14-Feb-18 4:54:40 PM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientAppointmentDetails_Services]
	@p_var_Patient_Id		NVARCHAR(32),
	@p_var_Shift_Id			TINYINT,
	@p_var_Clinic_ID		NVARCHAR(10),
	@p_var_Doctor_ID		NVARCHAR(30),
	@p_int_patientVisitNo	INT,
	@p_int_Language_Id		INT
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY


	if EXISTS (
    SELECT  PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
			PM.First_Name +' '+ PM.Last_Name as Partial_Name,
			PM.Age_Given,
			PM.Date_Of_Birth,
			PV.Folder_No,
			PV.Visit_Date,
			PV.Weight_IN_KGS,
			PV.Height_In_CMS,
			PV.Pulse,
			PV.Blood_Pressure,
	        ISNULL(PV.Diabetes,0) AS Diabetes,
			ISNULL(PV.Cholestrol,0) AS Cholestrol,
			PV.Fees_To_Collect,
			PV.Instructions,
			PV.Folder_No,
			PV.Financial_Year,
			PV.Patient_Visit_No,
			Pv.Status_ID,
			Instructions,
			Observation,
			Fees_Collected,
			discount,
			Original_discount,
			Comment,
			PM.First_Name +' '+PM.Last_Name  as FirstLastName,
			PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
			ISNULL(On_Call_Status,0) AS On_Call_Status,
			PV.Impression,
			PM.Gender_ID,
			GT.Gender_Description,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			PM.Mobile_1,
			PV.Weight_IN_KGS,
			PM.Refer_Doctor_Details,
			PM.Refer_ID,
			RT.[Refer_By_Description],
			RT.[Refer_By_Description]+' -- '+ PM.Refer_Doctor_Details AS REFERDETAILS,
			PV.[Payment_By_ID],PV.Payment_Remark,
			ISNULL([follow_up],'') AS follow_up,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL([TPR],'') AS TPR,
			[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			FUT.[FollowUp_Description] AS FollowUp_Description,
		--	ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
		 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		    PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person, 
				pv.Doctor_ID,
			DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
			,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]
			,PTM.Payment_Description
			,pv.follow_up,
			pv.Referred_By
			,pv.Receipt_Number
		    ,rs.Receipt_Date
			,rs.Receipt_Amount
      FROM	  Patient_Visits_Services PV 
	  
	  INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID=PM.ID

	  INNER JOIN Gender_Translations GT
	  ON		PM.Gender_ID		=	GT.Gender_ID 
	  
	   LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  PV.[follow_up_type]	=	FUT.ID

	  LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

				left join  [dbo].Doctor_Master DMS
		on DMS.Doctor_ID=PV.Doctor_ID

		left join  [dbo].[Followup_After_Master] FAM
		on FAM.[ID]=PV.Followup_After

	   INNER JOIN Payment_type_Master PTM
	  ON	  PTM.ID=PV.payment_by_ID

	  LEFT JOIN Patient_Receipts_Services rs 
	  on  pv.Receipt_Number=rs.Receipt_Number
	

      WHERE	  PV.Patient_ID			=	@p_var_Patient_Id	
	--  AND	  PV.Shift_ID			=   @p_var_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_var_Clinic_ID    
      --AND     PV.Doctor_ID			=   @p_var_Doctor_ID
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
      AND     PV.Delete_Flag		=   0
	  AND	  GT.Language_Id		=	@p_int_Language_Id
	 )
	 begin 
	  SELECT  PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
			PM.First_Name +' '+ PM.Last_Name as Partial_Name,
			PM.Age_Given,
			PM.Date_Of_Birth,
			PV.Folder_No,
			PV.Visit_Date,
			PV.Weight_IN_KGS,
			PV.Height_In_CMS,
			PV.Pulse,
			PV.Blood_Pressure,
	        ISNULL(PV.Diabetes,0) AS Diabetes,
			ISNULL(PV.Cholestrol,0) AS Cholestrol,
			PV.Fees_To_Collect,
			PV.Instructions,
			PV.Folder_No,
			PV.Financial_Year,
			PV.Patient_Visit_No,
			Pv.Status_ID,
			Instructions,
			Observation,
			Fees_Collected,
			discount,
			Original_discount,
			Comment,
			PM.First_Name +' '+PM.Last_Name  as FirstLastName,
			PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
			ISNULL(On_Call_Status,0) AS On_Call_Status,
			PV.Impression,
			PM.Gender_ID,
			GT.Gender_Description,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			PM.Mobile_1,
			PV.Weight_IN_KGS,
			PM.Refer_Doctor_Details,
			PM.Refer_ID,
			RT.[Refer_By_Description],
			RT.[Refer_By_Description]+' -- '+ PM.Refer_Doctor_Details AS REFERDETAILS,
			PV.[Payment_By_ID],PV.Payment_Remark,
			ISNULL([follow_up],'') AS follow_up,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL([TPR],'') AS TPR,
			[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			FUT.[FollowUp_Description] AS FollowUp_Description,
		--	ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
		 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		    PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person, 
				pv.Doctor_ID,
			DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
			,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]
			,PTM.Payment_Description
			,pv.follow_up
			,Pv.Complaints_by_Patient_per_visit,
			pv.Referred_By
			,pv.Receipt_Number
		    ,rs.Receipt_Date
			,rs.Receipt_Amount
      FROM	  Patient_Visits_Services PV 
	  
	  INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID=PM.ID

	  INNER JOIN Gender_Translations GT
	  ON		PM.Gender_ID		=	GT.Gender_ID 
	  
	   LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  PV.[follow_up_type]	=	FUT.ID

	  LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

				left join  [dbo].Doctor_Master DMS
		on DMS.Doctor_ID=PV.Doctor_ID

		left join  [dbo].[Followup_After_Master] FAM
		on FAM.[ID]=PV.Followup_After

	   INNER JOIN Payment_type_Master PTM
	  ON	  PTM.ID=PV.payment_by_ID
	  LEFT JOIN Patient_Receipts_Services rs 
	  on  pv.Receipt_Number=rs.Receipt_Number

      WHERE	  PV.Patient_ID			=	@p_var_Patient_Id	
	--  AND	  PV.Shift_ID			=   @p_var_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_var_Clinic_ID    
      --AND     PV.Doctor_ID			=   @p_var_Doctor_ID
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
      AND     PV.Delete_Flag		=   0
	  AND	  GT.Language_Id		=	@p_int_Language_Id
	 end
	 else 
	 begin
	 	  SELECT  PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
			PM.First_Name +' '+ PM.Last_Name as Partial_Name,
			PM.Age_Given,
			PM.Date_Of_Birth,
			PV.Folder_No,
			PV.Visit_Date,
			PV.Weight_IN_KGS,
			PV.Height_In_CMS,
			PV.Pulse,
			PV.Blood_Pressure,
	        ISNULL(PV.Diabetes,0) AS Diabetes,
			ISNULL(PV.Cholestrol,0) AS Cholestrol,
			PV.Fees_To_Collect,
			PV.Instructions,
			PV.Folder_No,
			PV.Financial_Year,
			PV.Patient_Visit_No,
			Pv.Status_ID,
			Instructions,
			Observation,
			Fees_Collected,
			discount,
			Original_discount,
			Comment,
			PM.First_Name +' '+PM.Last_Name  as FirstLastName,
			PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
			ISNULL(On_Call_Status,0) AS On_Call_Status,
			PV.Impression,
			PM.Gender_ID,
			GT.Gender_Description,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			PM.Mobile_1,
			PV.Weight_IN_KGS,
			PM.Refer_Doctor_Details,
			PM.Refer_ID,
			RT.[Refer_By_Description],
			RT.[Refer_By_Description]+' -- '+ PM.Refer_Doctor_Details AS REFERDETAILS,
			PV.[Payment_By_ID],PV.Payment_Remark,
			ISNULL([follow_up],'') AS follow_up,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL([TPR],'') AS TPR,
			[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			FUT.[FollowUp_Description] AS FollowUp_Description,
		--	ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
		 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		    PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person, 
				pv.Doctor_ID,
			DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
			,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]

			,pv.follow_up
			,Pv.Complaints_by_Patient_per_visit
			,pv.Referred_By
			,pv.Receipt_Number
		    ,rs.Receipt_Date
			,rs.Receipt_Amount
      FROM	  Patient_Visits_Services PV 
	  
	  INNER JOIN Patient_Master PM
	  ON	  pv.Patient_ID=PM.ID

	  INNER JOIN Gender_Translations GT
	  ON		PM.Gender_ID		=	GT.Gender_ID 
	  
	   LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  PV.[follow_up_type]	=	FUT.ID

	  LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

				left join  [dbo].Doctor_Master DMS
		on DMS.Doctor_ID=PV.Doctor_ID

		left join  [dbo].[Followup_After_Master] FAM
		on FAM.[ID]=PV.Followup_After

		LEFT JOIN Patient_Receipts_Services rs 
	  on  pv.Receipt_Number=rs.Receipt_Number

      WHERE	  PV.Patient_ID			=	@p_var_Patient_Id	
	--  AND	  PV.Shift_ID			=   @p_var_Shift_Id	    
	  AND     PV.Clinic_ID			=   @p_var_Clinic_ID    
      --AND     PV.Doctor_ID			=   @p_var_Doctor_ID
	  AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
      AND     PV.Delete_Flag		=   0
	  AND	  GT.Language_Id		=	@p_int_Language_Id



	 end
      
	    SELECT PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,
			  ISNULL(PV.Asthama,0) AS Asthama,
			  ISNULL(PV.Hypertension,0) AS Hypertension,
			  ISNULL(PV.Diabetes,0) AS Diabetes,
			  ISNULL(PV.Cholestrol,0) AS Cholestrol,
			  ISNULL(PV.IHD,0) AS IHD,
			  ISNULL(PV.TH,0) AS TH,
			  PV.Instructions,
			  PV.Fees_To_Collect,
	          ISNULL(PV.Diabetes,0) AS Diabetes,
			  ISNULL(PV.Cholestrol,0) AS Cholestrol,
			  PV.Instructions,
			  PV.Patient_Visit_No,
			  Pv.Status_ID,
			  ISNULL(PV.Smoking,0) AS Smoking,
			  ISNULL(PV.Tobaco,0) AS Tobaco,
			  ISNULL(PV.Alchohol,0) AS Alchohol,
			  ISNULL(PV.Pregnant,0)AS Pregnant,
			  ISNULL(PV.Discount,0)AS Discount,

			  PV.Habits_Comments,
			  PV.Allergy_dtls,
			  Instructions,Observation,
			  Original_Billed_Amount,Symptom_Comment ,On_Call_Status,PV.Fees_Collected,PV.Comment,
			PV.discount,
			PV.Original_discount,
			  ISNULL(PV.Impression,'') AS Impression,
			  ISNULL(PV.[Payment_By_ID],0) AS [Payment_By_ID],PV.Payment_Remark,
			  PTM.[Payment_Description],
			  ISNULL([follow_up],'') AS follow_up,
			  ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			  FUT.[FollowUp_Description] AS FollowUp_Description,
			  --ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
			   REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			   PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person ,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
			   	,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Visit_Date,PV.Followup_After as followupafter_Id,Treatment_comment,Treatment_plan,[Impression_Finding]
				,pv.follow_up
				,pv.Referred_By
				,pv.Receipt_Number
		        ,rs.Receipt_Date
			  FROM	  Patient_Visits_Services PV
			  
			  INNER JOIN Patient_Master PM
			  ON	  pv.Patient_ID	=	PM.ID 
			  
			  LEFT JOIN [dbo].[Payment_type_Master] PTM
			  ON	  pv.[Payment_By_ID]	=	PTM.ID

			  LEFT JOIN [dbo].[Follow-Up_type] FUT
			  ON	  pv.[follow_up_type]	=	FUT.ID

			  left join  [dbo].[Followup_After_Master] FAM
		     on FAM.[ID]=PV.[Followup_After]
			      
			LEFT JOIN Patient_Receipts_Services rs 
	           on  pv.Receipt_Number=rs.Receipt_Number      
			              
			  WHERE	  PV.Patient_ID			=	@p_var_Patient_ID
			  AND 	  PV.Clinic_ID			    =   @p_var_Clinic_ID	
			  --AND     PV.Doctor_ID			=   @p_var_Doctor_ID 
			  AND	  pv.Shift_Id				=	@p_var_Shift_ID	
	          AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
			  AND     PV.Delete_Flag		= 0

		SELECT		distinct [Group_Description]
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_var_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_var_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_var_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_var_Doctor_ID 
			 --AND		VGI.Visit_Date			=	@p_date_TodyasVisitDate
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo


		SELECT		[Group_Description],[Instructions_Description]
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_var_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_var_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_var_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_var_Doctor_ID 
			 --AND		VGI.Visit_Date			=	@p_date_TodyasVisitDate
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo
			 ORDER BY VGI.Group_Description,VGI.Sequence_No

		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 

		SELECT   Lab_Test_Description as ID
			 FROM     Patient_Visit_LabTestAsked PVL  
			 WHERE    PVL.Patient_ID		=	@p_var_Patient_Id	
			 AND	  PVL.Shift_ID			=   @p_var_Shift_Id		
			 AND	  PVL.Clinic_ID			=   @p_var_Clinic_ID	
			 AND	  PVL.Doctor_ID			=   @p_var_Doctor_ID 
			 --AND	  PVL.Visit_Date		=	@p_date_TodyasVisitDate
			 AND	  PVL.Patient_Visit_No	=	@p_int_patientVisitNo
			 AND      PVL.Delete_Flag		=   0

		SELECT ID,Status_Description
		FROM Status_Ref
		WHERE ID=3


		IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,'( ' +VP.Brand_Name+ ' )' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,'( ' +VP.Brand_Name+ ' )' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions], '( ' +VP.Brand_Name+ ' )'  as Generic_Name

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 
		END


		IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END


		SELECT	[Category_Description],[Findings_Description]
		FROM	[dbo].[Visit_Abdominal_Examination_Findings]
		WHERE	Patient_ID			=	@p_var_Patient_Id	
		--AND		Shift_ID			=   @p_var_Shift_Id		
		AND		Clinic_ID			=   @p_var_Clinic_ID	
		AND		Doctor_ID			=   @p_var_Doctor_ID 
		AND		Patient_Visit_No	=	@p_int_patientVisitNo
		




		select Show_Gynec from System_Params where Doctor_ID=@p_var_Doctor_ID

		
		SELECT	[Balance_Group_Name] as Balance_Type,[Balance_Subgroup_Name] as Balance_Subgroup_Name,[Balance_Details] AS Balance_Details,[Balance_comment],[Balance_id] As ID
		FROM	[dbo].[Patient_Visit_Balanceinfo]
		WHERE	Patient_ID			=	@p_var_Patient_Id	
		--AND		Shift_ID			=   @p_var_Shift_Id		
		AND		Clinic_ID			=   @p_var_Clinic_ID	
		AND		Doctor_ID			=   @p_var_Doctor_ID 
		AND		Patient_Visit_No	=	@p_int_patientVisitNo	 
		AND     Delete_Flag		=   0 
		


			SELECT  [ID],[Schedule]
					 FROM	 [dbo].[Visit_Schedule]VS
					 WHERE    VS.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VS.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VS.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VS.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VS.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VS.Delete_Flag		=   0 
					 -- order by [Sequence_Id] 


			SELECT  [ID],[Schedule]
					 FROM	  [dbo].[Visit_Schedule_Print] VSP
					 WHERE    VSP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VSP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VSP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VSP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VSP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VSP.Delete_Flag		=   0 
					  --order by [Sequence_Id] 



				SELECT 
				ISNULL(VP.[Followup_Up_Type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				FA.[Followup_After] as Followup_After,[Additional_Instruction],
              [Instruction]

				FROM		[dbo].[Visit_Additional_Print] VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.Followup_Up_Type	=	FUT.ID


				--LEFT JOIN [dbo].[Schedule_Master] SD
				--ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					-- AND      VP.Delete_Flag		!=    1 
					 --order by [Sequence_Id] 

		SELECT 
				ISNULL(VD.[Followup_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				FA.[Followup_After] as Followup_After,[Instruction] as Instruction
              

				FROM		[dbo].[Visit_plans_details] VD

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VD.Followup_type	=	FUT.ID


				--LEFT JOIN [dbo].[Schedule_Master] SD
				--ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VD.[Followup_After]	=	FA.ID


					 WHERE    VD.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VD.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VD.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VD.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VD.Delete_Flag		!=    1 
					 --order by [Sequence_Id] 



					 
	IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name  as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END
		
		IF EXISTS(
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 AND	 VP.Delete_Indicator	=	0
		)
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
					 FROM	  [Visit_Prescription_Overwrite_Temp] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0
					 AND	 VP.Delete_Indicator	=	0
					 order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT   Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
				
					 FROM	  [dbo].[Visit_Prescription_Overwrite] VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					-- AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Indicator		=   0 
					 AND	  VP.Delete_Flag			=	0
					  order by [Sequence_Id] 
		END

				IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions]

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 





		END


			IF EXISTS(
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,'' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
		)
		BEGIN
		SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,'' as Generic_Name
					 FROM	  Visit_Prescription VP
					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					  order by [Sequence_Id] 
		END

		ELSE
		BEGIN
		SELECT  VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction,
				VP.[Weight_IN_KGS],VP.[follow_up],ISNULL(VP.[follow_up_type],0) AS follow_up_type,
				FUT.[FollowUp_Description] AS FollowUp_Description,
				ISNULL(CONVERT(VARCHAR(11),VP.[Follow_Up_Date],106),'') AS Follow_Up_Date,FA.[Followup_After] as Followup_After ,SD.[Schedule_Description] AS Schedule_Description,[Additional_Instructions],
                [Instructions], ''  as Generic_Name

				FROM		Visit_Prescription_Temp VP

							LEFT JOIN [dbo].[Follow-Up_type] FUT
				ON	  VP.[follow_up_type]	=	FUT.ID


				LEFT JOIN [dbo].[Schedule_Master] SD
				ON	  VP.[Schedule]	=	SD.ID

				LEFT JOIN [dbo].[Followup_After_Master]FA
				ON	  VP.[Followup_After]	=	FA.ID


					 WHERE    VP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VP.Clinic_ID			=   @p_var_Clinic_ID	
					 AND	  VP.Doctor_ID			=   @p_var_Doctor_ID   
					 AND	  VP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VP.Delete_Flag		=   0 
					 order by [Sequence_Id] 
		END


			  	  	SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_Receipts_Services] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_var_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_var_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_var_Doctor_ID 
			-- AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_var_Shift_Id
			-- AND		VGI.[Shift_ID]				=	@p_var_Shift_Id
			  AND		VGI.Patient_Visit_No			= @p_int_patientVisitNo

   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails]    Script Date: 14-Feb-18 4:54:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetailsNew]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author : INCRUST
-- Create date : 24-Mar-2016
-- Description : This stored procedure will Get the Todyas Visit patient details.
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientAppointmentDetailsNew]
@p_var_Patient_Id NVARCHAR(32),
@p_var_Shift_Id TINYINT,
@p_var_Clinic_ID NVARCHAR(10),
@p_var_Doctor_ID NVARCHAR(30),
@p_int_patientVisitNo INT,
@p_int_Language_Id INT


AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY


if EXISTS (
SELECT PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
PM.First_Name +' '+ PM.Last_Name as Partial_Name,
PM.Age_Given,
PM.Date_Of_Birth,
PV.Folder_No,
PV.Visit_Date,
PV.Weight_IN_KGS,
PV.Height_In_CMS,
PV.Pulse,
PV.Blood_Pressure,
ISNULL(PV.Diabetes,0) AS Diabetes,
ISNULL(PV.Cholestrol,0) AS Cholestrol,
PV.Fees_To_Collect,
PV.Instructions,
PV.Folder_No,
PV.Financial_Year,
PV.Patient_Visit_No,
Pv.Status_ID,
Instructions,
Observation,
Fees_Collected,
discount,
Original_discount,
Comment,
PM.First_Name +' '+PM.Last_Name as FirstLastName,
PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
ISNULL(On_Call_Status,0) AS On_Call_Status,
PV.Impression,
PM.Gender_ID,
GT.Gender_Description,
DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
PM.Mobile_1,
PV.Weight_IN_KGS,
RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS Refer_Doctor_Details,
PV.Refer_ID,
--RT.[Refer_By_Description],
RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
PV.[Payment_By_ID],PV.Payment_Remark,
ISNULL([follow_up],'') AS follow_up,
ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
ISNULL([TPR],'') AS TPR,
[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
ISNULL(PV.[GC],'') AS GC,
ISNULL(PV.[FMP],'') AS FMP,
ISNULL(PV.[PRMC],'') AS PRMC,
ISNULL(PV.[PAMC],'') AS PAMC,
ISNULL(PV.[LMP],'') AS LMP,
ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
ISNULL(PV.[follow_up_type],0) AS follow_up_type,
FUT.[FollowUp_Description] AS FollowUp_Description,
-- ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END AS EDD,
PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person,
pv.Doctor_ID,
DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]
,PTM.Payment_Description
,pv.follow_up
,pv.Receipt_Number
,rs.Receipt_Date
,rs.Receipt_Amount
,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END AS Online_Appointment_Time

,PV.Doctor_Address
,PV.Doctor_Mobile
,PV.Doctor_Email

FROM Patient_Visits PV

INNER JOIN Patient_Master PM
ON pv.Patient_ID=PM.ID

INNER JOIN Gender_Translations GT
ON PM.Gender_ID = GT.Gender_ID

LEFT JOIN [dbo].[Follow-Up_type] FUT
ON PV.[follow_up_type] = FUT.ID

LEFT JOIN [dbo].[Refer_By_Translations] RT
ON PM.Refer_ID=RT.[Refer_ID]

left join [dbo].Doctor_Master DMS
on DMS.Doctor_ID=PV.Doctor_ID

left join [dbo].[Followup_After_Master] FAM
on FAM.[ID]=PV.Followup_After

INNER JOIN Payment_type_Master PTM
ON PTM.ID=PV.payment_by_ID

LEFT JOIN Patient_Receipts rs
on pv.Receipt_Number=rs.Receipt_Number

WHERE PV.Patient_ID = @p_var_Patient_Id
-- AND PV.Shift_ID = @p_var_Shift_Id
AND PV.Clinic_ID = @p_var_Clinic_ID
--AND PV.Doctor_ID = @p_var_Doctor_ID
AND PV.Patient_Visit_No = @p_int_patientVisitNo
AND PV.Delete_Flag = 0
AND GT.Language_Id = @p_int_Language_Id
)
begin
SELECT PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
PM.First_Name +' '+ PM.Last_Name as Partial_Name,
PM.Age_Given,
PM.Date_Of_Birth,
PV.Folder_No,
PV.Visit_Date,
PV.Weight_IN_KGS,
PV.Height_In_CMS,
PV.Pulse,
PV.Blood_Pressure,
ISNULL(PV.Diabetes,0) AS Diabetes,
ISNULL(PV.Cholestrol,0) AS Cholestrol,
PV.Fees_To_Collect,
PV.Instructions,
PV.Folder_No,
PV.Financial_Year,
PV.Patient_Visit_No,
Pv.Status_ID,
Instructions,
Observation,
Fees_Collected,
discount,
Original_discount,
Comment,
PM.First_Name +' '+PM.Last_Name as FirstLastName,
PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
ISNULL(On_Call_Status,0) AS On_Call_Status,
PV.Impression,
PM.Gender_ID,
GT.Gender_Description,
DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
PM.Mobile_1,
PV.Weight_IN_KGS,
RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details,
PV.Refer_ID,
RT.[Refer_By_Description],
RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
PV.[Payment_By_ID],PV.Payment_Remark,
ISNULL([follow_up],'') AS follow_up,
ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
ISNULL([TPR],'') AS TPR,
[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
ISNULL(PV.[GC],'') AS GC,
ISNULL(PV.[FMP],'') AS FMP,
ISNULL(PV.[PRMC],'') AS PRMC,
ISNULL(PV.[PAMC],'') AS PAMC,
ISNULL(PV.[LMP],'') AS LMP,
ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
ISNULL(PV.[follow_up_type],0) AS follow_up_type,
FUT.[FollowUp_Description] AS FollowUp_Description,
-- ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END AS EDD,
PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person,
pv.Doctor_ID,
DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]
,PTM.Payment_Description
,pv.follow_up
,Pv.Complaints_by_Patient_per_visit
,pv.Receipt_Number
,rs.Receipt_Date
,rs.Receipt_Amount
,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END AS Online_Appointment_Time

,PV.Doctor_Address
,PV.Doctor_Mobile
,PV.Doctor_Email

FROM Patient_Visits PV

INNER JOIN Patient_Master PM
ON pv.Patient_ID=PM.ID

INNER JOIN Gender_Translations GT
ON PM.Gender_ID = GT.Gender_ID

LEFT JOIN [dbo].[Follow-Up_type] FUT
ON PV.[follow_up_type] = FUT.ID

LEFT JOIN [dbo].[Refer_By_Translations] RT
ON PM.Refer_ID=RT.[Refer_ID]

left join [dbo].Doctor_Master DMS
on DMS.Doctor_ID=PV.Doctor_ID

left join [dbo].[Followup_After_Master] FAM
on FAM.[ID]=PV.Followup_After

INNER JOIN Payment_type_Master PTM
ON PTM.ID=PV.payment_by_ID

LEFT JOIN Patient_Receipts rs
on pv.Receipt_Number=rs.Receipt_Number

WHERE PV.Patient_ID = @p_var_Patient_Id
-- AND PV.Shift_ID = @p_var_Shift_Id
AND PV.Clinic_ID = @p_var_Clinic_ID
--AND PV.Doctor_ID = @p_var_Doctor_ID
AND PV.Patient_Visit_No = @p_int_patientVisitNo
AND PV.Delete_Flag = 0
AND GT.Language_Id = @p_int_Language_Id
end
else
begin
SELECT PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,
PM.First_Name +' '+ PM.Last_Name as Partial_Name,
PM.Age_Given,
PM.Date_Of_Birth,
PV.Folder_No,
PV.Visit_Date,
PV.Weight_IN_KGS,
PV.Height_In_CMS,
PV.Pulse,
PV.Blood_Pressure,
ISNULL(PV.Diabetes,0) AS Diabetes,
ISNULL(PV.Cholestrol,0) AS Cholestrol,
PV.Fees_To_Collect,
PV.Instructions,
PV.Folder_No,
PV.Financial_Year,
PV.Patient_Visit_No,
Pv.Status_ID,
Instructions,
Observation,
Fees_Collected,
discount,
Original_discount,
Comment,
PM.First_Name +' '+PM.Last_Name as FirstLastName,
PV.Sugar,PV.THtext,ISNULL(In_Person,0) AS In_Person,
ISNULL(On_Call_Status,0) AS On_Call_Status,
PV.Impression,
PM.Gender_ID,
GT.Gender_Description,
DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
PM.Mobile_1,
PV.Weight_IN_KGS,
RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details,
PV.Refer_ID,
RT.[Refer_By_Description],
RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
PV.[Payment_By_ID],PV.Payment_Remark,
ISNULL([follow_up],'') AS follow_up,
ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
ISNULL([TPR],'') AS TPR,
[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],
ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
ISNULL(PV.[GC],'') AS GC,
ISNULL(PV.[FMP],'') AS FMP,
ISNULL(PV.[PRMC],'') AS PRMC,
ISNULL(PV.[PAMC],'') AS PAMC,
ISNULL(PV.[LMP],'') AS LMP,
ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
ISNULL(PV.[follow_up_type],0) AS follow_up_type,
FUT.[FollowUp_Description] AS FollowUp_Description,
-- ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END AS EDD,
PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person,
pv.Doctor_ID,
DMS.Prefix+''+DMS.First_Name+' - '+DMS.Speciality AS DOCTOR_NAME,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Followup_After as followupafter_Id
,PV.Visit_Date,Treatment_comment,Treatment_plan,[Impression_Finding]

,pv.follow_up
,Pv.Complaints_by_Patient_per_visit
,pv.Receipt_Number
,rs.Receipt_Date
,rs.Receipt_Amount
,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END AS Online_Appointment_Time

,PV.Doctor_Address
,PV.Doctor_Mobile
,PV.Doctor_Email

FROM Patient_Visits PV

INNER JOIN Patient_Master PM
ON pv.Patient_ID=PM.ID

INNER JOIN Gender_Translations GT
ON PM.Gender_ID = GT.Gender_ID

LEFT JOIN [dbo].[Follow-Up_type] FUT
ON PV.[follow_up_type] = FUT.ID

LEFT JOIN [dbo].[Refer_By_Translations] RT
ON PM.Refer_ID=RT.[Refer_ID]

left join [dbo].Doctor_Master DMS
on DMS.Doctor_ID=PV.Doctor_ID

left join [dbo].[Followup_After_Master] FAM
on FAM.[ID]=PV.Followup_After

LEFT JOIN Patient_Receipts rs
on pv.Receipt_Number=rs.Receipt_Number

WHERE PV.Patient_ID = @p_var_Patient_Id
-- AND PV.Shift_ID = @p_var_Shift_Id
AND PV.Clinic_ID = @p_var_Clinic_ID
--AND PV.Doctor_ID = @p_var_Doctor_ID
AND PV.Patient_Visit_No = @p_int_patientVisitNo
AND PV.Delete_Flag = 0
AND GT.Language_Id = @p_int_Language_Id



end

SELECT PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,
ISNULL(PV.Asthama,0) AS Asthama,
ISNULL(PV.Hypertension,0) AS Hypertension,
ISNULL(PV.Diabetes,0) AS Diabetes,
ISNULL(PV.Cholestrol,0) AS Cholestrol,
ISNULL(PV.IHD,0) AS IHD,
ISNULL(PV.TH,0) AS TH,
PV.Instructions,
PV.Fees_To_Collect,
ISNULL(PV.Diabetes,0) AS Diabetes,
ISNULL(PV.Cholestrol,0) AS Cholestrol,
PV.Instructions,
PV.Patient_Visit_No,
Pv.Status_ID,
ISNULL(PV.Smoking,0) AS Smoking,
ISNULL(PV.Tobaco,0) AS Tobaco,
ISNULL(PV.Alchohol,0) AS Alchohol,
ISNULL(PV.Pregnant,0)AS Pregnant,
ISNULL(PV.Discount,0)AS Discount,

PV.Habits_Comments,
PV.Allergy_dtls,
Instructions,Observation,
Original_Billed_Amount,Symptom_Comment ,On_Call_Status,PV.Fees_Collected,PV.Comment,
PV.discount,
PV.Original_discount,
ISNULL(PV.Impression,'') AS Impression,
ISNULL(PV.[Payment_By_ID],0) AS [Payment_By_ID],PV.Payment_Remark,
PTM.[Payment_Description],
ISNULL([follow_up],'') AS follow_up,
ISNULL(PV.[follow_up_type],0) AS follow_up_type,
FUT.[FollowUp_Description] AS FollowUp_Description,
--ISNULL(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106),'') AS Follow_Up_Date,
REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
PV.[plan],PV.[Notes],PV.[follow_up_Comment],PV.[Treatment_comment],PV.[Treatment_plan],PV.In_Person as Person ,ISNULL(FUT.FollowUp_Description,0)+' - '+REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-')as Folloupdateprint
,ISNULL(FAM.[Followup_After],0) AS Followup_After,ISNULL(PV.[Schedule],0) AS Schedule,PV.[Additional_Instructions],FAM.Days as followuP_after_Days,PV.Visit_Date,PV.Followup_After as followupafter_Id,Treatment_comment,Treatment_plan,[Impression_Finding]
,pv.follow_up
,pv.Receipt_Number
,rs.Receipt_Date
,rs.Receipt_Amount
,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END AS Online_Appointment_Time
,PV.Refer_ID
,RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details
,PV.Doctor_Address
,PV.Doctor_Mobile
,PV.Doctor_Email

FROM Patient_Visits PV

INNER JOIN Patient_Master PM
ON pv.Patient_ID = PM.ID

LEFT JOIN [dbo].[Payment_type_Master] PTM
ON pv.[Payment_By_ID] = PTM.ID

LEFT JOIN [dbo].[Follow-Up_type] FUT
ON pv.[follow_up_type] = FUT.ID

left join [dbo].[Followup_After_Master] FAM
on FAM.[ID]=PV.[Followup_After]

LEFT JOIN Patient_Receipts rs
on pv.Receipt_Number=rs.Receipt_Number


WHERE PV.Patient_ID = @p_var_Patient_ID
AND PV.Clinic_ID = @p_var_Clinic_ID
--AND PV.Doctor_ID = @p_var_Doctor_ID
AND PV.Shift_Id = @p_var_Shift_ID
AND PV.Patient_Visit_No = @p_int_patientVisitNo
AND PV.Delete_Flag = 0



END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END




/***** Object: StoredProcedure [dbo].[USP_Get_TestReportDetails] Script Date: 14-Feb-18 4:54:40 PM *****/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_patientComplaintdata]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author	  :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure get MR Previous Visit Data
-- Created By: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_patientComplaintdata]
	@p_var_Visit_Date			DATE,
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(32),
	@p_var_Patient_ID			NVARCHAR(100),
	@p_Var_visit_No				int
	
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY

			SELECT [Ear],[Nose],[Throat],[Vertigo],[Thyroid],[Allergy],[NeckMass],[Others] 
						
			FROM		[dbo].[Patient_Master_ComplaintsData]
	
			
			WHERE		
			
			            Visit_Date=@p_var_Visit_Date 
			AND         Patient_ID=@p_var_Patient_ID
			AND			Clinic_ID =@p_var_Clinic_ID 
		    AND			Doctor_ID =@p_var_Doctor_ID	
			and			Patient_Visit_No = @p_Var_visit_No
			
			select CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
			from Patient_Visits PV

			WHERE		
			
			            Visit_Date=@p_var_Visit_Date 
			AND         Patient_ID=@p_var_Patient_ID
			AND			Clinic_ID =@p_var_Clinic_ID 
		    AND			Doctor_ID =@p_var_Doctor_ID	
			and			Patient_Visit_No = @p_Var_visit_No	
			
			

			

	
			



            END TRY
			BEGIN CATCH
			SELECT 
						ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
     
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_MRPrescriptionDetails_For_Doctor]    Script Date: 16-Jan-18 8:12:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The patient Details in patient Profile Page
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_GET_PatientDetails]

	@Todays_Patient_VisitDate   DATE,
	@p_var_Shift_ID			    TINYINT,
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(30),
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Language_ID			INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY

			SELECT		PM.Folder_No,
						PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Full_Name,
						PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Partial_Name,
						--PM.First_Name +' '+PM.Last_Name AS Partial_Name,
						PM.Age_Given,
						PM.Date_Of_Birth,
						PM.Gender_ID,
						PM.BloodGroup_ID,
						ISNULL(BM.[BloodGroup_Description],'') AS BloodGroup_Description,
						ISNULL(MT.[Marital_Status_Description],'')AS Marital_Status_Description,
						PV.Patient_Visit_No,
						PV.Clinic_ID,
						PV.Doctor_ID,
						PV.Shift_ID,
						PV.Status_ID,
						SR.Status_Description,
						PV.Visit_Date,
						PV.Weight_IN_KGS,
						PV.Height_In_CMS,
						ISNULL(PV.In_Person,0) AS In_Person,
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,ISNULL(On_Call_Status,0) AS On_Call_Status,
						PM.First_Name +' '+PM.Last_Name  as FirstLastName,
						RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details))AS Refer_Doctor_Details,
						PV.Refer_ID,
						RT.[Refer_By_Description],
						--RT.[Refer_By_Description]+' -- '+ PM.Refer_Doctor_Details AS REFERDETAILS,
						RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS,
						GT.Gender_Description,
						ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
						ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
						ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
						ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
						PV.Pulse,
						PV.Blood_Pressure,
						PV.Sugar,PV.THtext,
						ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
						PV.Instructions

			FROM		Patient_Visits PV
			INNER JOIN  Patient_Master PM 
			on			PV.Patient_ID=PM.ID 
			INNER JOIN  [dbo].[Status_Ref] SR
			ON			PV.Status_ID = SR.ID
			LEFT JOIN	[dbo].[Refer_By_Translations] RT
			ON			PV.Refer_ID=RT.[Refer_ID]
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			LEFT JOIN  [dbo].[BloodGroup_Master] BM
			ON          PM.BloodGroup_ID=BM.ID
			LEFT JOIN   [dbo].[Marital_Status_Translations] MT
			ON          PM.[Marital_Status_ID]=MT.[Marital_Status_ID]

			WHERE	    convert(date,Visit_Date,101) = convert(date,@Todays_Patient_VisitDate,101) 
			AND         PV.Shift_ID = @p_var_Shift_ID   
			AND         PV.Clinic_ID= @p_var_Clinic_ID  
			AND         PV.Doctor_ID= @p_var_Doctor_ID  
			AND         PV.Patient_ID=@p_var_Patient_ID	  
			AND			PV.Delete_Flag = 0
			AND			GT.Language_Id=@p_var_Language_ID


			SELECT		PM.Folder_No,
						PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Full_Name,
						--PM.First_Name +' '+PM.Last_Name AS Partial_Name,
						PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Partial_Name,
						PM.Age_Given,
						PM.Date_Of_Birth,
						PM.BloodGroup_ID,
						PM.Marital_Status_ID,
						PM.Gender_ID,
						PM.Address_1,
						PM.Mobile_1,
						CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
						GT.Gender_Description,
						PM.ID,
						ISNULL(CT.[City_Name],'') AS City_Name

			FROM		Patient_Master PM 

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			INNER JOIN	[dbo].[City_Translations] CT
			ON			PM.[City_ID] = CT.[City_ID]

			WHERE		PM.ID          =@p_var_Patient_ID	  
			--AND			PM.Doctor_ID   = @p_var_Doctor_ID
			AND			GT.Language_Id = @p_var_Language_ID
			AND			CT.Language_Id = @p_var_Language_ID


				-- 27 apr v start

			declare @visit_no int,@visit_date datetime , @CAT_ID int;

	        set @visit_no =(SELECT Max(Patient_Visit_No) as Patient_Visit_No FROM Patient_Visits 
	                WHERE  Doctor_ID= @p_var_Doctor_Id AND Patient_ID=@p_var_Patient_ID AND     -- 16 APR V
					Visit_Date = 
					(SELECT max(Visit_Date)FROM Patient_Visits where Patient_ID=@p_var_Patient_ID and Doctor_ID= @p_var_Doctor_Id)                    -- 16 APR V
					);

	        set @visit_date=(
			
	            		       SELECT Max(Visit_Date) as Visit_Date 
	            				 FROM(
	                                SELECT Max(Visit_Date) as Visit_Date FROM Patient_Visits
	                                WHERE  Doctor_ID= @p_var_Doctor_Id AND Patient_ID=@p_var_Patient_ID     -- 16 APR V
	            			   --   AND Visit_Date = (SELECT max(Visit_Date)FROM Patient_Visits)				    -- 16 APR V
	                                AND Patient_Visit_No = @visit_no
	            
	            
	            			    	 UNION ALL
	            
	            			    	 SELECT Max(Visit_Date) as Visit_Date FROM Discharge_Data
	                                 WHERE  Doctor_ID= @p_var_Doctor_Id AND Patient_ID=@p_var_Patient_ID
	            				 ) as subQuery
					 
					 
					 );

            ;WITH FINAL_TABLE AS(
            select Payment_By_cat as CAT_ID,Discharge_Time as Visit_Time 
            from Discharge_Data where
            Doctor_ID= @p_var_Doctor_Id
        	AND   Patient_ID=@p_var_Patient_ID
        	and Visit_Date=@visit_date
	

            UNION ALL

            select CAT_ID , Visit_Time
	        FROM Patient_Visits
            WHERE Doctor_ID= @p_var_Doctor_Id
	        --AND Clinic_ID=@p_var_Clinic_ID
	        AND   Patient_ID=@p_var_Patient_ID
	        and Visit_Date=@visit_date
	        and Patient_Visit_No=@visit_no
            )

 
  SELECT top 1 CAT_ID FROM FINAL_TABLE ORDER BY Visit_Time desc;






			-- end




			print @p_var_Doctor_ID;
			print @p_var_Patient_ID;
			print @p_var_Language_ID;




			Select 
			 CONVERT(NVARCHAR, Advance_Date, 106) as Advance_Date, 
			Amount_Received as Advance from Advance_Collection_details 
			where 
			Patient_ID = @p_var_Patient_ID And
			Clinic_ID = @p_var_Clinic_ID 

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 16-Jan-18 8:12:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetails_demo_1]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The patient Details in patient Profile Page
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_GET_PatientDetails_demo_1]

	@Todays_Patient_VisitDate   DATE,
	@p_var_Shift_ID			    TINYINT,
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(30),
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Language_ID			INT,
	@p_Patient_v_id            NVARCHAR(10)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY

			SELECT		PM.Folder_No,
						PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Full_Name,
						PM.First_Name +' '+PM.Last_Name AS Partial_Name,
						PM.Age_Given,
						PM.Date_Of_Birth,
						PM.Gender_ID,
						PM.BloodGroup_ID,
						ISNULL(BM.[BloodGroup_Description],'') AS BloodGroup_Description,
						ISNULL(MT.[Marital_Status_Description],'')AS Marital_Status_Description,
						PV.Patient_Visit_No,
						PV.Clinic_ID,
						PV.Doctor_ID,
						PV.Shift_ID,
						PV.Status_ID,
						SR.Status_Description,
						PV.Visit_Date,
						PV.Weight_IN_KGS,
						PV.Height_In_CMS,
						ISNULL(PV.In_Person,0) AS In_Person,
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,ISNULL(On_Call_Status,0) AS On_Call_Status,
						PM.First_Name +' '+PM.Last_Name  as FirstLastName,
						--PM.Refer_Doctor_Details,
						--PM.Refer_ID,
						RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS Refer_Doctor_Details,
						--RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) as DoctorName,
                        PV.Refer_ID,
						RT.[Refer_By_Description], 
						RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS, --Changed
						GT.Gender_Description,
						ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
						ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
						ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
						ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
						PV.Pulse,
						PV.Blood_Pressure,
						PV.Sugar,PV.THtext,
						ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
						PV.Instructions,
					    CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
					
						
			FROM		Patient_Visits PV
			INNER JOIN  Patient_Master PM 
			on			PV.Patient_ID=PM.ID 
			INNER JOIN  [dbo].[Status_Ref] SR
			ON			PV.Status_ID = SR.ID
			LEFT JOIN	[dbo].[Refer_By_Translations] RT
			ON			PV.Refer_ID=RT.[Refer_ID]
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			LEFT JOIN  [dbo].[BloodGroup_Master] BM
			ON          PM.BloodGroup_ID=BM.ID
			LEFT JOIN   [dbo].[Marital_Status_Translations] MT
			ON          PM.[Marital_Status_ID]=MT.[Marital_Status_ID]

			WHERE	    convert(date,Visit_Date,101) = convert(date,@Todays_Patient_VisitDate,101) 
			AND         PV.Shift_ID = @p_var_Shift_ID   
			AND         PV.Clinic_ID= @p_var_Clinic_ID  
			and         PV.Patient_Visit_No=   @p_Patient_v_id
			--AND         PV.Doctor_ID= @p_var_Doctor_ID  
			AND         PV.Patient_ID=@p_var_Patient_ID	  
			AND			PV.Delete_Flag = 0
			AND			GT.Language_Id=@p_var_Language_ID







			SELECT		PM.Folder_No,
						PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Full_Name,
						PM.First_Name +' '+PM.Last_Name AS Partial_Name,
						PM.Age_Given,
						PM.Date_Of_Birth,
						PM.BloodGroup_ID,
						PM.Marital_Status_ID,
						PM.Gender_ID,
						PM.Address_1,
						PM.Mobile_1,
						CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
						GT.Gender_Description,
						PM.ID,
						ISNULL(CT.[City_Name],'') AS City_Name

			FROM		Patient_Master PM 

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			INNER JOIN	[dbo].[City_Translations] CT
			ON			PM.[City_ID] = CT.[City_ID]

			WHERE		PM.ID          =@p_var_Patient_ID	  
			--AND			PM.Doctor_ID   = @p_var_Doctor_ID
			AND			GT.Language_Id = @p_var_Language_ID
			AND			CT.Language_Id = @p_var_Language_ID


			SELECT ID,Status_Description
			FROM Status_Ref
			WHERE ID=3

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END






/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails_Update]    Script Date: 15-Feb-18 4:33:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetailsOffline]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The patient Details in patient Profile Page
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_GET_PatientDetailsOffline]
	
	@p_var_Doctor_ID			NVARCHAR(30),
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Languageid			INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
			SELECT		PM.Folder_No,PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name AS Full_Name,
						PM.First_Name +' '+PM.Last_Name  AS FirstLastName,
						PM.Age_Given,
						PM.Date_Of_Birth,
						PM.Folder_No,
						DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						PM.Gender_ID,GT.Gender_Description,
						PM.Refer_Doctor_Details,
						PM.Refer_ID,
						RT.[Refer_By_Description],
						RT.[Refer_By_Description]+' -- '+ PM.Refer_Doctor_Details AS REFERDETAILS 

			FROM		 Patient_Master PM 

			INNER JOIN Gender_Translations GT
			ON		PM.Gender_ID=GT.Gender_ID

			LEFT JOIN [dbo].[Refer_By_Translations] RT
			ON			PM.Refer_ID=RT.[Refer_ID]

			WHERE	   
						PM.Doctor_ID= @p_var_Doctor_ID  
			AND         PM.ID=@p_var_Patient_ID
			AND			GT.Language_Id=@p_var_Languageid	 
			 
		

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Delete_AttachedTreatmentFiles]    Script Date: 16-Jan-18 7:49:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentID]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  14-Mar-2016
-- Description  :  This stored procedure will Get Last VisitNo.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_PatientDocumentID]
	
	@p_nvar_Doctor_Id    NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
			SELECT  
					Max(Patient_DocumentID) + 1 as ID
			  FROM  Patient_Documents
             WHERE
                    
					 Doctor_ID=@p_nvar_Doctor_Id
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END

















/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetailsOffline]    Script Date: 16-Jan-18 8:13:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentID_operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  14-Mar-2016
-- Description  :  This stored procedure will Get Last VisitNo.
--  created By  :  Suyog Khairnar
-- =============================================
Create  PROCEDURE [dbo].[USP_Get_PatientDocumentID_operator]
	
	@p_nvar_Doctor_Id    NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
			SELECT  
					Max(ID) + 1 as ID
			  FROM  [dbo].[Patient_Documents_Treatment]
             WHERE
                    
					 Doctor_ID=@p_nvar_Doctor_Id
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentLists]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientDocumentLists]
	@p_nvar_PatientId			NVARCHAR(32),
	
	@p_nvar_DoctorId			NVARCHAR(30),
	@p_int_patientVisitNo		INT
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
      SELECT  
	 -- Cast(Patient_ID as nvarchar(1000))+'_'+
	  Document_Name as Document ,ID  AS Patient_DocumentID
      FROM	  [dbo].[Patient_Audio_Attachment] 
	                   
      WHERE	  Patient_ID  =	 @p_nvar_PatientId		  
      --AND     Doctor_ID   =  @p_nvar_DoctorId 
	  AND			Patient_Visit_No	=	@p_int_patientVisitNo
	  AND     Delete_Flag =	 0
	 
	  
	
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END



/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentID]    Script Date: 16-Jan-18 8:13:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentLists_PreAudio]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientDocumentLists_PreAudio]
	@p_nvar_PatientId			NVARCHAR(32),
	
	@p_nvar_DoctorId			NVARCHAR(30),
	@p_nvar_pvisitno		INT
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
      SELECT  
	 -- Cast(Patient_ID as nvarchar(1000))+'_'+
	  Document_Name as Document ,ID  AS Patient_DocumentID
      FROM	  [dbo].[Patient_Audio_Attachment] 
	                   
      WHERE	  Patient_ID  =	 @p_nvar_PatientId		  
      --AND     Doctor_ID   =  @p_nvar_DoctorId 
	  AND			Patient_Visit_No	=	@p_nvar_pvisitno
	  AND     Delete_Flag =	 0


	 
	 
	  
	
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END



/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentID]    Script Date: 16-Jan-18 8:13:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentLists_PreFile]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 Create PROCEDURE [dbo].[USP_Get_PatientDocumentLists_PreFile]
	@p_nvar_PatientId			NVARCHAR(32),
	
	@p_nvar_DoctorId			NVARCHAR(30),
	@p_nvar_pvisitno		INT
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
      SELECT  
	 -- Cast(Patient_ID as nvarchar(1000))+'_'+
	  Document_Name as Document ,ID  AS Patient_DocumentID
      FROM	   [dbo].[Patient_Documents_Treatment]
	                   
      WHERE	  Patient_ID  =	 @p_nvar_PatientId		  
      --AND     Doctor_ID   =  @p_nvar_DoctorId 
	  AND			Patient_Visit_No	=	@p_nvar_pvisitno
	  AND     Delete_Flag =	 0


	 
	 
	  
	
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END



/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentID]    Script Date: 16-Jan-18 8:13:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentLists_REG]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 Create PROCEDURE [dbo].[USP_Get_PatientDocumentLists_REG]
	@p_nvar_PatientId			NVARCHAR(32),
	
	@p_nvar_DoctorId			NVARCHAR(30)
	
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
      SELECT  
	 -- Cast(Patient_ID as nvarchar(1000))+'_'+
	  Document_Name as Document ,Patient_DocumentID AS Patient_DocumentID
      FROM	 [dbo].[Patient_Documents]
      WHERE	  Patient_ID  =	 @p_nvar_PatientId		  
      --AND     Doctor_ID   =  @p_nvar_DoctorId 
	 
	  AND     Delete_Flag =	 0
	 
	  
	
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END



/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentID]    Script Date: 16-Jan-18 8:13:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentListsaftersubmit]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 Create PROCEDURE [dbo].[USP_Get_PatientDocumentListsaftersubmit]
	@p_nvar_DoctorId    NVARCHAR(30),
	@p_nvar_PatientId    NVARCHAR(32),
	@p_int_patientVisitNo    INT
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
		    SELECT  
	
	  Document_Name as Document ,ID  AS Patient_DocumentID
      FROM	 [dbo].[Patient_Audio_Attachment]
	                   
      WHERE	  Patient_ID  =	 @p_nvar_PatientId	
	         	AND  [Patient_Visit_No]=@p_int_patientVisitNo
      --AND     Doctor_ID   =  @p_nvar_DoctorId 
	  --AND     Delete_Flag =	 0
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

	 
	  

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientDocumentListsforTreatment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 15-APR-2016
-- Description	: This stored procedure will Get the Todyas Visit patient details.
-- Created By	: Nilesh Wani
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientDocumentListsforTreatment]
	@p_nvar_DoctorId    NVARCHAR(30),
	@p_nvar_PatientId    NVARCHAR(32),
	@p_int_patientVisitNo    INT
	--@p_nvar_visit_date     Datetime
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 	BEGIN TRY
		    SELECT  
	
	  Document_Name as Document ,ID  AS Patient_DocumentID
      FROM	  [dbo].[Patient_Documents_Treatment]
	                   
      WHERE	  Patient_ID  =	 @p_nvar_PatientId	
	         	AND  [Patient_Visit_No]=@p_int_patientVisitNo
				--and Visit_Date=@p_nvar_visit_date
      --AND     Doctor_ID   =  @p_nvar_DoctorId 
	  AND     Delete_Flag =	 0
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

	 
	  

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFamilyDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author : INCRUST
-- Create date : 25-Mar-2016
-- Description : This stored procedure will get patient's family pop up
-- Created By : Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientFamilyDetails]

@p_var_Clinic_Id NVARCHAR(32),
@p_var_Doctor_ID NVARCHAR(30),
@p_var_Folder_No NVARCHAR(30)

AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
BEGIN TRY

;WITH FeesCollectionData AS
(
SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
pv.Fees_To_Collect AS Bill,pv.Fees_Collected as Collected,pm.Folder_No,pv.[Doctor_ID],pv.Financial_Year,
((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance ,
pv.Discount as Discount ,
(pv.Fees_To_Collect - pv.Discount ) as Dues ,

STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,
LEFT(SM.Description,1) AS ShiftDescription,SR.Status_Description AS Status_Description,null AS ISadhoc,ISNULL(pv.[Receipt_Number],'') AS Receipt_Number,
ISNULL(pv.Receipt_Type,'') AS Receipt_Type,DM.Prefix+' '+DM.First_Name AS DoctorName

FROM Patient_Master pm

INNER JOIN Patient_Visits pv
ON pm.ID = Pv.Patient_ID and
PM.Clinic_ID = PV.Clinic_ID

INNER JOIN Shift_Master SM
ON pv.Shift_ID=SM.Shift_ID

INNER JOIN Status_Ref SR
ON pv.Status_ID=SR.ID

INNER JOIN Doctor_Master DM ON
DM.Doctor_ID = PV.Doctor_ID

WHERE --pm.Doctor_ID = @p_var_Doctor_ID
pm.Folder_No = @p_var_Folder_No
AND pv.Delete_Flag= 0
AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
AND pv.Status_ID=5


UNION ALL


SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
pv.Fees_To_Collect AS Bill,pv.Fees_Collected as Collected,pm.Folder_No,pv.[Doctor_ID],pv.Financial_Year,
((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance ,
pv.Discount as Discount ,
(pv.Fees_To_Collect - pv.Discount ) as Dues ,

STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,
LEFT(SM.Description,1) AS ShiftDescription,SR.Status_Description AS Status_Description,null AS ISadhoc,ISNULL(pv.[Receipt_Number],'') AS Receipt_Number,
'' AS Receipt_Type,DM.Prefix+' '+DM.First_Name AS DoctorName

FROM Patient_Master pm

INNER JOIN Patient_Visits_Services pv
ON pm.ID = Pv.Patient_ID and
PM.Clinic_ID = PV.Clinic_ID

INNER JOIN Shift_Master SM
ON pv.Shift_ID=SM.Shift_ID

INNER JOIN Status_Ref SR
ON pv.Status_ID=SR.ID

INNER JOIN Doctor_Master DM ON
DM.Doctor_ID = PV.Doctor_ID

WHERE --pm.Doctor_ID = @p_var_Doctor_ID
pm.Folder_No = @p_var_Folder_No
AND pv.Delete_Flag= 0
AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
AND pv.Status_ID=8


UNION ALL

SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
Payment_Date AS Visit_Date, 0 AS Bill,[Fees_Collected] AS Collected ,pm.Folder_No,pv.[Doctor_ID],Financial_Year,
0 - [Fees_Collected] AS Balance,0 as Discount , 0 as dues , right(convert(varchar,Payment_Date),7) AS Visit_Time,
LEFT(SM.Description,1) AS ShiftDescription,null,'Y' AS ISadhoc,ISNULL(PV.[Receipt_Number],'') AS Receipt_Number,
ISNULL(PV.Receipt_Type,'') AS Receipt_Type,PV.Attended_By AS DoctorName

FROM Patient_Payments_AdHoc PV

INNER JOIN Patient_Master pm
ON pm.ID = Pv.Patient_ID and
PM.Clinic_ID = PV.Clinic_ID

INNER JOIN Shift_Master SM
ON PV.Shift_ID=SM.Shift_ID

INNER JOIN Doctor_Master DM ON
DM.Doctor_ID = PV.Doctor_ID

WHERE --pm.Doctor_ID = @p_var_Doctor_ID
pm.Folder_No = @p_var_Folder_No
AND pv.Delete_Flag= 0
AND pv.Fees_Collected IS NOT NULL

)
SELECT Patient_ID, Full_Name, Patient_Visit_No,Financial_Year,
Bill, Collected, Folder_No, Balance, discount , dues ,replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') + ' - ' + Visit_Time + ' - ' +CONVERT(varchar(15),ShiftDescription)
AS LAST_VISIT_DATE,Status_Description,ISadhoc,Receipt_Type+' '+Receipt_Number as Receipt_Number,DoctorName,
replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') + ' - ' + Visit_Time AS Receipt_Date,
Visit_Date
FROM FeesCollectionData
ORDER BY Visit_Date desc
--ORDER BY LAST_VISIT_DATE DESC

END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END
















/***** Object: StoredProcedure [dbo].[USP_Get_Patient_FeesDetails] Script Date: 26-Oct-18 11:58:25 AM *****/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFolderAmount]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  13 Oct 2016
-- Description	:  This stored procedure will get patient's folder balance amount
-- Created By	:  Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientFolderAmount]

	@p_var_Clinic_Id	  NVARCHAR(32),
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_var_Folder_No	  NVARCHAR(30),
	@p_var_Patient_Visit_No	int

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY
   	  
		 ;WITH FeesCollectionData AS 
		 (
		 
				SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
				pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,pv.[Doctor_ID],pv.Financial_Year,
						((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance  , pv.Discount as Discount , (pv.Fees_To_Collect - pv.Discount ) as Dues 

				FROM   Patient_Master pm INNER JOIN Patient_Visits pv

				ON     pm.ID		 =	 Pv.Patient_ID and
					   PM.Clinic_ID	 = PV.Clinic_ID

				WHERE  pm.Clinic_ID  =   @p_var_Clinic_Id
				AND	  pm.Folder_No  =   @p_var_Folder_No 
				AND	   pv.Delete_Flag= 0 
				AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
				AND pv.Status_ID=5


UNION ALL

					SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
				pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,pv.[Doctor_ID],pv.Financial_Year,
						((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance  , pv.Discount as Discount , (pv.Fees_To_Collect - pv.Discount ) as Dues 

				FROM   Patient_Master pm INNER JOIN Patient_Visits_Services pv

				ON     pm.ID		 =	 Pv.Patient_ID and
					   PM.Clinic_ID	 = PV.Clinic_ID

				WHERE  pm.Clinic_ID  =   @p_var_Clinic_Id
				AND	  pm.Folder_No  =   @p_var_Folder_No 
				AND	   pv.Delete_Flag= 0 
				AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
				AND pv.Status_ID=8


		

UNION ALL

				SELECT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
						Payment_Date AS Visit_Date, 0 AS Bill,[Fees_Collected] AS Collected ,pm.Folder_No,pv.[Doctor_ID],Financial_Year, 	
		  				0 - [Fees_Collected]  AS Balance , 0 as Discount  , 0 as Dues
						 --CollectedDate	 
				FROM	Patient_Payments_AdHoc PV
				INNER JOIN Patient_Master pm  
				ON     pm.ID			=	Pv.Patient_ID and
					   PM.Clinic_ID		=	PV.Clinic_ID

				WHERE	pm.Clinic_ID		=   @p_var_Clinic_Id
				AND		pm.Folder_No		=   @p_var_Folder_No 
				AND		pv.Delete_Flag	=	0 
				AND		pv.Fees_Collected IS NOT NULL 
			  
		)
		
		SELECT	Patient_ID, Full_Name, Patient_Visit_No,  Visit_Date,Financial_Year,
				Bill, Collected, Folder_No, Balance , Discount, Dues
		FROM	FeesCollectionData
		ORDER BY Visit_Date ASC

		


		
	 END TRY
     BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH
 END





			



















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFamilyDetails]    Script Date: 16-Jan-18 8:13:19 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFolderAmountForBilling]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_PatientFolderAmountForBilling]

	@p_var_Clinic_Id	  NVARCHAR(32),
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_var_Folder_No	  NVARCHAR(30),
	@p_var_Patient_Visit_No	int

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY
   	  
		 ;WITH FeesCollectionData AS 
		 (
		 
				SELECT Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
				pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,pv.[Doctor_ID],pv.Financial_Year,
						((pv.Fees_To_Collect - pv.Discount ) - pv.Fees_Collected ) as Balance  , pv.Discount as Discount , (pv.Fees_To_Collect - pv.Discount ) as Dues 

				FROM   Patient_Master pm INNER JOIN Patient_Visits_Services pv

				ON     pm.ID		 =	 Pv.Patient_ID and
					   PM.Clinic_ID	 = PV.Clinic_ID

				WHERE  pm.Clinic_ID  =   @p_var_Clinic_Id
				AND	  pm.Folder_No  =   @p_var_Folder_No 
				AND	   pv.Delete_Flag= 0 
				AND pv.Fees_To_Collect IS NOT NULL --use to avoid null record
				AND pv.Status_ID=8
				and pv.Visit_Type='S'
		

--UNION ALL

--				SELECT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
--						 Visit_Date, 0 AS Bill,[Fees_Collected] AS Collected ,pm.Folder_No,pv.[Doctor_ID],Financial_Year, 	
--		  				0 - [Fees_Collected]  AS Balance , 0 as Discount  , 0 as Dues
--						 --CollectedDate	 
--				FROM	Patient_Visits PV
--				INNER JOIN Patient_Master pm  
--				ON     pm.ID			=	Pv.Patient_ID and
--					   PM.Clinic_ID		=	PV.Clinic_ID

--				WHERE	pm.Clinic_ID		=   @p_var_Clinic_Id
--				AND		pm.Folder_No		=   @p_var_Folder_No 
--				AND		pv.Delete_Flag	=	0 
--				AND		pv.Fees_Collected IS NOT NULL 
--				and pv.Visit_Type='S'
			  
		)
		
		SELECT	Patient_ID, Full_Name, Patient_Visit_No,  Visit_Date,Financial_Year,
				Bill, Collected, Folder_No, Balance , Discount, Dues
		FROM	FeesCollectionData
		ORDER BY Visit_Date ASC

		


		
	 END TRY
     BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH
 END





			



















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFamilyDetails]    Script Date: 16-Jan-18 8:13:19 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFullRegistration]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  02-March-2016
-- Description :  This stored procedure will get FullRegistrationDetails.
--  created by :  Varsha Khandre    
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_PatientFullRegistration]

	@p_nvar_Patient_Id          NVARCHAR(32),
	@p_var_LanguageID			INT
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
            
			SELECT  
			        PM.ID,
					PM.Doctor_ID,
					PM.Folder_No,
					PM.First_Name,
					PM.Middle_Name,
					PM.Last_Name,
					PM.Email_ID,
					PM.Gender_ID,
					PM.Address_1,
					PM.Address_2,
					PM.Area_ID,
					PM.City_ID,
					PM.State_ID,
					PM.Country_ID,
					PM.Pincode,
					PM.Date_Of_Birth,
					PM.Age_Given,
					PM.Weight_IN_KGS,
					PM.Height_In_CMS,
					PM.BloodGroup_ID,
					PM.Mobile_1,
					PM.Emergency_Number,
					PM.Emergency_Name,
					PM.Date_Of_Registration,
					PM.Registration_Status,
					PM.Manual_Registration_Year,
					PM.Refer_ID,
					--PM.Refer_Doctor_Details,
					RIGHT(PM.Refer_Doctor_Details,LEN(PM.Refer_Doctor_Details)-CHARINDEX(':',PM.Refer_Doctor_Details)) AS Refer_Doctor_Details,
					ISNULL(PM.[Marital_Status_ID],'') AS [Marital_Status_ID],
					ISNULL(PM.[Occupation_ID],0) AS [Occupation_ID],
					PM.Doctor_Address,
					PM.Doctor_Mobile,
					PM.Doctor_Email,

					
                    PMC.Asthama,
					PMC.Hypertension,
					PMC.Diabetes,
					PMC.Cholestrol,
					PMC.IHD,
					PMC.TH,
					PMC.Smoking,
					PMC.Tobaco,
					PMC.Alchohol,
					PMC.Past_Surgeries,
					PMC.Allergy_Dtls,
					PMC.Past_Medication,
					PMC.Chronic_DiseaseComments,
					PMC.Habits_Comments,
					PMC.Other_Chronic_Disease,
					PMC.Addiction_Comment,
					PMC.Additional_Comment,
					PMF.Asthama as F_Asthama,
					PMF.Hypertension as F_Hypertension,
					PMF.Diabetes as F_Diabetes,
					PMF.Cholestrol as F_Cholestrol,
					PMF.IHD as F_IHD,
					PMF.TH as F_TH,
					PMF.Chronic_DiseaseComments as F_Chronic_DiseaseComments ,
					PMF.Family_History,
					PMF.Supportive_Tests,
					PM.Residential_No,
					AMT.Area_Name,
					CMT.City_Name,
					SMT.State_Name,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
					,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
					,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc	  
					,PM.Refer_Doctor_Details as HiddenNameid

              FROM  Patient_Master PM INNER JOIN 
                    Patient_Master_ChronicData PMC 
                ON  PM.ID=PMC.Patient_ID INNER JOIN 
                    Patient_Master_Family PMF 
                ON  PM.ID=PMF.Patient_ID INNER JOIN
					Area_Translations AMT 
				ON  PM.Area_ID=AMT.Area_ID INNER JOIN
					City_Translations CMT 
				ON  PM.City_ID=CMT.City_ID INNER JOIN
					State_Translations SMT 
				ON PM.State_ID=SMT.State_ID

				INNER JOIN Gender_Translations GT
				ON		PM.Gender_ID = GT.Gender_ID

				WHERE	ID=@p_nvar_Patient_Id
				AND		GT.Language_Id = @p_var_LanguageID
				AND		AMT.Language_Id = @p_var_LanguageID
				AND		CMT.Language_Id = @p_var_LanguageID
				AND		SMT.Language_Id = @p_var_LanguageID

				SELECT [FMP],[PRMC],[PAMC],[LMP],[Obstetrics_History],[Surgical_History_Past_History],[Additional_Comments]
				FROM   [dbo].[Patient_Menstruation History]
				WHERE  Patient_ID	=	@p_nvar_Patient_Id
				
                
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
        END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Delete_InternalMedicine]    Script Date: 16-Jan-18 7:50:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFullRegistrationDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  15-Mar-2016
-- Description  :  This stored procedure will Select the Data In Patient Master table
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_PatientFullRegistrationDetails]

	@p_nvar_ID			NVARCHAR(32),
	@p_var_LanguageID	INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY

			SELECT  ID,
					Doctor_ID,
					Folder_No,
					First_Name,
					Middle_Name,
					Last_Name,
					PM.Gender_ID,
					Manual_Registration_Year,
					Date_Of_Birth,
					Age_Given,
					PM.Area_ID,
					Mobile_1,
					Date_Of_Registration,
					PM.Residential_No,
					PM.City_ID,
					PM.State_ID,
					PM.Country_ID,
					AMT.Area_Name,
					CMT.City_Name,
					SMT.State_Name,
					Refer_ID,
					Refer_Doctor_Details,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
					,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
					,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc	,
					PM.Address_1,
					ISNULL(PM.[Marital_Status_ID],'') AS [Marital_Status_ID],
					ISNULL(PM.[Occupation_ID],0) AS [Occupation_ID],
					PM.Doctor_Address,
					PM.Doctor_Mobile,
					PM.Doctor_Email,
					PM.Address_1,
					PM.Email_ID,
					PM.BloodGroup_ID,
					pm.Pincode

			 FROM   Patient_Master	PM 
			 
			 INNER JOIN Area_Translations AMT 
				ON		PM.Area_ID=AMT.Area_ID 
			 INNER JOIN City_Translations CMT 
				ON		PM.City_ID=CMT.City_ID 
			 INNER JOIN State_Translations SMT 
				ON		PM.State_ID=SMT.State_ID
			 INNER JOIN Gender_Translations GT
				ON		PM.Gender_ID = GT.Gender_ID
			 WHERE		ID=@p_nvar_ID
			 AND		GT.Language_Id = @p_var_LanguageID
			 AND		AMT.Language_Id = @p_var_LanguageID
			 AND		CMT.Language_Id = @p_var_LanguageID
			 AND		SMT.Language_Id = @p_var_LanguageID
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFullRegistration]    Script Date: 16-Jan-18 8:25:14 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientHospitalBillReceiptData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 21 April 2017
-- Description:	This stored procedure is used to get patient receipt data
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientHospitalBillReceiptData]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_nvar_Visit_Type			CHAR(1),
	@p_nvar_Bill_no		NVARCHAR(30),
	@p_nvar_Receipt_no		NVARCHAR(30)


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_IPD_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 --AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			-- AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			 AND		VGI.Receipt_Number          =   @p_nvar_Receipt_no
			 AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type

			 if EXISTS(	SELECT PPA.collected_amount , PTM.Payment_Description , ppa.payment_Remark

		FROM	[dbo].[Discharge_Bill_Hdr] PPA
		inner join Payment_type_Master PTM on PTM.Id = ppa.Payment_By_ID
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
					 AND		PPA.Receipt_Number          =   @p_nvar_Receipt_no

			 AND		PPA.Bill_No								=	@p_nvar_Bill_no)
			 begin
			 SELECT PPA.collected_amount , PTM.Payment_Description , ppa.payment_Remark

		FROM	[dbo].[Discharge_Bill_Hdr] PPA
		inner join Payment_type_Master PTM on PTM.Id = ppa.Payment_By_ID
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
					 AND		PPA.Receipt_Number          =   @p_nvar_Receipt_no

			 AND		PPA.Bill_No								=	@p_nvar_Bill_no
			 end
			 else begin 
			 
			 SELECT PPA.collected_amount , '' as Payment_Description , '' as  payment_Remark

		FROM	[dbo].[Discharge_Bill_Hdr] PPA
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
		 AND		PPA.Receipt_Number          =   @p_nvar_Receipt_no
			 AND		PPA.Bill_No								=	@p_nvar_Bill_no
			 end



			  if EXISTS(	SELECT PPA.Amount_Received , PTM.Payment_Description , ppa.payment_Remark

		FROM	[dbo].[Advance_Collection_details] PPA
		inner join Payment_type_Master PTM on PTM.Id = ppa.Payment_By_ID
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
				 AND		PPA.Receipt_Number          =   @p_nvar_Receipt_no

		--	 AND		PPA.Date								=	@p_date_TodyasVisitDate
			 )
			 begin
			 SELECT PPA.Amount_Received , PTM.Payment_Description , ppa.payment_Remark

		FROM	[dbo].[Advance_Collection_details] PPA
		inner join Payment_type_Master PTM on PTM.Id = ppa.Payment_By_ID
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
				 AND		PPA.Receipt_Number          =   @p_nvar_Receipt_no

			-- AND		PPA.Date								=	@p_date_TodyasVisitDate
			 end
			 else begin 
			 
			 SELECT PPA.Amount_Received , '' as Payment_Description , '' as  payment_Remark

		FROM	[dbo].[Advance_Collection_details] PPA
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
				 AND		PPA.Receipt_Number          =   @p_nvar_Receipt_no

			-- AND		PPA.Date								=	@p_date_TodyasVisitDate
			 end

END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Jan-18 8:25:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 27 March 2017
-- Description	: This stored procedure will Get the Patients IIIC Register Details
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientIIICRegisterDetails]

	@p_var_fromdate			DATE,
	@p_var_todate			DATE
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
 

 
 IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TempPatientBillingInfo]') AND type in (N'U'))
DROP TABLE [dbo].[TempPatientBillingInfo]


DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @cols= STUFF((SELECT distinct ',' + QUOTENAME(BillingDetails) 
                    from  (select BDM.Doctor_ID,BDM.Billing_Group_Name +'-'+ BDM.Billing_Subgroup_Name+'-' +BDM.Billing_Details
 AS BillingDetails from [dbo].[Billing_Details_Master] BDM

 LEFT JOIN [dbo].[Patient_Visit_BillingInfoOverwrite] PVB

				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
 
 ) X

            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

		set @query = ' WITH MBillingDetails AS ( SELECT Doctor_ID,Clinic_Id,Shift_Id,Patient_Id,Patient_Visit_No,Visit_Date,'+ '''Patient Visit''' + ' AS Visit_Type, ' + @cols + '
             from 
             (
                select BDM.Doctor_ID,BDM.Billing_Group_Name+' + '''-''' + '+BDM.Billing_Subgroup_Name+' + '''-''' + '+BDM.Billing_Details AS BillingDetails,
				PVB.Clinic_Id,PVB.Shift_Id,PVB.Patient_Id,PVB.Patient_Visit_No,PVB.Visit_Date,PVB.Collected_Fees  
				 from [dbo].[Billing_Details_Master] BDM
				LEFT JOIN [dbo].[Patient_Visit_BillingInfoOverwrite] PVB
				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
			) x
            pivot 
            (
                max(Collected_Fees)
                for BillingDetails in (' + @cols + ')
            ) p ) SELECT * INTO [dbo].[TempPatientBillingInfo] FROM  MBillingDetails'

	--print @query
execute(@query);


	
	 ;with GenerateIIICRegister as
	(
			SELECT  
				
				CONVERT(VARCHAR(11),PV.Visit_Date,106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				SP.[Type_Of_Service],
				PV.Fees_Collected AS Charges,

				ISNULL(PV.Attended_By,'') AS AttendedBy_Doctor,
				DM.Speciality AS Speciality,
				DM.base_location as BaseLocation,
				PR.Receipt_Type AS Receipt_Type,
				PR.Receipt_Number AS [Receipt_Number],
				CONVERT(VARCHAR(11),PR.Receipt_Date,106) AS Receipt_Date,
				CONVERT(VARCHAR(11),PR.From_Date,106) AS Receipt_From_Date,
				CONVERT(VARCHAR(11),PR.To_Date,106) AS Receipt_To_Date,
				PR.[Receipt_Amount] AS [Receipt_Amount],
				PV.Fees_Collected,

				PV.Payment_Remark,pd.Payment_Description,
				PV.Comment,

				PV.Fees_To_Collect-PV.Discount -PV.Fees_Collected AS DUES,
				'Patient Visit' AS Visit_Type1,

				PV.Doctor_ID,
				PV.Clinic_ID,
				PV.Shift_ID,
				PV.Patient_ID,
				PV.Discount AS Discount,
				PV.Fees_To_Collect as Billed,
				PV.Fees_To_Collect - PV.Discount as DiscountDues,
				Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' ),
				PV.Patient_Visit_No

			FROM Patient_Visits PV 
	  
			INNER JOIN Patient_Master PM ON	  pv.Patient_ID=PM.ID
			INNER JOIN [dbo].[Shift_Master] SM ON PV.Shift_ID = SM.Shift_ID
			INNER JOIN [dbo].[System_Params] SP ON PV.Doctor_ID=SP.Doctor_ID
			LEFT JOIN [Patient_Receipts] PR ON	PV.[Patient_ID]=PR.[Patient_ID]
			AND	PV.Receipt_Number=PR.Receipt_Number
			LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = PV.Payment_By_ID
            LEFT JOIN [dbo].[Visit_Type] VT ON	PR.Visit_Type=VT.ID
			INNER JOIN Doctor_Master DM ON	  DM.Doctor_ID=pv.doctor_ID

			WHERE	PV.Visit_Date BETWEEN @p_var_fromdate AND @p_var_todate
			AND		PV.[Status_ID]=5
			AND     PV.Delete_Flag  =	0  

Union All

		SELECT  
				
				CONVERT(VARCHAR(11),PPA.[Payment_Date],106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				SP.[Type_Of_Service],
				 PPA.Fees_Collected AS Charges,
				-- RIGHT(ISNULL(PPA.Attended_By,''), LEN(ISNULL(PPA.Attended_By,'')) - 3) AS AttendedBy_Doctor,
				 	ISNULL(PPA.Attended_By,'') AS AttendedBy_Doctor,
				DM.Speciality AS Speciality,
				DM.Base_Location as BaseLocation,
				PR.Receipt_Type AS Receipt_Type,
				PR.Receipt_Number AS [Receipt_Number],
				CONVERT(VARCHAR(11),PR.Receipt_Date,106) AS Receipt_Date,
				CONVERT(VARCHAR(11),PR.From_Date,106) AS Receipt_From_Date,
				CONVERT(VARCHAR(11),PR.To_Date,106) AS Receipt_To_Date,
				PR.[Receipt_Amount] AS [Receipt_Amount],
				PPA.Fees_Collected,
				PPA.Payment_Remark,pd.Payment_Description,
				PPA.Comment,
				0-PPA.Fees_Collected  AS DUES,
				'Ad-hoc' AS Visit_Type1,
				PPA.Doctor_ID,
				PPA.Clinic_ID,
				PPA.Shift_ID,
				PPA.Patient_ID,
				Null as Discount,
				null as Billed,
				null as DiscountDues,
				'Adhoc - Followup' as Is_follow_Up,
				null as Patient_Visit_No
				 

				
					
			FROM	[dbo].[Patient_Payments_AdHoc]   PPA 
	  
			INNER JOIN Patient_Master PM ON	  PPA.Patient_ID=PM.ID

			INNER JOIN [dbo].[Shift_Master] SM ON PPA.Shift_ID = SM.Shift_ID
			
			INNER JOIN [dbo].[System_Params] SP ON PPA.Doctor_ID=SP.Doctor_ID

			LEFT JOIN [Patient_Receipts] PR ON	PPA.[Patient_ID]=PR.[Patient_ID] AND PPA.Receipt_Number=PR.Receipt_Number

			LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = PPA.Payment_By_ID

			LEFT JOIN [dbo].[Visit_Type] VT ON	PR.Visit_Type=VT.ID

			INNER JOIN Doctor_Master DM ON	  DM.Doctor_ID=ppa.doctor_ID

			WHERE	CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_fromdate AND @p_var_todate AND ISNULL(PPA.[Delete_Flag],0)  =	0  
			
			)

			SELECT	GIC.Visit_Date AS 'Visit Date',
					ShiftDesc AS 'Shift',
					Patient_Name AS 'Patient Name',
					Type_Of_Service AS 'Type of Service',
				    is_follow_Up As 'New / Follow up',

						AttendedBy_Doctor AS 'Attended By Doctor',
					Speciality AS Speciality,
		        	BaseLocation AS BaseLocation,
					Payment_Description AS 'Payment Type',
					Payment_Remark AS 'Payment Remark',
					Comment AS 'Reason',



					Billed As 'Billed',

					Discount AS 'Discount',
					DiscountDues AS 'Dues',
					Charges AS 'Collected',

				
					DUES AS 'Balance Amount',
					--GIC.Doctor_ID,
					BIO.*,
					Receipt_Amount AS 'Receipt Amount',
					Receipt_Type AS 'Receipt Type (R/L)',
					Receipt_Number AS 'Receipt No',
					Receipt_Date AS 'Receipt Date',
					Receipt_From_Date AS 'Receipt From Date',
					Receipt_To_Date AS 'Receipt To Date',
	
					Visit_Type1 AS 'Visit Type'
				
					
			
			 from GenerateIIICRegister GIC

			 LEFT JOIN		[dbo].[TempPatientBillingInfo]   BIO  
				ON			GIC.Doctor_ID=BIO.Doctor_ID
				AND			GIC.Clinic_ID=BIO.Clinic_ID
				AND			GIC.Shift_ID=BIO.Shift_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				AND			GIC.Visit_Date=BIO.Visit_Date
				AND			GIC.Visit_Type1 = BIO.Visit_Type
				AND			GIC.Patient_Visit_No = BIO.Patient_Visit_No


			ORDER BY	CONVERT(DateTime, GIC.Visit_Date,101)  ASC
			 
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFullRegistrationDetails]    Script Date: 16-Jan-18 8:25:24 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails_NoComprehensive]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 19 May 17
-- Description	: This stored procedure will Get the Patients IIIC Register Details when comprehensive billing flag is off
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientIIICRegisterDetails_NoComprehensive]

	@p_var_fromdate			DATE,
	@p_var_todate			DATE
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
 


 	 ;with GenerateIIICRegister as
	(
			SELECT  
				
				CONVERT(VARCHAR(11),PV.Visit_Date,106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				SP.[Type_Of_Service],
				PV.Fees_Collected AS Charges,
				ISNULL(PV.Attended_By,'') AS AttendedBy_Doctor,
				PR.Receipt_Type AS Receipt_Type,
				PR.Receipt_Number AS [Receipt_Number],
				CONVERT(VARCHAR(11),PR.Receipt_Date,106) AS Receipt_Date,
				CONVERT(VARCHAR(11),PR.From_Date,106) AS Receipt_From_Date,
				CONVERT(VARCHAR(11),PR.To_Date,106) AS Receipt_To_Date,
				PR.[Receipt_Amount] AS [Receipt_Amount],
				PV.Fees_Collected,
				PV.Payment_Remark,pd.Payment_Description,
				PV.Comment,
				PV.Fees_To_Collect-PV.Discount-PV.Fees_Collected AS DUES,
				'Patient Visit' AS Visit_Type,
				PV.Discount as Discount,
							PV.Fees_To_Collect as Billed,
				PV.Fees_To_Collect - PV.Discount as DiscountDues
				,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
			
				,DM.Speciality AS Speciality
				,DM.base_location as BaseLocation
			FROM	  Patient_Visits PV 
	  
			INNER JOIN Patient_Master PM
			ON	  pv.Patient_ID=PM.ID

			INNER JOIN [dbo].[Shift_Master] SM
			ON PV.Shift_ID = SM.Shift_ID
			
			INNER JOIN [dbo].[System_Params] SP
			ON PV.Doctor_ID=SP.Doctor_ID

			LEFT JOIN [Patient_Receipts] PR
			ON	PV.[Patient_ID]=PR.[Patient_ID]
			AND	PV.Receipt_Number=PR.Receipt_Number

			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			LEFT JOIN [dbo].[Visit_Type] VT
			ON	PR.Visit_Type=VT.ID

			INNER JOIN Doctor_Master DM ON	  DM.Doctor_ID= PV.doctor_ID

			WHERE	PV.Visit_Date BETWEEN @p_var_fromdate AND @p_var_todate
			AND		PV.[Status_ID]=5
			AND     PV.Delete_Flag  =	0  

			
			
			

Union All

		SELECT  
				
				CONVERT(VARCHAR(11),PPA.[Payment_Date],106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				SP.[Type_Of_Service],
				PPA.Fees_Collected AS Charges,
				RIGHT(ISNULL(PPA.Attended_By,''), LEN(ISNULL(PPA.Attended_By,'')) - 3) AS AttendedBy_Doctor,
				PR.Receipt_Type AS Receipt_Type,
				PR.Receipt_Number AS [Receipt_Number],
				CONVERT(VARCHAR(11),PR.Receipt_Date,106) AS Receipt_Date,
				CONVERT(VARCHAR(11),PR.From_Date,106) AS Receipt_From_Date,
				CONVERT(VARCHAR(11),PR.To_Date,106) AS Receipt_To_Date,
				PR.[Receipt_Amount] AS [Receipt_Amount],
				PPA.Fees_Collected,
				PPA.Payment_Remark,pd.Payment_Description,
				PPA.Comment,
				NULL AS DUES,
				'Ad-hoc' AS Visit_Type,
				null as Discount
				,
				null as Billed,
				null as DiscountDues
				,'Adhoc - Followup' as Is_follow_Up
				,DM.Speciality AS Speciality
				,DM.base_location as BaseLocation
					
			FROM	[dbo].[Patient_Payments_AdHoc]   PPA 
	  
			INNER JOIN Patient_Master PM
			ON	  PPA.Patient_ID=PM.ID

			INNER JOIN [dbo].[Shift_Master] SM
			ON PPA.Shift_ID = SM.Shift_ID
			
			INNER JOIN [dbo].[System_Params] SP
			ON PPA.Doctor_ID=SP.Doctor_ID

			LEFT JOIN [Patient_Receipts] PR
			ON	PPA.[Patient_ID]=PR.[Patient_ID]
			AND	PPA.Receipt_Number=PR.Receipt_Number

			
			LEFT JOIN  dbo.Payment_type_Master pd
			ON  pd.ID = PPA.Payment_By_ID

			LEFT JOIN [dbo].[Visit_Type] VT
			ON	PR.Visit_Type=VT.ID

			INNER JOIN Doctor_Master DM ON	  DM.Doctor_ID=ppa.doctor_ID

			WHERE	CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_fromdate AND @p_var_todate
			AND     ISNULL(PPA.[Delete_Flag],0)  =	0  

			
			)

			SELECT	Visit_Date AS 'Visit Date',
					ShiftDesc AS 'Shift',
					Patient_Name AS 'Patient Name',
							is_follow_Up As 'New / Follow up',
					Type_Of_Service AS 'Type of Service',

								AttendedBy_Doctor AS 'Attended By Doctor',
					Speciality AS Speciality,
		        	BaseLocation AS BaseLocation,
					Payment_Description AS 'Payment Type',
					Payment_Remark AS 'Payment Remark',
					Comment AS 'Reason',

			
						Billed As 'Billed',

					Discount AS 'Discount',
					DiscountDues AS 'Dues',
					Charges AS 'Collected',

		

					DUES AS 'Balance Amount',
					Receipt_Amount AS 'Receipt Amount',
					Receipt_Type AS 'Receipt Type (R/L)',
					Receipt_Number AS 'Receipt No',
					Receipt_Date AS 'Receipt Date',
					Receipt_From_Date AS 'Receipt From Date',
					Receipt_To_Date AS 'Receipt To Date',
				
					Visit_Type AS 'Visit Type'
			
			 from GenerateIIICRegister 

			 ORDER BY	CONVERT(DateTime, Visit_Date,101)  ASC


			 


	 
			 
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails]    Script Date: 16-Jan-18 8:25:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails_Summary]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 27 March 2017
-- Description	: This stored procedure will Get the Patients IIIC Register Details
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientIIICRegisterDetails_Summary]

	@p_var_fromdate			DATE,
	@p_var_todate			DATE
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
 

 
 
 IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TempPatientBillingInfo]') AND type in (N'U'))
DROP TABLE [dbo].[TempPatientBillingInfo]


DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @cols= STUFF((SELECT distinct ',' + QUOTENAME(BillingDetails) 
                    from  (select BDM.Doctor_ID,BDM.Billing_Group_Name 
 AS BillingDetails from [dbo].[Billing_Details_Master] BDM

 LEFT JOIN [dbo].[Patient_Visit_BillingInfoOverwrite] PVB

				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
 
 ) X

            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

		set @query = ' WITH MBillingDetails AS ( SELECT Doctor_ID,Clinic_Id,Shift_Id,Patient_Id,Patient_Visit_No,Visit_Date,'+ '''Patient Visit''' + ' AS Visit_Type, ' + @cols + '
             from 
             (
                select BDM.Doctor_ID,BDM.Billing_Group_Name AS BillingDetails,
				PVB.Clinic_Id,PVB.Shift_Id,PVB.Patient_Id,PVB.Patient_Visit_No,PVB.Visit_Date,PVB.Collected_Fees  
				 from [dbo].[Billing_Details_Master] BDM
				LEFT JOIN [dbo].[Patient_Visit_BillingInfoOverwrite] PVB
				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
			) x
            pivot 
            (
			  SUM(Collected_Fees)
               
                for BillingDetails in (' + @cols + ')
            ) p ) SELECT * INTO [dbo].[TempPatientBillingInfo] FROM  MBillingDetails'

	--print @query
execute(@query);

	
 ;with GenerateIIICRegister as
	(
			SELECT  
				
				CONVERT(VARCHAR(11),PV.Visit_Date,106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				PV.Patient_Visit_No,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				DM.Prefix+' '+DM.First_Name AS Provider,
				DM.Speciality AS Speciality,
				DM.base_location as BaseLocation,
				'OPD' AS Visit_Type1,
				--PV.Original_Billed_Amount AS Charges,
				PV.Fees_To_Collect AS Charges,
				pv.Discount AS Discount,

				NULL as Advance,

				PV.Fees_Collected,
				NUll as TDS,
				(PV.Fees_To_Collect - PV.Discount) - PV.Fees_Collected AS Balance,
			

				  CONVERT(VARCHAR(11), PR.Receipt_Date,106) as Receipt_Date,
				PR.Receipt_Number AS [Receipt_Number],
				
				--PV.Payment_Remark,pd.Payment_Description,
				--PV.Comment,
				
				
				PV.Doctor_ID,
				PV.Clinic_ID,
				PV.Shift_ID,
				PV.Patient_ID,
				pd.Payment_Description AS Payment_By_ID,
		        PV.Payment_remark AS Payment_remark,
					 		  '-' as Bill_Date,
			 '-' as  Bill_Number
	       
				,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
				,'' as Comments
			FROM Patient_Visits PV 
	  
			INNER JOIN Patient_Master PM ON	  pv.Patient_ID=PM.ID
			INNER JOIN [dbo].[Shift_Master] SM ON PV.Shift_ID = SM.Shift_ID
			INNER JOIN [dbo].[System_Params] SP ON PV.Doctor_ID=SP.Doctor_ID
			LEFT JOIN [Patient_Receipts] PR ON	PV.[Patient_ID]=PR.[Patient_ID]
			AND	PV.Receipt_Number=PR.Receipt_Number
			LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = PV.Payment_By_ID
            LEFT JOIN [dbo].[Visit_Type] VT ON	PR.Visit_Type=VT.ID

			INNER JOIN [dbo].[Doctor_Master] DM ON PV.Doctor_ID=DM.Doctor_ID
			
			--inner join user_master UM on pv.ModifiedBy_Name = UM.Login_Id

			WHERE	PV.Visit_Date BETWEEN @p_var_fromdate AND @p_var_todate
			AND		PV.[Status_ID]=5
			AND     PV.Delete_Flag  =	0  


			Union All

		SELECT  
				
				CONVERT(VARCHAR(11),PPA.[Payment_Date],106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				'' as Patient_Visit_No,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				DM.Prefix+' '+DM.First_Name AS Provider,
				DM.Speciality AS Speciality,
				DM.Base_Location as BaseLocation,
				'Ad-hoc' AS Visit_Type1,	
				null AS Charges,
				NULL AS Discount,

				NULL as Advance,
			   0 - PPA.Fees_Collected as Fees_Collected,
				NUll as TDS,
				NULL AS DUES,
				CONVERT(VARCHAR(11), PR.Receipt_Date,106) as Receipt_Date,
				PR.Receipt_Number AS [Receipt_Number],
				PPA.Doctor_ID,
				PPA.Clinic_ID,
				PPA.Shift_ID,
				PPA.Patient_ID,
			 pd.Payment_Description AS Payment_By_ID,
		     PPA.Payment_remark AS Payment_remark,
			 		  '-' as Bill_Date,
			 '-' as  Bill_Number
	       
		,'Adhoc - Followup' as Is_follow_Up
				,'' as Comments
					
			FROM	[dbo].[Patient_Payments_AdHoc]   PPA 
	  
			INNER JOIN Patient_Master PM ON	  PPA.Patient_ID=PM.ID

			INNER JOIN [dbo].[Shift_Master] SM ON PPA.Shift_ID = SM.Shift_ID
			
			INNER JOIN [dbo].[System_Params] SP ON PPA.Doctor_ID=SP.Doctor_ID

			LEFT JOIN [Patient_Receipts] PR ON	PPA.[Patient_ID]=PR.[Patient_ID] AND PPA.Receipt_Number=PR.Receipt_Number

			LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = PPA.Payment_By_ID

			LEFT JOIN [dbo].[Visit_Type] VT ON	PR.Visit_Type=VT.ID

			left JOIN [dbo].[Doctor_Master] DM ON PPA.Doctor_ID=DM.Doctor_ID


			WHERE	CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_fromdate AND @p_var_todate AND ISNULL(PPA.[Delete_Flag],0)  =	0  

				Union All

				


SELECT  distinct
			CONVERT(VARCHAR(11),DR.Bill_Date,106) AS Visit_Date, 
			'D' AS ShiftDesc,
			 '' as Patient_Visit_No,
			PM.First_Name +' '+ isnull( PM.Middle_Name,'')+' '+PM.Last_Name as Patient_Name,
			'-' AS Provider,
			'-' AS Speciality,
			'-' AS BaseLocation,

			 'IPD' AS Visit_Type1,
			DR.Total_Amount as Charges,

			DR.Discount as Discount,
			DR.Adjust_Advance as Advance,
		     
		    DR.[Collected_Amount] AS  Fees_Collected,
			DR.TDS ,
			DR.Balance AS Balance,

			  CONVERT(VARCHAR(11),  DR.Bill_Date,106) as Receipt_Date,
         
            DR.Receipt_Number as Receipt_Number,
		  
			DR.Doctor_ID AS Doctor_ID,
			DR.Clinic_ID AS Clinic_ID,
			'' as Shift_ID,
		   DR.Patient_ID AS Patient_ID,
		   pd.Payment_Description AS Payment_By_ID,
		   DR.Payment_remark AS Payment_remark,
		   	   		   CONVERT(VARCHAR(11),  DR.Bill_Date,106) as Bill_Date,
			 DR.Bill_No as  Bill_Number
	       
	
	,'IPD' as Is_follow_Up
	,DR.Comments as Comments

FROM	  Discharge_Bill_Hdr DR
INNER JOIN Patient_Master PM
ON	  DR.Patient_ID=PM.ID
INNER JOIN [dbo].[System_Params] SP
ON DR.Doctor_ID=SP.Doctor_ID
INNER JOIN Clinic_Master CM
ON	  DR.Clinic_ID=CM.Clinic_ID
Inner join Doctor_Master DM
ON DM.Doctor_ID=DR.Doctor_ID

LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = DR.Payment_By_ID




INNER JOIN Discharge_Data DD 
ON DD.Patient_ID= DR.Patient_ID  and DR.IPD_RefNo=DD.IPD_RefNo


WHERE	DR.Bill_Date BETWEEN  @p_var_fromdate AND @p_var_todate
	
			)

			SELECT	GIC.Visit_Date AS 'Visit Date',
					ShiftDesc AS 'Shift',
					GIC.Patient_Visit_No as 'Patient Visit Number',
					Patient_Name AS 'Patient Name',
					Provider  AS 'Provider', 
					is_follow_Up As 'New / Follow up',
					Speciality AS 'Speciality',
					BaseLocation as 'Base Location',
						Visit_Type1 AS 'Visit Type',
					Charges,
					Discount AS 'Discount',
					Advance As 'Advance Adj.',
					Fees_Collected AS 'Collected',
					TDS , 
					Balance AS 'Balance Amount',

					--GIC.Doctor_ID,
					BIO.*,
					
					Bill_Number AS 'Hospital Bill no',
					Bill_Date AS 'Hospital Bill Date', 
					Receipt_Number AS 'Receipt No',
					Receipt_Date AS 'Receipt Date', 
					Payment_By_ID AS 'Payment Method',
		            Payment_remark AS 'Payment Remarks',
					Comments AS 'Comments'
		
	       
					
					
			
			 from GenerateIIICRegister GIC

					 LEFT JOIN		[dbo].[TempPatientBillingInfo]   BIO  
				ON			GIC.Doctor_ID=BIO.Doctor_ID
				AND			GIC.Clinic_ID=BIO.Clinic_ID
				AND			GIC.Shift_ID=BIO.Shift_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				AND			GIC.Visit_Date=BIO.Visit_Date
				AND			GIC.Visit_Type1 = BIO.Visit_Type
				AND			GIC.Patient_Visit_No = BIO.Patient_Visit_No


			ORDER BY	GIC.Visit_Type1 desc,GIC.Provider,CONVERT(DateTime, GIC.Visit_Date,101)  ASC

   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientFullRegistrationDetails]    Script Date: 16-Jan-18 8:25:24 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails_SummaryForIPD]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 19 OCT 2019
-- Description	: This stored procedure will Get the Patients IIIC Register Details
-- Created By	: Incrust
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientIIICRegisterDetails_SummaryForIPD]  

	@p_var_fromdate			DATE,
	@p_var_todate			DATE
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
SET NOCOUNT ON;
	BEGIN TRY
 
 
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TempPatientBillingInfo2]') AND type in (N'U'))
DROP TABLE [dbo].[TempPatientBillingInfo2]


DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX),
	@startdate datetime,
    @enddate datetime,
    @paramdef nvarchar(max)


set @startdate = @p_var_fromdate;
set @enddate = @p_var_todate;
set @paramdef = '@startdate datetime, @enddate datetime';

	select  @cols= STUFF((SELECT distinct ',' + QUOTENAME(BillingDetails) 
                    from  (select BDM.Charges_Category 
 AS BillingDetails from [dbo].[IPD_BillData_CHARGESMASTER] BDM

 LEFT JOIN [dbo].[Discharge_Bill_Details] PVB

				ON-- BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Charges_Category = PVB.Charges_Category AND 
				BDM.Charges_SubCategory = PVB.Charges_SubCategory AND
				
				ISNULL(PVB.Delete_Flag,0)=0
 
 ) X

            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query = '	WITH MBillingDetails AS ( SELECT *
             from 
             (
                select distinct  PVB.Doctor_ID, PVB.Charges_Category AS BillingDetails,
		PVB.Clinic_Id,PVB.Patient_Id,PVB.Total_Amount ,DBH.Bill_Date from Discharge_Bill_Hdr DBH
 left join  Discharge_Bill_Details  PVB
 on DBH.Patient_ID=PVB.Patient_ID and DBH.Bill_No=PVB.Bill_No and DBH.IPD_RefNo=PVB.IPD_RefNo 
				where PVB.Delete_Flag!=1 and DBH.Bill_Date between @startdate and @enddate 
			)--p) SELECT *  FROM  MBillingDetails
			 x
            pivot 
            (
			  SUM(Total_Amount)
               
                for BillingDetails in (' + @cols + ')
            ) p ) SELECT * INTO [dbo].[TempPatientBillingInfo2] FROM  MBillingDetails'


--execute(@query);
exec sp_executesql @query, @paramdef, @startdate = @p_var_fromdate, @enddate = @p_var_todate;

	
 ;with GenerateIIICRegister as
	(

SELECT  distinct
PM.First_Name +' '+ isnull( PM.Middle_Name,'')+' '+PM.Last_Name as Patient_Name,
AD.IPD_RefNo AS IPD_No,
DD.IPD_No AS IPD_No_Refrence,
ISNULL(CONVERT(VARCHAR(11),AD.Admission_Date,106)+'-' + CONVERT(char(5), AD.Admission_Time,108),'') as Admission_Date,
ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(char(5), DD.Discharge_Time,108),'') as Discharge_Date,

--CONVERT(VARCHAR(11), AD.Admission_Date,106) as Admission_Date,SELECT CONVERT(char(5), @DateTime, 108)
--CONVERT(VARCHAR(11), DD.Discharge_Date ,106) as Discharge_Date,	
CONVERT(VARCHAR(11),  DR.Bill_Date,106) as Bill_Date,
DR.Bill_No as  Bill_Number,
AD.Department,
DR.Total_Amount as Charges, 
DR.Discount as Discount,
DR.Adjust_Advance as Advance,
DR.[Collected_Amount] AS  Fees_Collected,
DR.Balance AS Balance,
DR.TDS ,
pd.Payment_Description AS Payment_By_ID,
DR.Payment_remark AS Payment_remark,
CONVERT(VARCHAR(11),  PAD.Receipt_Date,106) as Receipt_Date,
PAD.Receipt_Number as Receipt_Number,	
 --isnull('0.00') as Receipt_Amount,   
 isnull(convert(varchar(1000),PAD.Receipt_Amount),'') as Receipt_Amount,
'' AS Visit_Date, 
'' AS ShiftDesc, 
'' AS BaseLocation,
'' AS Visit_Type1,
DR.Doctor_ID AS Doctor_ID,
DR.Clinic_ID AS Clinic_ID,
'' as Shift_ID,
DR.Patient_ID AS Patient_ID,
'IPD' as Is_follow_Up
,'' as Comments
,CMS.Company_Name as Company_Name


FROM	  Discharge_Bill_Hdr DR
INNER JOIN Patient_Master PM
ON	  DR.Patient_ID=PM.ID
INNER JOIN [dbo].[System_Params] SP
ON DR.Doctor_ID=SP.Doctor_ID
INNER JOIN Clinic_Master CM
ON	  DR.Clinic_ID=CM.Clinic_ID
Inner join Doctor_Master DM
ON DM.Doctor_ID=DR.Doctor_ID
---added to get chargemaster data
inner join Discharge_Bill_Details VGI
on dr.Patient_ID=VGI.Patient_ID

inner join Admission_Data AD
on dr.Patient_ID=AD.Patient_ID

left join Patient_IPD_Receipts  PAD
on dr.Patient_ID=PAD.Patient_ID
and DR.Receipt_Number=PAD.Receipt_Number

LEFT JOIN Insurance_Company_Master CMS
ON CMS.Company_Id =AD.Insurance_Company_Id

Inner JOIN  IPD_BillData_CHARGESMASTER IBC
			ON			VGI.Charges_Category = IBC.Charges_Category
			AND			VGI.Charges_SubCategory	=	IBC.Charges_SubCategory

LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = DR.Payment_By_ID

INNER JOIN Discharge_Data DD 
ON DD.Patient_ID= DR.Patient_ID  and DR.IPD_RefNo=DD.IPD_RefNo


WHERE	DR.Bill_Date BETWEEN   @p_var_fromdate AND @p_var_todate
	
			)

			SELECT	
			Patient_Name AS 'Patient Name',
			gic.IPD_No AS 'IPD No',
			gic.IPD_No_Refrence as 'IPD Ref No',
			gic.Admission_Date as 'Admission Date',
			gic.Discharge_Date as 'Discharge Date',
			Bill_Number AS 'Hospital Bill no',
			GIC.Bill_Date AS 'Hospital Bill Date', --Changed
			GIC.Department AS 'Department',
			GIC.Company_Name AS 'Insurance Company',--Changed
			Charges AS 'Total Amount',
					Discount AS 'Discount',
					Advance As 'Adjusted Advance',
					Fees_Collected AS 'Collected',
					Balance AS 'Balance',
					
					TDS ,
					
					Payment_By_ID AS 'Payment Type',
		            Payment_remark AS 'Payment Remark',
					
					--Bill_Date AS 'Hospital Bill Date', 
					
					Receipt_Number AS 'Receipt No',
					Receipt_Date AS 'Receipt Date', 
					Receipt_Amount As 'Receipt Amount',
					
					'' AS 'Comments',
					BIO.*
					--GIC.Doctor_ID,
			
			
			 from GenerateIIICRegister GIC
			
			 LEFT JOIN		[dbo].[TempPatientBillingInfo2]   BIO  
				--ON			GIC.Doctor_ID=BIO.Doctor_ID
				ON			GIC.Bill_Date=BIO.Bill_Date
				--AND			GIC.Clinic_ID=BIO.Clinic_ID
				--AND			GIC.Shift_ID=BIO.Shift_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				--AND			GIC.Visit_Date=BIO.Visit_Date
				--AND			GIC.Visit_Type1 = BIO.Visit_Type
			--	AND			GIC.Patient_Visit_No = BIO.Patient_Visit_No
			


			ORDER BY	GIC.Visit_Type1 desc,CONVERT(DateTime, GIC.Visit_Date,101)  ASC

	
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END

SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICSummary_NoComprehensive]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 19 May 17
-- Description	: This stored procedure will Get the Patients IIIC Register Details when comprehensive billing flag is off
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientIIICSummary_NoComprehensive]

	@p_var_fromdate			DATE,
	@p_var_todate			DATE
	

 AS
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
  SET NOCOUNT ON;
	BEGIN TRY
 


 	 ;with GenerateIIICRegister as
	(
			SELECT  
				
				CONVERT(VARCHAR(11),PV.Visit_Date,106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				PV.Patient_Visit_No,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				DM.Prefix+' '+DM.First_Name AS Provider,
				DM.Speciality AS Speciality,
				'OPD' AS Visit_Type1,
				PV.Original_Billed_Amount AS Charges,
				PV.Discount ,
				NULL as Advance,
				PV.Fees_Collected,
				NUll as TDS,

				PV.Fees_To_Collect-PV.Fees_Collected AS Balance,

				  CONVERT(VARCHAR(11), PR.Receipt_Date,106) as Receipt_Date,
				PR.Receipt_Number AS [Receipt_Number],

				
				--PV.Payment_Remark,pd.Payment_Description,
				--PV.Comment,
				
				
				PV.Doctor_ID,
				PV.Clinic_ID,
				PV.Shift_ID,
				PV.Patient_ID,
				pd.Payment_Description AS Payment_By_ID,
		        PV.Payment_remark AS Payment_remark,
			 		  '-' as Bill_Date,
			 '-' as  Bill_Number
				,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' ),
				'' as Comments
			FROM Patient_Visits PV 
	  
			INNER JOIN Patient_Master PM ON	  pv.Patient_ID=PM.ID
			INNER JOIN [dbo].[Shift_Master] SM ON PV.Shift_ID = SM.Shift_ID
			INNER JOIN [dbo].[System_Params] SP ON PV.Doctor_ID=SP.Doctor_ID
			LEFT JOIN [Patient_Receipts] PR ON	PV.Receipt_Number=PR.Receipt_Number
			AND	PV.Receipt_Number=PR.Receipt_Number
			LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = PV.Payment_By_ID
            LEFT JOIN [dbo].[Visit_Type] VT ON	PR.Visit_Type=VT.ID

			INNER JOIN [dbo].[Doctor_Master] DM ON PV.Doctor_ID=DM.Doctor_ID

			WHERE	PV.Visit_Date BETWEEN @p_var_fromdate AND @p_var_todate
			AND		PV.[Status_ID]=5
			AND     PV.Delete_Flag  =	0  


			Union All

		SELECT  
				
				CONVERT(VARCHAR(11),PPA.[Payment_Date],106) AS Visit_Date,
				LEFT(SM.Description,1) AS ShiftDesc,
				'' as Patient_Visit_No,
				PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Patient_Name,
				DM.Prefix+' '+DM.First_Name AS Provider,
				DM.Speciality AS Speciality,
				'Ad-hoc' AS Visit_Type1,	
				PPA.Fees_Collected AS Charges,
				NULL AS Discount,
				NULL as Advance,
			    PPA.Fees_Collected,
				NUll as TDS,

				NULL AS DUES,
				CONVERT(VARCHAR(11), PR.Receipt_Date,106) as Receipt_Date,
				PR.Receipt_Number AS [Receipt_Number],
				PPA.Doctor_ID,
				PPA.Clinic_ID,
				PPA.Shift_ID,
				PPA.Patient_ID,
				 pd.Payment_Description AS Payment_By_ID,
		        PPA.Payment_remark AS Payment_remark,
		 		  '-' as Bill_Date,
			 '-' as  Bill_Number
		
,'Adhoc - Followup' as Is_follow_Up,
'' as Comments
				
				
					
			FROM	[dbo].[Patient_Payments_AdHoc]   PPA 
	  
			INNER JOIN Patient_Master PM ON	  PPA.Patient_ID=PM.ID

			INNER JOIN [dbo].[Shift_Master] SM ON PPA.Shift_ID = SM.Shift_ID
			
			INNER JOIN [dbo].[System_Params] SP ON PPA.Doctor_ID=SP.Doctor_ID

			LEFT JOIN [Patient_Receipts] PR ON	PPA.[Patient_ID]=PR.[Patient_ID] AND PPA.Receipt_Number=PR.Receipt_Number

			LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = PPA.Payment_By_ID

			LEFT JOIN [dbo].[Visit_Type] VT ON	PR.Visit_Type=VT.ID

			left JOIN [dbo].[Doctor_Master] DM ON PPA.Doctor_ID=DM.Doctor_ID

			WHERE	CONVERT(DATE,PPA.Payment_Date) BETWEEN @p_var_fromdate AND @p_var_todate AND ISNULL(PPA.[Delete_Flag],0)  =	0  

				Union All

				


SELECT  distinct
			CONVERT(VARCHAR(11),DR.Bill_Date,106) AS Visit_Date, 
			'D' AS ShiftDesc,
			 '' as Patient_Visit_No,
			PM.First_Name +' '+ isnull( PM.Middle_Name,'')+' '+PM.Last_Name as Patient_Name,
			'-' AS Provider,
			'-' AS Speciality,
			'IPD' AS Visit_Type1,
			DR.Total_Amount as Charges,
			DR.Discount as Discount,
			DR.Adjust_Advance as Advance,
		    DR.[Collected_Amount] AS  Fees_Collected,
				DR.TDS as TDS,

			DR.Balance AS Balance,

		CONVERT(VARCHAR(11),  DR.Bill_Date,106) as Receipt_Date,
            DR.Receipt_Number as Receipt_Number,
		

		  
			DR.Doctor_ID AS Doctor_ID,
			DR.Clinic_ID AS Clinic_ID,
			'' as Shift_ID,
		   DR.Patient_ID AS Patient_ID,
		     pd.Payment_Description AS Payment_By_ID,
		   DR.Payment_remark AS Payment_remark,
		   		   CONVERT(VARCHAR(11),  DR.Bill_Date,106) as Bill_Date,
			 DR.Bill_No as  Bill_Number
	
	
	
,'IPD' as Is_follow_Up,
 DR.Comments


FROM	  Discharge_Bill_Hdr DR
INNER JOIN Patient_Master PM
ON	  DR.Patient_ID=PM.ID
INNER JOIN [dbo].[System_Params] SP
ON DR.Doctor_ID=SP.Doctor_ID
INNER JOIN Clinic_Master CM
ON	  DR.Clinic_ID=CM.Clinic_ID
Inner join Doctor_Master DM
ON DM.Doctor_ID=DR.Doctor_ID


LEFT JOIN  dbo.Payment_type_Master pd ON  pd.ID = DR.Payment_By_ID

INNER JOIN Discharge_Data DD 
ON DD.Patient_ID= DR.Patient_ID  and DR.IPD_RefNo=DD.IPD_RefNo


WHERE	DR.Bill_Date BETWEEN  @p_var_fromdate AND @p_var_todate
	
			)

			SELECT	GIC.Visit_Date AS 'Visit Date',
					ShiftDesc AS 'Shift',
					GIC.Patient_Visit_No as 'Patient Visit Number',
					Patient_Name AS 'Patient Name',
					Provider  AS 'Provider', 
					is_follow_Up As 'New / Follow up',
					Speciality AS 'Speciality',
					Visit_Type1 AS 'Visit Type',
					Charges,
					Discount AS 'Discount',
					Advance As 'Advance Adj.',
					Fees_Collected AS 'Collected',
					 TDS,

					Balance AS 'Balance Amount',

					--GIC.Doctor_ID,
					--BIO.*,
					Bill_Number AS 'Hospital Bill no',
					Bill_Date AS ' Hospital Bill Date',
					Receipt_Number AS 'Receipt no',
					Receipt_Date AS 'Receipt Date',
					Payment_By_ID AS 'Payment Method',
		            Payment_remark AS 'Payment Remarks',
					Comments as 'Comments'
					
			 from GenerateIIICRegister GIC

			 LEFT JOIN		[dbo].[TempPatientBillingInfo]   BIO  
				ON			GIC.Doctor_ID=BIO.Doctor_ID
				AND			GIC.Clinic_ID=BIO.Clinic_ID
				AND			GIC.Shift_ID=BIO.Shift_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				AND			GIC.Visit_Date=BIO.Visit_Date
				AND			GIC.Visit_Type1 = BIO.Visit_Type
			


			ORDER BY	GIC.Visit_Type1 desc,GIC.Provider,CONVERT(DateTime, GIC.Visit_Date,101)  ASC


			 


	 
			 
   END TRY
   BEGIN CATCH
   SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END




















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails]    Script Date: 16-Jan-18 8:25:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLast_VisitDate_For_Report]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 13 Sep 2017
-- Description: This stored procedure will Get Patient Last Visit Dates Chronic details for report
-- Created By : Varsha Khandre
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_PatientLast_VisitDate_For_Report]

	@p_var_Doctor_Id		 NVARCHAR(30),
	@p_var_Language_ID	  INT

AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY

		
		;WITH PatientVisitCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,PV.Patient_ID
										FROM [dbo].[Patient_Master]	PM
                                        
										INNER JOIN   Patient_Visits PV  ON PM.ID=PV.Patient_ID
										--AND		PM.Doctor_ID	=	PV.Doctor_ID
										
										WHERE	Status_ID=5
										AND		Delete_Flag= 0 
                                        
										GROUP BY PV.Patient_ID
									) ,
							PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Patient_ID,Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,
									
									ISNULL(Blood_Pressure,'') AS Blood_Pressure,
									ISNULL(Sugar,'') AS Sugar,

									CASE WHEN IHD = 1 THEN 'Y' ELSE 'N' END AS IHD,
									CASE WHEN Cholestrol = 1 THEN 'Y' ELSE 'N' END AS Cholestrol,
									CASE WHEN Asthama = 1 THEN 'Y' ELSE 'N' END AS Asthama,
									CASE WHEN TH = 1 THEN 'Y' ELSE 'N' END AS TH,
									CASE WHEN Hypertension = 1 THEN 'Y' ELSE 'N' END AS Hypertension,
									CASE WHEN Diabetes = 1 THEN 'Y' ELSE 'N' END AS Diabetes,

									ISNULL(PV1.PatientCount,0) AS PatientCount

                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

                                    LEFT JOIN PatientVisitCount PV1 ON PV1.Patient_ID = PV.Patient_ID
                        WHERE        
--                                    PV.Doctor_ID  = @p_var_Doctor_Id AND
                                CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < SYSDATETIME()
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0 
						
						
                ),

				AllPatients as (
						
						select 		pre.Patient_ID,pre.Patient_Visit_No,pre.Visit_Date,
                                    pre.Visit_Time, pre.Shift_ID,pre.Status_ID,
									
									ISNULL(pre.Blood_Pressure,'') AS Blood_Pressure,
									ISNULL(pre.Sugar,'') AS Sugar,

									ISNULL(pre.IHD,'N') AS IHD,
									ISNULL(pre.Cholestrol,'N') AS Cholestrol,
									ISNULL(pre.Asthama,'N') AS Asthama,
									ISNULL(pre.TH,'N') AS TH,
									ISNULL(pre.Hypertension,'N') AS Hypertension,
									ISNULL(pre.Diabetes,'N') AS Diabetes,

									pm.First_Name+' '+pm.Middle_Name+' '+ pm.Last_Name as Full_Name,
									pm.Folder_No,
									Mobile_1 = CASE WHEN datalength(pm.Mobile_1)=0 
									THEN '--' 
									ELSE pm.Mobile_1 END,

									DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
									,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
									,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
									GT.Gender_Description,
									AT.Area_Name,
									ISNULL(CONVERT(NVARCHAR,pre.PatientCount,100),'--') AS PatientCount,
									ISNULL(pre.PatientCount,0) AS PC
									
												
						from Patient_Master pm

						INNER JOIN	Gender_Translations GT
									ON			PM.Gender_ID=GT.Gender_ID

									INNER JOIN	Area_Translations AT
									ON		PM.Area_ID = AT.Area_ID
						
						LEFT JOIN PreviousVisits pre ON pm.ID = pre.Patient_ID

						WHERE pre.ROWNUM=1 and
--						pm.Doctor_ID	=  @p_var_Doctor_Id AND
								GT.Language_Id = @p_var_Language_ID
						AND		AT.Language_Id = @p_var_Language_ID

						) 
				
									SELECT pm.ID,AP.Patient_Visit_No,AP.Visit_Date,
                                    AP.Visit_Time, AP.Shift_ID,AP.Status_ID,
									
									ISNULL(AP.Blood_Pressure,'') AS Blood_Pressure,
									ISNULL(AP.Sugar,'') AS Sugar,

									ISNULL(AP.IHD,'N') AS IHD,
									ISNULL(AP.Cholestrol,'N') AS Cholestrol,
									ISNULL(AP.Asthama,'N') AS Asthama,
									ISNULL(AP.TH,'N') AS TH,
									ISNULL(AP.Hypertension,'N') AS Hypertension,
									ISNULL(AP.Diabetes,'N') AS Diabetes,

									pm.First_Name+' '+pm.Middle_Name+' '+ pm.Last_Name as Full_Name,
									pm.Folder_No,
									Mobile_1 = CASE WHEN datalength(pm.Mobile_1)=0 
									THEN '--' 
									ELSE pm.Mobile_1 END,

									DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
									,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
									,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
									GT.Gender_Description,
									AT.Area_Name,
									ISNULL(CONVERT(NVARCHAR,AP.PatientCount,100),'--') AS PatientCount,
									ISNULL(AP.PatientCount,0) AS PC
				FROM AllPatients AP

				RIGHT JOIN Patient_Master pm
				on AP.Patient_ID = pm.ID

				INNER JOIN	Gender_Translations GT
				ON	PM.Gender_ID=GT.Gender_ID

				INNER JOIN	Area_Translations AT
				ON	PM.Area_ID = AT.Area_ID

				WHERE	
--						pm.Doctor_ID	= @p_var_Doctor_Id AND
			        GT.Language_Id = @p_var_Language_ID
				AND		AT.Language_Id = @p_var_Language_ID
				
				ORDER BY AP.PC DESC
				
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END














/****** Object:  StoredProcedure [dbo].[USP_Get_PatientIIICRegisterDetails_NoComprehensive]    Script Date: 16-Jan-18 8:25:28 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastBPDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===============================================================================================
-- Author     :  INCRUST
-- Create date: 21 Oct 2016
-- Description: This stored procedure will Get Patients last 5 visits BP,Sugar and TH details
-- Created By : Nilesh Wani
-- Modified By: Varsha Khandre
-- Modified On: 06 Oct 2017
-- ===============================================================================================

CREATE PROCEDURE [dbo].[USP_Get_PatientLastBPDetails]
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	--@p_var_Status_ID			TINYINT,
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_Patient_Visit_No		INT
AS
BEGIN

		
		SET NOCOUNT ON;
		BEGIN TRY
		
							;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			--PV.Doctor_ID	=	@p_var_Doctor_Id
                                 		--	PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 --AND	
								 		PV.Shift_ID		=	@p_var_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_var_Clinic_Id
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								 AND			PV.Patient_Visit_No	=	@p_var_Patient_Visit_No
                           ),
		
							PreviousVisits AS 
							 (

									SELECT  PV.Visit_Date,PV.Patient_ID,PV.Patient_Visit_No,PV.Status_ID,PV.Visit_Time,PV.Shift_ID,
											ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS ROWNUM,
											LEFT(SM.Description,1) AS ShiftDescription,[Blood_Pressure],[Sugar],[THtext],PV.Weight_IN_KGS,
											[Pulse],PV.[Height_In_CMS],
											[TPR],[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],GC
									FROM    Patient_Visits PV

					
					                    
									INNER JOIN [dbo].[Shift_Master] SM
                    
									ON PV.Shift_ID = SM.Shift_ID

									LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                    
									WHERE		
										         CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
												< LV.LAST_VISIT_DATE
									--AND			Doctor_ID  = @p_var_Doctor_Id 
									--AND			Status_ID = 5 
									AND			(Status_ID = 5 )
									AND			Delete_Flag = 0                                      
                    
							 )

             SELECT  Visit_Date,Patient_ID, Status_ID,ShiftDescription,[Blood_Pressure],[Sugar],[THtext],Weight_IN_KGS,
					 Pulse,[Height_In_CMS],
					 [TPR],[Important_Findings],[Additional_Comments],[Systemic],[Odeama],[Pallor],GC,

					replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' : '+ShiftDescription+' : '+ISNULL(NULLIF(Blood_Pressure,''),'--') AS LastFiveBpValues,
					replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' : '+ShiftDescription+' : '+ISNULL(NULLIF(Sugar,''),'--') AS LastFiveSugarValues,
					replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' : '+ShiftDescription+' : '+ISNULL(NULLIF(THtext,''),'--') AS LastFiveTHValues,
					replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' : '+ShiftDescription+' : '+ISNULL(NULLIF(CONVERT(NVARCHAR,Weight_IN_KGS,100),'0.00'),'--')  AS LastFiveWeightValues,
					replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')+' : '+ShiftDescription AS PREDATES,
					ISNULL(NULLIF(Blood_Pressure,''),'--') AS PREBP,
					ISNULL(NULLIF(Sugar,''),'--') AS PRESUGAR,
					ISNULL(NULLIF(THtext,''),'--') AS PRETHTEXT,
					ISNULL(NULLIF(CONVERT(NVARCHAR,Weight_IN_KGS,100),'0.00'),'--') AS PREWEIGHT,

					ISNULL(NULLIF(CONVERT(NVARCHAR,Pulse,100),''),'--') AS PREPULSE,
					ISNULL(NULLIF(TPR,''),'--') AS PRETPR,
					ISNULL(NULLIF(Systemic,''),'--') AS PRESYSTEMIC,
					ISNULL(NULLIF(Odeama,''),'--') AS PREODEAMA,
					ISNULL(NULLIF(CONVERT(NVARCHAR,Height_In_CMS,100),'0.00'),'--') AS PREHEIGHT_IN_CMS,
					ISNULL(NULLIF(Important_Findings,''),'--') AS PREIMPORTANT_FINDINGS,
					ISNULL(NULLIF(Additional_Comments,''),'--') AS PREADDITIONAL_COMMENTS,
					ISNULL(NULLIF(Pallor,''),'--') AS PREPALLOR,
					ISNULL(NULLIF(GC,''),'--') AS PREGC
			 
			 
			 FROM PreviousVisits  
             ORDER BY      Visit_Date DESC, ROWNUM, Visit_time DESC
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END



 
/****** Object:  StoredProcedure [dbo].[USP_Get_PrevDateData]    Script Date: 20-Feb-18 11:11:35 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastSuggestedTestDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 03 Oct 2016
-- Description	: This stored procedure will get patients last suggested labtest date
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientLastSuggestedTestDate]
	@p_nvar_Patient_Id      NVARCHAR(32),
    @p_nvar_Doctor_Id       NVARCHAR(30),
    @p_nvar_Clinic_Id       NVARCHAR(10),
	@p_date_TodyasVisitDate	DATE,
	@p_int_Shift_ID			INT
    
	
	--@P_nvar_Shift_Id        INT
	--@p_int_Patient_Visit_No INT
 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

		

		

		;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			--PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                 			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_int_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 AND			PV.Patient_ID	=	@p_nvar_Patient_Id
                                 AND			PV.Delete_Flag  =	0
								 
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, Shift_ID,Status_ID
                        FROM        Patient_Visits PV
                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    Doctor_ID  =@p_nvar_Doctor_ID AND
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND             Status_ID = 5 
                        AND             Delete_Flag = 0
						--AND				Reports_Asked=1  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Status_ID,Shift_ID,Visit_Time
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    

		SELECT   Visit_Date,Patient_ID,Patient_Visit_No,Shift_id, Status_ID,CONVERT(VARCHAR(11),Visit_Date,106) as PrevDate,Reports_Asked
		FROM PatientWiseVisit



		SELECT  TOP 1  Visit_Date,Patient_ID,Patient_Visit_No,Status_ID,Visit_Time,Shift_ID,CONVERT(VARCHAR(11),Visit_Date,106) as PrevDate,Reports_Asked
			FROM		  Patient_Visits
			WHERE		  Patient_ID = @p_nvar_Patient_Id 
			--AND			  Doctor_ID  = @p_nvar_Doctor_Id 
			AND			  Clinic_ID  = @p_nvar_Clinic_Id 
		    AND	
					  Visit_Date <= GETDATE()
			AND			  Status_ID = 5 
			AND			  Delete_Flag = 0						  
			ORDER BY      Visit_Date DESC, Visit_time DESC
				
	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END

















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastBPDetails]    Script Date: 16-Jan-18 8:25:32 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastVisitDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  10 Nov 16
-- Description  :  This stored procedure is used to get patients previous visit date
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_PatientLastVisitDate]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_var_Patient_ID			NVARCHAR(30),
	@p_var_Patient_Visit_No		INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


				             ;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 114))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			--PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                 			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_int_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								 AND			PV.Patient_Visit_No	=	@p_var_Patient_Visit_No
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc
                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_nvar_Doctor_ID
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 114))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,ShiftDesc,Shift_ID,
											CONVERT(VARCHAR(11),Visit_Date,106) AS PREVISITDATE
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    
                    


                     SELECT * FROM PatientWiseVisit
			
			

							select * from      [dbo].[Patient_Visit_BalanceEvaluation]  pv  WHERE		
											PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                 AND		PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND		PV.Shift_ID		=	@p_int_Shift_ID
                                 AND		PV.Clinic_ID	=   @p_nvar_Clinic_ID
								 AND		PV.Patient_ID   =   @p_var_Patient_ID
								 AND		PV.Patient_Visit_No	=	@p_var_Patient_Visit_No





	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates_IPD]    Script Date: 27-Feb-18 3:18:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastVisitNumber]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 02 july 2016
-- Description:	This stored procedure is used to get patient last visit number 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientLastVisitNumber]
	@p_var_Doctor_Id		 NVARCHAR(100),
	@p_var_Clinic_ID			NVARCHAR(100),
	
	@p_var_Patient_ID			NVARCHAR(100)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT Max(Patient_Visit_No) as Patient_Visit_No,max(Visit_Date) as Visit_Date
	FROM Patient_Visits
	WHERE Doctor_ID= @p_var_Doctor_Id
	AND Clinic_ID=@p_var_Clinic_ID
	AND   Patient_ID=@p_var_Patient_ID
	
	declare @visit_no int,@visit_date datetime;

	set @visit_no =(SELECT Max(Patient_Visit_No) as Patient_Visit_No FROM Patient_Visits);
	set @visit_date=(SELECT Max(Visit_Date) as Visit_Date FROM Patient_Visits);

	select Shift_ID,Patient_Last_Visit_No FROM Patient_Visits
    WHERE Doctor_ID= @p_var_Doctor_Id
	AND Clinic_ID=@p_var_Clinic_ID
	AND   Patient_ID=@p_var_Patient_ID
	and Visit_Date=@visit_date
	and Patient_Visit_No=@visit_no
END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastVisitDate]    Script Date: 16-Jan-18 8:25:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientMaxVisitNo]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:  INCRUST
-- Create date: 24-Mar-2016
-- Description: This stored procedure will Get the Max Patient VisitNo for Particular Patient
--  created By- Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientMaxVisitNo]
@nvarPatientId   nvarchar(32)
AS
BEGIN

 SET NOCOUNT ON;
  BEGIN TRY
      SELECT 
            MAX(PV.Patient_Visit_No) as 'Patient_Visit_No'
            
       FROM Patient_Visits PV,
            Patient_Master PM
      WHERE
           PV.Delete_Flag='False' AND
           PV.Patient_ID=PM.ID AND
           PV.Patient_ID=@nvarPatientId
           
      SELECT 
             Folder_No
       FROM Patient_Master 
       WHERE
           ID=@nvarPatientId   
          
  END TRY
 BEGIN CATCH
   SELECT 
    ERROR_NUMBER() AS ErrorNumber
      ,ERROR_MESSAGE() AS ErrorMessage;
 END CATCH
        
END

















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastVisitNumber]    Script Date: 16-Jan-18 8:25:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientPharmacyBillReceiptData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 21 April 2017
-- Description:	This stored procedure is used to get patient receipt data
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientPharmacyBillReceiptData]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_nvar_Visit_Type			CHAR(1),
	@p_nvar_Bill_no		NVARCHAR(30)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_IPD_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			-- AND		VGI.Receipt_Type != 'L'
			 AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type

		--	 if EXISTS(	SELECT PPA.collected_amount , PTM.Payment_Description , ppa.payment_Remark

		--FROM	[dbo].[Discharge_Invoice_Hdr] PPA
		--inner join Payment_type_Master PTM on PTM.Id = ppa.Payment_By_ID
		--WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
		--	 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
		--	-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
		--	-- AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
		--	 AND		PPA.invoice_no								=	@p_nvar_Bill_no)
		--	 begin
			-- SELECT PPA.collected_amount , PTM.Payment_Description , ppa.payment_Remark

		--FROM	[dbo].[Discharge_Invoice_Hdr] PPA
		--inner join Payment_type_Master PTM on PTM.Id = ppa.Payment_By_ID
		--WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
		--	 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
		--	-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
		--	-- AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
		--	 AND		PPA.invoice_no								=	@p_nvar_Bill_no
			-- end
			-- else begin 
			 
			 SELECT PPA.collected_amount , '' as Payment_Description , '' as  payment_Remark

		FROM	[dbo].[Discharge_Invoice_Hdr] PPA
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			-- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
			-- AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
			 AND		PPA.invoice_no								=	@p_nvar_Bill_no
		--	 end
END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Jan-18 8:25:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientPrescriptionDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:  INCRUST
-- Create date: 25-Mar-2016
-- Description: This stored procedure will get the data for patient prescription
--  created By- Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientPrescriptionDetails]
@p_var_Patient_Id	  nvarchar(32),
@p_var_Shift_Id		  TINYINT,
@p_var_Clinic_ID	  nvarchar(10),
@p_var_Doctor_ID	  nvarchar(30),
@p_int_patientVisitNo		INT

AS
BEGIN

	

    -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY
   
    DECLARE		@prescount		INT;
	SELECT  @prescount	=	Default_Prescription_Count 
	FROM	System_Params
	WHERE   Doctor_ID	=	@p_var_Doctor_ID

   SELECT Short_Description+' '+':'+' '+Complaint_Description  AS Symptoms,Complaint_Description,ISNULL([Complaint_Comment],'') AS Complaint_Comment
   FROM Visit_Complaints VC
   WHERE     VC.Patient_ID	    =	@p_var_Patient_Id	    AND
			 VC.Shift_ID	    =   @p_var_Shift_Id			AND
			 VC.Clinic_ID	    =   @p_var_Clinic_ID	    AND
			 VC.Doctor_ID	    =   @p_var_Doctor_ID		AND
			 VC.Patient_Visit_No=	@p_int_patientVisitNo
    
   SELECT Short_Description+' '+':'+' '+Desease_Description AS Disease,Desease_Description
   FROM Visit_Diagnosis VD
   WHERE     VD.Patient_ID		=	@p_var_Patient_Id	    AND
			 VD.Shift_ID	    =   @p_var_Shift_Id			AND
			 VD.Clinic_ID	    =   @p_var_Clinic_ID	    AND
			 VD.Doctor_ID	    =   @p_var_Doctor_ID		AND
			 VD.Patient_Visit_No=	@p_int_patientVisitNo
   
   SELECT	Short_Description AS Medicines,
			Short_Description+'*'+Medicine_Description AS ID,Morning,Afternoon,Night,No_Of_Days,Instruction,REPLACE(Short_Description, '''', '') AS MED_REPLACE,Visit_Date,Patient_Visit_No,Shift_ID,
			Clinic_ID,Doctor_ID,Patient_ID,Short_Description,Delete_Indicator,''as Generic_Name
   
   FROM Visit_Medicine_Overwrite VM
   
   WHERE	 VM.Patient_ID		=	@p_var_Patient_Id	    AND
			 VM.Shift_ID	    =   @p_var_Shift_Id			AND
			 VM.Clinic_ID	    =   @p_var_Clinic_ID	    AND
			 VM.Doctor_ID	    =   @p_var_Doctor_ID        AND
			 VM.Delete_Indicator=	0						AND
			 VM.Delete_Flag		=	0					    AND
			 VM.Patient_Visit_No=	@p_int_patientVisitNo
			


   SELECT Medicine_Name+' '+':'+' '+Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,Medicine_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,REPLACE(Medicine_Name, '''', '') AS Med_Replace,
		  Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator,''as Generic_Name

   FROM Visit_Prescription_Overwrite VP
   WHERE     VP.Patient_ID		 =	@p_var_Patient_Id		AND
        	 VP.Shift_ID	     =   @p_var_Shift_Id		AND
			 VP.Clinic_ID	     =   @p_var_Clinic_ID	    AND
			 VP.Doctor_ID	     =   @p_var_Doctor_ID		AND
			 VP.Delete_Indicator =	0						AND
			 VP.Delete_Flag		 =	0						AND
			 VP.Patient_Visit_No=	@p_int_patientVisitNo
            order by Sequence_Id

   SELECT  (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time 
   FROM    Patient_Visits PV

    WHERE     PV.Patient_ID		=	@p_var_Patient_Id		AND
        	 PV.Shift_ID	    =   @p_var_Shift_Id			AND
			 PV.Clinic_ID	    =   @p_var_Clinic_ID	    AND
			 PV.Doctor_ID	    =   @p_var_Doctor_ID		AND
			 PV.Delete_Flag		=	0						AND
			 PV.Patient_Visit_No=	@p_int_patientVisitNo

			  SELECT   Dressing_Description ,Dressing_Description as Short_Description,Dressing_Description as LongDressing_Description-- , substring(Dressing_Description, 1, CHARINDEX(':',Dressing_Description)-1) Short_Description,
								--substring(Dressing_Description, CHARINDEX(':',Dressing_Description)+1, LEN(Dressing_Description)) LongDressing_Description
     FROM     Visit_Dressing  DD
     WHERE    DD.Patient_ID			=	@p_var_Patient_Id	    
	 AND	  DD.Shift_ID			=   @p_var_Shift_Id			
	 AND	  DD.Clinic_ID			=   @p_var_Clinic_ID	    
	 AND	  DD.Doctor_ID			=   @p_var_Doctor_ID   
	 AND      DD.Delete_Flag		=   0 	
	 AND	  DD.Patient_Visit_No	=	@p_int_patientVisitNo   


	  SELECT top (@prescount) Brand_Name AS Prescription,Medicine_Name+'*'+Brand_Name AS ID,Medicine_Name,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,
		  Doctor_ID,Patient_ID,Medicine_Name,Brand_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,CatSub_Description,Cat_Short_Name,Marketed_By,Delete_Indicator
   
   FROM Visit_Prescription_Overwrite VP
   WHERE     VP.Patient_ID			 =	 @p_var_Patient_Id		AND
        	 VP.Shift_ID		     =   @p_var_Shift_Id    	AND
			 VP.Clinic_ID			 =   @p_var_Clinic_ID	    AND
			 VP.Doctor_ID			 =   @p_var_Doctor_ID		AND
			 VP.Delete_Indicator	 =	 0					    AND
			 VP.Delete_Flag		     =	 0						AND
			 VP.Patient_Visit_No=	@p_int_patientVisitNo
			 -- order by Sequence_Id
   
   
     SELECT Lab_Test_Description 
	 FROM   Patient_Visit_LabTestAsked PVL
	 WHERE   PVL.Patient_ID			 =	 @p_var_Patient_Id		AND
        	 PVL.Shift_ID		     =   @p_var_Shift_Id    	AND
			 PVL.Clinic_ID			 =   @p_var_Clinic_ID	    AND
			 PVL.Doctor_ID			 =   @p_var_Doctor_ID		AND			
			 PVL.Delete_Flag		 =	 0					    AND
			 PVL.Patient_Visit_No	 =	 @p_int_patientVisitNo

	SELECT Procedure_Description,Findings_Description,[Findings_Comment]
	FROM Visit_Procedure_Findings PVF
	 WHERE   PVF.Patient_ID			 =	 @p_var_Patient_Id		AND
        	 PVF.Shift_ID		     =   @p_var_Shift_Id    	AND
			 PVF.Clinic_ID			 =   @p_var_Clinic_ID	    AND
			 PVF.Doctor_ID			 =   @p_var_Doctor_ID		AND			
			 PVF.Delete_Flag		 =	 0					    AND
			 PVF.Patient_Visit_No	 =	 @p_int_patientVisitNo


			SELECT		[Group_Description],[Instructions_Description]
			FROM	[dbo].[Visit_Groups_Instructions] VGI
			WHERE		VGI.Patient_ID			=	@p_var_Patient_Id	
			 AND		VGI.Shift_ID			=   @p_var_Shift_Id		
			 AND		VGI.Clinic_ID			=   @p_var_Clinic_ID	
			 AND		VGI.Doctor_ID			=   @p_var_Doctor_ID 
			 AND		VGI.Patient_Visit_No	=	@p_int_patientVisitNo
			 ORDER BY VGI.Group_Description,VGI.Sequence_No

			 
			 

   END TRY
   BEGIN CATCH
       SELECT 
        ERROR_NUMBER() AS ErrorNumber
          ,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
     
 END


















/****** Object:  StoredProcedure [dbo].[USP_Delete_InternalMedicineOverwrite]    Script Date: 16-Jan-18 7:50:28 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientPreviousVisitDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author	  :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Save the Data In Patient Master table
-- Created By: Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientPreviousVisitDetails]

	@p_var_Visit_Date			DATE,
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Clinic_ID			NVARCHAR(10),
	@p_var_Doctor_ID			NVARCHAR(32),
	@p_var_Shift_ID				NVARCHAR(32),
	@p_int_patientVisitNo		INT
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY

			SELECT	   Visit_Date,
					  PV.Patient_ID,
					   PV.Patient_Visit_No,
					   PV. Weight_IN_KGS,
					   PV. Height_In_CMS,
					   Pulse,
					   [Pallor],
					   Blood_Pressure,
					   Instructions,
					   On_Call_Status,
					   Fees_To_Collect,
					   Fees_Collected,
					   Discount,
					   Comment,
						ISNULL(In_Person,0) AS In_Person,
						ISNULL(Offline_Flag,0) AS Offline_Flag,
						Sugar,
						THtext,
						--Changed
						ISNULL([TPR],'') AS TPR,[Additional_Comments],[Systemic],[Odeama],--[Pallor],
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details,
			ISNULL(PV.[GC],'') AS GC,
			ISNULL(PV.[FMP],'') AS FMP,
			ISNULL(PV.[PRMC],'') AS PRMC,
			ISNULL(PV.[PAMC],'') AS PAMC,
			ISNULL(PV.[LMP],'') AS LMP,
			ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
			ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
			ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
			--ISNULL(PV.[follow_up_type],0) AS follow_up_type,
			 REPLACE(CONVERT(VARCHAR(11),PV.[Follow_Up_Date],106), ' ','-') AS Follow_Up_Date,
			CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
		   replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
		   ISNULL(BM.[BloodGroup_Description],'') AS BloodGroup_Description,
		   ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up,
		   pv.Shift_ID,
						----Till
						Observation,
						LEFT(SM.Description,1) AS ShiftDesc,
						Symptom_Comment,
						ISNULL(Impression,'') AS Impression,
						ISNULL(follow_up,'') AS follow_up,
						PV.[Payment_By_ID],PV.Payment_Remark,
						pd.Payment_Description,
						replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) +' - '+LEFT(SM.Description,1) AS Visit_Date_Shift,
						ISNULL(PV.Important_Findings,'') AS Important_Findings,
						ISNULL(PV.Additional_Comments,'') AS Additional_Comments,
						ISNULL(PV.[Current_Complaints],'') AS Current_Complaints,
						ISNULL(PV.[Addendum],'') AS Addendum,
						ISNULL(DM.Prefix+' '+DM.First_Name+' - '+Speciality,'') AS DoctorName,
						P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
						L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
						R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END,
                                                     [plan],[Notes],[follow_up_Comment],[Treatment_comment],[Treatment_plan],[Follow_Up_Date],FT.[FollowUp_Description] as follow_up_type
					,PV.[Additional_Instructions],FAM.Followup_After,Treatment_comment,Treatment_plan,pv.Visit_Time
					,pr.Receipt_Number,pr.Receipt_Date,pr.Receipt_Amount
					,RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS Refer_Doctor_Details
					,PV.Refer_ID
					,RT.Refer_By_Description
					,RT.[Refer_By_Description]+' -- '+ RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS REFERDETAILS --Changed
			
			FROM		Patient_Visits PV
			
			INNER JOIN [dbo].[Shift_Master] SM
                    ON PV.Shift_ID = SM.Shift_ID

			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Doctor_Master DM
			ON	DM.Doctor_ID = PV.Doctor_ID
			
			left JOIN	[dbo].[Follow-Up_type] FT
			ON	FT.ID = PV.follow_up_type

			left JOIN[dbo].[Followup_After_Master] FAM
			ON	FAM.ID = PV.Followup_After

			left  join [dbo].[Patient_Receipts] pr
	  on	pr.Receipt_Number = PV.Receipt_Number and
			pr.Patient_ID = PV.Patient_ID
			
			
					INNER JOIN  Patient_Master PM 
			on			PV.Patient_ID=PM.ID 
			LEFT JOIN  [dbo].[BloodGroup_Master] BM
			ON          PM.BloodGroup_ID=BM.ID
			
						LEFT JOIN	[dbo].[Refer_By_Translations] RT
			ON			PV.Refer_ID=RT.[Refer_ID]

			WHERE		Visit_Date			=	@p_var_Visit_Date 	AND 
		                 PV.Patient_ID			=	@p_var_Patient_ID 
			AND			PV.Clinic_ID			=	@p_var_Clinic_ID 
			--AND			Doctor_ID =@p_var_Doctor_ID			
		AND			PV.Shift_Id			=	@p_var_Shift_ID
			AND			PV.Patient_Visit_No	=	@p_int_patientVisitNo
			AND			Delete_Flag			=	0
			
							
			
			SELECT       Short_Description+' '+':'+' '+Complaint_Description  AS Symptoms_Description,Short_Description+'*'+Complaint_Description  AS ID,Complaint_Description,ISNULL([Complaint_Comment],'') AS Complaint_Comment
			FROM        Visit_Complaints
			WHERE       Visit_Date=@p_var_Visit_Date  
			AND 	    Patient_ID=@p_var_Patient_ID 
			AND 	    Clinic_ID=@p_var_Clinic_ID 
			--AND		    Doctor_ID=@p_var_Doctor_ID			
			AND			Shift_Id =@p_var_Shift_ID
			AND			Delete_Flag=0
			AND			Patient_Visit_No	=	@p_int_patientVisitNo

			SELECT       Short_Description+' '+':'+' '+Desease_Description AS Diagnosis_Description, Short_Description+'*'+Desease_Description AS ID,Desease_Description
			FROM		Visit_Diagnosis
			WHERE		Visit_Date=@p_var_Visit_Date  
			AND  		Patient_ID=@p_var_Patient_ID 
			AND     	Clinic_ID=@p_var_Clinic_ID 
			--AND			Doctor_ID=@p_var_Doctor_ID	
			AND			Shift_Id =@p_var_Shift_ID
			AND			Delete_Flag=0		
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			
			SELECT   Dressing_Description,Dressing_Description as Short_Description,Dressing_Description as LongDressing_Description--, substring(Dressing_Description, 1, CHARINDEX(':',Dressing_Description)-1) Short_Description,
								--substring(Dressing_Description, CHARINDEX(':',Dressing_Description)+1, LEN(Dressing_Description)) LongDressing_Description
		    FROM     Visit_Dressing  
			WHERE		Visit_Date=@p_var_Visit_Date  
			AND         Patient_ID=@p_var_Patient_ID 
			AND         Clinic_ID=@p_var_Clinic_ID 
			--AND 		Doctor_ID=@p_var_Doctor_ID	
			AND			Shift_Id =@p_var_Shift_ID
			AND			Delete_Flag=0
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
					

			 SELECT   VM.Short_Description  AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction,VM.Short_Description AS Short_Description,Short_Description AS MED_REPLACE
					 FROM	  Visit_Medicine_Overwrite VM
			WHERE		Visit_Date=@p_var_Visit_Date 
			AND			Patient_ID=@p_var_Patient_ID 
			AND			Clinic_ID=@p_var_Clinic_ID 
			--AND			Doctor_ID=@p_var_Doctor_ID	
			AND			Shift_Id =@p_var_Shift_ID
			AND			Delete_Indicator=0		
			AND			Patient_Visit_No	=	@p_int_patientVisitNo

			



			IF EXISTS(  
		 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction , REPLACE(Medicine_Name, '''', '') AS Med_Replace
					 FROM	  Visit_Prescription_Overwrite VP
			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID		
			AND			Delete_Indicator=0	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
		--	order by [Sequence_Id]

				)
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction , REPLACE(Medicine_Name, '''', '') AS Med_Replace
					 FROM	  Visit_Prescription_Overwrite VP
			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID		
			AND			Delete_Indicator=0	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			--order by [Sequence_Id]
				END
				ELSE
				BEGIN
					 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction , REPLACE(Medicine_Name, '''', '') AS Med_Replace
					 FROM	  Visit_Prescription VP
			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID		
			--AND			Delete_Indicator=0	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			order by [Sequence_Id]  
			    END


			 SELECT  PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,[Pallor],
					 ISNULL(PV.Asthama,0) AS Asthama,
					 ISNULL(PV.Hypertension,0) AS Hypertension,
					 ISNULL(PV.Diabetes,0) AS Diabetes,
					 ISNULL(PV.Cholestrol,0) AS Cholestrol,
					 ISNULL(PV.IHD,0) AS IHD,
					 ISNULL(PV.TH,0) AS TH,
					 PV.Instructions,
					 PV.Fees_To_Collect as Fees_To_Collect,
					 PV.Patient_Visit_No,
					 Pv.Status_ID,
					 ISNULL(PV.Smoking,0) AS Smoking,
					 ISNULL(PV.Tobaco,0) AS Tobaco,
					 ISNULL(PV.Alchohol,0) AS Alchohol,
					 ISNULL(PV.Pregnant,0) AS Pregnant,
					 PV.Habits_Comments,
					 PV.Allergy_dtls,
					 Fees_Collected,
					 ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
					 ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
					 ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
					 ISNULL(PV.[FMP],'') AS FMP,
					ISNULL(PV.[PRMC],'') AS PRMC,
					ISNULL(PV.[PAMC],'') AS PAMC,
					ISNULL(PV.[LMP],'') AS LMP,
					ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
					ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
					ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
					[plan],[Notes],[follow_up_Comment],[Treatment_comment],[Treatment_plan],[Follow_Up_Date],[follow_up_type]
						,PV.[Additional_Instructions],FAM.Followup_After
			

			  FROM	  Patient_Visits PV INNER JOIN Patient_Master PM
			  ON	  pv.Patient_ID	=	PM.ID
			  
			  left JOIN[dbo].[Followup_After_Master] FAM
			ON	FAM.ID = PV.Followup_After
                      
			  WHERE	  PV.Patient_ID			=	@p_var_Patient_ID
			  AND 	  PV.Clinic_ID			    =   @p_var_Clinic_ID	
	          AND     Visit_Date            =   @p_var_Visit_Date 
			  --AND     PV.Doctor_ID			=   @p_var_Doctor_ID 
			  AND	  Shift_Id				=	@p_var_Shift_ID	
	       AND	  PV.Patient_Visit_No	=	@p_int_patientVisitNo
			  AND     PV.Delete_Flag		= 0 



			  SELECT   VM.Short_Description +' '+':'+' '+VM.Medicine_Description AS Medicine_Description,VM.Short_Description +'*'+VM.Medicine_Description AS ID,VM.Morning,VM.Afternoon,VM.Night,VM.No_Of_Days,VM.Instruction
					 FROM	  Visit_Medicine VM
			WHERE		Visit_Date=	@p_var_Visit_Date  
			AND			Patient_ID=	@p_var_Patient_ID 
			AND			Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID	
			AND			Delete_Flag=0	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			

			-- SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction
			--		 FROM	  Visit_Prescription VP
			--WHERE		Visit_Date=	@p_var_Visit_Date  
			--AND			Patient_ID=	@p_var_Patient_ID 
			--AND 		Clinic_ID=	@p_var_Clinic_ID 
			----AND			Doctor_ID=	@p_var_Doctor_ID	
			--AND			Shift_Id =	@p_var_Shift_ID	
			--AND			Delete_Flag=0
			--AND			Patient_Visit_No	=	@p_int_patientVisitNo	
			--order by [Sequence_Id]


			 SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction , REPLACE(Medicine_Name, '''', '') AS Med_Replace
					 FROM	  Visit_Prescription VP
			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID		
			--AND			Delete_Indicator=0	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			order by [Sequence_Id]

			SELECT Lab_Test_Description from Patient_Visit_LabTestAsked
			WHERE		Visit_Date=	@p_var_Visit_Date  
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID	
			AND			Delete_Flag=0
			AND			Patient_Visit_No	=	@p_int_patientVisitNo


			SELECT		PV.Patient_Last_Visit_No,ISNULL(PVL.Lab_Test_Description,'') AS Lab_Test_Description,ISNULL(PVL.Parameter_Name,'') AS Parameter_Name,ISNULL(PVL.Test_Parameter_Value,'') AS Test_Parameter_Value,
						ISNULL(PVL.Doctor_Name,'') AS Doctor_Name,ISNULL(PVL.Lab_Name,'') AS Lab_Name,ISNULL(PVL.Report_Date,'') AS Report_Date,
						ISNULL(PVL.Comment,'') AS Comment
			
			FROM		Patient_Visit_LabTestResults PVL
			
			INNER JOIN  Patient_Visits PV
					ON	--PVL.Doctor_ID = PV.Doctor_ID AND
						PVL.Patient_ID = PV.Patient_ID AND
						PVL.Patient_Visit_No = PV.Patient_Visit_No
			WHERE		PVL.Patient_ID= @p_var_Patient_ID 
			--AND			PVL.Doctor_ID= @p_var_Doctor_ID
			AND			PVL.Clinic_ID = @p_var_Clinic_ID
			AND			PVL.Visit_Date = @p_var_Visit_Date
			AND			PVL.Shift_ID = @p_var_Shift_ID
			AND			PVL.Patient_Visit_No = @p_int_patientVisitNo
			AND			PVL.Delete_Flag = 0
			ORDER BY Lab_Test_Description,Parameter_Name,Test_Parameter_Value ASC 

			SELECT		Procedure_Description,Findings_Description,Findings_Comment
		    from		Visit_Procedure_Findings
			WHERE		Visit_Date=	@p_var_Visit_Date  
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID	
			AND			Delete_Flag=0
			AND			Patient_Visit_No	=	@p_int_patientVisitNo

			SELECT		[Group_Description],[Instructions_Description],[Sequence_No],Group_Description+'*'+Instructions_Description AS ID
		--	SELECT		[Group_Description],[Instructions_Description],[Sequence_No],Group_Description+'*'+Instructions_Description AS Instruction_Group --Change for Copy instruction
			FROM		[dbo].[Visit_Groups_Instructions] 
			WHERE		Visit_Date=	@p_var_Visit_Date  
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo

			ORDER BY [Group_Description],[Sequence_No]

			SELECT ID,Status_Description
			FROM Status_Ref
			WHERE ID=3


			IF EXISTS(

			SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
			FROM	 [dbo].[Patient_Visit_BillingInfoOverwrite]  PVB
			WHERE		PVB.Visit_Date=	@p_var_Visit_Date  
			AND			PVB.Patient_ID=	@p_var_Patient_ID 
			AND 		PVB.Clinic_ID=	@p_var_Clinic_ID 
			--AND			PVB.Doctor_ID=	@p_var_Doctor_ID	
			AND			PVB.Shift_Id =	@p_var_Shift_ID	
			AND			PVB.[Delete_Flag]		=   0
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			AND PVB.Collected_Fees NOT IN (0, 0.00, 0.0, 00.00)
		)

		BEGIN

			SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
			FROM	 [dbo].[Patient_Visit_BillingInfoOverwrite]  PVB
			WHERE		PVB.Visit_Date=	@p_var_Visit_Date  
			AND			PVB.Patient_ID=	@p_var_Patient_ID 
			AND 		PVB.Clinic_ID=	@p_var_Clinic_ID 
			--AND		PVB.Doctor_ID=	@p_var_Doctor_ID	
			AND			PVB.Shift_Id =	@p_var_Shift_ID	
			AND		    PVB.[Delete_Flag]		=   0
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			AND         PVB.Collected_Fees NOT IN (0, 0.00, 0.0, 00.00)

		END

		ELSE

		BEGIN

		SELECT   Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,Billing_Group_Name+'*'+Billing_Subgroup_Name+'*'+Billing_Details AS Billing_ID,[Collected_Fees]
		FROM   [dbo].[Patient_Visit_BillingInfo]   PVB

		WHERE		PVB.Visit_Date=	@p_var_Visit_Date  
			AND			PVB.Patient_ID=	@p_var_Patient_ID 
			AND 		PVB.Clinic_ID=	@p_var_Clinic_ID 
			--AND			PVB.Doctor_ID=	@p_var_Doctor_ID	
			AND			PVB.Shift_Id =	@p_var_Shift_ID	
		AND		PVB.[Delete_Flag]		=   0
		AND			Patient_Visit_No	=	@p_int_patientVisitNo
		AND PVB.Collected_Fees NOT IN (0, 0.00, 0.0, 00.00)


		END

		SELECT	[Category_Description],[Findings_Description]
		FROM	Visit_Abdominal_Examination_Findings
		WHERE	Visit_Date		=	@p_var_Visit_Date  
		AND		Patient_ID		=	@p_var_Patient_ID 
		AND 	Clinic_ID		=	@p_var_Clinic_ID 
		--AND		Doctor_ID		=	@p_var_Doctor_ID	
		AND		Shift_Id		=	@p_var_Shift_ID	
		AND		[Delete_Flag]	=   0
		AND			Patient_Visit_No	=	@p_int_patientVisitNo

		SELECT   [Balance_Details],[Balance_Group_Name],Balance_Subgroup_Name,[Balance_comment],Balance_Group_Name+'*'+ Balance_Subgroup_Name+'*'+Balance_Details AS Balance_ID,impression_comment,Provisional_Diagnosis,FT.FollowUp_Description as FollowUp_Description,FAM.Followup_After as Followup_After,balance_plan
		FROM   [dbo].[Patient_Visit_Balanceinfo]   PVB


			left JOIN	[dbo].[Follow-Up_type] FT
			ON	FT.ID = PVB.followUp_Type

			left JOIN[dbo].[Followup_After_Master] FAM
			ON	FAM.ID = PVB.Follow_After

		WHERE		PVB.Visit_Date=	@p_var_Visit_Date  
			AND			PVB.Patient_ID=	@p_var_Patient_ID 
			AND 		PVB.Clinic_ID=	@p_var_Clinic_ID 
			--AND			PVB.Doctor_ID=	@p_var_Doctor_ID	
			AND			PVB.Shift_Id =	@p_var_Shift_ID	
		AND		PVB.[Delete_Flag]		=   0
		AND			Patient_Visit_No	=	@p_int_patientVisitNo


		SELECT  [ID],[Schedule]
					 FROM	 [dbo].[Visit_Schedule]VS
					 WHERE    VS.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VS.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VS.Clinic_ID			=   @p_var_Clinic_ID	
					-- AND	  VS.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VS.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VS.Delete_Flag		=   0 
					 -- order by [Sequence_Id] 


			SELECT  [ID],[Schedule]
					 FROM	  [dbo].[Visit_Schedule_Print] VSP
					 WHERE    VSP.Patient_ID			=	@p_var_Patient_Id	
					 --AND	  VSP.Shift_ID			=   @p_var_Shift_Id		
					 AND	  VSP.Clinic_ID			=   @p_var_Clinic_ID	
					-- AND	  VSP.Doctor_ID			=   @p_var_Doctor_ID   
					 --AND	  VP.Visit_Date			=	@p_date_TodyasVisitDate
					 AND	  VSP.Patient_Visit_No	=	@p_int_patientVisitNo
					 AND      VSP.Delete_Flag		=   0 
					  --order by [Sequence_Id] 


			SELECT   VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )' as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.No_Of_Days,VP.Instruction , REPLACE(VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )', '''', '') AS Med_Replace
					 FROM	  Visit_Prescription_Overwrite VP
			WHERE		Visit_Date=	@p_var_Visit_Date 
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID		
			AND			Delete_Indicator=0	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo
			order by [Sequence_Id]

			SELECT VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name as Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction , REPLACE(VP.Medicine_Name +' '+'('+' '+VP.Brand_Name +' )', '''', '') AS Med_Replace,
						'' as Generic_Name,CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
						FROM	Visit_Prescription_Overwrite VP
						WHERE	Visit_Date=	@p_var_Visit_Date 
						AND	Patient_ID=	@p_var_Patient_ID 
						AND Clinic_ID=	@p_var_Clinic_ID 
						--AND	Doctor_ID=	@p_var_Doctor_ID	
						AND	Shift_Id =	@p_var_Shift_ID	
						AND	Delete_Indicator=0	
						AND	Patient_Visit_No	=	@p_int_patientVisitNo
						order by [Sequence_Id]

						SELECT VP.Medicine_Name +' '+':'+' '+VP.Brand_Name AS Prescription_Description,Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID, VP.Medicine_Name,VP.Morning,VP.Afternoon,VP.Night,VP.Instruction , REPLACE(Medicine_Name, '''', '') AS Med_Replace,+' '+'('+' '+VP.Brand_Name +' )'as Generic_Name,
						CASE WHEN VP.No_Of_Days = 0 THEN null ELSE VP.No_Of_Days END as No_Of_Days
							FROM	Visit_Prescription_Overwrite VP
							WHERE	Visit_Date=	@p_var_Visit_Date 
							AND	Patient_ID=	@p_var_Patient_ID 
							AND Clinic_ID=	@p_var_Clinic_ID 
							--AND	Doctor_ID=	@p_var_Doctor_ID	
							AND	Shift_Id =	@p_var_Shift_ID	
							AND	Delete_Indicator=0	
							AND	Patient_Visit_No	=	@p_int_patientVisitNo
							order by [Sequence_Id]


							--SELECT		[Group_Description],[Instructions_Description],[Sequence_No],Group_Description+'*'+Instructions_Description AS ID
			SELECT		[Group_Description],[Instructions_Description],[Sequence_No],Group_Description+'*'+Instructions_Description AS Instruction_Group --Change for Copy instruction
			FROM		[dbo].[Visit_Groups_Instructions] 
			WHERE		Visit_Date=	@p_var_Visit_Date  
			AND			Patient_ID=	@p_var_Patient_ID 
			AND 		Clinic_ID=	@p_var_Clinic_ID 
			--AND			Doctor_ID=	@p_var_Doctor_ID	
			AND			Shift_Id =	@p_var_Shift_ID	
			AND			Patient_Visit_No	=	@p_int_patientVisitNo

			ORDER BY [Group_Description],[Sequence_No]


            END TRY
			BEGIN CATCH
			SELECT 
						ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
     
 END







/****** Object:  StoredProcedure [dbo].[USP_Partial_Search_Previous_Complaints]    Script Date: 25-Jan-18 5:16:47 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===================================================================================================================================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Data From Medicine_Master,Complaint_Master,Dressing_Master,Diagnosis_Master,Prescription_Medicines
-- Created By : Nilesh Wani
-- ====================================================================================================================================================
CREATE PROCEDURE [dbo].[USP_Get_PatientProfileRefData]

	@p_nvar_Doctor_ID           NVARCHAR(30)

AS
BEGIN


     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	       
    		SELECT  (LTRIM(RTRIM(Short_Description)))+'*'+(LTRIM(RTRIM(Medicine_Description))) AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Medicine_Description))) as Medicine_Description,Priority_Value
			FROM    Medicine_Master  WHERE [Active] = 1
			AND		DOCTOR_ID = @p_nvar_Doctor_ID
			ORDER BY Priority_Value,Short_Description ASC
			

		
			SELECT  (LTRIM(RTRIM(Short_Description)))+'*'+(LTRIM(RTRIM(Complaint_Description))) AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Complaint_Description))) as Complaint_Description
			FROM    Complaint_Master 
			WHERE	DOCTOR_ID = @p_nvar_Doctor_ID
			ORDER BY Priority_Value,Short_Description ASC

			
			SELECT  (LTRIM(RTRIM(Short_Description)))+'*'+(LTRIM(RTRIM(Dressing_Description))) AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Dressing_Description))) as Dressing_Description
			FROM    Dressing_Master
			WHERE	DOCTOR_ID = @p_nvar_Doctor_ID
			ORDER BY Priority_Value,Short_Description ASC

			
			SELECT (LTRIM(RTRIM(Short_Description)))+'*'+(LTRIM(RTRIM(Diagnosis_Description))) AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Diagnosis_Description))) as Diagnosis_Description
			FROM    Diagnosis_Master
			WHERE	DOCTOR_ID = @p_nvar_Doctor_ID
		    ORDER BY Priority_Value,Short_Description ASC

		   
			SELECT  Medicine_Name+'*'+Brand_Name+'*'+Cat_Short_Name+'*'+CatSub_Description AS ID,CatSub_Description,Cat_Short_Name,Marketed_By,(LTRIM(RTRIM(Medicine_Name))) as Medicine_Name,(LTRIM(RTRIM(Brand_Name))) as Brand_Name
			FROM    Prescription_Medicines WHERE [Active] = 1
			AND		DOCTOR_ID = @p_nvar_Doctor_ID
		    ORDER BY Priority_Value,Medicine_Name ASC

			--SELECT [Procedure_Description] AS ID,(LTRIM(RTRIM(Procedure_Description))) as Procedure_Description
			--FROM    Doctor_Procedure_Master
		 --   ORDER BY Priority_Value,Procedure_Description ASC

			SELECT DISTINCT DPM.[Procedure_Description] AS ID,(LTRIM(RTRIM(DPM.Procedure_Description))) as Procedure_Description,DPM.Priority_Value
			FROM    Doctor_Procedure_Master DPM,Doctor_Procedure_Findings DPF
			
			WHERE	DPM.Procedure_Description=DPF.Procedure_Description
			AND		DPM.Doctor_ID = @p_nvar_Doctor_ID
			AND		DPF.Doctor_ID = @p_nvar_Doctor_ID
		    
			ORDER BY DPM.Priority_Value,DPM.Procedure_Description ASC

			SELECT	[Group_Description]  AS ID,(LTRIM(RTRIM([Group_Description]))) as [Group_Description]
			FROM    [dbo].[Instructions_Group_Master]
			WHERE	DOCTOR_ID = @p_nvar_Doctor_ID
		    ORDER BY Priority_Value,Group_Description ASC

			SELECT  Short_Description+'*'+Complaint_Description AS ID,(LTRIM(RTRIM(Short_Description))) as Short_Description,(LTRIM(RTRIM(Complaint_Description))) as Complaint_Description
			FROM    Complaint_Master 
			WHERE	DOCTOR_ID =  @p_nvar_Doctor_ID
			AND		ISNULL(Display_to_Operator,0) = 1
			ORDER BY Priority_Value,Short_Description ASC

			
			SELECT Isnull(Brand_Name,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+CAST(Isnull(Morning,'') AS varchar(10))+'-'+CAST(ISNULL(Afternoon,'') AS varchar(10))+'-'+CAST(ISNULL(Night,'') AS varchar(10))+'   :   ' +CAST(ISNULL(No_Of_Days,'') AS varchar(10)) + '   :   ' + ISNULL(Instruction,'') as SEARCH_VALUE
			FROM Prescription_Medicines p
			WHERE 
			p.Active=1
			AND	DOCTOR_ID = @p_nvar_Doctor_ID
			ORDER BY p.Priority_Value,p.Medicine_Name ASC


			
      END TRY
      BEGIN CATCH
            SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
      END CATCH
     
 END




/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData]    Script Date: 16-Feb-18 7:49:50 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientReceiptData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha
-- Create date: 21 April 2017
-- Description:	This stored procedure is used to get patient receipt data
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientReceiptData]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_nvar_Visit_Type			CHAR(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			FROM		[dbo].[Patient_Receipts] VGI

			INNER JOIN Patient_Title PT
			ON	VGI.Title=PT.ID

			WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			 AND		VGI.Receipt_Type != 'L'
			 AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type


	SELECT PPA.[Fees_Collected] , PTM.Payment_Description , ppa.payment_Remark

		FROM	[dbo].[Patient_Payments_AdHoc] PPA
		inner join Payment_type_Master PTM on PTM.Id = ppa.payment_by_ID
		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			 -- AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
			 AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
			 AND		PPA.[Shift_ID]								=	@p_tint_Shift_Id
END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Jan-18 8:25:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientReceiptData_For_Receipt]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<MADHURA KALE>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientReceiptData_For_Receipt]
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_nvar_Visit_Type			CHAR(1),
	@p_nvar_pvisitno       int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	--SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
	--		FROM		[dbo].[Patient_Receipts] VGI

	--		INNER JOIN Patient_Title PT
	--		ON	VGI.Title=PT.ID
			


	--		WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
	--		 AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
	--		 AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
	--		 AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
	--		 AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
	--		 AND		VGI.Receipt_Type != 'L'
	--		-- AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type
	--		 AND		VGI.Patient_Visit_No			=	@p_nvar_pvisitno

			  select pv.Receipt_Number,rs.Receipt_Date,pv.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date,pv.Discount 
			  from Patient_Visits pv
					  LEFT JOIN Patient_Receipts rs 
					  on  pv.Receipt_Number=rs.Receipt_Number
						INNER JOIN Patient_Title PT
					  ON	rs.Title=PT.ID
	  			 WHERE		rs.[Patient_ID]			=	@p_nvar_Patient_Id	
				 AND		rs.Clinic_ID				=   @p_nvar_Clinic_ID	
				 AND		rs.Doctor_ID				=   @p_nvar_Doctor_ID 
				 AND		rs.[Receipt_Date]			=   @p_date_TodyasVisitDate
				 AND		rs.[Shift_ID]				=	@p_tint_Shift_Id
				 --AND		VGI.Receipt_Type != 'L'
				 --AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type
				 AND		pv.Patient_Visit_No			=	@p_nvar_pvisitno
				 --AND		PPA.Receipt_Number							=	@p_nvar_pvisitno


	SELECT [Fees_Collected]

		FROM	[dbo].[Patient_Payments_AdHoc] PPA

		WHERE			PPA.[Patient_ID]						=	@p_nvar_Patient_Id	
			 AND		PPA.[Clinic_ID]								=   @p_nvar_Clinic_ID	
			 AND		PPA.[Doctor_ID]								=   @p_nvar_Doctor_ID 
			 AND		CONVERT(DATE,PPA.[Payment_Date])			=   @p_date_TodyasVisitDate
			 AND		PPA.[Shift_ID]								=	@p_tint_Shift_Id



			-- 	SELECT		[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date
			--FROM		[dbo].Patient_Receipts VGI

			--INNER JOIN Patient_Title PT
			--ON	VGI.Title=PT.ID
			


			--WHERE		VGI.[Patient_ID]			=	@p_nvar_Patient_Id	
			-- AND		VGI.Clinic_ID				=   @p_nvar_Clinic_ID	
			-- AND		VGI.Doctor_ID				=   @p_nvar_Doctor_ID 
			-- AND		VGI.[Receipt_Date]			=   @p_date_TodyasVisitDate
			-- AND		VGI.[Shift_ID]				=	@p_tint_Shift_Id
			-- --AND		VGI.Receipt_Type != 'L'
			-- --AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type
			---- AND		VGI.Patient_Visit_No		=	@p_nvar_pvisitno
			-- --AND		PPA.Receipt_Number			=	@p_nvar_pvisitno

			
		  select pv.Receipt_Number,rs.Receipt_Date,pv.[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,To_Date,From_Date  from Patient_Visits_Services pv
					  LEFT JOIN Patient_Receipts_Services rs 
					  on  pv.Receipt_Number=rs.Receipt_Number
						INNER JOIN Patient_Title PT
					  ON	rs.Title=PT.ID
	  			 WHERE		rs.[Patient_ID]			=	@p_nvar_Patient_Id	
				 AND		rs.Clinic_ID				=   @p_nvar_Clinic_ID	
				 AND		rs.Doctor_ID				=   @p_nvar_Doctor_ID 
				 AND		rs.[Receipt_Date]			=   @p_date_TodyasVisitDate
				 AND		rs.[Shift_ID]				=	@p_tint_Shift_Id
				 --AND		VGI.Receipt_Type != 'L'
				 --AND		VGI.[Visit_Type]			=	@p_nvar_Visit_Type
				 AND		pv.Patient_Visit_No			=	@p_nvar_pvisitno
				 --AND		PPA.Receipt_Number							=	@p_nvar_pvisitno
END







/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_1]    Script Date: 25-Feb-18 4:19:53 PM ******/
SET ANSI_NULLS ON







/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_RePrintReceiptData_Operator]    Script Date: 16-Mar-18 10:53:43 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientRegistrationDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Lab Test Data Feom Lab_Test_Master
--  created By- Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientRegistrationDetails]

@p_nvar_Patient_ID			nvarchar(32),
@p_nvar_Clinic_ID			nvarchar(10),
@p_nvar_Doctor_ID			nvarchar(32),
@p_date_TodyasVisitDate     DATE,	
@p_int_patientVisitNo		INT,
@p_tint_Shift_Id				TINYINT,
@p_int_LanguageId             INT
AS

BEGIN

				-- SET NOCOUNT ON added to prevent extra result sets from
					-- interfering with SELECT statements.
					SET NOCOUNT ON;
			BEGIN TRY

				SELECT 
					   PV.Patient_ID,
					   PV.Folder_No,
					   PM.Date_Of_Registration,
					   PM.Last_Name,
					   PM.First_Name,
					   PM.Middle_Name,
					   PM.Date_Of_Birth,
					   PM.Age_Given,
					   PM.Email_ID,
					   PM.Gender_ID,
					   PM.Manual_Registration_Year,
					   PM.Height_In_CMS,
					   PM.Weight_IN_KGS,
					   PM.BloodGroup_ID,
					   BM.BloodGroup_Description,
					   PM.Mobile_1,
					   PM.Address_1,
					   PM.Address_2,
					   PM.Residential_No,
					   PM.City_ID,
					   PM.State_ID,
					   PM.Area_ID,
					   CT.City_Name,
					   ST.State_Name,
					   AT.Area_Name,
					   PM.Pincode,
					   PM.Emergency_Number,
					   PM.Emergency_Name,
					   GD.Gender_Description AS GENDER,
					   PV.Refer_ID,
					   RT.Refer_By_Description AS REFER_BY,
					   RIGHT(PV.Refer_Doctor_Details,LEN(PV.Refer_Doctor_Details)-CHARINDEX(':',PV.Refer_Doctor_Details)) AS Refer_Doctor_Details,
					   PV.Doctor_Address,
					   PV.Doctor_Mobile,
					   PV.Doctor_Email,
					    DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,
						PM.Doctor_Address,PM.Doctor_Email,PM.Occupation_ID,PM.Doctor_Mobile,PM.Marital_Status_ID,
						MST.Marital_Status_Description,
						OM.Occupation_Description,PM.Doctor_Email as referenmailid

				FROM Patient_Master PM 
				INNER JOIN Patient_Visits PV ON PM.ID=PV.Patient_ID
				LEFT JOIN BloodGroup_Master BM ON PM.BloodGroup_ID=BM.ID
				LEFT JOIN Gender_Translations GD ON PM.Gender_ID=GD.Gender_ID
				LEFT JOIN City_Translations CT ON PM.City_ID=CT.City_ID
				LEFT JOIN State_Translations ST ON PM.State_ID=ST.State_ID
				LEFT JOIN Area_Translations AT ON PM.Area_ID=AT.Area_ID
				LEFT JOIN Refer_By_Translations RT ON PV.Refer_ID=RT.Refer_ID
				LEFT JOIN Marital_Status_Translations MST ON PM.Marital_Status_ID	=	MST.Marital_Status_ID
				LEFT JOIN Occupation_Master	OM	ON	PM.Occupation_ID	=	OM.ID
				
				WHERE   PV.Patient_ID=@p_nvar_Patient_ID 
				--AND		PV.Doctor_ID=@p_nvar_Doctor_ID 
				AND		PV.Clinic_ID=@p_nvar_Clinic_ID
				AND		PV.Visit_Date = @p_date_TodyasVisitDate
				AND		PV.Patient_Visit_No = @p_int_patientVisitNo
				AND		PV.Shift_ID = @p_tint_Shift_ID
				AND     GD.Language_Id=@p_int_LanguageId
				AND     CT.Language_Id = GD.Language_Id	--Madhura
				AND		PV.Delete_Flag = 0		
				--AND		MST.Language_Id =	GD.Language_Id		


				SELECT 1 AS TABLE1,PMC.Patient_ID,				
					   ISNULL(PMC.Hypertension,0) AS Hypertension,
					   ISNULL(PMC.Diabetes,0) AS Diabetes,
					   ISNULL(PMC.Cholestrol,0) AS Cholestrol,
					   ISNULL(PMC.IHD,0) AS IHD,
					   ISNULL(PMC.Asthama,0) AS Asthama,
					   ISNULL(PMC.TH,0) AS TH,
					   ISNULL(PMC.Smoking,0) AS Smoking,
					   ISNULL(PMC.Tobaco,0) AS Tobaco,
					   ISNULL(PMC.Alchohol,0) AS Alchohol,
					   PMC.Allergy_Dtls,
					   PMC.Habits_Comments,
					   PMC.Chronic_DiseaseComments,
					   PMC.Past_Surgeries,
					   PMC.Other_Chronic_Disease,
					   PMC.Past_Medication,
					   PMC.Addiction_Comment,
					   PMC.Additional_Comment
				FROM Patient_Master_ChronicData PMC
				WHERE Patient_ID=@p_nvar_Patient_ID 
				--AND	  Doctor_ID = @p_nvar_Doctor_ID
					  
					   
					 

				SELECT  1 AS TABLE2,
						PMF.Patient_ID,
						ISNULL(PMF.Hypertension,0) AS Hypertension,
						ISNULL(PMF.Diabetes,0) AS Diabetes,
						ISNULL(PMF.Cholestrol,0) AS Cholestrol,
						ISNULL(PMF.IHD,0) AS IHD,
						ISNULL(PMF.Asthama,0) AS Asthama,
						ISNULL(PMF.TH,0) AS TH,
						PMF.Chronic_DiseaseComments,
						PMF.FamilyAdditional_Comment,
						PMF.Family_History,
						PMF.Supportive_Tests
				FROM Patient_Master_Family PMF
				WHERE Patient_ID=@p_nvar_Patient_ID


				SELECT 1 AS TABLE3,
					   PM.ID,
					   PM.Folder_No,
					   PM.Date_Of_Registration,
					   PM.Last_Name,
					   PM.First_Name,
					   PM.Middle_Name,
					   PM.Date_Of_Birth,
					   PM.Age_Given,
					   PM.Email_ID,
					   PM.Gender_ID,
					   PM.Manual_Registration_Year,
					   PM.Height_In_CMS,
					   PM.Weight_IN_KGS,
					   PM.BloodGroup_ID,
					   BM.BloodGroup_Description,
					   PM.Mobile_1,
					   PM.Address_1,
					   PM.Residential_No,
					   PM.City_ID,
					   PM.State_ID,
					   PM.Area_ID,
					   CT.City_Name,
					   ST.State_Name,
					   AT.Area_Name,
					   PM.Pincode,
					   PM.Emergency_Number,
					   PM.Emergency_Name,
					   GD.Gender_Description AS GENDER,
					   PM.Refer_ID,
					   RT.Refer_By_Description AS REFER_BY,
					  RIGHT(PM.Refer_Doctor_Details,LEN(PM.Refer_Doctor_Details)-CHARINDEX(':',PM.Refer_Doctor_Details)) AS Refer_Doctor_Details,
					    DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						PM.First_Name+' '+PM.Last_Name AS Patient_Name,
						PM.Doctor_Address,PM.Doctor_Email,PM.Occupation_ID,PM.Doctor_Mobile,PM.Marital_Status_ID,
						MST.Marital_Status_Description,
						OM.Occupation_Description,
						REPLACE(CONVERT(NVARCHAR, PM.Date_Of_Registration, 106), ' ', '-') AS Date_Of_Registration_JS,
						REPLACE(CONVERT(NVARCHAR, PM.Date_Of_Birth, 106), ' ', '-') AS Date_Of_Birth_JS,
						PM.Doctor_Email as referenmailid

				FROM Patient_Master PM 
				
				LEFT JOIN BloodGroup_Master BM ON PM.BloodGroup_ID=BM.ID
				LEFT JOIN Gender_Translations GD ON PM.Gender_ID=GD.Gender_ID
				LEFT JOIN City_Translations CT ON PM.City_ID=CT.City_ID
				LEFT JOIN State_Translations ST ON PM.State_ID=ST.State_ID
				LEFT JOIN Area_Translations AT ON PM.Area_ID=AT.Area_ID
				LEFT JOIN Refer_By_Translations RT ON PM.Refer_ID=RT.Refer_ID
				LEFT JOIN Marital_Status_Translations MST ON PM.Marital_Status_ID	=	MST.Marital_Status_ID
				LEFT JOIN Occupation_Master	OM	ON	PM.Occupation_ID	=	OM.ID
				
				WHERE   PM.ID			=	@p_nvar_Patient_ID 
				--AND		PM.Doctor_ID	=	@p_nvar_Doctor_ID 
				AND     GD.Language_Id	=	@p_int_LanguageId
				AND     CT.Language_Id	=	GD.Language_Id	 --Madhura
				

				SELECT 1 AS TABLE4,[FMP],[PRMC],[PAMC],[LMP],[Obstetrics_History],[Surgical_History_Past_History],[Additional_Comments]
				FROM   [dbo].[Patient_Menstruation History]
				WHERE  Patient_ID	=	@p_nvar_Patient_ID
				--AND	   Doctor_ID	=	@p_nvar_Doctor_ID


			SELECT 1 AS TABLE5, 
			PV.Patient_Visit_No,
			Pv.Status_ID,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
			ISNULL(PV.IS_Submit_Gynec_Details,0) AS IS_Submit_Gynec_Details
			
			  
			FROM	  Patient_Visits PV 
	       
			WHERE	PV.Patient_ID		=	@p_nvar_Patient_ID	
			AND		PV.Shift_ID			=   @p_tint_Shift_ID	    
			AND     PV.Clinic_ID		=   @p_nvar_Clinic_ID    
			--AND     PV.Doctor_ID		=   @p_nvar_Doctor_ID
			AND		PV.Patient_Visit_No	=	@p_int_patientVisitNo
			AND     PV.Delete_Flag		=   0


            END TRY
			BEGIN CATCH
							SELECT 
								ERROR_NUMBER() AS ErrorNumber
							   ,ERROR_MESSAGE() AS ErrorMessage;
			END CATCH
     
 END

















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientReceiptData]    Script Date: 16-Jan-18 8:25:56 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientsDetailForAdhocPayment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 01 july 2017
-- Description:	to get patients details for receive fees screen
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PatientsDetailForAdhocPayment]

	@p_var_Patient_Id     NVARCHAR(32),
	@p_var_Clinic_ID	  NVARCHAR(10),
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_int_languageID	  INT
AS
BEGIN
	
	SET NOCOUNT ON;


	SELECT	PM.First_Name +' '+ PM.Middle_Name+' '+PM.Last_Name as Name,PM.Age_Given,PM.Date_Of_Birth,PM.Folder_No,
			DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
			,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
			,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
			GT.Gender_Description,PM.Gender_ID,
			PM.First_Name +' '+PM.Last_Name AS Partial_Name,
			PM.Mobile_1

	FROM	Patient_Master PM

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

	WHERE	PM.ID=@p_var_Patient_Id
	--AND		PM.Doctor_ID=@p_var_Doctor_ID
	AND		GT.Language_ID=@p_int_languageID
	
END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientRegistrationDetails]    Script Date: 16-Jan-18 8:25:58 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Visit Dates
-- Created By : Varsha Khandre
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_PatientVisitDates]
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Status_ID			TINYINT,
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_Patient_Visit_No		INT
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		

							;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			--PV.Doctor_ID	=	@p_var_Doctor_Id
                                 			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_var_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_var_Clinic_Id
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								 AND			PV.Patient_Visit_No = @p_var_Patient_Visit_No
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID, 'Patient_Visit' AS Visit_type,
									ISNULL(PV.Important_Findings,'') AS Important_Findings,
									DM.First_Name +' '+DM.Last_Name AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END

                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_var_Doctor_Id
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                       AND         Status_ID = 5
                        AND        Delete_Flag = 0 
						
						
                )

				SELECT TOP 10	Visit_Date , 
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ShiftDesc,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) +' - '+ShiftDesc AS Visit_Date_Shift,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100)+ ' * '  +	CONVERT(varchar(15), Shift_id) + ' * '  +replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')
								+ ' * '  + convert(nvarchar(max), Patient_Visit_No,100)  AS DATE_TIME_NUMBER,
								Visit_type,
								replace(CONVERT(NVARCHAR(11), Visit_Date, 6), ' ', '-')+' / '+ShiftDesc + ' / ' +LEFT(Important_Findings,12) AS Date_Shift_VitalNotes,
								DoctorName,
								P+' '+L+' '+R AS PLR, Doctor_ID as prevDoctor_ID

				 FROM PreviousVisits order by ROWNUM ASC

				 --FROM PreviousVisits order by Visit_Date DESC,Visit_Time DESC
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END














/****** Object:  StoredProcedure [dbo].[USP_Get_PatientsDetailForAdhocPayment]    Script Date: 16-Jan-18 8:25:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates_IPD]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Visit Dates
-- Created By : Varsha Khandre
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_PatientVisitDates_IPD]
@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Status_ID			TINYINT,
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_Patient_Visit_No		INT
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		

							;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID , Doctor_ID,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			
								 
								 --PV.Doctor_ID	=	@p_var_Doctor_Id AND
                                 
								 PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_var_Shift_ID
                                	
								 AND			PV.Clinic_ID	=   @p_var_Clinic_Id
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								-- AND			PV.Patient_Visit_No = @p_var_Patient_Visit_No
                           ),--  SELECT * FROM LastVisitDate,

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID, 'Patient_Visit' AS Visit_type,
									ISNULL(PV.Important_Findings,'') AS Important_Findings,
									DM.Prefix+' '+DM.First_Name AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END
								/*	 ,CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108)) t
                                   , LV.LAST_VISIT_DATE */
                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_var_Doctor_Id
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                    <= LV.LAST_VISIT_DATE
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0 
						
						/************************This is added for IPD**********************************/
						UNION 

						SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY  PV.admission_date DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,NULL AS Patient_Visit_No,NULL AS Reports_Asked,PV.admission_date AS Visit_Date,
                                    [Discharge_Time] AS Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,NULL AS Status_ID, 'IPD' AS Visit_type,
									'IPD' AS Important_Findings,
									DM.Prefix+' '+DM.First_Name  AS DoctorName,
									'' AS P,'' AS L,'' AS R

                        FROM        [dbo].[Discharge_Data] PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID

                                    --LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
									
							
                        WHERE       --PV.Doctor_ID	=	@p_var_Doctor_Id
									--AND 
									PV.Patient_ID   =   @p_var_Patient_ID

						/************************This is added for IPD**********************************/
                                 
                                     
                                            
                ),
				--SELECT * FROM PreviousVisits
				OnlyFirstVisit AS (
				SELECT  Distinct TOP 10	Visit_Date , CAST(Visit_Time AS TIME) AS Visit_Time,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ShiftDesc,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108) +' - '+ShiftDesc AS Visit_Date_Shift,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108)+ ' * '  +	CONVERT(varchar(15), Shift_id) + ' * '  +replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')
								+ ' * '  + convert(nvarchar(max), Patient_Visit_No,100) + ' * '+ Doctor_ID AS DATE_TIME_NUMBER,Doctor_ID as prevDoctor_ID,
								Visit_type,
								replace(CONVERT(NVARCHAR(11), Visit_Date, 6), ' ', '-')+' / '+ShiftDesc + ' / ' +LEFT(Important_Findings,12) AS Date_Shift_VitalNotes,
								DoctorName,
								P+' '+L+' '+R AS PLR --,

								/*ROW_NUMBER() OVER (  PARTITION BY Patient_ID  ORDER BY      Visit_Date ASC, Visit_time ASC ) AS
                                    ROWNUM*/


				 --FROM PreviousVisits order by ROWNUM ASC

				 FROM PreviousVisits --order by Visit_Date DESC 
				 )
				 SELECT Visit_Date,Visit_DateTime,Patient_ID,	Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ShiftDesc,
								Visit_Date_Shift,DATE_TIME_NUMBER,Visit_type,
								Date_Shift_VitalNotes,
									DoctorName,PLR, prevDoctor_ID
								 FROM OnlyFirstVisit WHERE ( Patient_Visit_No != @p_var_Patient_Visit_No OR Patient_Visit_No IS NULL)

								 Order by Visit_Date DESC,  Visit_Time desc
				
         END TRY
		 BEGIN CATCH
			
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END










/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 28-Feb-18 10:47:48 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates_IPD_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===========================================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Visit Dates
-- Created By : Varsha Khandre
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_PatientVisitDates_IPD_Operator]
@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Status_ID			TINYINT,
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_Patient_Visit_No		INT
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		

							;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID , Doctor_ID,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			
								 
								 --PV.Doctor_ID	=	@p_var_Doctor_Id AND
                                 
								 PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_var_Shift_ID
                                	
								 AND			PV.Clinic_ID	=   @p_var_Clinic_Id
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								-- AND			PV.Patient_Visit_No = @p_var_Patient_Visit_No
                           ),--  SELECT * FROM LastVisitDate,

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID, 'Patient_Visit' AS Visit_type,
									ISNULL(PV.Important_Findings,'') AS Important_Findings,
									DM.Prefix+' '+DM.First_Name AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END
								/*	 ,CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108)) t
                                   , LV.LAST_VISIT_DATE */
                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_var_Doctor_Id
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                    <= LV.LAST_VISIT_DATE
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0 
						
						/************************This is added for IPD**********************************/
						UNION 

						SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY  PV.Discharge_Date DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,NULL AS Patient_Visit_No,NULL AS Reports_Asked,PV.Discharge_Date AS Visit_Date,
                                    [Discharge_Time] AS Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,NULL AS Status_ID, 'IPD' AS Visit_type,
									'' AS Important_Findings,
									DM.Prefix+' '+DM.First_Name  AS DoctorName,
									'' AS P,'' AS L,'' AS R

                        FROM        [dbo].[Discharge_Data] PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID

                                    --LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
									
							
                        WHERE       --PV.Doctor_ID	=	@p_var_Doctor_Id
									--AND 
									PV.Patient_ID   =   @p_var_Patient_ID

						/************************This is added for IPD**********************************/
                                 
                                     
                                            
                ),
				--SELECT * FROM PreviousVisits
				OnlyFirstVisit AS (
				SELECT  Distinct TOP 10	Visit_Date , CAST(Visit_Time AS TIME) AS Visit_Time,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ShiftDesc,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108) +' - '+ShiftDesc AS Visit_Date_Shift,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),108)+ ' * '  +	CONVERT(varchar(15), Shift_id) + ' * '  +replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')
								+ ' * '  + convert(nvarchar(max), Patient_Visit_No,100) + ' * '+ Doctor_ID AS DATE_TIME_NUMBER,Doctor_ID as prevDoctor_ID,
								Visit_type,
								replace(CONVERT(NVARCHAR(11), Visit_Date, 6), ' ', '-')+' / '+ShiftDesc + ' / ' +LEFT(Important_Findings,12) AS Date_Shift_VitalNotes,
								DoctorName,
								P+' '+L+' '+R AS PLR --,

								/*ROW_NUMBER() OVER (  PARTITION BY Patient_ID  ORDER BY      Visit_Date ASC, Visit_time ASC ) AS
                                    ROWNUM*/


				 --FROM PreviousVisits order by ROWNUM ASC

				 FROM PreviousVisits --order by Visit_Date DESC 
				 )
				 SELECT Visit_Date,Visit_DateTime,Patient_ID,	Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ShiftDesc,
								Visit_Date_Shift,DATE_TIME_NUMBER,Visit_type,
								Date_Shift_VitalNotes,
									DoctorName,PLR, prevDoctor_ID
								 FROM OnlyFirstVisit WHERE ( Patient_Visit_No != @p_var_Patient_Visit_No OR Patient_Visit_No IS NULL)

								 Order by Visit_Date DESC,  Visit_Time desc
				
         END TRY
		 BEGIN CATCH
			
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END










/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 28-Feb-18 10:47:48 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDatesForServices]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===========================================================
-- Author     :  INCRUST
-- Create date: 12-DEC-2019
-- Description: This stored procedure will Get The Visit Dates for services
-- Created By : 
-- ===========================================================


CREATE PROCEDURE [dbo].[USP_Get_PatientVisitDatesForServices]
	@p_var_Patient_ID			NVARCHAR(32),
	@p_var_Doctor_Id			NVARCHAR(30),
	@p_var_Clinic_Id			NVARCHAR(10),
	@p_var_Status_ID			TINYINT,
	@p_var_Shift_ID				TINYINT,
	@p_date_TodyasVisitDate     DATE,
	@p_var_Patient_Visit_No		INT
AS
BEGIN

		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;
		BEGIN TRY
		
						;WITH LastVisitDate AS 
                           (
                                 SELECT  Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits_Services PV
                           
                           
                                 WHERE			--PV.Doctor_ID	=	@p_var_Doctor_Id
                                 			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_var_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_var_Clinic_Id
                                 --AND			PV.Status_ID    =   8
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_var_Patient_ID
								-- AND			PV.Patient_Visit_No = 2

								   
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID, 'Patient_Visit' AS Visit_type,
									ISNULL(PV.Important_Findings,'') AS Important_Findings,
									DM.First_Name +' '+DM.Last_Name AS DoctorName
								
								
									

                        FROM        Patient_Visits_Services PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID

                                    --LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                 
                             
                                   PV.Patient_ID   =   @p_var_Patient_ID                                     
                        AND         Status_ID = 8
                        AND        Delete_Flag = 0 
						
						
                )

				SELECT TOP 10   Visit_Date , 
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ShiftDesc,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) +' - '+ShiftDesc AS Visit_Date_Shift,
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100)+ ' * '  +	CONVERT(varchar(15), Shift_id) + ' * '  +replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')
								+ ' * '  + convert(nvarchar(max), Patient_Visit_No,100)  AS DATE_TIME_NUMBER,
								Visit_type,
								replace(CONVERT(NVARCHAR(11), Visit_Date, 6), ' ', '-')+' / '+ShiftDesc + ' / ' +LEFT(Important_Findings,12) AS Date_Shift_VitalNotes,
								DoctorName
							

				 FROM PreviousVisits order by ROWNUM ASC

				 --FROM PreviousVisits order by Visit_Date DESC,Visit_Time DESC
				
         END TRY
		 BEGIN CATCH
			SELECT		  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 END CATCH
 END


/****** Object:  StoredProcedure [dbo].[USP_Get_PatientsDetailForAdhocPayment]    Script Date: 16-Jan-18 8:25:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitNumber]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_Get_PatientVisitNumber]

		@p_var_Patient_Id		NVARCHAR(32)



AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

			
SELECT TOP 1 * FROM 
(select Top 2 * from Patient_Visits where Patient_ID=@p_var_Patient_Id and Delete_Flag = 0  ORDER BY Patient_Visit_No  DESC)
 x 
order by x.Patient_Visit_No asc

 


		
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_Operator]    Script Date: 30-Jan-18 3:46:16 PM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_patientVisteNum]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  23-Apr-2016
-- Description  :  This stored procedure will check Patient Id is valid or not
--  created By  :  Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_patientVisteNum]
	@p_nvar_Patient_Id      NVARCHAR(32)
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		 
		     BEGIN

			 if not exists( select * from [dbo].[Patient_Visits] pv
		  where Patient_ID=@p_nvar_Patient_Id and pv.Status_ID=5)
		  BEGIN
		  select TOP 1 Patient_Visit_No as Patient_Visit_No from [dbo].[Patient_Visits] pv
		  where Patient_ID=@p_nvar_Patient_Id
		 -- and pv.Status_ID > 5
 
		   order by Patient_Visit_No desc
		    
		     END
			
		   END


		   --select * from Patient_Visits 
		   --where Patient_ID='27-08-2019-000001'

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END









/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientId]    Script Date: 16-Jan-18 8:27:10 PM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientWaitingForMedicineList]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	:  24-Mar-2016
-- Description	:  This stored procedure will Get the Todyas Visit Details Record.
-- Created By	:  Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_PatientWaitingForMedicineList]
	@p_var_TodyasVisitDate	datetime,
	@p_var_Shift_Id		    TINYINT,
	@p_var_Clinic_ID	    nvarchar(10),
	@p_var_Doctor_ID	    nvarchar(30)
 AS
 BEGIN

    SET NOCOUNT ON;
	BEGIN TRY
		SELECT  First_Name+' '+Middle_Name+' '+Last_Name as Name,Status_Description,Patient_ID,SR.ID as Status_ID
	    FROM    Patient_Visits PV INNER JOIN Patient_Master PM ON pv.Patient_ID = PM.ID
	                              INNER JOIN  Status_Ref SR    ON PV.Status_ID  = SR.ID
          
		WHERE PV.Visit_Date  =	 @p_var_TodyasVisitDate     
		AND   PV.Shift_ID    =	 @p_var_Shift_Id			 
		AND   PV.Clinic_ID   =   @p_var_Clinic_ID			 
        AND   PV.Doctor_ID   =   @p_var_Doctor_ID
		AND   SR.Doctor_ID	 =   @p_var_Doctor_ID		 
		AND   PV.Delete_Flag =   0					 
	    ORDER BY PV.Status_ID ASC

	END TRY
	BEGIN CATCH
	    SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 END



















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates_IPD]    Script Date: 16-Jan-18 8:26:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PendingRegistrations]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  14-Mar-2016
-- Description  :  This stored procedure will Get the Pending Record.
--                 If Registration_Status will 'Q'then this Recoed Will be pending
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_PendingRegistrations]
	@p_char_Registration_Status  CHAR(1),
	@p_nvar_Doctor_Id            NVARCHAR(30)  
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
			SELECT  
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					PM.Date_Of_Registration,
					PM.ID,
					PM.Folder_No,
					PM.Mobile_1,
					PM.Registration_Status,
					RT.RegistrationStatus_Description
			  FROM  Patient_Master PM 

			  INNER JOIN [dbo].[RegistrationStatus_Translations] RT
			  ON	PM.[Registration_Status]=[RegistrationStatus_ID]

			 WHERE  PM.Registration_Status = @p_char_Registration_Status 
			 --  AND  PM.Doctor_ID = @p_nvar_Doctor_Id
			 ORDER BY  PM.Date_Of_Registration DESC,PM.ID DESC

			 SELECT  
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					PM.Date_Of_Registration,
					PM.ID,
					PM.Folder_No,
					PM.Mobile_1,
					PM.Registration_Status,
					RT.RegistrationStatus_Description
			  FROM  Patient_Master PM 

			  INNER JOIN [dbo].[RegistrationStatus_Translations] RT
			  ON	PM.[Registration_Status]=[RegistrationStatus_ID]

			-- WHERE   PM.Doctor_ID = @p_nvar_Doctor_Id
			 ORDER BY  PM.Date_Of_Registration DESC,PM.ID DESC



					;with Newdata as
					(
						select patient_Id , max(Patient_Visit_No) as Patient_Visit_No from Patient_Visits group by patient_Id
					)
					select 				PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					--PM.Date_Of_Registration,
					PM.ID,
					PM.Folder_No,
					PM.Mobile_1,
					PM.Registration_Status,
					GDR.ModifiedOn,
					Date_Of_Registration = GDR.[Delivery_Registraion_Date],
					EDD = CASE WHEN GDR.EDD is not null THEN GDR.EDD ELSE pv.edd  END,
					GDR.PrintedOn
					from patient_master pm 
					left join Newdata pv1 on pv1.Patient_ID = pm.ID
					left join [Patient_Visits] pv on pv.Patient_ID=pv1.Patient_ID and pv.Patient_Visit_No = pv1.Patient_Visit_No
					left join [dbo].[Gynec_Delivery_Registration] GDR ON PM.ID=  GDR.Patient_ID
						 ORDER BY GDR.PrintedOn desc, gdr.[Delivery_Registraion_Date] desc,PM.ID DESC 

	END TRY
	BEGIN CATCH
		SELECT  ERROR_NUMBER() AS ErrorNumber,
		        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
END

















/****** Object:  StoredProcedure [dbo].[USP_Get_PatientWaitingForMedicineList]    Script Date: 16-Jan-18 8:26:05 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PrescriptionMedicineDeatilsForSave]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:  INCRUST
-- Create date: 16 Jan 2016
-- Description: This stored procedure will get the data for patient prescription
--  created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PrescriptionMedicineDeatilsForSave]
@p_nvar_MedName				NVARCHAR(200),
@p_nvar_BrandName			NVARCHAR(200)


AS
BEGIN

	

    -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY
   
   
   
   
  

   SELECT Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By
		  
   FROM Prescription_Medicines PM
   WHERE     PM.Medicine_Name		 =	@p_nvar_MedName		AND
			 PM.Brand_Name			 =	@p_nvar_BrandName
        	
           
 

   END TRY
   BEGIN CATCH
       SELECT 
        ERROR_NUMBER() AS ErrorNumber
          ,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
     
 END


















/****** Object:  StoredProcedure [dbo].[USP_Delete_InvoiceKeywordMedicines]    Script Date: 16-Jan-18 7:50:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PrevDateData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[USP_Get_PrevDateData]

	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_int_patientVisitNo		INT,
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30)
	
 AS
 BEGIN


 ;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			--PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                 				PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_int_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
								 AND			PV.Patient_ID   =   @p_nvar_Patient_Id
								 AND			PV.Patient_Visit_No = @p_int_patientVisitNo
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc
                        FROM        Patient_Visits PV
									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_nvar_Doctor_ID
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108))
                                    <= LV.LAST_VISIT_DATE
                                                                         
                       AND         Status_ID = 5
                        AND         Delete_Flag = 0  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,ShiftDesc,Shift_ID,Visit_Time
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    



					 SELECT  PV.Weight_IN_KGS,
							 PV.Height_In_CMS,
							 PV.Pulse,
							 PV.Blood_Pressure,
							 ISNULL(PV.Asthama,0) AS Asthama,
							 ISNULL(PV.Hypertension,0) AS Hypertension,
							 ISNULL(PV.Diabetes,0) AS Diabetes,
							 ISNULL(PV.Cholestrol,0) AS Cholestrol,
							 ISNULL(PV.IHD,0) AS IHD,
							 ISNULL(PV.TH,0) AS TH,
							 PV.Instructions,
							 PV.Fees_To_Collect,
							 ISNULL(PV.Diabetes,0) AS Diabetes,
							 ISNULL(PV.Cholestrol,0) AS Cholestrol,
							 PV.Fees_To_Collect,
							 PV.Instructions,
							 PV.Patient_Visit_No,
							 Pv.Status_ID,
							 ISNULL(PV.Smoking,0) AS Smoking,
							 ISNULL(PV.Tobaco,0) AS Tobaco,
							 ISNULL(PV.Alchohol,0) AS Alchohol,
							 PV.Habits_Comments,
							PV.Allergy_dtls,
							PV.Observation,
							PV.Symptom_Comment,
							ISNULL(PV.THtext,'') AS THtext,
							ISNULL(PV.Sugar,'') AS Sugar,
							ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
							ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
							ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
							ISNULL(PV.[FMP],'') AS FMP,
							ISNULL(PV.[PRMC],'') AS PRMC,
							ISNULL(PV.[PAMC],'') AS PAMC,
							ISNULL(PV.[LMP],'') AS LMP,
							ISNULL(PV.[Obstetrics_History],'') AS Obstetrics_History,
							ISNULL(PV.[Surgical_History_Past_History],'') AS Surgical_History_Past_History,
							ISNULL(PV.[Gynec_Additional_Comments],'') AS Gynec_Additional_Comments,
							CASE WHEN PV.[EDD] IS NULL THEN 'NULL' ELSE
							replace(CONVERT(NVARCHAR, ISNULL(PV.[EDD],''), 106), ' ', '-') END  AS EDD,
							ISNULL(PV.[Pregnant],0) AS Pregnant

					FROM    Patient_Visits PV
    
					INNER JOIN	PatientWiseVisit MD ON PV.Patient_Visit_No = MD.Patient_Visit_No AND PV.Patient_ID = MD.Patient_ID 
							AND PV.Shift_ID = MD.Shift_ID
         
					INNER JOIN	Patient_Master PM
					ON			pv.Patient_ID   =   PM.ID     
                      
					WHERE		PV.Patient_ID	=   @p_nvar_Patient_Id
       
					--AND			PV.Doctor_ID    =   @p_nvar_Doctor_ID    
					AND			PV.Delete_Flag  =	0 







     
	END  





	
/****** Object:  StoredProcedure [dbo].[USP_Get_PatientLastVisitDate]    Script Date: 20-Feb-18 9:52:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PrevDateDataOffline]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE PROCEDURE [dbo].[USP_Get_PrevDateDataOffline]
	@p_nvar_Patient_Id			NVARCHAR(32),
	
	@p_nvar_Doctor_ID			NVARCHAR(30),
	
	@p_int_patientVisitNo		INT,

	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30)

 AS
 BEGIN



	;WITH MaxDateTime AS 
       (
            SELECT TOP 1 Patient_ID,Patient_Visit_No,Visit_Date,VISIT_TIME,Shift_ID FROM Patient_Visits  
			WHERE	--Patient_Visit_No	<	@p_int_patientVisitNo AND 
                    Patient_ID			=	@p_nvar_Patient_Id
            AND		Doctor_ID			=   @p_nvar_Doctor_ID  
            AND		Delete_Flag         =	0 
            AND		STatus_ID			=	5
			--AND		Visit_Date			!= GETDATE()
            ORDER BY VISIT_DATE DESC,Shift_ID DESC
       )

             
    SELECT  PV.Weight_IN_KGS,PV.Height_In_CMS,PV.Pulse,PV.Blood_Pressure,PV.Asthama,PV.Hypertension,PV.Diabetes,PV.Cholestrol,PV.IHD,PV.TH,PV.Instructions,PV.Fees_To_Collect,
            PV.Diabetes,PV.Cholestrol,PV.Fees_To_Collect,PV.Instructions,PV.Patient_Visit_No,Pv.Status_ID,ISNULL(PV.Smoking,'') AS Smoking,PV.Tobaco,PV.Alchohol,PV.Habits_Comments,
			PV.Allergy_dtls,PV.Observation,PV.Symptom_Comment,
			ISNULL(PV.Current_Medicines,'') AS Current_Medicines,
			ISNULL(PV.Visit_Comments,'') AS Visit_Comments,
			ISNULL(PV.Current_Complaints,'') AS Current_Complaints,
			ISNULL(PV.Is_follow_Up,0) AS Is_follow_Up

    FROM    Patient_Visits PV
    
	INNER JOIN	MaxDateTime MD ON PV.Patient_Visit_No = MD.Patient_Visit_No AND PV.Patient_ID = MD.Patient_ID 
			AND PV.Shift_ID = MD.Shift_ID
         
    INNER JOIN	Patient_Master PM
    ON			pv.Patient_ID   =   PM.ID     
                      
    WHERE		PV.Patient_ID	=   @p_nvar_Patient_Id
       
    AND			PV.Doctor_ID    =   @p_nvar_Doctor_ID    
    AND			PV.Delete_Flag  =	0 


 







     
	END  


	  
	  
	  
	 
/****** Object:  StoredProcedure [dbo].[USP_Get_PrevDateData]    Script Date: 16-Jan-18 8:26:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_PreviousLabReports]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Get The Data Of Previous Lab Reports
--  created By- Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_PreviousLabReports]

	@p_nvar_Patient_ID			NVARCHAR(32),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_Clinic_ID			NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE,
	@p_int_patientVisitNo		INT,
	@p_tint_Shift_ID			TinyInt

AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		BEGIN TRY
			
			SELECT		PV.Patient_Last_Visit_No,PVL.Lab_Test_Description,PVL.Parameter_Name,PVL.Test_Parameter_Value,
						PVL.Doctor_Name,PVL.Lab_Name,PVL.Report_Date AS Report_Date,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name AS FULLNAME,
						PVL.Comment
			FROM		Patient_Visit_LabTestResults PVL

			INNER JOIN  Patient_Visits PV
					ON	PVL.Doctor_ID = PV.Doctor_ID AND
						PVL.Patient_ID = PV.Patient_ID AND
						PVL.Patient_Visit_No = PV.Patient_Visit_No

			INNER JOIN	Patient_Master PM
					ON	PVL.Patient_ID=PM.ID 
						--PVL.Doctor_ID=PM.Doctor_ID

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Visit_Date = @p_date_TodyasVisitDate
			AND			PVL.Shift_ID = @p_tint_Shift_ID
			AND			PVL.Patient_Visit_No = @p_int_patientVisitNo
			AND			PVL.Delete_Flag = 0
			ORDER BY Lab_Test_Description,Parameter_Name,Test_Parameter_Value ASC 


			SELECT DISTINCT 1 AS TABLE0, [Step_No],[Advised_Details],[Notation_Sequence1],[Notation_Sequence2],
								[Notation_Sequence3],[Notation_Sequence4],REPLACE(CONVERT(NVARCHAR, Advised_Date, 106), ' ', '-') AS Advised_Date,
								[Treatment_Plan_Status_ID],[Comments]
			FROM		Dentist_Patient_TreatmentPlan PVL

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Visit_Date = @p_date_TodyasVisitDate
			AND			PVL.Shift_ID = @p_tint_Shift_ID
			AND			PVL.Patient_Visit_No = @p_int_patientVisitNo
			AND			PVL.Delete_Flag = 0

			SELECT DISTINCT 1 AS TABLE1, [Step_No],[Detail_Step_No],[Actual_Treatment],[Remarks]
			FROM		[dbo].[Dentist_Patient_TreatmentPlanDetails] PVL

			WHERE		PVL.Patient_ID= @p_nvar_Patient_ID 
			AND			PVL.Doctor_ID= @p_nvar_Doctor_ID
			AND			PVL.Clinic_ID = @p_nvar_Clinic_ID
			AND			PVL.Visit_Date = @p_date_TodyasVisitDate
			AND			PVL.Shift_ID = @p_tint_Shift_ID
			AND			PVL.Patient_Visit_No = @p_int_patientVisitNo
			AND			PVL.Delete_Flag = 0

         END TRY
		 BEGIN CATCH

			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
		 
		 END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Get_PrevDateDataOffline]    Script Date: 16-Jan-18 8:26:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	22 Aug 2017
-- Description	:	This stored procedure will get the Master Data of tables
-- Created By	:	Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Referral_Doctor_Details]

	@p_int_Selected_Value INT,
	@p_int_LanguageId  INT
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		

		SELECT [Doctor_Address],[Doctor_Mob],[Doctor_Mail]
		FROM [dbo].[Referrel_Doctors_List]
		WHERE Language_Id = @p_int_LanguageId 
		AND RD_ID = @p_int_Selected_Value;

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]   Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON

/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]    Script Date: 16-Jan-18 8:06:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details_Mob_No]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	22 Aug 2017
-- Description	:	This stored procedure will get the Master Data of tables
-- Created By	:	Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Referral_Doctor_Details_Mob_No]

	@p_str_Doctor_Mob nvarchar(20)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		SELECT [Doctor_Mob] from [dbo].[Referrel_Doctors_List]
		WHERE [Doctor_Mob] = @p_str_Doctor_Mob;


	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]   Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON

/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]    Script Date: 16-Jan-18 8:06:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_List]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	22 Aug 2017
-- Description	:	This stored procedure will get the Master Data of tables
-- Created By	:	Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_Referral_Doctor_List]

	@p_Selected_Value nvarchar(max)
	
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
	DECLARE @Ref_doctor_name NVARCHAR(200);

	

	    SELECT @Ref_doctor_name = RIGHT(@p_Selected_Value,LEN(@p_Selected_Value)-CHARINDEX(':',@p_Selected_Value))

		SELECT *
		FROM [dbo].[Referrel_Doctors_List]
		WHERE Doctor_Name  = RTRIM(LTRIM(@Ref_doctor_name));

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]   Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON

/****** Object:  StoredProcedure [dbo].[USP_Get_Referral_Doctor_Details]    Script Date: 16-Jan-18 8:06:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_RegistrationStatus]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_RegistrationStatus]
	@p_int_LanguageId  INT
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		SELECT	RegistrationStatus_ID AS ID, RegistrationStatus_Description AS RegistrationStatus
		FROM	RegistrationStatus_Translations
		WHERE	Language_Id = @p_int_LanguageId;

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


/****** Object:  StoredProcedure [dbo].[USP_Delete_Internal_Medicine]    Script Date: 2016-04-01 4:52:08 PM ******/
SET ANSI_NULLS ON
















/****** Object:  StoredProcedure [dbo].[USP_Get_PreviousLabReports]    Script Date: 16-Jan-18 8:26:17 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ReportAsked]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  14-Mar-2016
-- Description  :  This stored procedure will Get Report Asked.
--  created By  :  Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ReportAsked]
	@p_nvar_Patient_Id   nvarchar(32),
	@p_int_Last_VisitNo  int
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
			SELECT  
				   Reports_Asked
			  FROM  Patient_Visits
             WHERE
                   Patient_ID=@p_nvar_Patient_Id 
               AND Patient_Visit_No=@p_int_Last_VisitNo
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Get_RegistrationStatus]    Script Date: 16-Jan-18 8:26:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_sample]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Record if IPD parametr is on for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_sample]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
	UNION ALL
SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
 NULL AS follow_up_type,NULL AS FollowUp_Description,
 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
--AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5 shubham - incrust -11dec2018
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT Top 1
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATETIME, CONVERT(CHAR(8), PV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), PV.Visit_Time, 108))  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5
	order by pv.Visit_Date desc 

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ServicesDailyCollection_For_Operator_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  11-Dec-2019
-- Description  :  This stored procedure will Get the Todyas daily collection record for operator
-- Created By   :  Vasudha
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ServicesDailyCollection_For_Operator_Services]
   
	@p_date_FROMdate            DATE,
	@p_date_TOdate              DATE,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN


	SET NOCOUNT ON;
	BEGIN TRY
	
		 IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TempPatientBillingInfo4]') AND type in (N'U'))
DROP TABLE [dbo].[TempPatientBillingInfo4]


DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @cols= STUFF((SELECT distinct ',' + QUOTENAME(BillingDetails) 
                    from  (select BDM.Doctor_ID,BDM.Billing_Group_Name +'-'+ BDM.Billing_Subgroup_Name+'-' +BDM.Billing_Details
 AS BillingDetails from [dbo].[Services_Billing_Details_Master] BDM

 LEFT JOIN [dbo].[Patient_Visit_Services_BillingInfoOverwrite] PVB

				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
 
 ) X

            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

		set @query = ' WITH MBillingDetails AS ( SELECT Doctor_ID,Clinic_Id,Shift_Id,Patient_Id,Patient_Visit_No,Visit_Date,'+ '''Patient Visit''' + ' AS Visit_Type, ' + @cols + '
             from 
             (
                select BDM.Doctor_ID,BDM.Billing_Group_Name+' + '''-''' + '+BDM.Billing_Subgroup_Name+' + '''-''' + '+BDM.Billing_Details AS BillingDetails,
				PVB.Clinic_Id,PVB.Shift_Id,PVB.Patient_Id,PVB.Patient_Visit_No,PVB.Visit_Date,PVB.Collected_Fees  
				 from [dbo].[Services_Billing_Details_Master] BDM
				LEFT JOIN [dbo].[Patient_Visit_Services_BillingInfoOverwrite] PVB
				ON BDM.Doctor_ID = PVB.Doctor_ID AND 
				BDM.Billing_Group_Name = PVB.Billing_Group_Name AND 
				BDM.Billing_Subgroup_Name = PVB.Billing_Subgroup_Name AND
				BDM.Billing_Details = PVB.Billing_Details AND
				ISNULL(PVB.Delete_Flag,0)=0
			) x
            pivot 
            (
                max(Collected_Fees)
                for BillingDetails in (' + @cols + ')
            ) p ) SELECT * INTO [dbo].[TempPatientBillingInfo4] FROM  MBillingDetails'

	--print @query
execute(@query);


--execute(@query);
		
	--if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' ),
					DM.Base_Location

			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'

			and  pv.Status_ID = 8

/*Union All

			SELECT  
				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,'Adhoc - Followup' as Is_follow_Up
					,DM.Base_Location
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

			AND		GT.Language_Id	=	@p_language_ID  */
			)

			
			select * from get_daily_colln order by Visit_Date;
			


			
------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime1 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln1 as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
					 ,PM.Clinic_ID
					 	,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime1 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 8

--Union All

--			SELECT  
--				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
--			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
--					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID,
--					DM.Prefix+' '+DM.First_Name As doctr_name
--					,'Adhoc - Followup' as Is_follow_Up
--					 ,PPA.Clinic_ID
--					 ,DM.Base_Location

--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
--		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

--			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				   --	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				  -- Adhoc_Fees As 'Adhoc (A)',
				   				BIO.*,
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark',
				   Base_Location AS 	'Base Location'


				   


			
			 from get_daily_colln1 GIC
			 
			 
			  LEFT JOIN		[dbo].[TempPatientBillingInfo4]   BIO  
				ON			GIC.Doctor_ID=BIO.Doctor_ID
				AND			GIC.Clinic_ID=BIO.Clinic_ID
				AND			GIC.Patient_ID=BIO.Patient_ID
				--AND		convert(char(8),  GIC.Visit_Date, 106)	=convert(char(8),  BIO.Visit_Date, 106)
				AND			GIC.Patient_Visit_No = BIO.Patient_Visit_No
			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



		------- Generate excel sheet record of Collection Statement (Appointments/OPDDailyCollection.aspx)-----------------
		----------------------       START               ----------------------------------
 	;with SortVisitTime11 as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln11 as(
	
			SELECT  
			REPLACE(CONVERT(NVARCHAR, PV.Visit_Date, 106), ' ', '-')  + ' '+
			convert(char(8),  PV.Visit_Time, 108) AS Visit_Date 
			--convert(varchar(11),  PV.Visit_Date, 106) as Visit_Date 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)

					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					DM.Prefix+' '+DM.First_Name As doctr_name
					,Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
						,DM.Base_Location
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PM.Doctor_ID

		   inner join SortVisitTime11 gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			PV.Visit_Date	between @p_date_FROMdate and @p_date_TOdate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	3
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			and  pv.Status_ID = 8
--Union All

--			SELECT  
--				REPLACE(CONVERT(NVARCHAR,  PPA.Payment_Date, 106), ' ', '-')  + ' '+
--			    convert(char(8),  PPA.Payment_Date, 108) AS Visit_Date ,
					
--					--convert(varchar(11),  PPA.Payment_Date, 106) as Visit_Date ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES, null as discount,null as Original_Discount, null  as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID,
--					DM.Prefix+' '+DM.First_Name As doctr_name
--					,'Adhoc - Followup' as Is_follow_Up
--					,DM.Base_Location

--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	between @p_date_FROMdate and @p_date_TOdate
			
--		--	AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 

--			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select GIC.Visit_Date As 'Visit Date',
				   Name As 'Patient Name',
				   GIC.Patient_ID As 'Patient ID',
				 -- 	Is_follow_Up As 'New / Follow up',
				   Attended_By As 'Provider',
				   Original_Billed_Amount As 'Original (O)',
				   Fees_To_Collect As 'Billed (B)',
				   Diffrence As 'Difference (O-B)',
				   Original_Discount As 'Original Discount (OD)',
				   discount As 'Discount (D)',
				   Net As 'Net (B-D)',
				   Fees_Collected As 'Collected (C)	',
				   DUES As 'Dues (B-D-C)',
				 --  Adhoc_Fees As 'Adhoc (A)',
				   Comment As 'Reason',
				   Payment_Description As 'Payment Description',
				   Payment_Remark As 'Payment Remark'
				     , Base_Location AS 	'Base Location'
				 
				  

				   


			
			 from get_daily_colln11 GIC
			 

			 
			 order by GIC.Visit_Date;
		----------------------       END               ----------------------------------



			


		



	end
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ShiftID_ForGivenDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 12-Mar-2016
-- Description: This stored procedure will return Shfts for the day for the user.
-- created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ShiftID_ForGivenDate]

	@p_nvar_Doctor_Id		NVARCHAR(30),
	@p_nvar_ClinicId		NVARCHAR(10),
	@P_nvar_TodaysDay		NVARCHAR(20),
	@p_Future_Time			TIME(7),
	@p_date_Visit_Date		DATE,
	@p_Future_Time_To			TIME(7)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @p_time_Previous_time time;
	DECLARE @p_time_Next_time time;

	SET @p_time_Previous_time	= cast( DATEADD(minute, -15, @p_Future_Time) as time ); 
	SET @p_time_Next_time		= cast(  DATEADD(minute, 15, @p_Future_Time)as time ); 

	BEGIN TRY
	
	;WITH  ShifTimes As 
				(  SELECT	SM.Shift_ID,SM.Start_Time AS Start_Time, SM.End_Time AS End_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours
									
					FROM	Shift_Master SM
					INNER JOIN Doctor_Clinic_Shift DCS 
							ON SM.Shift_ID = DCS.Shift_ID
					INNER JOIN Clinic_Master CM
							ON DCS.Clinic_ID = CM.Clinic_ID
					INNER JOIN Doctor_Master DM
							ON DM.Doctor_ID = CM.Doctor_ID 
					WHERE	DM.Doctor_ID = @p_nvar_Doctor_Id
					AND		CM.Clinic_ID = @p_nvar_ClinicId
					AND		SM.Shift_Day = @P_nvar_TodaysDay
					AND		DCS.Doctor_ID= @p_nvar_Doctor_Id
			)
			
			
			SELECT Shift_ID, Description,Start_Time,End_Time FROM ShifTimes
			WHERE		CAST(@p_Future_Time AS time) BETWEEN Start_Time AND End_Time
			AND		(CAST(@p_Future_Time_To AS time) 	BETWEEN Start_Time AND End_Time	)			
			ORDER BY DiffInHours ASC	
			

			IF EXISTS 
		(	SELECT  *
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Delete_Flag = 0
			AND		Visit_Time	BETWEEN @p_time_Previous_time AND @p_time_Next_time
			
		)
		BEGIN
			SELECT 1 AS TIME_STATUS;
		END

		ELSE
		SELECT 0 AS TIME_STATUS;


		;WITH  ShifTimes As 
				(  SELECT	SM.Shift_ID,SM.Start_Time AS Start_Time, SM.End_Time AS End_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours
									
					FROM	Shift_Master SM
					INNER JOIN Doctor_Clinic_Shift DCS 
							ON SM.Shift_ID = DCS.Shift_ID
					INNER JOIN Clinic_Master CM
							ON DCS.Clinic_ID = CM.Clinic_ID
					INNER JOIN Doctor_Master DM
							ON DM.Doctor_ID = CM.Doctor_ID 
					WHERE	DM.Doctor_ID = @p_nvar_Doctor_Id
					AND		CM.Clinic_ID = @p_nvar_ClinicId
					AND		SM.Shift_Day = @P_nvar_TodaysDay
					AND		DCS.Doctor_ID= @p_nvar_Doctor_Id
			)
			
			
			SELECT Shift_ID, Description,Start_Time FROM ShifTimes
			--WHERE		CAST(@p_Future_Time AS time) BETWEEN Start_Time AND End_Time			
			ORDER BY DiffInHours ASC	
       

	END TRY
	BEGIN CATCH
	SELECT	ERROR_NUMBER() AS ErrorNumber,
			ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END



-------------------------





/****** Object:  StoredProcedure [dbo].[USP_Get_System_Param_Record]    Script Date: 11-Jan-18 12:05:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ShiftID_ForGivenDate_Rebook]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 12-Mar-2016
-- Description: This stored procedure will return Shfts for the day for the user.
-- created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ShiftID_ForGivenDate_Rebook]

	@p_nvar_Doctor_Id		NVARCHAR(30),
	@p_nvar_ClinicId		NVARCHAR(10),
	@P_nvar_TodaysDay		NVARCHAR(20),
	@p_Future_Time			TIME(7),
	@p_date_Visit_Date		DATE,
	@p_Future_Time_To			TIME(7),
	@p_var_Patient_ID          NVARCHAR(30)
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @p_time_Previous_time time;
	DECLARE @p_time_Next_time time;

	SET @p_time_Previous_time	= cast( DATEADD(minute, -15, @p_Future_Time) as time ); 
	SET @p_time_Next_time		= cast(  DATEADD(minute, 15, @p_Future_Time)as time ); 

	BEGIN TRY
	
	;WITH  ShifTimes As 
				(  SELECT	SM.Shift_ID,SM.Start_Time AS Start_Time, SM.End_Time AS End_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours
									
					FROM	Shift_Master SM
					INNER JOIN Doctor_Clinic_Shift DCS 
							ON SM.Shift_ID = DCS.Shift_ID
					INNER JOIN Clinic_Master CM
							ON DCS.Clinic_ID = CM.Clinic_ID
					INNER JOIN Doctor_Master DM
							ON DM.Doctor_ID = CM.Doctor_ID 
					WHERE	DM.Doctor_ID = @p_nvar_Doctor_Id
					AND		CM.Clinic_ID = @p_nvar_ClinicId
					AND		SM.Shift_Day = @P_nvar_TodaysDay
					AND		DCS.Doctor_ID= @p_nvar_Doctor_Id
			)
			
			
			SELECT Shift_ID, Description,Start_Time,End_Time FROM ShifTimes
			WHERE		CAST(@p_Future_Time AS time) BETWEEN Start_Time AND End_Time
			AND		(CAST(@p_Future_Time_To AS time) 	BETWEEN Start_Time AND End_Time	)			
			ORDER BY DiffInHours ASC	
			

			IF EXISTS 
		(	SELECT  *
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Delete_Flag = 0
			AND		Visit_Time	BETWEEN @p_time_Previous_time AND @p_time_Next_time
			and Patient_ID<>  @p_var_Patient_ID
		)
		BEGIN
			SELECT 1 AS TIME_STATUS;
		END

		ELSE
		SELECT 0 AS TIME_STATUS;


		;WITH  ShifTimes As 
				(  SELECT	SM.Shift_ID,SM.Start_Time AS Start_Time, SM.End_Time AS End_Time,                       
								SM.Shift_Day+' - '+SM.Description+' - '+
								CONVERT(NVARCHAR(255),SM.Start_Time,100) +' - '+ CONVERT(NVARCHAR(255),SM.End_Time,100)  as 'Description' ,

								CASE WHEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) < 0 THEN DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100))) * -1 ELSE DATEDIFF(hour,GETDATE() , CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + 
									+ ' ' + CONVERT(CHAR(8), SM.Start_Time, 100)))
									END DiffInHours
									
					FROM	Shift_Master SM
					INNER JOIN Doctor_Clinic_Shift DCS 
							ON SM.Shift_ID = DCS.Shift_ID
					INNER JOIN Clinic_Master CM
							ON DCS.Clinic_ID = CM.Clinic_ID
					INNER JOIN Doctor_Master DM
							ON DM.Doctor_ID = CM.Doctor_ID 
					WHERE	DM.Doctor_ID = @p_nvar_Doctor_Id
					AND		CM.Clinic_ID = @p_nvar_ClinicId
					AND		SM.Shift_Day = @P_nvar_TodaysDay
					AND		DCS.Doctor_ID= @p_nvar_Doctor_Id
			)
			
			
			SELECT Shift_ID, Description,Start_Time FROM ShifTimes
			--WHERE		CAST(@p_Future_Time AS time) BETWEEN Start_Time AND End_Time			
			ORDER BY DiffInHours ASC	
       

	END TRY
	BEGIN CATCH
	SELECT	ERROR_NUMBER() AS ErrorNumber,
			ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END



-------------------------





/****** Object:  StoredProcedure [dbo].[USP_Get_System_Param_Record]    Script Date: 11-Jan-18 12:05:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_SubCatagoryData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Get_SubCatagoryData]

	@p_var_CatShortDescription NVARCHAR(60),
	@p_var_DoctorID				NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
		SELECT 	CatSub_Description
		FROM	Prescription_SubCategory
		WHERE   Cat_Short_Name	=	@p_var_CatShortDescription
		AND		DOCTOR_ID		=	@p_var_DoctorID

		SELECT	Findings_Description,Procedure_Description
		FROM	Doctor_Procedure_Findings
		WHERE	Procedure_Description	=	@p_var_CatShortDescription

		SELECT 	[Billing_Subgroup_Name]
		FROM	[dbo].[Billing_SubGroup_Master]
		WHERE   Billing_Group_Name=@p_var_CatShortDescription
		AND     DOCTOR_ID		=	@p_var_DoctorID

		SELECT	Charges_Category,Charges_SubCategory
		FROM	[dbo].[IPD_BillData_CHARGESMASTER] BDM
		
		WHERE	[Charges_Category]			=	@p_var_CatShortDescription

		SELECT		[Category_Description],Findings_Description
		FROM		[dbo].[Gynec_Abdominal_Examination_Master]
		WHERE		[Category_Description] = @p_var_CatShortDescription
		ORDER BY	Findings_Description ASC
		
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON


















GO
/****** Object:  StoredProcedure [dbo].[USP_Get_SymptomData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 07 Sep 2016
-- Description  : This stored procedure will get the Symptom Record for manage Symptom
--  created By  : Varsha Khanre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_SymptomData]
	
	@p_var_DoctorID				NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

	SELECT		Short_Description,Complaint_Description,Priority_Value,ISNULL([Display_to_Operator],0) AS Display_to_Operator
	FROM		Complaint_Master
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY	Short_Description ASC

	SELECT		BDM.Billing_Details,BDM.Billing_Group_Name,BDM.Billing_Subgroup_Name,BDM.Default_Fees,BDM.Billing_Group_Name+'*'+BDM.Billing_Subgroup_Name+'*'+BDM.Billing_Details AS Billing_ID,
				BDM.Billing_Group_Name+'-'+BDM.Billing_Subgroup_Name+'-'+BDM.Billing_Details AS Billing_IIIC,ISNULL(BDM.[Isdefault],0) AS Isdefault,ISNULL(BDM.[Sequence_No],0) AS Sequence_No,
				ISNULL([Visit_Type],'') AS Visit_Type,BVT.Billing_VisitType_Description,BVT.Billing_VisitType_ID
	FROM		[dbo].[Billing_Details_Master] BDM

	INNER JOIN Billing_VisitType_Translations BVT

	ON			BDM.Visit_Type=BVT.Billing_VisitType_ID
	WHERE		DOCTOR_ID	=	@p_var_DoctorID

	ORDER BY	BDM.Sequence_No ASC--,Billing_Group_Name ASC,Billing_Subgroup_Name ASC,Billing_Details ASC


	SELECT	[Charges_Category],[Charges_SubCategory],[SortOrder],[Comments],[Amount],[Calculation_Type]
	FROM	[dbo].[IPD_BillData_CHARGESMASTER]
	WHERE	[Delete_Flag] = 0
	ORDER BY	[SortOrder]

	SELECT		IB.[IPD_Keyword],IB.[Charges_Category],IBC.[Charges_SubCategory],IBC.[SortOrder],IB.[Comments]
	FROM		[dbo].[IPD_BillData] IB
	INNER JOIN  IPD_BillData_CHARGESMASTER IBC
	ON			IB.Charges_Category = IBC.Charges_Category
	AND			IB.Charges_SubCategory	=	IBC.Charges_SubCategory
	WHERE		IB.[Delete_Flag] = 0
	AND			IBC.Delete_Flag = 0
	ORDER BY	[IPD_Keyword],IBC.[SortOrder]

	SELECT	[Description],[Unit_Price],[SortOrder]
	FROM	[dbo].[IPD_INVOICE_MEDICINEMASTER]
	WHERE	[Delete_Flag] = 0
	ORDER BY	[SortOrder]

	SELECT	[IPD_Keyword],[Description],[Quantity],[SortOrder]
	FROM	[dbo].[IPD_INVOICEDATA]
	WHERE	[Delete_Flag] = 0
	ORDER BY	[IPD_Keyword],[SortOrder]

	SELECT	[Category_Description],[Findings_Description]
	FROM	[dbo].[Gynec_Abdominal_Examination_Master]
	WHERE	ISNULL([Delete_Flag],0) = 0

	SELECT		[Charges_SubCategory],[SortOrder]
	FROM		[dbo].[IPD_SubCategory_CHARGESMASTER]
	WHERE		[Delete_Flag] = 0
	ORDER BY	[SortOrder]


	SELECT		Balance_Type,Balance_Subgroup_Name,Balance_Details,ID
	FROM		[dbo].[Balance_master]
	WHERE		DOCTOR_ID	=	@p_var_DoctorID

	--ORDER BY	Short_Description ASC
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON
















/****** Object:  StoredProcedure [dbo].[USP_Get_SubCatagoryData]    Script Date: 16-Jan-18 8:26:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_SymptomData_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 03 JAN 2019
-- Description  : This stored procedure will get the Symptom Record for manage Symptom for services
--  created By  : Neha
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_SymptomData_Services]
	
	@p_var_DoctorID				NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

	SELECT		Short_Description,Complaint_Description,Priority_Value,ISNULL([Display_to_Operator],0) AS Display_to_Operator
	FROM		Complaint_Master
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	ORDER BY	Short_Description ASC

	SELECT		BDM.Billing_Details,BDM.Billing_Group_Name,BDM.Billing_Subgroup_Name,BDM.Default_Fees,BDM.Billing_Group_Name+'*'+BDM.Billing_Subgroup_Name+'*'+BDM.Billing_Details AS Billing_ID,
				BDM.Billing_Group_Name+'-'+BDM.Billing_Subgroup_Name+'-'+BDM.Billing_Details AS Billing_IIIC,ISNULL(BDM.[Isdefault],0) AS Isdefault,ISNULL(BDM.[Sequence_No],0) AS Sequence_No,
				ISNULL([Visit_Type],'') AS Visit_Type
	FROM		[dbo].[Services_Billing_Details_Master] BDM

	
	WHERE		DOCTOR_ID	=	@p_var_DoctorID

	ORDER BY	BDM.Sequence_No ASC


	
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON



/****** Object:  StoredProcedure [dbo].[USP_Get_SymptomData_Services]    Script Date: 16-Jan-18 8:26:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_System_Param_Record]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author       :  INCRUST
-- Create date  : 10 Nov 2017
-- Description  : This stored procedure will get System_Param Record for Given DoctorID
--  created By  : Varsha Khanre
-- ===========================================================================================

CREATE PROCEDURE [dbo].[USP_Get_System_Param_Record]

@p_var_DoctorID				NVARCHAR(30),
@p_var_ClinicID				NVARCHAR(30)
	
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY

	SELECT		*
	FROM		System_Params
	WHERE		DOCTOR_ID	=	@p_var_DoctorID
	AND			Clinic_ID	=	@p_var_ClinicID
	

	


	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON







----------------------------------




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_Operator]    Script Date: 11-Jan-18 12:16:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :	INCRUST
-- Create date  :	14-Mar-2016
-- Description  :	This stored procedure will Get the Pending Record.
--					If Registration_Status will 'Q'then this Recoed Will be pending
--  created By  :	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TestReportDetails]
	@p_nvar_Patient_ID							NVARCHAR(32),
	@p_nvar_Doctor_ID							NVARCHAR(30),
	@p_int_patient_visit_no						int,
	@p_date_TodyasVisitDate						DATE,
	@p_int_Shift_ID								INT,
	@p_nvar_Clinic_ID							NVARCHAR(30)
	
AS
BEGIN
BEGIN TRY

															
		DECLARE @OnlyResultData int
		SET @OnlyResultData = 0

		IF NOT EXISTS(
		SELECT *,PVL.Lab_Test_Description,PVL.Parameter_Name from Patient_Visit_LabTestResults PVL
		WHERE PVL.Patient_ID=@p_nvar_Patient_ID AND
		--PVL.Doctor_ID=@p_nvar_Doctor_ID AND
		PVL.Patient_Visit_No=@p_int_patient_visit_no
		)
		SET @OnlyResultData=1;
       
       ;WITH TestParameters AS
                    (
                    SELECT LTM.Lab_Test_Description as Test_Name, LTM.Doctor_ID AS DOCTOR_ID,
                    CASE WHEN LTP.Parameter_Name IS NULL THEN LTM.Lab_Test_Description ELSE  LTP.Parameter_Name END AS Parameter_Name
                    FROM           Lab_Test_Master LTM 
                     Right JOIN     Lab_Test_Parameter LTP  
                                   ON   LTM.ID=LTP.Lab_Test_ID  AND
                                        LTM.Doctor_ID = LTP.Doctor_ID
								  WHERE	LTM.Doctor_ID=@p_nvar_Doctor_ID --AND	LTP.Doctor_ID=@p_nvar_Doctor_ID
                    ),
             
                    LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE               --PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                                  PV.Visit_Date	=	@p_date_TodyasVisitDate
                                 AND                 PV.Shift_ID    =   @p_int_Shift_ID
                                 AND                 PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 --AND               PV.Status_ID   =   5
                                 AND                 PV.Delete_Flag =   0
                                   
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, Shift_ID
                        FROM        Patient_Visits PV
                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_nvar_Doctor_ID
									CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND         Status_ID = 5 
                        AND         Delete_Flag = 0  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    



                                 SELECT 
                                                     
                                                     PVL.Lab_Test_Description as Test_Name,
                                                     PVL.Parameter_Name  AS Parameter_Name,
                                                     PVL.Visit_Date,
                                                     PVL.Patient_Visit_No ,  
                                                     PVL.Test_Parameter_Value,
                                                     PVL.Shift_ID,
                                                     PVL.Clinic_ID,
                                                     PVL.Doctor_ID,
                                                     PVL.Patient_ID   ,
                                               
                                                     
                                                     ISNULL(PV.Patient_Last_Visit_No,0) AS Patient_Last_Visit_No,

                                                     ISNULL(PVL.Doctor_Name,'') AS Doctor_Name,
                                                     ISNULL(PVL.Lab_Name,'') AS Lab_Name,
                                                     ISNULL(PVL.Report_Date,'') AS Report_Date,
													 ISNULL(PVL.Comment,'') AS Comment
                                                     
                                                     
                    
             
                                          FROM       Patient_Visit_LabTestResults PVL
                                               
                                          LEFT JOIN TestParameters LTP
                                                     ON     --PVL.Doctor_ID = LTP.Doctor_ID AND
                                                               LTRIM(RTRIM(PVL.Lab_Test_Description))= LTRIM(RTRIM(LTP.Test_Name))  AND
                                                               (LTRIM(RTRIM(PVL.Parameter_Name))) = LTRIM(RTRIM(LTP.Parameter_Name))  
                                        
                                        LEFT JOIN    Patient_Visits PV
                                                       ON   --PVL.Doctor_ID  = PV.Doctor_ID  AND
                                                                   PVL.Patient_ID = PV.Patient_ID AND
                                                                   
                                                                   PVL.Patient_Visit_No = PV.Patient_Visit_No
                                                                   
                                                               WHERE 
                                                               --PVL.Doctor_ID = @p_nvar_Doctor_ID AND
                                                               PVL.Patient_ID = @p_nvar_Patient_ID AND 
                                                               PVL.Patient_Visit_No =@p_int_patient_visit_no AND
                                                               PVL.Delete_Flag = 0 AND (PV.Delete_Flag = 0  OR PV.Delete_Flag IS NULL) 
															   --and PV.Status_ID != 5
															   --and PV.Status_ID = 1
		/*													    
UNION ALL 

                                                               SELECT 
                                                     
                                               LTP.Test_Name as Test_Name,
                                               LTP.Parameter_Name  AS Parameter_Name,
                                               PVLT.Visit_Date,
                                               PVLT.Patient_Visit_No, 
                                               Null,
                                               PVLT.Shift_ID,
                                               PVLT.Clinic_ID,
                                               PVLT.Doctor_ID,
                                               PVLT.Patient_ID ,                                 
											   ISNULL(PV.Patient_Last_Visit_No,0) AS Patient_Last_Visit_No,
                                               NULL,NULL,NULL,NULL
             
                                        FROM                TestParameters LTP  
                                        LEFT JOIN    Patient_Visit_LabTestAsked PVLT
                                                     ON     --LTP.Doctor_ID = PVLT.Doctor_ID AND
                                                            LTRIM(RTRIM(LTP.Test_Name)) = LTRIM(RTRIM(PVLT.Lab_Test_Description))
                                        
                                        LEFT JOIN    Patient_Visits PV
                                                     ON     --PV.Doctor_ID = PVLT.Doctor_ID AND
                                                            PV.Patient_ID = PVLT.Patient_ID 
                                                            
                                               
                                               INNER JOIN  PatientWiseVisit PV1
                                 ON  --PV.Doctor_ID = PV1.Doctor_ID AND 
								 PV.Patient_ID = PV1.Patient_ID 
                                                      
                                                     AND PV1.Patient_Visit_No=PVLT.Patient_Visit_No                                                   
                                                                                             
                                                            
                                               WHERE   --PVLT.Doctor_ID = @p_nvar_Doctor_ID AND
                                                            PVLT.Patient_ID = @p_nvar_Patient_ID  AND
                                                            PV.Patient_Visit_No = @p_int_patient_visit_no AND
                                                            PVLT.Delete_Flag = 0 AND PV.Delete_Flag = 0
                                                            AND @OnlyResultData = 1
															and PV.Status_ID != 5
															--and PV.Status_ID = 1
															
                                               ORDER BY Test_Name,Parameter_Name ASC ;

											   */

	
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_FeesDetails]    Script Date: 15-Feb-18 12:13:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails_Update]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[USP_Get_TestReportDetails_Update] 

	@p_nvar_Patient_ID							NVARCHAR(32),
	--@p_nvar_Doctor_ID							NVARCHAR(30),
	@p_int_patient_visit_no						int,
	--@p_int_Shift_ID								INT,
	@p_nvar_Clinic_ID							NVARCHAR(30),
	@p_Lab_Test_Description						NVARCHAR(100)

	AS

	 begin
	 
	 
	 
	 update Patient_Visit_LabTestResults
	 set Delete_Flag=1
	 where Patient_ID=@p_nvar_Patient_ID
	 --and Doctor_ID=@p_nvar_Doctor_ID 
	 --and  Shift_ID=@p_int_Shift_ID 
	 and 
	 Clinic_ID=  @p_nvar_Clinic_ID 
	 And 
	 Lab_Test_Description=@p_Lab_Test_Description
	 	
	 
	 end; 




	 SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails1]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :	INCRUST
-- Create date  :	14-Mar-2016
-- Description  :	This stored procedure will Get the Pending Record.
--					If Registration_Status will 'Q'then this Recoed Will be pending
--  created By  :	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TestReportDetails1]
	@p_nvar_Patient_ID							NVARCHAR(32),
	@p_nvar_Doctor_ID							NVARCHAR(30),
	@p_int_patient_visit_no						int,
	@p_date_TodyasVisitDate						DATE,
	@p_int_Shift_ID								INT,
	@p_nvar_Clinic_ID							NVARCHAR(30)
	
AS
BEGIN
BEGIN TRY

															
		DECLARE @OnlyResultData int
		SET @OnlyResultData = 0

		IF NOT EXISTS(
		SELECT *,PVL.Lab_Test_Description,PVL.Parameter_Name from Patient_Visit_LabTestResults PVL
		WHERE PVL.Patient_ID=@p_nvar_Patient_ID AND
		--PVL.Doctor_ID=@p_nvar_Doctor_ID AND
		PVL.Patient_Visit_No=@p_int_patient_visit_no
		)
		SET @OnlyResultData=1;
       
       ;WITH TestParameters AS
                    (
                    SELECT LTM.Lab_Test_Description as Test_Name, LTM.Doctor_ID AS DOCTOR_ID,
                    CASE WHEN LTP.Parameter_Name IS NULL THEN LTM.Lab_Test_Description ELSE  LTP.Parameter_Name END AS Parameter_Name
                    FROM           Lab_Test_Master LTM 
                     Right JOIN     Lab_Test_Parameter LTP  
                                   ON   LTM.ID=LTP.Lab_Test_ID  AND
                                        LTM.Doctor_ID = LTP.Doctor_ID
								  WHERE	LTM.Doctor_ID=@p_nvar_Doctor_ID --AND	LTP.Doctor_ID=@p_nvar_Doctor_ID
                    ),
             
                    LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE               --PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                                  PV.Visit_Date	=	@p_date_TodyasVisitDate
                                 AND                 PV.Shift_ID    =   @p_int_Shift_ID
                                 AND                 PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 --AND               PV.Status_ID   =   5
                                 AND                 PV.Delete_Flag =   0
                                   
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, Shift_ID
                        FROM        Patient_Visits PV
                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_nvar_Doctor_ID
									CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND         Status_ID = 5 
                        AND         Delete_Flag = 0  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    



                                 SELECT 
                                                     
                                                     PVL.Lab_Test_Description as Test_Name,
                                                     PVL.Parameter_Name  AS Parameter_Name,
                                                     PVL.Visit_Date,
                                                     PVL.Patient_Visit_No ,  
                                                     PVL.Test_Parameter_Value,
                                                     PVL.Shift_ID,
                                                     PVL.Clinic_ID,
                                                     PVL.Doctor_ID,
                                                     PVL.Patient_ID   ,
                                               
                                                     
                                                     ISNULL(PV.Patient_Last_Visit_No,0) AS Patient_Last_Visit_No,

                                                     ISNULL(PVL.Doctor_Name,'') AS Doctor_Name,
                                                     ISNULL(PVL.Lab_Name,'') AS Lab_Name,
                                                     ISNULL(PVL.Report_Date,'') AS Report_Date,
													 ISNULL(PVL.Comment,'') AS Comment
                                                     
                                                     
                    
             
                                          FROM       Patient_Visit_LabTestResults PVL
                                               
                                          LEFT JOIN TestParameters LTP
                                                     ON     --PVL.Doctor_ID = LTP.Doctor_ID AND
                                                               LTRIM(RTRIM(PVL.Lab_Test_Description))= LTRIM(RTRIM(LTP.Test_Name))  AND
                                                               (LTRIM(RTRIM(PVL.Parameter_Name))) = LTRIM(RTRIM(LTP.Parameter_Name))  
                                        
                                        LEFT JOIN    Patient_Visits PV
                                                       ON   --PVL.Doctor_ID  = PV.Doctor_ID  AND
                                                                   PVL.Patient_ID = PV.Patient_ID AND
                                                                   
                                                                   PVL.Patient_Visit_No = PV.Patient_Visit_No
                                                                   
                                                               WHERE 
                                                               --PVL.Doctor_ID = @p_nvar_Doctor_ID AND
                                                               PVL.Patient_ID = @p_nvar_Patient_ID AND 
                                                               PVL.Patient_Visit_No =@p_int_patient_visit_no AND
                                                               PVL.Delete_Flag = 0 AND (PV.Delete_Flag = 0  OR PV.Delete_Flag IS NULL) 
															   --and PV.Status_ID != 5
															   --and PV.Status_ID = 1
		/*													    
UNION ALL 

                                                               SELECT 
                                                     
                                               LTP.Test_Name as Test_Name,
                                               LTP.Parameter_Name  AS Parameter_Name,
                                               PVLT.Visit_Date,
                                               PVLT.Patient_Visit_No, 
                                               Null,
                                               PVLT.Shift_ID,
                                               PVLT.Clinic_ID,
                                               PVLT.Doctor_ID,
                                               PVLT.Patient_ID ,                                 
											   ISNULL(PV.Patient_Last_Visit_No,0) AS Patient_Last_Visit_No,
                                               NULL,NULL,NULL,NULL
             
                                        FROM                TestParameters LTP  
                                        LEFT JOIN    Patient_Visit_LabTestAsked PVLT
                                                     ON     --LTP.Doctor_ID = PVLT.Doctor_ID AND
                                                            LTRIM(RTRIM(LTP.Test_Name)) = LTRIM(RTRIM(PVLT.Lab_Test_Description))
                                        
                                        LEFT JOIN    Patient_Visits PV
                                                     ON     --PV.Doctor_ID = PVLT.Doctor_ID AND
                                                            PV.Patient_ID = PVLT.Patient_ID 
                                                            
                                               
                                               INNER JOIN  PatientWiseVisit PV1
                                 ON  --PV.Doctor_ID = PV1.Doctor_ID AND 
								 PV.Patient_ID = PV1.Patient_ID 
                                                      
                                                     AND PV1.Patient_Visit_No=PVLT.Patient_Visit_No                                                   
                                                                                             
                                                            
                                               WHERE   --PVLT.Doctor_ID = @p_nvar_Doctor_ID AND
                                                            PVLT.Patient_ID = @p_nvar_Patient_ID  AND
                                                            PV.Patient_Visit_No = @p_int_patient_visit_no AND
                                                            PVLT.Delete_Flag = 0 AND PV.Delete_Flag = 0
                                                            AND @OnlyResultData = 1
															and PV.Status_ID != 5
															--and PV.Status_ID = 1
															
                                               ORDER BY Test_Name,Parameter_Name ASC ;

											   */

	
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_FeesDetails]    Script Date: 15-Feb-18 12:13:44 PM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetailsTest]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :	INCRUST
-- Create date  :	14-Mar-2016
-- Description  :	This stored procedure will Get the Pending Record.
--					If Registration_Status will 'Q'then this Recoed Will be pending
--  created By  :	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TestReportDetailsTest]
	@p_nvar_Patient_ID							NVARCHAR(32),
	@p_nvar_Doctor_ID							NVARCHAR(30),
	@p_int_patient_visit_no						int
	
AS
BEGIN

	DECLARE @OnlyResultData int
	SET @OnlyResultData = 0

	IF NOT EXISTS(
	SELECT *,PVL.Lab_Test_Description,PVL.Parameter_Name from Patient_Visit_LabTestResults PVL
	WHERE PVL.Patient_ID=@p_nvar_Patient_ID AND
	PVL.Doctor_ID=@p_nvar_Doctor_ID AND
	PVL.Patient_Visit_No=@p_int_patient_visit_no
	)
	SET @OnlyResultData=1;
	

	SET NOCOUNT ON;
	BEGIN TRY
	

				;WITH TestParameters AS
			(
			 SELECT LTM.Lab_Test_Description as Test_Name, LTM.Doctor_ID AS DOCTOR_ID,
			 CASE WHEN LTP.Parameter_Name IS NULL THEN LTM.Lab_Test_Description ELSE  LTP.Parameter_Name END AS Parameter_Name
			 FROM		   Lab_Test_Master LTM 
			 LEFT JOIN	   Lab_Test_Parameter LTP	
					  ON   LTM.ID=LTP.Lab_Test_ID  AND
						   LTM.Doctor_ID = LTP.Doctor_ID
			)
				SELECT 
								 --DISTINCT 
								LTP.Test_Name as Test_Name,
								LTP.Parameter_Name  AS Parameter_Name,
								PVL.Visit_Date,
								PVL.Patient_Visit_No ,  
								PVL.Test_Parameter_Value,
								PVL.Shift_ID,
								PVL.Clinic_ID,
								PVL.Doctor_ID,
								PVL.Patient_ID   ,
							
								--PVL.Patient_Visit_No,
								--PV.Patient_Visit_No,	
								ISNULL(PV.Patient_Last_Visit_No,0) AS Patient_Last_Visit_No
			
		
						  FROM			TestParameters LTP	
						  LEFT JOIN Patient_Visit_LabTestResults PVL
								ON     LTP.Doctor_ID=PVL.Doctor_ID AND
									   LTRIM(RTRIM(LTP.Test_Name)) = LTRIM(RTRIM(PVL.Lab_Test_Description))  AND
									   LTRIM(RTRIM(LTP.Parameter_Name))  = (LTRIM(RTRIM(PVL.Parameter_Name)))
						/*LEFT JOIN	Patient_Visit_LabTestAsked PVLT
								  ON	LTP.Doctor_ID = PVLT.Doctor_ID AND
										LTRIM(RTRIM(LTP.Test_Name)) = LTRIM(RTRIM(PVLT.Lab_Test_Description)) AND
										LTRIM(RTRIM(PVL.Lab_Test_Description)) = LTRIM(RTRIM(PVLT.Lab_Test_Description)) AND
										PVL.Patient_ID = PVLT.Patient_ID AND
										PVL.Doctor_ID = PVLT.Doctor_ID
										*/
						LEFT JOIN	Patient_Visits PV
								  ON	PVL.Doctor_ID  = PV.Doctor_ID  AND
										PVL.Patient_ID = PV.Patient_ID AND
										--PV.Patient_Last_Visit_No = PVLT.Patient_Visit_No AND
										--PV.Patient_ID = PVLT.Patient_ID 
										PVL.Patient_Visit_No = PV.Patient_Visit_No
										
									   WHERE 
									   PVL.Doctor_ID = @p_nvar_Doctor_ID AND
									   PVL.Patient_ID = @p_nvar_Patient_ID AND 
									   PVL.Patient_Visit_No = @p_int_patient_visit_no AND
									   PVL.Delete_Flag = 0 AND (PV.Delete_Flag = 0  OR PV.Delete_Flag IS NULL) 
		UNION ALL

						
							SELECT 
															 --DISTINCT 
															LTP.Test_Name as Test_Name,
															LTP.Parameter_Name  AS Parameter_Name,
															PVLT.Visit_Date,
															PVLT.Patient_Visit_No, 
														    PVL.Test_Parameter_Value,
															PVLT.Shift_ID,
															PVLT.Clinic_ID,
															PVLT.Doctor_ID,
															PVLT.Patient_ID ,
															--PVL.Patient_Visit_No,
															--PV.Patient_Visit_No	,
															
										ISNULL(PV.Patient_Last_Visit_No,0) AS Patient_Last_Visit_No
		
													  FROM			TestParameters LTP	
														LEFT JOIN	Patient_Visit_LabTestAsked PVLT
															  ON	LTP.Doctor_ID = PVLT.Doctor_ID AND
																	LTRIM(RTRIM(LTP.Test_Name)) = LTRIM(RTRIM(PVLT.Lab_Test_Description))
														LEFT JOIN Patient_Visit_LabTestResults PVL
															ON     LTP.Doctor_ID=PVL.Doctor_ID AND
																   PVL.Patient_ID=	PVLT.Patient_ID AND
																  -- PVL.Patient_Visit_No=PV.Patient_Visit_No	AND
																   LTRIM(RTRIM(PVL.Lab_Test_Description)) = LTRIM(RTRIM(PVLT.Lab_Test_Description))  AND
																   (LTRIM(RTRIM(PVL.Parameter_Name)) = LTRIM(RTRIM(LTP.Parameter_Name)))
														LEFT JOIN	Patient_Visits PV
															  ON	PV.Doctor_ID = PVLT.Doctor_ID AND
																	PV.Patient_ID = PVLT.Patient_ID 
																	--PV.Patient_Last_Visit_No = PVLT.Patient_Visit_No AND
																	
														
																	--This condition added to avoid duplicate parameters
															WHERE   PVLT.Doctor_ID = @p_nvar_Doctor_ID AND
																	PVLT.Patient_ID = @p_nvar_Patient_ID AND
																	PV.Patient_Visit_No = @p_int_patient_visit_no AND
																	PVLT.Delete_Flag = 0 AND PV.Delete_Flag = 0
																	AND @OnlyResultData = 1
															ORDER BY Test_Name,Parameter_Name,Test_Parameter_Value ASC ;

/*
				SELECT 
			     --DISTINCT 
				LTM.Lab_Test_Description as Test_Name,
				CASE WHEN LTP.Parameter_Name IS NULL THEN LTM.Lab_Test_Description ELSE  LTP.Parameter_Name END AS Parameter_Name,
				PVLT.Visit_Date,
				PVLT.Patient_Visit_No,  PVL.Test_Parameter_Value,
				PVLT.Shift_ID,
				PVLT.Clinic_ID,
				PVLT.Doctor_ID,
				PVLT.Patient_ID
		
		  FROM			Lab_Test_Master LTM 
		  LEFT JOIN	Lab_Test_Parameter LTP	
				  ON	LTM.ID=LTP.Lab_Test_ID  AND
						LTM.Doctor_ID = LTP.Doctor_ID
			INNER JOIN	Patient_Visit_LabTestAsked PVLT
			      ON	LTM.Doctor_ID = PVLT.Doctor_ID AND
						LTM.Lab_Test_Description = PVLT.Lab_Test_Description

			INNER JOIN	Patient_Visits PV
				  ON	PV.Doctor_ID = PVLT.Doctor_ID AND
						PV.Patient_ID = PVLT.Patient_ID AND
						PV.Patient_Last_Visit_No = PVLT.Patient_Visit_No
			LEFT JOIN Patient_Visit_LabTestResults PVL
				ON     PVL.Doctor_ID=PVLT.Doctor_ID AND
			           PVL.Patient_ID=	PVLT.Patient_ID AND
					   PVL.Patient_Visit_No=PV.Patient_Visit_No	AND
					   PVL.Lab_Test_Description = PVLT.Lab_Test_Description AND
					   PVL.Parameter_Name = LTP.Parameter_Name --This condition added to avoid duplicate parameters
				WHERE   PVLT.Doctor_ID = @p_nvar_Doctor_ID AND
						PVLT.Patient_ID = @p_nvar_Patient_ID AND
						PV.Patient_Visit_No = @p_int_patient_visit_no AND
						PVLT.Delete_Flag = 0 AND PV.Delete_Flag = 0
				ORDER BY Test_Name,Parameter_Name,Test_Parameter_Value ASC 
				*/

/*
				SELECT 
			     --DISTINCT 
				LTM.Lab_Test_Description as Test_Name,
				CASE WHEN LTP.Parameter_Name IS NULL THEN LTM.Lab_Test_Description ELSE  LTP.Parameter_Name END AS Parameter_Name,
				PVLT.Visit_Date,
				PVLT.Patient_Visit_No,  PVL.Test_Parameter_Value,
				PVLT.Shift_ID,
				PVLT.Clinic_ID,
				PVLT.Doctor_ID,
				PVLT.Patient_ID
		
		  FROM			Lab_Test_Master LTM 
		  LEFT JOIN	Lab_Test_Parameter LTP	
				  ON	LTM.ID=LTP.Lab_Test_ID  AND
						LTM.Doctor_ID = LTP.Doctor_ID
			INNER JOIN	Patient_Visit_LabTestAsked PVLT
			      ON	LTM.Doctor_ID = PVLT.Doctor_ID AND
						LTM.Lab_Test_Description = PVLT.Lab_Test_Description

			INNER JOIN	Patient_Visits PV
				  ON	PV.Doctor_ID = PVLT.Doctor_ID AND
						PV.Patient_ID = PVLT.Patient_ID AND
						PV.Patient_Last_Visit_No = PVLT.Patient_Visit_No
			LEFT JOIN Patient_Visit_LabTestResults PVL
				ON     PVL.Doctor_ID=PVLT.Doctor_ID AND
			           PVL.Patient_ID=	PVLT.Patient_ID AND
					   PVL.Patient_Visit_No=PV.Patient_Visit_No	AND
					   PVL.Lab_Test_Description = PVLT.Lab_Test_Description AND
					   PVL.Parameter_Name = LTP.Parameter_Name --This condition added to avoid duplicate parameters
				WHERE   PVLT.Doctor_ID = @p_nvar_Doctor_ID AND
						PVLT.Patient_ID = @p_nvar_Patient_ID AND
						PV.Patient_Visit_No = @p_int_patient_visit_no AND
						PVLT.Delete_Flag = 0 AND PV.Delete_Flag = 0
				ORDER BY Test_Name,Parameter_Name,Test_Parameter_Value ASC 

*/



	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END















/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetails]    Script Date: 16-Jan-18 8:26:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysAppointments_ForGivenDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  INCRUST
-- Create date: 13 nOV 2017
-- Description: This stored procedure will show appointment available on given date.
-- created By- Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysAppointments_ForGivenDate]

	@p_nvar_Doctor_Id			nvarchar(30),
	@p_nvar_ClinicId			nvarchar(10),
	@P_nvar_FutureDate			datetime,
	@p_var_Language_ID			INT
	
AS
  
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,



			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


	WHERE	Delete_Flag		=	0
	AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	12  AND Status_ID		!=	11 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time ASC


	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID,  DM.Prefix + ' '+DM.First_Name AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description,PV.Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID,STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,
				FU.FollowUp_Description AS follow_up_type
	FROM		Patient_Visits PV
	INNER JOIN	Patient_Master PM
	ON			PV.Patient_ID	=	PM.ID
	INNER JOIN	Doctor_Master DM
	ON			PV.Doctor_ID	=	DM.Doctor_ID
	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

	 INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	
	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type

	WHERE		Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND			Visit_Date		>	GETDATE()
	AND			( Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	12  AND Status_ID		!=	11 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY	Visit_Time ASC

	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' '+DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description,
			CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date, --PV.Visit_Date,
			PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID,STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time
			--
			,PV.Visit_Date as fulldate,
			Visit_Time as full_time
			,FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration
			--
	FROM		Patient_Visits PV
	INNER JOIN	Patient_Master PM
	ON			PV.Patient_ID	=	PM.ID
	INNER JOIN	Doctor_Master DM
	ON			PV.Doctor_ID	=	DM.Doctor_ID
	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID
	 INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	
	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type

	WHERE	Delete_Flag		=	0
	AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		>=	convert(datetime, convert(varchar(10), getdate(), 102))
	AND		( Status_ID		!=	5	AND Status_ID	!=	4 AND  Status_ID		!=	12  AND Status_ID		!=	11)
	AND		GT.Language_Id	=	@p_var_Language_ID

	--ORDER BY Visit_Time ASC
	ORDER BY fulldate asc, full_time ASC

	SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID,DM.Prefix + ' '+ DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description,
			CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date, --PV.Visit_Date,
			PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID,STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time

			--
			,PV.Visit_Date as fulldate,
			Visit_Time as full_time
			,FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration
			--


	FROM		Patient_Visits PV
	INNER JOIN	Patient_Master PM
	ON			PV.Patient_ID	=	PM.ID
	INNER JOIN	Doctor_Master DM
	ON			PV.Doctor_ID	=	DM.Doctor_ID
	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID
	 INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	
	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type

	WHERE		Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND			Visit_Date		=	@P_nvar_FutureDate
	AND			(Status_ID		!=	5	  AND  Status_ID	!=	4  AND Status_ID		!=	12  AND Status_ID		!=	11)
	AND			GT.Language_Id	=	@p_var_Language_ID

--	ORDER BY	Visit_Time ASC		
    ORDER BY fulldate asc, full_time ASC   

	END TRY
	BEGIN CATCH
	SELECT	ERROR_NUMBER() AS ErrorNumber,
			ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END









/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails]    Script Date: 31-Jan-18 3:22:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDash_Status_Completed]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  2-feb-2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Amol Badge
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDash_Status_Completed]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	;with SortVisitTime as
	(
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			AND		PV.Status_ID	=	5
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			
			

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					First_Name+' '+Middle_Name+' '+Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person, null as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No
					 
			FROM	Patient_Payments_AdHoc PPA
			
		
					
			
			INNER join Patient_Master PM ON 
			PM.ID  = PPA.Patient_ID AND PM.Doctor_ID = PPA.Doctor_ID

			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PPA.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID
			AND		GT.Language_Id	=	@p_language_ID  
			 )


			select * from SortVisitTime order by Visit_Time

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=4 or ID=5))
			AND		Doctor_ID = @p_nvar_Doctor_ID



			--filter for diffrence

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		GT.Language_Id	=	@p_language_ID  
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected

			ORDER BY Visit_Time


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time
			
			

			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetailsTest]    Script Date: 16-Jan-18 8:26:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDash_Status_Completed_params]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  2-feb-2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Amol Badge
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDash_Status_Completed_params]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	;with SortVisitTime as
	(
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			AND		PV.Status_ID	=	5
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			
			

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					First_Name+' '+Middle_Name+' '+Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person, null as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No
					 
			FROM	Patient_Payments_AdHoc PPA
			
		
					
			
			INNER join Patient_Master PM ON 
			PM.ID  = PPA.Patient_ID AND PM.Doctor_ID = PPA.Doctor_ID

			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PPA.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID
			AND		GT.Language_Id	=	@p_language_ID  
			 )


			select * from SortVisitTime order by Visit_Time

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=4 or ID=5))
			AND		Doctor_ID = @p_nvar_Doctor_ID



			--filter for diffrence

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		--SR.Doctor_ID	=	@p_nvar_Doctor_ID AND	
				PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			
		
			AND		--SR.Doctor_ID	=	@p_nvar_Doctor_ID AND
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		--SR.Doctor_ID	=	@p_nvar_Doctor_ID AND	
				PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		GT.Language_Id	=	@p_language_ID  
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected

			ORDER BY Visit_Time


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	5
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time
			
			

			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetailsTest]    Script Date: 16-Jan-18 8:26:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDash_Status_Completed_params_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Dec-2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Lina
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDash_Status_Completed_params_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	;with SortVisitTime as
	(
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			AND		PV.Status_ID	=	8
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			
			

--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					First_Name+' '+Middle_Name+' '+Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
--					0 AS In_Person, null as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No
					 
--			FROM	Patient_Payments_AdHoc PPA
			
		
					
			
--			INNER join Patient_Master PM ON 
--			PM.ID  = PPA.Patient_ID AND PM.Doctor_ID = PPA.Doctor_ID

--			LEFT JOIN  dbo.Payment_type_Master pd
--					ON  pd.ID = PPA.Payment_By_ID

--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID

--		   WHERE	
--				PPA.Created_On	=	@p_date_TodyasVisitDate
			
--			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID
--			AND		GT.Language_Id	=	@p_language_ID  
			 )


			select * from SortVisitTime order by Visit_Time

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=4 or ID=8))
			AND		Doctor_ID = @p_nvar_Doctor_ID



			--filter for diffrence

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		--SR.Doctor_ID	=	@p_nvar_Doctor_ID AND	
				PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			
		
			AND		--SR.Doctor_ID	=	@p_nvar_Doctor_ID AND
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		--SR.Doctor_ID	=	@p_nvar_Doctor_ID AND	
				PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		GT.Language_Id	=	@p_language_ID  
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected

			ORDER BY Visit_Time


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time
			
			

			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetailsTest]    Script Date: 16-Jan-18 8:26:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDash_Status_Completed_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Dec-2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Lina
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDash_Status_Completed_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	;with SortVisitTime as
	(
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			AND		PV.Status_ID	=	8
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			
			

--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					First_Name+' '+Middle_Name+' '+Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
--					0 AS In_Person, null as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No
					 
--			FROM	Patient_Payments_AdHoc PPA
			
		
					
			
--			INNER join Patient_Master PM ON 
--			PM.ID  = PPA.Patient_ID AND PM.Doctor_ID = PPA.Doctor_ID

--			LEFT JOIN  dbo.Payment_type_Master pd
--					ON  pd.ID = PPA.Payment_By_ID

--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID

--		   WHERE	
--				PPA.Created_On	=	@p_date_TodyasVisitDate
			
--			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID
--			AND		GT.Language_Id	=	@p_language_ID  
			 )


			select * from SortVisitTime order by Visit_Time

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=4 or ID=8))
			AND		Doctor_ID = @p_nvar_Doctor_ID



			--filter for diffrence

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected  AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		GT.Language_Id	=	@p_language_ID  
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected

			ORDER BY Visit_Time


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,First_Name+' '+Middle_Name+' '+Last_Name as Name,PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					First_Name+' '+Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Doctor_ID = PV.Doctor_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
					INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			

			
		
			AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Status_ID	=	8
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time
			
			

			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TestReportDetailsTest]    Script Date: 16-Jan-18 8:26:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Mar-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=3 then (DM.Prefix + ' ' +  gdd.First_Name)    
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					--Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
					--Is_follow_Up =IIF((ISNULL(Pv.Is_follow_Up,0)=0),'New','Follow up')
					Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )

			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID,
					'' As Is_follow_Up 
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time


				end
	else
				begin

					;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=3 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount,null as Net,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

	end
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_ALL]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Mar-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails_ALL]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=3 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and Role_Id=@p_int_Role_ID)
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and Role_Id=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
			ORDER BY Visit_Time


			
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_FoRCOMPOUNDER]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		INCRUST
-- Create date: 18-Mar-2016
-- Description:	This stored procedure will Get the Todyas Visit Details Record.
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails_FoRCOMPOUNDER]
	
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_int_Attended_By_ID		INT,
	@p_language_ID				INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  

			;with SortVisitTime as
	(
			SELECT  convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			--AND		ISNULL(PV.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,
					0 AS In_Person,  PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			 --left JOIN 	Patient_Visits PV
				--	ON   PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
		  -- PPA.Created_On=Pv.Visit_Date
					
			
			INNER join	Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID AND PM.Clinic_ID = PPA.Clinic_ID
			LEFT JOIN	dbo.Payment_type_Master pd
			ON			pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			INNER JOIN  Doctor_Master DM 
			ON			 DM.Doctor_ID = PPA.Doctor_ID

		   WHERE	
				
					PPA.Created_On	=	@p_date_TodyasVisitDate
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			--AND		ISNULL(PPA.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  

			)


			select * from SortVisitTime order by Visit_Time




END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 13-Feb-18 10:19:38 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_ForDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		INCRUST
-- Create date: 18-Mar-2016
-- Description:	This stored procedure will Get the Todyas Visit Details Record.
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails_ForDoctor]
	
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_int_Attended_By_ID		INT,
	@p_language_ID				INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  
  
if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin
			;with SortVisitTime as
	(
			SELECT  convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					,
					--Is_follow_Up =IIF(Pv.Is_follow_Up is null,'New','Follow Up')
					Is_follow_Up =IIF((ISNULL(Pv.Is_follow_Up,0)=0),'New','Follow up')
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			-- AND  ISNULL(PV.Attended_By_ID , 0) in ( @p_int_Attended_By_ID , 0) 
				AND		ISNULL(PV.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  
			AND     SR.ID <> '9'
			
			

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person,  PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,PPA.Doctor_ID
					,
					'' As Is_follow_Up 
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			 --left JOIN 	Patient_Visits PV
				--	ON   PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
		  -- PPA.Created_On=Pv.Visit_Date
					
			
			INNER join	Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID AND PM.Clinic_ID = PPA.Clinic_ID
			LEFT JOIN	dbo.Payment_type_Master pd
			ON			pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			INNER JOIN  Doctor_Master DM 
			ON			 DM.Doctor_ID = PPA.Doctor_ID

		   WHERE	
				
					PPA.Created_On	=	@p_date_TodyasVisitDate
			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		ISNULL(PPA.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  

			)


			select * from SortVisitTime order by Visit_Time

	end
	else

		begin


			;with SortVisitTime as
	(
			SELECT  convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV.Fees_To_Collect,
					IIF(PV.Fees_To_Collect = 0.00,null,PV.Fees_To_Collect) as Fees_To_Collect,
					PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
		-- AND  ISNULL(PV.Attended_By_ID , 0) in ( @p_int_Attended_By_ID , 0) 
			AND		ISNULL(PV.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  
			AND     SR.ID <> '9'
			
			

Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No,  Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
					0 AS In_Person,  PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			 --left JOIN 	Patient_Visits PV
				--	ON   PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
		  -- PPA.Created_On=Pv.Visit_Date
					
			
			INNER join	Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID AND PM.Clinic_ID = PPA.Clinic_ID
			LEFT JOIN	dbo.Payment_type_Master pd
			ON			pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			INNER JOIN  Doctor_Master DM 
			ON			 DM.Doctor_ID = PPA.Doctor_ID

		   WHERE	
				
					PPA.Created_On	=	@p_date_TodyasVisitDate
			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		ISNULL(PPA.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  
			--AND     SR.ID <> '9'
			)


			select * from SortVisitTime order by Visit_Time
	end


END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 13-Feb-18 10:19:38 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_ForDoctor_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Linakshi
-- Create date: 10-Dec-2019
-- Description:	This stored procedure will Get the Todyas Visit Details Record.
-- Created By : Linakshi
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails_ForDoctor_Services]
	
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_int_Attended_By_ID		INT,
	@p_language_ID				INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  
  
if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin
			;with SortVisitTime as
	(
			SELECT  convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					,
					--Is_follow_Up =IIF(Pv.Is_follow_Up is null,'New','Follow Up')
					Is_follow_Up =IIF((ISNULL(Pv.Is_follow_Up,0)=0),'New','Follow up')
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
			 AND  ISNULL(PV.Attended_By_ID , 0) in ( @p_int_Attended_By_ID , 0) 
				--AND		ISNULL(PV.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			

--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
--					0 AS In_Person,  PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,PPA.Doctor_ID
--					,
--					'' As Is_follow_Up 
					
					 
--			FROM	Patient_Payments_AdHoc PPA
			
--			 --left JOIN 	Patient_Visits_Services PV
--				--	ON   PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
--		  -- PPA.Created_On=Pv.Visit_Date
					
			
--			INNER join	Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID AND PM.Clinic_ID = PPA.Clinic_ID
--			LEFT JOIN	dbo.Payment_type_Master pd
--			ON			pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			INNER JOIN  Doctor_Master DM 
--			ON			 DM.Doctor_ID = PPA.Doctor_ID

--		   WHERE	
				
--					PPA.Created_On	=	@p_date_TodyasVisitDate
--			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
--			AND		ISNULL(PPA.Attended_By_ID,0) = @p_int_Attended_By_ID
--			AND		GT.Language_Id	=	@p_language_ID  

			)


			select * from SortVisitTime order by Visit_Time

	end
	else

		begin


			;with SortVisitTime as
	(
			SELECT  convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,PV.Attended_By as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0  
		    AND  ISNULL(PV.Attended_By_ID , 0) in ( @p_int_Attended_By_ID , 0) 
			--AND		ISNULL(PV.Attended_By_ID,0) = @p_int_Attended_By_ID
			AND		GT.Language_Id	=	@p_language_ID  
			
			
			

--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No,null as Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
--					0 AS In_Person,  PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,PPA.Doctor_ID
					
					 
--			FROM	Patient_Payments_AdHoc PPA
			
--			 --left JOIN 	Patient_Visits_Services PV
--				--	ON   PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
--		  -- PPA.Created_On=Pv.Visit_Date
					
			
--			INNER join	Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID AND PM.Clinic_ID = PPA.Clinic_ID
--			LEFT JOIN	dbo.Payment_type_Master pd
--			ON			pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			INNER JOIN  Doctor_Master DM 
--			ON			 DM.Doctor_ID = PPA.Doctor_ID

--		   WHERE	
				
--					PPA.Created_On	=	@p_date_TodyasVisitDate
--			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
--			AND		ISNULL(PPA.Attended_By_ID,0) = @p_int_Attended_By_ID
--			AND		GT.Language_Id	=	@p_language_ID  

			)


			select * from SortVisitTime order by Visit_Time
	end


END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 13-Feb-18 10:19:38 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  10-Dec-2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Linakshi
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	if CAST(@p_date_TodyasVisitDate AS DATE) = CAST(getdate() AS DATE)
	begin

	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID,
					Is_follow_Up = iif(PV.Is_follow_Up = null or PV.Is_follow_Up = 0 , 'New' , 'Follow up' )
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount, null as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID,
--					'' As Is_follow_Up 
					
					 
--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	=	@p_date_TodyasVisitDate
			
--			AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
--			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
--			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=8 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time


				end
	else
				begin

					;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=7 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=8 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=13 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					--when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
--Union All

--			SELECT  
--					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
--					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
--					null as Status_Description,null AS Status_ID,
--					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
--					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,null  as Original_Discount, null as discount,null as Net,
--					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
--					PM.First_Name+' '+PM.Last_Name as PartialName,
--					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
--					GT.Gender_Description,
--					0 AS Patient_Visit_No,
--					PPA.Doctor_ID
					
					 
--			FROM	Patient_Payments_AdHoc PPA
			
--			INNER join Patient_Master PM ON 
--						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
--			LEFT JOIN  dbo.Payment_type_Master pd
--						ON  pd.ID = PPA.Payment_By_ID
--			INNER JOIN	Gender_Translations GT
--			ON			PM.Gender_ID=GT.Gender_ID
--			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



--		   WHERE	
--				PPA.Created_On	=	@p_date_TodyasVisitDate
			
--			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
--			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
--			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
--			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
--			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=8 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,pv.Original_Discount  as Original_Discount, pv.discount as discount, PV.Fees_To_Collect - pv.Discount as Net,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,(PV.Fees_To_Collect- pv.discount)-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

	end
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_withoutShift]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Mar-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysDashboardDetails_withoutShift]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


	;with SortVisitTime as
	(
	select Doctor_ID,First_Name from Doctor_Master
	),

	get_daily_colln as(
	
			SELECT  
			convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PV.Patient_ID,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,
					case
					when SR.ID=1 then (DM.Prefix + ' ' +  gdd.First_Name) 
					when SR.ID=2 then (DM.Prefix + ' ' +  gdd.First_Name)  
					when SR.ID=4 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=5 then (DM.Prefix + ' ' +  gdd.First_Name)
					when SR.ID=11 then (DM.Prefix + ' ' +  gdd.First_Name)
					else ' ' end  Attended_By,

					
					PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,
					PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID 
					AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			LEFT JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

		   inner join SortVisitTime gdd on PV.Doctor_ID=gdd.Doctor_ID
			
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND     PV.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
		    AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0
			AND		GT.Language_Id	=	@p_language_ID  
			
				and  SR.ID <> '12'
			and  SR.ID <> '11'
Union All

			SELECT  
					convert(char(8),  PPA.Payment_Date, 108) as Visit_Time ,
					PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name, PPA.Patient_ID,
					null as Status_Description,null AS Status_ID,
					null as Fees_To_Collect,null as Fees_Collected,PPA.Fees_Collected as Adhoc_Fees,
					null as Original_Billed_Amount,PM.Folder_No, Comment,null as Diffrence,null as DUES,
					0 AS In_Person, PPA.Attended_By as Attended_By,PPA.Payment_By_ID, PPA.Payment_Remark, pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					0 AS Patient_Visit_No,
					PPA.Doctor_ID
					
					 
			FROM	Patient_Payments_AdHoc PPA
			
			INNER join Patient_Master PM ON 
						PM.ID  = PPA.Patient_ID --AND PM.Doctor_ID = PPA.Doctor_ID
			LEFT JOIN  dbo.Payment_type_Master pd
						ON  pd.ID = PPA.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			inner Join Doctor_Master DM on DM.Doctor_ID = PPA.Doctor_ID



		   WHERE	
				PPA.Created_On	=	@p_date_TodyasVisitDate
			
			--AND		PPA.Shift_ID		=	@p_int_Shift_ID 
			AND		PPA.Clinic_ID	=	@p_nvar_Clinic_ID   
			--AND		PPA.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND     PPA.Attended_By_ID	=(select ID  from User_Master UM inner join User_Role UR on UM.ID=UR.User_ID where UM.Doctor_ID=@p_nvar_Doctor_ID  and ID=@p_int_Role_ID)
			AND		GT.Language_Id	=	@p_language_ID  
				
			)

			
			select * from get_daily_colln order by Visit_Time;
			
			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND ( ID=4 or ID=5 OR ID=2))
			AND		Doctor_ID = @p_nvar_Doctor_ID
			

			--filter for diffrence


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time,PV.Patient_ID, 
			PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID	

			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
		--	AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		PV.Original_Billed_Amount=PV.Fees_To_Collect
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'

			ORDER BY Visit_Time
			


			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
					,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,PV.Patient_ID, 
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID

			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		((PV.Original_Billed_Amount>PV.Fees_To_Collect) OR (PV.Original_Billed_Amount<PV.Fees_To_Collect))
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time



			--for dues
			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,DM.First_Name+' '+DM.Middle_Name+' '+DM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					DM.First_Name+' '+DM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			--LEFT JOIN Patient_Payments_AdHoc PPA
			--       ON  PPA.Doctor_ID=PV.Doctor_ID AND PPA.Patient_ID=PV.Patient_ID and
			--	   PPA.Payment_Date=Pv.Visit_Date
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			WHERE	PV.Fees_To_Collect=PV.Fees_Collected
			AND		GT.Language_Id	=	@p_language_ID  

				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time

			SELECT  
					
					convert(char(8),  PV.Visit_Time, 108) as Visit_Time 
			,PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,PV.Patient_ID, 
					PV.Fees_To_Collect,PV.Fees_Collected,0.00 as Adhoc_Fees,PV.Original_Billed_Amount,PV.Folder_No,
					PV.Comment,PV.Original_Billed_Amount-PV.Fees_To_Collect AS Diffrence,PV.Fees_To_Collect-PV.Fees_Collected AS DUES,
					ISNULL(PV.In_Person,0) AS In_Person,(DM.Prefix + ' ' +  PV.Attended_By) as Attended_By,PV.Payment_By_ID,PV.Payment_Remark,pd.Payment_Description,
					PM.First_Name+' '+PM.Last_Name as PartialName,
					CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
					GT.Gender_Description,
					PV.Patient_Visit_No,PV.Doctor_ID
					
			FROM	Patient_Master PM 
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			INNER JOIN  dbo.Payment_type_Master pd
					ON  pd.ID = PV.Payment_By_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID
			Inner join Doctor_Master DM on DM.Doctor_ID=PV.Doctor_ID
			
		
			--AND		SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			
			--AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =	0 
			AND		GT.Language_Id	=	@p_language_ID  
			AND		((PV.Fees_To_Collect>PV.Fees_Collected) OR (PV.Fees_To_Collect<PV.Fees_Collected))
				and  SR.ID <> '12'
			and  SR.ID <> '11'
			ORDER BY Visit_Time


			
			
			
		
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END




/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 22-Feb-18 4:07:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysIPDDash_Status_CompletedForCollectionStatement]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  01-Jul-2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of completed status for daily Collection 1+0
-- Created By   :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysIPDDash_Status_CompletedForCollectionStatement]
   
	@p_date_TodyasVisitDate     DATE,
	@p_date_ToVisitDate         DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_language_ID				INT,
	@p_var_InsuranceDetails     NVARCHAR(max),
	@p_var_Category		        NVARCHAR(max)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
			;with AdvanceBillCollectionData as(
			
			select  convert(nvarchar(50),  DBH.Bill_Date, 106) As Bill_Date, DBH.Bill_No As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
					THEN PM.First_Name+' '+PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+PM.Last_Name 
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date, 
					 ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date  , AD.InsuranceDetails , DBH.Collected_Amount 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Hospital Bill' As Service_Render , DBH.Bill_Date as Date , DBH.Patient_ID
			, DBH.Bill_Date as billdateorder
			 from 
			[dbo].[Discharge_Bill_Hdr] DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
					where 
					--DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Bill_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate


			Union ALL
			select convert(nvarchar(50),  DBH.Advance_Date, 106) As Bill_Date, '' As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
				then	PM.First_Name+' '+ PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name 
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date, 
					 ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date  , AD.InsuranceDetails , DBH.Amount_Received 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Advance' As Service_Render , DBH.Date , DBH.Patient_ID
			, DBH.Advance_Date as billdateorder
			 from 
			[dbo].Advance_Collection_details DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
			where 
				--	DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Advance_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			)

			select * from AdvanceBillCollectionData  order by billdateorder asc
				--order by date , IPD_RefNo asc



						select convert(nvarchar(50),  DBH.Advance_Date, 106) As Bill_Date, '' As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
					then PM.First_Name+' '+ PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date, 
					ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date  , AD.InsuranceDetails , DBH.Amount_Received as Collected_Amount
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Advance' As Service_Render , DBH.Date , DBH.Patient_ID
			, DBH.Advance_Date as billdateorder
			 from 
			[dbo].Advance_Collection_details DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
			where 
					--DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
			 		DBH.Advance_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
					 order by billdateorder asc
		--	order by date , AD.IPD_RefNo asc




				select  convert(nvarchar(50),  DBH.Bill_Date, 106) As Bill_Date, DBH.Bill_No As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
					then PM.First_Name+' '+ PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name 
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date, 
					 ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date  , AD.InsuranceDetails , DBH.Collected_Amount 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Hospital Bill' As Service_Render , DBH.Bill_Date as Date , DBH.Patient_ID
				, DBH.Bill_Date as billdateorder
			 from 
			[dbo].[Discharge_Bill_Hdr] DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
					where 
					--DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Bill_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			 order by billdateorder asc
			--	order by date , AD.IPD_RefNo asc




					select  convert(nvarchar(50),  DBH.Bill_Date, 106) As Bill_Date, DBH.Bill_No As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
					then PM.First_Name+' '+ PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date, 
					ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date  , AD.InsuranceDetails , DBH.Collected_Amount 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Hospital Bill' As Service_Render , DBH.Bill_Date as Date , DBH.Patient_ID ,
					
					iif( DD.Payment_By_cat = '0'  , 'Normal' , CM.name  ) as Category
				, DBH.Bill_Date as billdateorder
			
			 from 
			[dbo].[Discharge_Bill_Hdr] DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo

			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
						left join CATEGORY_MASTER CM
			on CM.ID = DD.Payment_By_cat

					where 
					--DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Bill_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			--And		DD.Payment_By_cat = @p_var_Category
			order by billdateorder asc

			
					select  convert(nvarchar(50),  DBH.Bill_Date, 106) As Bill_Date, DBH.Bill_No As Bill_No, 
			 CASE 
				WHEN pm.Middle_Name IS NULL
					then PM.First_Name+' '+  PM.Last_Name
					ELSE PM.First_Name+' '+ PM.Middle_Name +' '+ PM.Last_Name
					end as Name
					, DBH.IPD_RefNo , DD.IPD_No , ISNULL(CONVERT(VARCHAR(11),DD.Admission_Date,106)+'-' + CONVERT(VARCHAR(11), DD.admission_time,108),'') as Admission_Date, 
					 ISNULL(CONVERT(VARCHAR(11),DD.Discharge_Date,106)+'-' + CONVERT(VARCHAR(11), DD.Discharge_Time,108),'') as Discharge_Date  , AD.InsuranceDetails , DBH.Collected_Amount 
					, DBH.Receipt_Number ,convert(nvarchar(50), PIR.Receipt_Date, 106) as Receipt_Date,  AD.Department , 'Hospital Bill' As Service_Render , DBH.Bill_Date as Date , DBH.Patient_ID  ,
					
					iif( DD.Payment_By_cat = '0'  , 'Normal' , CM.name  ) as Category
			, DBH.Bill_Date as billdateorder
			 from 
			[dbo].[Discharge_Bill_Hdr] DBH
			Left join Patient_Master PM
			ON
			PM.ID = DBH.Patient_ID
			Left Join Discharge_Data DD
			ON
			DD.IPD_RefNo = DBH.IPD_RefNo

			Left Join Admission_Data AD
			ON
			AD.IPD_RefNo = DBH.IPD_RefNo
			Left Join Patient_IPD_Receipts PIR
			ON
			PIR.Receipt_Number = DBH.Receipt_Number
			left join CATEGORY_MASTER CM
			on CM.ID = DD.Payment_By_cat

					where 
				--	DBH.Doctor_ID	=	@p_nvar_Doctor_ID AND
					DBH.Bill_Date between @p_date_TodyasVisitDate and @p_date_ToVisitDate
			And		AD.InsuranceDetails = @p_var_InsuranceDetails
			order by billdateorder asc

	END TRY	
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysMRVisitDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  13 Dec 2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysMRVisitDetails]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


				;WITH TodaysAllVisits AS (
								SELECT	MV.MR_ID ,CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108)) AS LAST_VISIT_DATE,
										MV.Company_Name,MM.First_name,Visit_Date,Visit_Time,MV.Doctor_ID, MM.Last_Name,MM.Short_Name,MV.Status_ID,
										MV.Shift_ID,MV.Clinic_ID,MM.Mobile_No,MM.[Middle_Name]
                                 FROM	[dbo].[MR_Visits] MV
								
								 inner join MR_Master MM ON MV.MR_ID = MM.MR_ID AND MV.Doctor_ID = MM.Doctor_ID
                           
                                 WHERE               MV.Doctor_ID	=   @p_nvar_Doctor_ID
                                 AND                 MV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND                 MV.Shift_ID    =   @p_int_Shift_ID
                                 AND                 MV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 AND                 MV.Delete_Flag =   0
								 AND				 MM.Delete_Flag	=	0
                            ),
						COMPLETEDVisists AS (

						SELECT      ROW_NUMBER() OVER (PARTITION BY MV.Company_Name ORDER BY MV.Visit_Date DESC,MV.VISIT_TIME DESC) AS ROWNUM,
									MV.Doctor_ID,MV.Visit_Date,MV.Visit_Time, MV.Shift_ID,MV.Company_Name,MV.MR_ID,MM.First_Name+' '+MM.Last_Name AS PREMR,LEFT(SM.Description,1) AS ShiftDesc,MM.Short_Name AS PreShortName,
									CONVERT(DATETIME, CONVERT(CHAR(8),MV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), MV.Visit_Time, 108)) VISITDATE
						FROM        [dbo].[MR_Visits] MV
									inner join MR_Master MM ON MV.MR_ID = MM.MR_ID AND MV.Doctor_ID = MM.Doctor_ID
									INNER JOIN [dbo].[Shift_Master] SM
									ON MV.Shift_ID = SM.Shift_ID
						WHERE        
                                         MV.Doctor_ID  =@p_nvar_Doctor_ID
                        AND               MV.Status_ID = 5 
                        AND               MV.Delete_Flag = 0 
						AND				MM.Delete_Flag=0 
						),
						GetOneRowEach AS
						(

						SELECT 
						
							MV.First_Name +' '+MV.Middle_Name+' '+MV.Last_name AS MRName,
							MV.Short_Name AS Short_Name,
							MV.Visit_Time AS CurrVisitTime, /* StatusDesc*/
							MV.Status_Id,
							MV.MR_ID,
							MV.Visit_Date,
							MV.Shift_Id,
							MV.Clinic_ID,
							MV.Doctor_ID,
							convert(varchar(11),MV.Visit_Time, 108) AS GetVisitTime,
							convert(varchar(11),TCV.Visit_Time, 108) AS Visit_Time, 
							MV.Mobile_No,
							ISNULL(CONVERT(VARCHAR(11),TCV.Visit_Date,106),'') AS PreVisitDate,
							TCV.ShiftDesc, /*ShiftDesc*/ 
							TCV.Shift_ID PreShitID, 
							UPPER(MV.Company_name) AS Company_name,
							PREMR AS PreMRName,
							PreShortName AS PreShortName,
							ISNULL(CONVERT(VARCHAR(11),TCV.Visit_Date,106),'')+'-'+TCV.ShiftDesc+'-'+PreShortName AS PreVisitDetails,
							ROW_NUMBER() OVER( PARTITION BY MV.Company_Name,MV.MR_ID ORDER BY TCV.VISIT_DATE DESC,TCV.VISIT_TIME DESC) AS ROWNUM1
							 
						
							FROM TodaysAllVisits MV
							LEFT JOIN COMPLETEDVisists TCV ON 
										MV.Company_Name = TCV.Company_Name AND
                                        TCV.VISITDATE < MV.LAST_VISIT_DATE
							
                                                             
						)
						SELECT * FROM GetOneRowEach GT      
						INNER JOIN		Status_Ref SR
										ON  GT.Status_ID = SR.ID AND GT.Clinic_ID = SR.Clinic_ID
							INNER JOIN		dbo.Status_Order SO
										ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id

						WHERE ROWNUM1 = 1   

						
							--AND			SR.Doctor_ID	=   @p_nvar_Doctor_ID
							AND          GT.Visit_Date	=	@p_date_TodyasVisitDate
							AND          GT.Shift_ID		=	@p_int_Shift_ID
							AND          GT.Clinic_ID	=	@p_nvar_Clinic_ID
							AND          GT.Doctor_ID	=	@p_nvar_Doctor_ID
							AND          SO.Role_Id      =	@p_int_Role_ID 
							
							ORDER BY SO.Sort_Order, GT.GetVisitTime  
                        
						
						SELECT  ID,
								Status_Description as Status
						FROM	Status_Ref   
						WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=7 or ID=8 OR ID=9 OR ID=13))
						AND		Doctor_ID = @p_nvar_Doctor_ID
						  
 


	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails_ForDoctor]    Script Date: 16-Jan-18 8:26:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================
-- Author       :  INCRUST
-- Create date  :  18-Mar-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Suyog Khairnar
-- Modified By	:	Varsha Khandre
-- Modified On	:	06 Oct 2017
-- ===========================================================================================

CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails]
   
		@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
	UNION ALL
SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
 NULL AS follow_up_type,NULL AS FollowUp_Description,
 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID
FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
--AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
 AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name  
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	B.FollowUp_Description,PV.Doctor_notes,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time --Added By Neha
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID  AND A.Patient_Visit_No != B.Patient_Visit_No AND  A.ROWNUM  = B.ROWNUM
	
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE PV.Doctor_ID=@p_nvar_Doctor_ID AND (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) and  SO.Status_Id <> '12'
		 --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=7 or ID=8 or ID=13))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref










/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates_IPD]    Script Date: 28-Feb-18 3:24:42 PM ******/
SET ANSI_NULLS ON








/****** Object:  StoredProcedure [dbo].[USP_Search_BillingDetails]    Script Date: 31-Jan-18 5:02:29 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_for patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Record if IPD parametr is on for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_for patient]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
	UNION ALL
SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
 NULL AS follow_up_type,NULL AS FollowUp_Description,
 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
--AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
    AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	AND			( PV.Status_ID		!=	5	AND PV.Status_ID	!=	4 AND PV.Status_ID		!=	12  AND PV.Status_ID		!=	11 )
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_ByDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record for all doctors
-- Created By   :  Varsha Khandre
-- =============================================
Create  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_For_ByDoctor]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date, CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
--	UNION ALL
--SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
--CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
--    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
-- NULL AS follow_up_type,NULL AS FollowUp_Description,
-- 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
--FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
--INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
--WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
----AND        PV.Shift_ID		=	1
--    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE PV.Doctor_ID=@p_nvar_Doctor_ID and (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=9 or ID=7 or ID=8 or ID=13))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record for all doctors
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_For_Operator]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date, CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
--	UNION ALL
--SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
--CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
--    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
-- NULL AS follow_up_type,NULL AS FollowUp_Description,
-- 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
--FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
--INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
--WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
----AND        PV.Shift_ID		=	1
--    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=9 or ID=7 or ID=8 or ID=13))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_Operator_AvalibeService]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Details Record for all doctors
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_For_Operator_AvalibeService]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits_Services
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits_Services PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND (Status_ID= 5  OR Status_ID= 8) 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits_Services PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND (Status_ID= 5  OR Status_ID= 8)
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date
    FROM Patient_Visits_Services PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
	and         (PV.[Status_ID] =7 OR  PV.[Status_ID] =8 OR PV.[status_ID]=13)
--	UNION ALL
--SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
--CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
--    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
-- NULL AS follow_up_type,NULL AS FollowUp_Description,
-- 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
--FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
--INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
--WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
----AND        PV.Shift_ID		=	1
--    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID
	and             (PV.[Status_ID] =7 OR  PV.[Status_ID] =8 OR PV.[status_ID]=13) --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate and        (PV.[Status_ID] =7 OR  PV.[Status_ID] =8 OR PV.[status_ID]=13)
		
	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate and         (PV.[Status_ID] =7 OR  PV.[Status_ID] =8 OR PV.[status_ID]=13)
	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits_Services PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) 
	       and         (PV.[Status_ID] =7 OR  PV.[Status_ID] =8 OR PV.[status_ID]=13)  --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=1 or ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=9 or ID=11 or ID=12 or ID=8))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_for_patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Record if IPD parametr is on for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_for_patient]
   
	@p_nvar_Doctor_Id			nvarchar(30),
	@p_nvar_ClinicId			nvarchar(10),
	@P_nvar_FutureDate			datetime,
	@p_var_Language_ID			INT,
	@p_var_Patient_ID    nvarchar(100)
	
	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY



						SELECT	  (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,

			--STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,

			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


		WHERE	Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	12  AND Status_ID		!=	11 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time ASC



							SELECT	 (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,



			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


		WHERE	Delete_Flag		=	0
	AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	12  AND Status_ID		!=	11 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time ASC
			







								SELECT	(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,



			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


		WHERE	Delete_Flag		=	0
	AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	and pv.Patient_ID      =@p_var_Patient_ID
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	12  AND Status_ID		!=	11 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time ASC





			

								SELECT	 STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,



			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


		WHERE	Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	--and pv.Patient_ID      =@p_var_Patient_ID
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		(Status_ID		!=	5	AND Status_ID	!=	4 AND Status_ID		!=	12  AND Status_ID		!=	11 )
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time ASC


		SELECT	top 10 (convert(varchar(5),PV.Visit_Time, 108)) AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,

			--STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,

			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID and Language_Id=1

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


		WHERE	Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		Status_ID		=	1
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time asc


	SELECT	  (convert(varchar(5),PV.Visit_Time, 108)) AS Visit_Time,PM.First_Name+' '+PM.Last_Name AS Name,
			PV.Doctor_ID, DM.Prefix + ' ' +DM.First_Name +' - '+ Speciality AS Doctor_Name, PM.Mobile_1 AS Mobile,PV.Patient_ID,
			CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
			GT.Gender_Description, CONVERT (CHAR(12),PV.Visit_Date, 105)as Visit_Date,PV.Visit_Time AS VTime,PV.Patient_Visit_No,SR.Status_Description,SR.ID AS Status_ID, STUFF (RIGHT (' '+ CONVERT(varchar(15), PV.From_time,0),7),6,0,' ')From_time,

			--STUFF (RIGHT (' '+ CONVERT(varchar(15), Visit_Time,0),7),6,0,' ') AS Visit_Time,

			--DATEADD(SECOND, - DATEDIFF(SECOND,  PV.From_time,  PV.Visit_Time), '00:00:00') as Duration,
			FU.FollowUp_Description AS follow_up_type,
			CONVERT(varchar(5),DATEADD(minute, DATEDIFF(minute, PV.Visit_Time,PV.From_time), 0), 114) AS Duration

	FROM	Patient_Visits PV
	INNER JOIN Patient_Master PM
	ON		PV.Patient_ID	=	PM.ID

	INNER JOIN	Doctor_Master DM
	ON		PV.Doctor_ID	=	DM.Doctor_ID

	INNER JOIN	Gender_Translations GT
	ON			PM.Gender_ID=GT.Gender_ID and Language_Id=1

   INNER JOIN  Status_Ref SR
    ON  PV.Status_ID = SR.ID  AND PV.Clinic_ID = SR.Clinic_ID

	 left join [Follow-Up_type] FU on
    FU.ID=PV.follow_up_type


		WHERE	Delete_Flag		=	0
	--AND		PV.Doctor_ID	=	@p_nvar_Doctor_Id
	AND		Visit_Date		=	@P_nvar_FutureDate
	AND		Status_ID=	1	
	AND		GT.Language_Id	=	@p_var_Language_ID

	ORDER BY Visit_Time asc OFFSET 10 ROWS
 FETCH NEXT 10 ROWS ONLY


	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_For_Pharmacist]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  15 Oct 2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record for all Pharmacist
-- Created By   :  Neha
-- =============================================
create  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_For_Pharmacist]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0 and(Status_ID =5 or Status_ID=4)
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND (Status_ID= 5 or Status_ID=4) 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND (Status_ID= 5 or Status_ID=4) 
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND (Status_ID= 5 or status_ID = 4) THEN '23:59:00' ELSE Visit_Time END as DummyVSTime, --changed
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
--	UNION ALL
--SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
--CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
--    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
-- NULL AS follow_up_type,NULL AS FollowUp_Description,
-- 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
--FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
--INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
--WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
----AND        PV.Shift_ID		=	1
--    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND   (PV.Status_ID= 5 or PV.Status_ID=4) 

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  (PV.Status_ID= 5 or PV.Status_ID=4) 

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	select  
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	INNER JOIN Visit_Prescription VP ON	VP.Patient_ID=PV.Patient_ID  --changeddddddddddddd
	--changed --WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) AND (B.Status_ID = 5 ) --B.Status_ID = 5 --AND A.ROWNUM = 1
	 --WHERE (B.Status_ID = 5 OR B.Status_ID = 4)
	--AND A.Patient_ID  = '01-03-2017-000159'
	
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC
							--select 	PM.First_Name+' '+PM.Last_Name as Name,SR.Status_Description,PV.Status_ID,
							--	PV.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
							--	PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
							--	PM.Mobile_1,CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
							--	CONVERT(int,ROUND(DATEDIFF(hour,Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
							--	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
							--	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
							-- DM.Prefix+' '+DM.First_Name AS DoctorName ,
							--	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility
 
							-- from Patient_Visits PV
							-- LEFT JOIN Patient_Master PM ON PV.Patient_ID = PM.ID 
							-- LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID 
							-- LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
							----LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
							-- where (Status_ID=5 or Status_ID= 4 ) and Visit_Date = @p_date_TodyasVisitDate 

						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Mar-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record.
-- Created By   :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_IPD]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
	UNION ALL
SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
 NULL AS follow_up_type,NULL AS FollowUp_Description,
 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID
FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
--AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
  AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name  
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	B.FollowUp_Description,PV.Doctor_notes,PV.Online_Appointment_Time --Added By Neha
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID  AND A.Patient_Visit_No != B.Patient_Visit_No AND  A.ROWNUM  = B.ROWNUM
	
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE PV.Doctor_ID=@p_nvar_Doctor_ID AND (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) and  SO.Status_Id <> '12'
		 --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref










/****** Object:  StoredProcedure [dbo].[USP_Get_PatientVisitDates_IPD]    Script Date: 28-Feb-18 3:24:42 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author       :  INCRUST
-- Create date  :  05 Oct 2017
-- Description  :  This stored procedure will Get the Todyas Visit Record if IPD parametr is on for operator
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetails_IPD_Operator]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
	SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
	WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0
	GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND Status_ID= 5 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND Status_ID = 5
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND Status_ID!= 5 THEN '23:59:00' ELSE Visit_Time END as DummyVSTime,
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
	UNION ALL
SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
 NULL AS follow_up_type,NULL AS FollowUp_Description,
 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
--AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5 shubham - incrust -11dec2018
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  PV.Status_ID = 5

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	SELECT 
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date,PV.Online_Appointment_Time --Added By Neha
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	 FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) --AND B.Status_ID = 5 --AND A.ROWNUM = 1
	--AND A.Patient_ID  = '01-03-2017-000159'
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC


						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   --WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
						    WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=9 or  ID=11 or ID=12))
						   AND		Clinic_ID = @p_nvar_Clinic_ID
			
			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  13 Dec 2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a MR
-- Created By   :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForMR]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_MR_ID				INT
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


			SELECT  MM.First_Name+' '+Middle_Name+' '+Last_Name as MRName,
					SR.Status_Description,SR.ID AS Status_ID,
					MV.MR_ID,MV.Visit_Date,MV.Shift_ID,MV.Clinic_ID,MV.Doctor_ID,
				    (convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,
				    MM.Mobile_No
				
			FROM		[dbo].[MR_Master] MM
			INNER JOIN 	 [dbo].[MR_Visits] MV

					ON  MM.MR_ID  = MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID
			LEFT JOIN  [MR_Visits] MV1
					ON  MV.Doctor_ID = MV1.Doctor_ID AND MV.MR_ID = MV1.MR_ID 
			INNER JOIN  Status_Ref SR
					ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		MV.Visit_Date	=	@p_date_TodyasVisitDate
			AND		MV.Shift_ID		=	@p_int_Shift_ID 
			AND		MV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		MV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     MV.Delete_Flag  =0
			and     MV.MR_ID=@p_nvar_MR_ID
			ORDER BY SO.Sort_Order, MV.Visit_Time 

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=4 or ID=4 or ID=5 or ID=11 or ID=12))
			AND		Doctor_ID = @p_nvar_Doctor_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Delete_IPD_Document]    Script Date: 16-Jan-18 7:50:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMRProfile]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  19 Dec 2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient.
-- Created By   :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForMRProfile]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_MR_ID				nvarchar(32),
	@p_nvar_visit_time			TIME
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	
			SELECT  PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.MR_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_No
					
			FROM		MR_Master PM
			INNER JOIN 	MR_Visits PV
					ON  PM.MR_ID  = PV.MR_ID AND PM.Doctor_ID = PV.Doctor_ID
			--LEFT JOIN  MR_Visits PV1
					--ON  PV.Doctor_ID = PV1.Doctor_ID AND PV.MR_ID = PV1.MR_ID --AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Doctor_ID = SR.Doctor_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	SR.Doctor_ID	=	@p_nvar_Doctor_ID 
			AND		PV.Visit_Date	=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		PV.Visit_Time	=	@p_nvar_visit_time
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Delete_Flag  =0
			and     pv.MR_ID=@p_nvar_MR_ID
			ORDER BY SO.Sort_Order, PV.Visit_Time 

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=4 or ID=5 or ID=11 or ID=12))
			AND		Doctor_ID = @p_nvar_Doctor_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMR]    Script Date: 16-Jan-18 8:26:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  25 July-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient.
-- Created By   :  Snehal Shinde
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForPatient]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32)

AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	/* WITH PatientLastVisitNo AS
			(
				SELECT ID as Patient_ID,Patient_Last_Visit_No,Doctor_ID   FROM Patient_Master
			),
	PatientReportAsked AS
			(
				SELECT  PV.Patient_ID,
						PV.Doctor_ID,
						ISNULL(Reports_Asked,0) AS Reports_Asked,
						PVN.Patient_Last_Visit_No
				FROM	Patient_Visits PV INNER JOIN PatientLastVisitNo PVN ON PV.Doctor_ID = PVN.Doctor_ID
				AND		PV.Patient_ID = 	PVN.Patient_ID
				AND		PV.Patient_Visit_No = PVN.Patient_Last_Visit_No

			)
    */

			SELECT  PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					PV.Patient_Visit_No,
					PV.Folder_No,
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_1,
					CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
					ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,
					PV.Reports_Received,(ISNULL(PV.In_Person,0))
			FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	--SR.Doctor_ID		=	@p_nvar_Doctor_ID 
					PV.Visit_Date		=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID			=	@p_int_Shift_ID 
			AND		PV.Clinic_ID		=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id			=	@p_int_Role_ID
			AND     PV.Delete_Flag		=	0
			and     pv.Patient_ID		=	@p_nvar_PatientID
			

			ORDER BY SO.Sort_Order, PV.Visit_Time 

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6))
			AND		Clinic_ID = @p_nvar_Clinic_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMRProfile]    Script Date: 16-Jan-18 8:26:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient_dash]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  25 July-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient.
-- Created By   :  Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForPatient_dash]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32),
	@p_visit_time               time
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	/* WITH PatientLastVisitNo AS
			(
				SELECT ID as Patient_ID,Patient_Last_Visit_No,Doctor_ID   FROM Patient_Master
			),
	PatientReportAsked AS
			(
				SELECT  PV.Patient_ID,
						PV.Doctor_ID,
						ISNULL(Reports_Asked,0) AS Reports_Asked,
						PVN.Patient_Last_Visit_No
				FROM	Patient_Visits PV INNER JOIN PatientLastVisitNo PVN ON PV.Doctor_ID = PVN.Doctor_ID
				AND		PV.Patient_ID = 	PVN.Patient_ID
				AND		PV.Patient_Visit_No = PVN.Patient_Last_Visit_No

			)
    */

			SELECT  PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					PV.Patient_Visit_No,
					PV.Folder_No,
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_1,
					CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
					ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,
					PV.Reports_Received,(ISNULL(PV.In_Person,0))
			FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	--SR.Doctor_ID		=	@p_nvar_Doctor_ID 
					PV.Visit_Date		=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID			=	@p_int_Shift_ID 
			AND		PV.Clinic_ID		=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id			=	@p_int_Role_ID
			AND     PV.Delete_Flag		=	0
			and     pv.Patient_ID		=	@p_nvar_PatientID
			and       (convert(varchar(11),PV.Visit_Time, 108))                  =  @p_visit_time
			ORDER BY SO.Sort_Order, PV.Visit_Time 

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
			AND		Clinic_ID = @p_nvar_Clinic_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetails_demo_1]    Script Date: 09-Feb-18 8:30:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient_dash_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  06-DEC-2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient For the services.
-- Created By   : 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForPatient_dash_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32),
	@p_visit_time               time
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	/* WITH PatientLastVisitNo AS
			(
				SELECT ID as Patient_ID,Patient_Last_Visit_No,Doctor_ID   FROM Patient_Master
			),
	PatientReportAsked AS
			(
				SELECT  PV.Patient_ID,
						PV.Doctor_ID,
						ISNULL(Reports_Asked,0) AS Reports_Asked,
						PVN.Patient_Last_Visit_No
				FROM	Patient_Visits PV INNER JOIN PatientLastVisitNo PVN ON PV.Doctor_ID = PVN.Doctor_ID
				AND		PV.Patient_ID = 	PVN.Patient_ID
				AND		PV.Patient_Visit_No = PVN.Patient_Last_Visit_No

			)
    */

			SELECT  PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					PV.Patient_Visit_No,
					PV.Folder_No,
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_1,
					CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
					ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,
					PV.Reports_Received,(ISNULL(PV.In_Person,0))
			FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits_Services PV  --Changed
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1 ---Changed
					ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	--SR.Doctor_ID		=	@p_nvar_Doctor_ID 
					PV.Visit_Date		=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID			=	@p_int_Shift_ID 
			AND		PV.Clinic_ID		=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id			=	@p_int_Role_ID
			AND     PV.Delete_Flag		=	0
			and     pv.Patient_ID		=	@p_nvar_PatientID
			and       (convert(varchar(11),PV.Visit_Time, 108))                  =  @p_visit_time
			ORDER BY SO.Sort_Order, PV.Visit_Time 

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=7 or ID=8 or ID=13))
			AND		Clinic_ID = @p_nvar_Clinic_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



/****** Object:  StoredProcedure [dbo].[USP_GET_PatientDetails_demo_1]    Script Date: 09-Feb-18 8:30:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient_Operator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  25 July-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient.
-- Created By   :  Snehal Shinde
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForPatient_Operator]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32),
	@p_nvar_status_id			Int
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	/* WITH PatientLastVisitNo AS
			(
				SELECT ID as Patient_ID,Patient_Last_Visit_No,Doctor_ID   FROM Patient_Master
			),
	PatientReportAsked AS
			(
				SELECT  PV.Patient_ID,
						PV.Doctor_ID,
						ISNULL(Reports_Asked,0) AS Reports_Asked,
						PVN.Patient_Last_Visit_No
				FROM	Patient_Visits PV INNER JOIN PatientLastVisitNo PVN ON PV.Doctor_ID = PVN.Doctor_ID
				AND		PV.Patient_ID = 	PVN.Patient_ID
				AND		PV.Patient_Visit_No = PVN.Patient_Last_Visit_No

			)
    */

	;with GetAllRecordForPatientInfo as(

			SELECT DISTINCT   PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV1.Status_ID as Status_ID,   --madhura
					PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					PV.Patient_Visit_No,
					PV.Folder_No,
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_1,
					CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
					ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,
					PV.Reports_Received,(ISNULL(PV.In_Person,0)) as In_Person
			FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits PV1
					ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id --AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	--SR.Doctor_ID		=	@p_nvar_Doctor_ID 
					PV.Visit_Date		=	@p_date_TodyasVisitDate   --madhura
			AND		PV.Shift_ID			=	@p_int_Shift_ID 
			AND		PV.Clinic_ID		=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id			=	@p_int_Role_ID
			AND     PV.Delete_Flag		=	0
			and     pv.Patient_ID		=	@p_nvar_PatientID
			AND   PV.Status_ID=@p_nvar_status_id   --madhura

			)
			select * from GetAllRecordForPatientInfo
			ORDER BY  Visit_Time;
			;

			--ORDER BY SO.Sort_Order, PV.Visit_Time 



			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6))
			AND		Clinic_ID = @p_nvar_Clinic_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMRProfile]    Script Date: 16-Jan-18 8:26:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient_Operator_For_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  30 Nov-2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient. for services
-- Created By   : Incrust
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForPatient_Operator_For_Services] 
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32),
	@p_nvar_status_id			Int
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	/* WITH PatientLastVisitNo AS
			(
				SELECT ID as Patient_ID,Patient_Last_Visit_No,Doctor_ID   FROM Patient_Master
			),
	PatientReportAsked AS
			(
				SELECT  PV.Patient_ID,
						PV.Doctor_ID,
						ISNULL(Reports_Asked,0) AS Reports_Asked,
						PVN.Patient_Last_Visit_No
				FROM	Patient_Visits PV INNER JOIN PatientLastVisitNo PVN ON PV.Doctor_ID = PVN.Doctor_ID
				AND		PV.Patient_ID = 	PVN.Patient_ID
				AND		PV.Patient_Visit_No = PVN.Patient_Last_Visit_No

			)
    */

	;with GetAllRecordForPatientInfo as(

			SELECT DISTINCT   PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					--PV1.Status_ID as Status_ID,   --madhura
					PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					PV.Patient_Visit_No,
					PV.Folder_No,
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_1,
					CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
					ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,
					PV.Reports_Received,(ISNULL(PV.In_Person,0)) as In_Person
			FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id --AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	--SR.Doctor_ID		=	@p_nvar_Doctor_ID 
					PV.Visit_Date		=	@p_date_TodyasVisitDate   --madhura
			AND		PV.Shift_ID			=	@p_int_Shift_ID 
			AND		PV.Clinic_ID		=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id			=	@p_int_Role_ID
			AND     PV.Delete_Flag		=	0
			and     pv.Patient_ID		=	@p_nvar_PatientID
			AND   PV.Status_ID=@p_nvar_status_id   --madhura

			)
			select * from GetAllRecordForPatientInfo
			ORDER BY  Visit_Time;
			;

			--ORDER BY SO.Sort_Order, PV.Visit_Time 



			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=8 or ID=6))
			AND		Clinic_ID = @p_nvar_Clinic_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMRProfile]    Script Date: 16-Jan-18 8:26:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  18-Dec-2019
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient.
-- Created By   :  Lina
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitDetailsForPatient_Services]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32)

AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY

	/* WITH PatientLastVisitNo AS
			(
				SELECT ID as Patient_ID,Patient_Last_Visit_No,Doctor_ID   FROM Patient_Master
			),
	PatientReportAsked AS
			(
				SELECT  PV.Patient_ID,
						PV.Doctor_ID,
						ISNULL(Reports_Asked,0) AS Reports_Asked,
						PVN.Patient_Last_Visit_No
				FROM	Patient_Visits_Services PV INNER JOIN PatientLastVisitNo PVN ON PV.Doctor_ID = PVN.Doctor_ID
				AND		PV.Patient_ID = 	PVN.Patient_ID
				AND		PV.Patient_Visit_No = PVN.Patient_Last_Visit_No

			)
    */

			SELECT  PM.First_Name+' '+Middle_Name+' '+Last_Name as Name,
					SR.Status_Description,SR.ID AS Status_ID,
					PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
					PV.Patient_Visit_No,
					PV.Folder_No,
				    (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
				    PM.Mobile_1,
					CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
					ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,
					PV.Reports_Received,(ISNULL(PV.In_Person,0))
			FROM		Patient_Master PM
			INNER JOIN 	Patient_Visits_Services PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID
			LEFT JOIN  Patient_Visits_Services PV1
					ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID AND PV.Patient_Last_Visit_No = PV1.Patient_Visit_No
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
			WHERE	--SR.Doctor_ID		=	@p_nvar_Doctor_ID 
					PV.Visit_Date		=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID			=	@p_int_Shift_ID 
			AND		PV.Clinic_ID		=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id			=	@p_int_Role_ID
			AND     PV.Delete_Flag		=	0
			and     pv.Patient_ID		=	@p_nvar_PatientID
			

			ORDER BY SO.Sort_Order, PV.Visit_Time 

			SELECT  ID,
					Status_Description as Status
			FROM	Status_Ref   
			WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=8))
			AND		Clinic_ID = @p_nvar_Clinic_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForMRProfile]    Script Date: 16-Jan-18 8:26:59 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitForPatient_ForDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  25 July-2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a patient.
-- Created By   :  Snehal Shinde
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_TodaysVisitForPatient_ForDoctor]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_PatientID			nvarchar(32),
	@p_nvar_status_id			Int,
	@P_int_Patient_Visit_No   INT
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY

		
			IF EXISTS 
		(	SELECT 
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	=  @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_PatientID
			AND	    Visit_Date=@p_date_TodyasVisitDate
			--AND		Patient_Visit_No	= @p_int_Patient_VisitNo 
		    
			AND		Delete_Flag = 0
				AND		  (Status_ID = 2 or Status_ID = 1)
			
			
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
			
			   
		 End
		 else
		 BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			   
		 End 
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	END
	











GO
/****** Object:  StoredProcedure [dbo].[USP_Get_TopDefaulters]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	:  05 Jul 2017
-- Description	:  This stored procedure will get top defaulters those amount is pending
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Get_TopDefaulters]
	
	@p_var_Doctor_ID	  NVARCHAR(30),
	@p_var_Language_ID	  INT,
	@p_var_defaulterCount  INT,
	@p_var_Clinic_ID	  NVARCHAR(32)

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		DECLARE @defaulter_count	 INT

		SET @defaulter_count=@p_var_defaulterCount;
		
		IF((@p_var_defaulterCount=null) or (@p_var_defaulterCount='')) 

		BEGIN
		
		 ;WITH FeesCollectionData AS 
		 (
			SELECT	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,
					pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,
					((pv.Fees_To_Collect-pv.Discount) - (pv.Fees_Collected )) as Balance,convert(char(8), pv.Visit_Time, 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name

			FROM	Patient_Master pm
			
			INNER JOIN Patient_Visits pv
			
			ON		pm.ID			=	Pv.Patient_ID --and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	
					--pm.Doctor_ID	=   @p_var_Doctor_ID AND	
				pv.Delete_Flag= 0 
			AND		pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND		pv.Fees_Collected IS NOT NULL 
			AND		pv.Status_ID=5
			AND		GT.Language_Id=@p_var_Language_ID
			--AND		pv.Clinic_ID=@p_var_Clinic_ID
			
			UNION ALL
			
			SELECT	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,
					pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,
					((pv.Fees_To_Collect-pv.Discount) - (pv.Fees_Collected )) as Balance,convert(char(8), pv.Visit_Time, 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name

			FROM	Patient_Master pm
			
			INNER JOIN Patient_Visits_Services pv
			
			ON		pm.ID			=	Pv.Patient_ID --and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	
					--pm.Doctor_ID	=   @p_var_Doctor_ID AND	
				pv.Delete_Flag= 0 
			AND		pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND		pv.Fees_Collected IS NOT NULL 
			AND		pv.Status_ID=8
			AND		GT.Language_Id=@p_var_Language_ID
		
			UNION ALL

			SELECT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
					Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
					[Fees_Collected] AS Collected , pm.Folder_No,	0 - [Fees_Collected]  AS Balance,
					convert(char(8), convert(time,Payment_Date), 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name
					
			FROM	Patient_Payments_AdHoc PV

			INNER JOIN Patient_Master pm  
			ON		pm.ID			=	Pv.Patient_ID --and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	--pm.Doctor_ID	=   @p_var_Doctor_ID AND
					pv.Delete_Flag	=	0 
			AND		GT.Language_Id	=	@p_var_Language_ID
			--AND		PV.Clinic_ID	=	@p_var_Clinic_ID

		) 

		SELECT  DISTINCT FC.Patient_ID, Full_Name,
				Folder_No, Mobile_1,
				AgeYearsIntRound,Gender_Description--,SUM(Balance) AS Total
				
				, Total_Bal.Total,PatientFull_Name
		FROM FeesCollectionData FC
		LEFT JOIN 
		(
			SELECT (SUM(Balance)) AS Total,Patient_ID  FROM FeesCollectionData GROUP BY Patient_ID
		) Total_Bal ON Total_Bal.Patient_ID=FC.Patient_ID

		WHERE Total_Bal.Total > 0

		ORDER BY Total DESC,Full_Name ASC

		END

		ELSE

		BEGIN
			 ;WITH FeesCollectionData AS 
		 (
			SELECT	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,
					pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,
					((pv.Fees_To_Collect-pv.Discount) - (pv.Fees_Collected )) as Balance,convert(char(8), pv.Visit_Time, 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name
			FROM	Patient_Master pm
			
			INNER JOIN Patient_Visits pv
			
			ON		pm.ID			=	Pv.Patient_ID-- and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	
					--pm.Doctor_ID	=   @p_var_Doctor_ID AND	
				pv.Delete_Flag= 0 
			AND		pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND		pv.Fees_Collected IS NOT NULL 
			AND		pv.Status_ID=5
			AND		GT.Language_Id=@p_var_Language_ID
			--AND		pv.Clinic_ID	=	@p_var_Clinic_ID
			
			
		
			UNION ALL

			SELECT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
					Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
					[Fees_Collected] AS Collected , pm.Folder_No,	0 - [Fees_Collected]  AS Balance,
					convert(char(8), convert(time,Payment_Date), 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name
					
			FROM	Patient_Payments_AdHoc PV

			INNER JOIN Patient_Master pm  
			ON		pm.ID			=	Pv.Patient_ID-- and
				--	PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	--pm.Doctor_ID	=   @p_var_Doctor_ID AND	
				pv.Delete_Flag	=	0 
			AND		GT.Language_Id=@p_var_Language_ID
			--AND		PV.Clinic_ID	=	@p_var_Clinic_ID
		) 

		SELECT  DISTINCT TOP(@defaulter_count) FC.Patient_ID, Full_Name,
				Folder_No, Mobile_1,
				AgeYearsIntRound,Gender_Description--,SUM(Balance) AS Total
				
				, Total_Bal.Total,PatientFull_Name
		FROM FeesCollectionData FC
		LEFT JOIN 
		(
			SELECT (SUM(Balance)) AS Total,Patient_ID  FROM FeesCollectionData GROUP BY Patient_ID
		) Total_Bal ON Total_Bal.Patient_ID=FC.Patient_ID

		WHERE Total_Bal.Total > 0

		ORDER BY Total DESC,Full_Name ASC
		END
		

	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END



















/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysVisitDetailsForPatient]    Script Date: 16-Jan-18 8:27:00 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ValidFolderNo]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =============================================
-- Author       :  INCRUST
-- Create date  :  23-Apr-2016
-- Description  :  This stored procedure will check folder Number is valid or not
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ValidFolderNo]
	@p_nvar_FolderNo      NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		  IF EXISTS 
		    (
		     SELECT Folder_No
		     FROM   Patient_Master 
		     WHERE  Folder_No=@p_nvar_FolderNo
		     )
		     BEGIN
		     SELECT 1 AS FLODER_STATUS;
		     END
		   ELSE
		     SELECT 0 AS FLODER_STATUS;

			 IF EXISTS
			 (
				SELECT Last_Name,First_Name,Gender_ID from Patient_Master
				WHERE Folder_No=@p_nvar_FolderNo
			 )
				BEGIN
				SELECT 1 AS FOLDER_DUPLICATE_MEMBER_STATUS;
				END
				ELSE
				SELECT 0 AS FOLDER_DUPLICATE_MEMBER_STATUS;

		   
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END


 
    
		     

   










/****** Object:  StoredProcedure [dbo].[USP_Get_TopDefaulters]    Script Date: 16-Jan-18 8:27:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ValidMR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  13 Dec 2016
-- Description  :  This stored procedure will check MR is valid or not
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ValidMR]
	@p_nvar_MR_ID			INT
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		  IF EXISTS 
		    (  
				 SELECT MM.Created_On,MR_ID,Company_Name,First_Name+Middle_Name+Last_Name as MRName
				 FROM  [dbo].[MR_Master]  MM
				 CROSS JOIN 
					(		
						SELECT CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + ' ' +CONVERT(CHAR(5), Getdate(), 108))
						AS
						ShiftTime
						FROM Shift_Master SM 
					) SM
				 WHERE  MM.MR_ID=@p_nvar_MR_ID 
				 
				 AND SM.ShiftTime >= MM.Created_On  
		     )
		     BEGIN
		     SELECT 1 AS PATIENT_STATUS;
		     END
		   ELSE
		     SELECT 0 AS PATIENT_STATUS;
		   
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END









/****** Object:  StoredProcedure [dbo].[USP_Get_ValidFolderNo]    Script Date: 16-Jan-18 8:27:05 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientId]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  23-Apr-2016
-- Description  :  This stored procedure will check Patient Id is valid or not
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ValidPatientId]
	@p_nvar_Patient_Id      NVARCHAR(32),
	@p_dt_TodayDate         DATETIME,
	@p_tintShiftId			TINYINT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		  IF EXISTS 
		    (
		     
				 SELECT PM.Created_On,ID,SM.ShiftTime 
				 FROM   Patient_Master PM
				 CROSS JOIN 
					(		
						SELECT CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + ' ' + CONVERT(CHAR(8), SM.End_Time, 108)) AS
						ShiftTime
						FROM Shift_Master SM WHERE SM.Shift_ID  = @p_tintShiftId
					) SM
				 WHERE  PM.ID=@p_nvar_Patient_Id AND SM.ShiftTime >= PM.Created_On  
		     )
		     BEGIN
		     SELECT 1 AS PATIENT_STATUS;
		     END
		   ELSE
		     SELECT 0 AS PATIENT_STATUS;
		   
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END









/****** Object:  StoredProcedure [dbo].[USP_Get_ValidMR]    Script Date: 16-Jan-18 8:27:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientIdregistration]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  23-Apr-2016
-- Description  :  This stored procedure will check Patient Id is valid or not
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ValidPatientIdregistration]
	@p_nvar_Patient_Id      NVARCHAR(32)
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		  IF EXISTS 
		    (  
				 SELECT distinct PM.Created_On,ID
				 FROM   Patient_Master PM
				 CROSS JOIN 
					(		
						SELECT CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + ' ' +CONVERT(CHAR(5), Getdate(), 108))
						--SELECT CAST(CONVERT(DATETIME, CONVERT(CHAR(8), Getdate(), 112) + ' ' +CONVERT(CHAR(5), Getdate(), 108))     AS smalldatetime) 
						AS
						ShiftTime
						FROM Shift_Master SM 
					) SM
				 WHERE  PM.ID=@p_nvar_Patient_Id --AND SM.ShiftTime >= PM.Created_On  
		     )
		     BEGIN
		     SELECT 1 AS PATIENT_STATUS;
		     END
		   ELSE
		     SELECT 0 AS PATIENT_STATUS;
		   
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END









/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientId]    Script Date: 16-Jan-18 8:27:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientRegistration]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  23-Apr-2016
-- Description  :  This stored procedure will return Registration date
--  created By  :  Snehal Shinde
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Get_ValidPatientRegistration]
	@p_nvar_Doctor_Id			NVARCHAR(30),
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_VisitDate			DATE,
	@p_int_shift_id				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		SELECT Date_Of_Registration 
		FROM Patient_Master
		WHERE ID=@p_nvar_Patient_Id

		SELECT	ISNULL(COUNT(Patient_ID), 0) AS CNTAPPT 
		FROM	Patient_Visits 
		WHERE	Patient_ID	=	@p_nvar_Patient_Id 
		AND		Visit_Date	=	@p_nvar_VisitDate
		AND		Doctor_ID	=	@p_nvar_Doctor_Id
		AND		Shift_ID	=	@p_int_shift_id
		AND		Status_ID	=	5
		AND		Delete_Flag =	0

		SELECT	ISNULL(COUNT(Patient_ID), 0) AS CNTDUMMYAPPT 
		FROM	Patient_Visits 
		WHERE	Patient_ID	=	@p_nvar_Patient_Id 
		AND		Visit_Date	=	@p_nvar_VisitDate
		AND		Shift_ID	=	@p_int_shift_id
		AND		Doctor_ID	=	@p_nvar_Doctor_Id
		AND		Status_ID	=	4
		AND		Delete_Flag =	0

		IF EXISTS
		(
		SELECT	* 
		FROM	Patient_Visits 
		WHERE	Patient_ID	=	@p_nvar_Patient_Id 
		AND		Visit_Date	=	@p_nvar_VisitDate
		AND		Shift_ID	=	@p_int_shift_id
		AND		Doctor_ID	=	@p_nvar_Doctor_Id
		AND		(Status_ID	=	1
		OR		Status_ID	=	2
		OR		Status_ID	=	3)
		AND		Delete_Flag =	0
		)
		BEGIN
		UPDATE	Patient_Visits SET Delete_Flag=1
			WHERE	Patient_ID	=	@p_nvar_Patient_Id 
			AND		Visit_Date	=	@p_nvar_VisitDate
			AND		Shift_ID	=	@p_int_shift_id
			AND		Doctor_ID	=	@p_nvar_Doctor_Id
			AND		(Status_ID	=	1
			OR		Status_ID	=	2
			OR		Status_ID	=	3)
			SELECT 1 AS SAVE_STATUS;
			
		END

		ELSE
		
		BEGIN
			SELECT 0 AS SAVE_STATUS;
		END

		
		
		
									

		

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END









/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientIdregistration]    Script Date: 16-Jan-18 8:27:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientTreatment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  23-Apr-2016
-- Description  :  This stored procedure will check if patient is complete or not for treament for 1+0 Modal
--  created By  :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Get_ValidPatientTreatment]
	@p_nvar_Doctor_Id			NVARCHAR(30),
	@p_nvar_Patient_Id			NVARCHAR(32),
	@p_nvar_VisitDate			DATE,
	@p_int_shift_id				INT
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		SELECT Date_Of_Registration 
		FROM Patient_Master
		WHERE ID=@p_nvar_Patient_Id

		SELECT	ISNULL(COUNT(Patient_ID), 0) AS CNTAPPT 
		FROM	Patient_Visits 
		WHERE	Patient_ID	=	@p_nvar_Patient_Id 
		AND		Visit_Date	=	@p_nvar_VisitDate
		AND		Doctor_ID	=	@p_nvar_Doctor_Id
		AND		Shift_ID	=	@p_int_shift_id
		AND		Status_ID	=	5
		AND		Delete_Flag =	0

		

	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END









/****** Object:  StoredProcedure [dbo].[USP_Get_ValidPatientRegistration]    Script Date: 16-Jan-18 8:27:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GetDDL_Department]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[USP_GetDDL_Department]
	   @p_nvar_Login_ID			NVARCHAR(50),
	   @p_nvar_Department_Name		NVARCHAR(50)

AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
	declare @default_doctor_id nvarchar(50),
	 @default_doctors_department_id nvarchar(50)


			  SELECT  distinct
						Department_Name as Name,
						Department_Name as ID

			  FROM		[dbo].[Doctors_Department]
		

		if EXISTS(  select  default_doctor , default_doctors_department  
					from User_Master where Login_Id = @p_nvar_Login_ID and default_doctor is not null
					and default_doctors_department is not null) 
			begin

			select  @default_doctor_id =   default_doctor  ,
				    @default_doctors_department_id = default_doctors_department
				    from User_Master where Login_Id = @p_nvar_Login_ID and default_doctor is not null and default_doctors_department is not null


			select @default_doctor_id as Selected_default_doctor  

			select @default_doctors_department_id as Selected_default_doctors_department_id  


			SELECT  
						Doctor_Name as Name,
						Doctor_Name as ID

			FROM		[dbo].[Doctors_Department]

			where department_name = @default_doctors_department_id

			end
			else
			begin
				select '0' as Selected_default_doctor  

				select '0' as Selected_default_doctors_department_id  


				SELECT  
						Doctor_Name as Name,
						Doctor_Name as ID

				FROM		[dbo].[Doctors_Department]

				where department_name = '0'
			end

			
			SELECT  
						Doctor_Name as Name,
						Doctor_Name as ID

			FROM		[dbo].[Doctors_Department]

			where		Department_Name = @p_nvar_Department_Name
		
		


	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON


















GO
/****** Object:  StoredProcedure [dbo].[USP_GetDDL_InsuranceComp]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetDDL_InsuranceComp]
AS
BEGIN

SET NOCOUNT ON;
BEGIN TRY

SELECT DISTINCT
[Company_Id] as ID,
[Company_Name] as Name

FROM [dbo].[Insurance_Company_Master]
where ISNULL(IsDeleted,0) !=1
ORDER BY Name

END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,
ERROR_MESSAGE() AS ErrorMessage;
END CATCH

END


SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GetDDL_PatientDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GetDDL_PatientDetails]
	
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRY
		
	
	SELECT [ID],
          [Name]
	FROM CATEGORY_MASTER
	ORDER BY ID ASC
--	ORDER BY Cat_Short_Name ASC

	  SELECT  
						ID,
						[Payment_Description]
			  FROM		[dbo].[Payment_type_Master]
			  ORDER BY ID ASC


			    SELECT  
						ID,
						[Title_Description]
			  FROM		[dbo].[Patient_Title]
			  ORDER BY ID ASC
	

		  SELECT  
						Department_Name as Name,
						Department_Name as ID
			  FROM		[dbo].[Doctors_Department]
		
		  SELECT   distinct
						InsuranceDetails as Name,
						InsuranceDetails as ID
			  FROM		[dbo].[Admission_Data]
			  where InsuranceDetails != '' and InsuranceDetails is not null


	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber, 
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
        
END


SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GetDoctorNews]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_GetDoctorNews]

	@p_var_doctor_id		NVARCHAR(30)
	
AS
BEGIN
	
	SET NOCOUNT ON;

   SELECT	DISTINCT News,From_Date,To_Date
   FROM		News_Data
   WHERE	Doctor_ID = @p_var_doctor_id 
   AND		(GETDATE() between From_Date and To_Date);

   
   

END
    





/****** Object:  StoredProcedure [dbo].[USP_Check_Enable_Print_Discharge]    Script Date: 16-Jan-18 7:47:47 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GetMRNames]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Incrust
-- Create date: 14 Dec 2016
-- Description:	This SP is used to get company names for MR Login
-- =============================================
CREATE PROCEDURE [dbo].[USP_GetMRNames]
	@p_nvar_company_name	NVARCHAR(200)
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT First_Name +' '+ Middle_Name +' '+ Last_Name AS MRNAME,LoginName,Mobile_No
	FROM MR_Master MM
	INNER JOIN  Company_Master CM
	ON	MM.Company_Name=CM.Company_Name
			
	WHERE CM.LoginName=@p_nvar_company_name
	AND MM.Delete_Flag=0
	AND	CM.Delete_Flag=0

	SELECT First_Name +' '+ Middle_Name +' '+ Last_Name AS MRNAME,LoginName
	FROM MR_Master MM
	INNER JOIN  Company_Master CM
	ON	MM.Company_Name=CM.Company_Name
			
	WHERE CM.Company_Name=@p_nvar_company_name
	AND MM.Delete_Flag=0
	AND	CM.Delete_Flag=0

	
	ORDER BY MR_ID ASC	 
END

/****** Object:  StoredProcedure [dbo].[USP_GetDoctorNews]    Script Date: 16-Jan-18 8:27:23 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_GetTodays_Patient_PatReg]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Snehal Shinde
-- =============================================
Create PROCEDURE [dbo].[USP_GetTodays_Patient_PatReg]

	@p_var_PatientId			NVARCHAR(60),
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT--,
	--@p_str_Mobile_Num				NVARCHAR(20)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY

		
                              

                     
                           
                           SELECT PM.First_Name+' '+Last_Name as Name,
						          PM.Age_Given as Age,
                                GT.Gender_Description   AS Gender,
								PM.Gender_ID,
								PM.Pincode as Pincode,
                               PM.Mobile_1 as Mobile,
							  PM.First_Name as First_Name,
							  PM. Last_Name as Last_Name,
							  PM.Middle_Name as Middle_Name,
							  PM.ID
							   
                               

                    FROM         Patient_Master PM

				left join Gender_Translations GT on
					pm.Gender_ID=GT.Gender_ID

					
			
			WHERE	
			--AND		PM.Shift_ID		=	@p_int_Shift_ID 
					PM.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			--AND		SO.Role_Id		=	@p_int_Role_ID
		   AND     PM.ID	=	@p_var_PatientId
		   And  GT.Language_Id=1
		   --AND  PM.Mobile_1= @p_str_Mobile_Num
			
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_SELECT_folderdetails]    Script Date: 16-Jan-18 8:16:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Abdomen_Findings]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the Abdomen findings details
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Abdomen_Findings]
 	
	@p_var_DoctorID													NVARCHAR(32),
	@p_var_category													NVARCHAR(100),
	@p_var_findings													NVARCHAR(100),
	@p_var_User_Id													NVARCHAR(90),
	@p_var_Insert_Findings_Data		UDT_Insert_Abdomen_Findings		READONLY
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE  [dbo].[Gynec_Abdominal_Examination_Master]	AS DM

	 USING(
			SELECT DISTINCT 
							[Category_Description]				AS CATEGORY,
							[Findings_Description]				AS FINDINGS
							
			FROM			@p_var_Insert_Findings_Data
		  )
	
	 AS	 SRC (
				CATEGORY,FINDINGS
			 )
	 ON		 (
				DM.[Category_Description]	= SRC.CATEGORY		AND
				DM.[Findings_Description]	= SRC.FINDINGS	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	
			DM.[Category_Description]			= SRC.CATEGORY,
			DM.[Findings_Description]			= SRC.FINDINGS,
			DM.Delete_Flag						= 0,
			DM.[ModifiedBy_Name]				= @p_var_User_Id,
			dm.[Modified_On]					= GETDATE()
			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(	[Doctor_ID],
					[Category_Description],
					[Findings_Description],	
					[Created_On],
					[CreatedBy_Name],
					[Modified_On],
					[ModifiedBy_Name],
					Delete_Flag			
				)
	VALUES
				(	@p_var_DoctorID,@p_var_category,@p_var_findings,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Area]    Script Date: 16-Jan-18 8:20:11 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_AdmissionCard]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author      :  INCRUST
-- Create date :  22 Feb 2019
-- Description :  This stored procedure will Save the Data In Patient Master table for duplicate patient
--  created By :  Vinay Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_AdmissionCard]
 @P_nvar_Patient_ID nvarchar(32)
 ,@P_nvar_Doctor_ID nvarchar(32)
 ,@P_nvar_Clinic_ID nvarchar(32)
 ,@p_var_IPD_Ref_No NVARCHAR(32)
,@P_nvar_RelativeName nvarchar(max) 
,@P_nvar_Relation nvarchar(max)
,@P_nvar_ContactNo nvarchar(max)
,@P_date_Admission_Date datetime
,@P_time_Admission_Time time(7)
,@P_nvar_ReasonAdmission nvarchar(max)
,@P_nvar_DeptId  nvarchar(100)
,@P_nvar_IsInsu bit
,@P_nvar_InsuDetails nvarchar(max)
,@P_nvar_TreDoctorID nvarchar(max)
,@P_nvar_ConsDoctorID nvarchar(max)
,@P_nvar_IPDFileNo nvarchar(max)
,@P_nvar_RoomType nvarchar(max)
,@P_nvar_PackageRemarks nvarchar(max)
,@p_int_Shift_id  tinyint
,@p_nvar_login_id nvarchar(30),
@p_nvar_bedNo nvarchar(30),
@p_nvar_ReferredDr nvarchar(50),
@p_nvar_CommentsNote nvarchar(1000),
@p_int_InsuComp_Id INT



AS
begin

 SET NOCOUNT ON;
	BEGIN TRY

	DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoIPD BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @strMonth NVARCHAR(3)

			--DECLARE @p_var_IPD_Ref_No NVARCHAR(30)

			IF NOT EXISTS(SELECT * FROM Admission_Data WHERE [Patient_ID]=@P_nvar_Patient_ID
		   --AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND [Clinic_ID]=@P_nvar_Clinic_ID
		   AND [IPD_RefNo]=@p_var_IPD_Ref_No
		   )
		   BEGIN

			SET  @p_var_IPD_Ref_No = ''

	IF ( LEN(LTRIM(RTRIM(@p_var_IPD_Ref_No))) <=0 )
			BEGIN
			--SELECT 1 AS SAVE_sAT
			SELECT @bintLastSequenceNoIPD = Last_SequenceNo, 
				   @strPrefixChar         = Prefix_Char,
				   @intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 
				WHERE 
			--	DOCTOR_ID = @P_nvar_Doctor_ID 
				Clinic_ID = @P_nvar_Clinic_ID 
				AND Entity_Type = 'IPD'

			PRINT @bintLastSequenceNoIPD

				IF(@bintLastSequenceNoIPD = 9999)
				BEGIN
					SET   @bintLastSequenceNoIPD = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoIPD = @bintLastSequenceNoIPD + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(4),@bintLastSequenceNoIPD)))

				SET @strMonth= SUBSTRING(CONVERT(nvarchar(6),getdate(), 112),5,2)
				
				
				SET   @p_var_IPD_Ref_No = @strPrefixChar + '-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY )+ '-' + @strMonth + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoIPD)
				 
				SET		@p_var_IPD_Ref_No = @p_var_IPD_Ref_No

				
			
				UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNoIPD
					  WHERE 
					  --DOCTOR_ID = @P_nvar_Doctor_ID AND
					  Clinic_ID = @P_nvar_Clinic_ID and
					   Entity_Type = 'IPD'
			END


INSERT INTO [dbo].Admission_Data
           ([Patient_ID]
		   ,[Doctor_ID]
           ,[Clinic_ID]
		   ,[IPD_RefNo]
           ,[RelativeName]
           ,[Relation]
           ,[ContactNo]
           ,[Admission_Date]
           ,[Admission_Time]
           ,[ReasonOfAdmission]
           ,[Department]
           ,[IsInsurance]
           ,[InsuranceDetails]
           ,[TreatingDoctor]
           ,[ConsultantDoctor]
           ,[IPDFileNo]
           ,[RoomNo]
           ,[PackageRemarks]
		   ,[shift_id]
		   ,Created_On 
		   ,CreatedBy_Name
		   ,BedNo
		   ,Referred_Doctor
		   ,Comments_Note
		   ,Insurance_Company_Id
		   )
     VALUES
           (@P_nvar_Patient_ID
		   ,@P_nvar_Doctor_ID
		   ,@P_nvar_Clinic_ID
		   ,@p_var_IPD_Ref_No
          , @P_nvar_RelativeName
           ,@P_nvar_Relation
           ,@P_nvar_ContactNo
           ,@P_date_Admission_Date
           ,@P_time_Admission_Time
           ,@P_nvar_ReasonAdmission
           ,@P_nvar_DeptId
           ,@P_nvar_IsInsu
           ,@P_nvar_InsuDetails
           ,@P_nvar_TreDoctorID 
           ,@P_nvar_ConsDoctorID
           ,@P_nvar_IPDFileNo
           ,@P_nvar_RoomType
           ,@P_nvar_PackageRemarks
		   ,@p_int_Shift_id
		   ,GETDATE()
		   ,@p_nvar_login_id,
		   @p_nvar_bedNo
		   ,@p_nvar_ReferredDr,
			@p_nvar_CommentsNote,
			CASE WHEN @p_int_InsuComp_Id='' THEN NULL ELSE @p_int_InsuComp_Id END)

		   SELECT 1 AS SAVE_STATUS;

			 INSERT INTO [dbo].[Discharge_Data]
			 (
				 [Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],[Admission_Date],[Admission_Time],
				 Treating_Doctor , Consulting_Doctor, IPD_No , CreatedBy_Name , Created_On ,BedNo , room , Referred_Doctor , Visit_Date 
			 )
			 VALUES
			 (
				 @P_nvar_Doctor_ID,@P_nvar_Clinic_ID,@P_nvar_Patient_ID,@p_var_IPD_Ref_No,@P_date_Admission_Date,@P_time_Admission_Time,
				 @P_nvar_TreDoctorID ,@P_nvar_ConsDoctorID , @P_nvar_IPDFileNo , @p_nvar_login_id , GETDATE() , @p_nvar_bedNo , @P_nvar_RoomType , @p_nvar_ReferredDr , @P_date_Admission_Date
			 )

			 select @p_var_IPD_Ref_No As IPD_RefNo
		   END
		   ELSE
		   BEGIN
		   SELECT 2 AS SAVE_STATUS;

		  
		   UPDATE [dbo].[Admission_Data]
           SET [RelativeName] =@P_nvar_RelativeName
           ,[Relation]=@P_nvar_Relation
           ,[ContactNo]=@P_nvar_ContactNo
           ,[Admission_Date]=@P_date_Admission_Date
           ,[Admission_Time]=@P_time_Admission_Time
           ,[ReasonOfAdmission]=@P_nvar_ReasonAdmission
           ,[Department]=@P_nvar_DeptId
           ,[IsInsurance]=@P_nvar_IsInsu
           ,[InsuranceDetails]=@P_nvar_InsuDetails
           ,[TreatingDoctor]= @P_nvar_TreDoctorID 
           ,[ConsultantDoctor]=@P_nvar_ConsDoctorID
           ,[IPDFileNo]=@P_nvar_IPDFileNo
           ,[RoomNo]=@P_nvar_RoomType
           ,[PackageRemarks]=@P_nvar_PackageRemarks
		   ,Modified_On = GETDATE()
		   ,ModifiedBy_Name = @p_nvar_login_id
		   ,BedNo = @p_nvar_bedNo
		   ,Referred_Doctor=     @p_nvar_ReferredDr
		   ,Comments_Note=   @p_nvar_CommentsNote
		   ,Insurance_Company_Id=CASE WHEN @p_int_InsuComp_Id='' THEN NULL ELSE @p_int_InsuComp_Id END
     WHERE  [Patient_ID]=@P_nvar_Patient_ID
		 --  AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND [Clinic_ID]=@P_nvar_Clinic_ID
		   AND [IPD_RefNo]=@p_var_IPD_Ref_No



		   	 UPDATE[dbo].[Discharge_Data]
			 set
				 [IPD_No] = @P_nvar_IPDFileNo,
				 [Admission_Date] =  @P_date_Admission_Date,
				 [Admission_Time] = @P_time_Admission_Time,
				 Treating_Doctor = @P_nvar_TreDoctorID,
				 Consulting_Doctor = @P_nvar_ConsDoctorID,
				 [BedNo]  = @p_nvar_bedNo
				 ,[Room] = @P_nvar_RoomType	  
				  ,Modified_On = GETDATE()
					,ModifiedBy_Name = @p_nvar_login_id
		   ,Referred_Doctor = @p_nvar_ReferredDr
			    WHERE  [Patient_ID]=@P_nvar_Patient_ID

		  -- AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND [Clinic_ID]=@P_nvar_Clinic_ID
		   AND [IPD_RefNo]=@p_var_IPD_Ref_No
			



		   END
		   END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_AdvanceCollection]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  22 Feb 2019
-- Description :  This stored procedure will Save the Data In Patient Master table for duplicate patient
--  created By :  Vinay Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_AdvanceCollection]
 @P_nvar_Patient_ID																	nvarchar(32)
 ,@P_nvar_Doctor_ID																	nvarchar(32)
 ,@P_nvar_Clinic_ID																	nvarchar(32)
 ,@p_var_IPD_Ref_No																	NVARCHAR(32)
 ,@P_datetime_Date																	datetime
 ,@P_Dec_Amount_Received															decimal(10,2)
 ,@P_int_Payment_ID																	tinyint
 ,@P_Var_Payment_Remark																NVARCHAR(100)
 ,@p_int_Shift_id																	tinyint
 ,@p_nvar_login_id																	nvarchar(30)
 ,@p_nvar_AdvanceDate																datetime



AS
begin

 SET NOCOUNT ON;
	BEGIN TRY

	

			--DECLARE @p_var_IPD_Ref_No NVARCHAR(30)

			IF NOT EXISTS(SELECT * FROM Advance_Collection_details WHERE
			   [Patient_ID]=@P_nvar_Patient_ID
		 --  AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND [Clinic_ID]=@P_nvar_Clinic_ID
		   AND [IPD_RefNo]=@p_var_IPD_Ref_No
		   And Date = @P_datetime_Date)
		   BEGIN


INSERT INTO [dbo].[Advance_Collection_details]
           ([Patient_ID]
		   ,[Doctor_ID]
           ,[Clinic_ID]
		   ,[IPD_RefNo]
           ,[Date]
		   ,[Amount_Received]
		   ,Payment_By_ID
		   ,Payment_Remark
		   ,[shift_id]
		   ,Created_On 
		   ,CreatedBy_Name
		   ,Advance_date
		   )
     VALUES
           (@P_nvar_Patient_ID
		   ,@P_nvar_Doctor_ID
		   ,@P_nvar_Clinic_ID
		   ,@p_var_IPD_Ref_No
		   , CONVERT(VARCHAR(19), @P_datetime_Date, 120)
		   ,@P_Dec_Amount_Received
		   ,@P_int_Payment_ID
		   ,@P_Var_Payment_Remark
		   ,@p_int_Shift_id
		   ,GETDATE()
		   ,@p_nvar_login_id
		   ,@p_nvar_AdvanceDate)

		   SELECT 1 AS SAVE_STATUS;

			
			 select @p_var_IPD_Ref_No As IPD_RefNo
		   END
		   ELSE
		   BEGIN
		   SELECT 2 AS SAVE_STATUS;

		   UPDATE [dbo].[Advance_Collection_details]
           SET 
		   Amount_Received = @P_Dec_Amount_Received
		   ,Payment_By_ID = @P_int_Payment_ID
		   ,Payment_Remark = @P_Var_Payment_Remark
		   ,Modified_On = GETDATE()
		   ,ModifiedBy_Name = @p_nvar_login_id
		   ,Advance_date = @p_nvar_AdvanceDate
     WHERE  [Patient_ID]=@P_nvar_Patient_ID
		--   AND [Doctor_ID]=@P_nvar_Doctor_ID
           AND [Clinic_ID]=@P_nvar_Clinic_ID
		   AND [IPD_RefNo]=@p_var_IPD_Ref_No
		   and Date = @P_datetime_Date
		   END
		   END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_AdvanceReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_AdvanceReceiptDetails]
	@Todays_VisitDate																		DATETIME,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Receipt_Data		[dbo].[UDT_Insert_Receipt_Hospital_Details]				READONLY,
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	--@p_var_Patient_Visit_No																int,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)	,						
	@p_var_Bill_No																			NVARCHAR(30),
	@P_Date																					datetime
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN


	----------Generate sequence no. of receipt no.---------------

	IF NOT EXISTS 
		(	SELECT	*
			FROM	Patient_IPD_Receipts
			WHERE	Receipt_Date	=	@Todays_VisitDate
			AND		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		Shift_ID		=	@p_var_Shift_ID
			AND		Receipt_Number	=	@p_var_Receipt_No
			AND		ISNULL(Visit_Type,'')		=	'A'	
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE  [Clinic_ID] = @p_var_Clinic_ID

			and entity_type = 'IRC'

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = 'I-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE  [Clinic_ID] = @p_var_Clinic_ID
					  and entity_type = 'IRC'
			END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------



	------Add and Update Receipt Details--------------------

	

	 MERGE  [dbo].[Patient_IPD_Receipts] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Receipt_Number]			AS RECEIPT_NO,
					 [Receipt_Date]				AS RECEIPT_DATE,
					 [Receipt_Type]				AS RECEIPT_TYPE,
					 [Receipt_Amount]			AS RECEIPT_AMOUNT,
					 [Shift_ID]					AS SHIFT_ID
	
			FROM	@p_var_Insert_Receipt_Data 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,RECEIPT_NO,RECEIPT_DATE,RECEIPT_TYPE,RECEIPT_AMOUNT,SHIFT_ID
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[Receipt_Number]			=SRCREM.RECEIPT_NO	AND
				MR.[Shift_ID]				=SRCREM.SHIFT_ID
				
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		--MR.[Receipt_Type]			= SRCREM.RECEIPT_TYPE,
				MR.[Receipt_Amount]			= SRCREM.RECEIPT_AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				MR.[Treatment_Details]		= @p_var_TreatmentDetails,
				MR.Title					= @p_var_Title,
				MR.[From_Date]				= @p_var_from_date,
				MR.[To_Date]				= @p_var_to_date

				
				

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type]
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,CONVERT(date,@Todays_VisitDate),@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,'A'
		);
		

		IF @p_var_Visit_Type='A'

		BEGIN
			UPDATE [dbo].Advance_Collection_details  set	[Receipt_Number]= @p_var_Receipt_No
			, Receipt_Date = @Todays_VisitDate 
			, [Charges_Details] = @p_var_TreatmentDetails
			WHERE	
			Date	 = @P_Date
			And 	
			Doctor_ID= @p_var_Doctor_ID
			AND		Clinic_ID= @p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			SELECT 1 AS SAVE_STATUS
				
		END
		else 
		begin
	SELECT 0 AS SAVE_STATUS

		end

	

	SELECT @p_var_Receipt_No AS Receipt_No

END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_Regenerate]    Script Date: 16-Jan-18 8:30:35 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Area]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the catagory in Prescription_Category
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Area]
	
	@p_var_CountryID NVARCHAR(6),
	@p_var_StateID NVARCHAR(6),
	@p_var_LanguageID INT,
	@p_var_City_ID nvarchar(6),
	@p_var_Area_ID nvarchar(6),
	@p_var_AreaName NVARCHAR(100)

 AS


 
 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
	declare
			@maxid		INT;
			

	SELECT @maxid=MAX(ID)  +1  FROM Area_Master;
		BEGIN TRY
		  IF NOT EXISTS(
		  SELECT CM.ID from  Area_Master CM 
		  where ID like @p_var_Area_ID 
		  )
		  begin
		  INSERT INTO  [dbo].[Area_Master](Country_ID,State_ID,City_ID,ID)
		  VALUES(@p_var_CountryID,@p_var_StateID,@p_var_City_ID,@maxid)

			 INSERT INTO [dbo].[Area_Translations]
			                    (
						         Country_ID,State_ID,City_ID,Language_Id, Area_Name,Area_ID
								)
			 VALUES   (@p_var_CountryID,@p_var_StateID,@p_var_City_ID,@p_var_LanguageID,@p_var_AreaName,@maxid)	
			 select 1 as SAVE_STATUS
			end
			ELSE
			begin
			select 0 as SAVE_STATUS
			end
			
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_BillData]    Script Date: 16-Jan-18 8:20:18 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Balance_BreakupData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================
-- Author	  : INCRUST
-- Create date: 04 May 2017
-- Description: This stored procedure will insert Patient Original billed amount Break-up data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Balance_BreakupData]

	@p_var_Insert_Patient_balance_details     [UDT_Insert_PatientBalance_Data_info] READONLY,
	@p_var_User_Id							NVARCHAR(32),
	@p_nvar_Doctor_ID						NVARCHAR(32),
	@p_tint_Shift_Id						INT,
	@p_nvar_Patient_Id						NVARCHAR(32),
	@p_nvar_Clinic_ID						NVARCHAR(32),
	@p_date_TodyasVisitDate					DATETIME,
	@p_var_Patient_Visit_No                    Int,
	@p_var_impression_comment				NVARCHAR(1000),
	@p_var_provisional_diagnosis			NVARCHAR(1000),
	@p_var_plan								NVARCHAR(1000),
	@p_var_FollowUp_Type			int,
	@p_var_FollowUpAfter    int

AS
BEGIN
	
	SET NOCOUNT ON;


	UPDATE [dbo].[Patient_Visit_Balanceinfo]
	SET		[Delete_Flag]=1,
	impression_comment		= @p_var_impression_comment,
	Provisional_Diagnosis=@p_var_provisional_diagnosis,
	balance_plan=@p_var_plan,
	followUp_Type=@p_var_FollowUp_Type,
	Follow_After=@p_var_FollowUpAfter

	WHERE	[Doctor_ID] = @p_nvar_Doctor_ID
	--AND		[Clinic_ID] = @p_nvar_Clinic_ID
	--AND		[Shift_ID] = @p_tint_Shift_Id
	AND		[Patient_ID] = @p_nvar_Patient_Id
	AND		[Visit_Date] = @p_date_TodyasVisitDate
	AND      Patient_Visit_No=@p_var_Patient_Visit_No
	AND		[Delete_Flag] = 0


	 MERGE [dbo].[Patient_Visit_Balanceinfo] as CM

	 USING(
			SELECT DISTINCT 
			       [Balance_id]	            AS Balance_Id,
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Balance_Group_Name]		AS  Balance_Group_Name,
					 [Balance_Subgroup_Name]	AS  Balance_Subgroup_Name,
					 [Balance_Details]			AS Balance_Details,
					 [Balance_comment]			AS balance_comment
					
							
			FROM	@p_var_Insert_Patient_balance_details 
		  )
	
	 AS	 SRC (
				Balance_Id,DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,Balance_Group_Name,Balance_Subgroup_Name,Balance_Details,balance_comment
			 )
	 ON		 (
	            CM.[Balance_id]	           = SRC.Balance_Id AND
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Balance_Group_Name]		=SRC.Balance_Group_Name	AND
				CM.[Balance_Subgroup_Name]	= SRC.Balance_Subgroup_Name AND
				CM.[Balance_Details]		= SRC.Balance_Details  AND
				CM.[Balance_comment]		= SRC.balance_comment 
				
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Balance_comment]		= SRC.balance_comment,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0
				
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			[Balance_id],Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Balance_Group_Name],[Balance_Subgroup_Name],[Balance_Details],[Balance_comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],impression_comment,Provisional_Diagnosis,balance_plan,followUp_Type,Follow_After
			)
	VALUES	(
				SRC.Balance_Id,SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.Balance_Group_Name,SRC.Balance_Subgroup_Name,SRC.Balance_Details,SRC.balance_comment,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,@p_var_impression_comment,
	@p_var_provisional_diagnosis,@p_var_plan,@p_var_FollowUp_Type,@p_var_FollowUpAfter);


	--INSERT INTO		[dbo].[Patient_Visit_BillingInfo](Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag])                  
	--		SELECT			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Billing_Group_Name,Billing_Subgroup_Name,Billing_Details,Default_fees,Collected_Fees,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
 --           FROM			@p_var_Insert_PatientBillingData
  
END



/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_BreakupData_Overwrite]    Script Date: 16-Jan-18 8:20:34 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_BillData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 29 July 2017
-- Description	: This stored procedure will insert and update the Bill details
-- Created By	: Varsha Khandre
-- =============================================
 
 CREATE PROCEDURE [dbo].[USP_Insert_BillData]
	
	
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Shift_ID																			TINYINT,
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_IPD_Ref_No																		NVARCHAR(100),
	@p_var_BillNo																			NVARCHAR(100),
	@p_var_BillDate																			DATETIME,
	@p_dec_TotalAmount																		DECIMAL(10,2),
	@p_dec_CollectedAmt																	    DECIMAL(10,2),
	@p_dec_Discount																			DECIMAL(10,2),
	@p_dec_Balance																			DECIMAL(10,2),
	@p_dec_NetAmount																		DECIMAL(10,2),
	@p_var_Comments																			NVARCHAR(1000),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Discharge_Data		UDT_Insert_Bill_Details_Date			READONLY,
	@p_dt_Insert_Bill_DataHdr			UDT_Update_Bill_Hdr									READONLY,
   @p_var_PaymentBy																			TINYINT,
   @p_var_PaymentRemark																		NVARCHAR(200),
   @p_var_AdjustAdvance																	DECIMAL(10,2),
   @p_var_TDS																DECIMAL(10,2)


	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN



	----------Generate sequence of IPD no.---------------

	IF NOT EXISTS 
		(	
		
			SELECT	*
			FROM	[dbo].[Discharge_Bill_Details]
			WHERE	
			 		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		[IPD_RefNo]		=	@p_var_IPD_Ref_No
			AND		[Bill_No]		=	@p_var_BillNo
			
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoIPD BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @strMonth NVARCHAR(3)
			
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_BillNo))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoIPD = Last_SequenceNo, 
					@strPrefixChar         = Prefix_Char,
					@intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 
				WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'BIL'

			

				IF(@bintLastSequenceNoIPD = 9999)
				BEGIN
					SET   @bintLastSequenceNoIPD = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoIPD = @bintLastSequenceNoIPD + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(4),@bintLastSequenceNoIPD)))

				SET @strMonth= SUBSTRING(CONVERT(nvarchar(6),getdate(), 112),5,2)
				
				
				SET   @p_var_BillNo = @strPrefixChar + '-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY )+ '-' + @strMonth + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoIPD)
				 
				SET		@p_var_BillNo = @p_var_BillNo

				

				UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNoIPD
					  WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'BIL'
			END          
	        
	    END


		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS

		UPDATE [dbo].[Discharge_Bill_Details] SET Delete_Flag = 1
		WHERE		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		[IPD_RefNo]		=	@p_var_IPD_Ref_No
			AND		[Bill_No]		=	@p_var_BillNo

		END

	----------------------------------------------------------------------------------------------------------------


		MERGE  [dbo].[Discharge_Bill_Hdr] as DH

		USING(
			SELECT DISTINCT 
					 
					 [Doctor_ID]				AS DOCTOR_ID_HD,
					 [Clinic_ID]				AS CLINIC_ID_HD,
					 [Patient_ID]				AS PATIENT_ID_HD,
					 [IPD_RefNo]				AS IPDREFNO_HD,
					 [Bill_No]					AS BILLNO_HD
					
					 
												
			FROM	@p_dt_Insert_Bill_DataHdr
		  )		

		  AS	 SRCHDR 
			 (
				DOCTOR_ID_HD,CLINIC_ID_HD,PATIENT_ID_HD,IPDREFNO_HD,BILLNO_HD
			 )
	 ON		 (
				DH.[Doctor_ID]				=SRCHDR.DOCTOR_ID_HD	AND
				DH.[Clinic_ID]				=SRCHDR.CLINIC_ID_HD	AND
				DH.[Patient_ID]				=SRCHDR.PATIENT_ID_HD	AND
				DH.[IPD_RefNo]				=SRCHDR.IPDREFNO_HD	AND
				DH.[Bill_No]				=SRCHDR.BILLNO_HD
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		
				DH.[Total_Amount]				= @p_dec_TotalAmount,
				DH.[Collected_Amount]			= @p_dec_CollectedAmt,
				DH.[Discount]					= @p_dec_Discount,
				DH.[Balance]					= @p_dec_Balance,
				DH.[Net_Amount]					= @p_dec_NetAmount,
				DH.[Comments]					= @p_var_Comments,
				DH.Is_Printed					= 0,
				DH.[Modified_On]				= GETDATE(),
			    DH.[ModifiedBy_Name]			= @p_var_User_Id,
				DH.Payment_by_id				= @p_var_PaymentBy,
				DH.Payment_remark				= @p_var_PaymentRemark,
				DH.Adjust_advance				= @p_var_AdjustAdvance,
				DH.TDS							= @p_var_TDS,
				DH.Bill_Date                    = @p_var_BillDate   --Update date (13-FEB-2020)



					

	WHEN NOT MATCHED THEN


	INSERT  (
			 [Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],[Bill_No],[Bill_Date],
			[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Total_Amount],[Collected_Amount],[Discount],
			[Balance],[Net_Amount],[Comments],[Is_Printed],Payment_by_id,Payment_remark, Adjust_Advance, TDS
			)
		
		VALUES(
				@p_var_Doctor_ID,@p_var_Clinic_ID,
				@p_var_Patient_ID,
				@p_var_IPD_Ref_No,
				@p_var_BillNo,
				@p_var_BillDate,
				GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
				@p_dec_TotalAmount,
				@p_dec_CollectedAmt,
				@p_dec_Discount,
				@p_dec_Balance,
				@p_dec_NetAmount,
				@p_var_Comments	,
				0,
				@p_var_PaymentBy,
				@p_var_PaymentRemark,
				@p_var_AdjustAdvance,
				@p_var_TDS
			);

	------Add and Update IPD Details--------------------
	
	

	 MERGE  [dbo].[Discharge_Bill_Details] as MR

	 USING(
			SELECT DISTINCT 
					 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [IPD_RefNo]				AS IPDREFNO,
					 [Bill_No]					AS BILLNO,
					 [Charges_Category]			AS CAT,
					 [Charges_SubCategory]		AS SUBCAT,
					 [Comments]					AS COMMENT,
					 [Amount]					AS AMOUNT,
					 --Changed from
					[UNITS]                    AS UNITS,
					 [TOTAL_AMOUNTS]            AS TOTAL_AMOUNTS,
                   [Calculation_Type]           AS Calculation_Type,
					[Date_Of_Service]		 AS Date_Of_Service,
					[Date_Of_Service_Hidden]		 AS Date_Of_Service_Hidden				
						
			FROM	@p_var_Insert_Discharge_Data
		  )										
	
	 AS	 SRCREM 
			 (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,IPDREFNO,BILLNO,CAT,SUBCAT,COMMENT,AMOUNT,UNITS,TOTAL_AMOUNTS,Calculation_Type,Date_Of_Service,Date_Of_Service_Hidden
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[IPD_RefNo]				=SRCREM.IPDREFNO	AND
				MR.[Bill_No]				=SRCREM.BILLNO		AND
				MR.[Charges_Category]		=SRCREM.CAT			AND
				MR.[Charges_SubCategory]	=SRCREM.SUBCAT      AND
				MR.[No_Of_Units]		    =SRCREM.UNITS      AND
				MR.[Total_Amount] 		    =SRCREM.TOTAL_AMOUNTS AND
				MR.[Calculation_Type]       =SRCREM.Calculation_Type AND
				MR.[Date_Of_Service]    =SRCREM.Date_Of_Service	AND
				MR.[Date_Of_Service_Hidden]    =SRCREM.Date_Of_Service_Hidden	
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		
				MR.[Charges_Category]		= SRCREM.CAT,
				MR.[Charges_SubCategory]	= SRCREM.SUBCAT,
				MR.[Comments]				= SRCREM.COMMENT,
				MR.[Amount]					= SRCREM.AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
			    MR.[Total_Amount] 		    =SRCREM.TOTAL_AMOUNTS,
				MR.[Calculation_Type]       =SRCREM.Calculation_Type,
				MR.[Date_Of_Service]     =SRCREM.Date_Of_Service,	
				MR.[Date_Of_Service_Hidden]     =SRCREM.Date_Of_Service_Hidden,	
				Delete_Flag					= 0
					

	WHEN NOT MATCHED THEN


	INSERT  (
			 [Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],
			 [Bill_No],[Charges_Category],[Charges_SubCategory],[Comments],[Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],
			 [No_Of_Units],[Total_Amount],[Calculation_Type],[Date_Of_Service],[Date_Of_Service_Hidden],Delete_Flag
			)
		
		VALUES(
				@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_IPD_Ref_No,
				@p_var_BillNo,SRCREM.CAT,SRCREM.SUBCAT,SRCREM.COMMENT,SRCREM.AMOUNT
				,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,SRCREM.UNITS,SRCREM.TOTAL_AMOUNTS,SRCREM.Calculation_Type,SRCREM.Date_Of_Service,SRCREM.Date_Of_Service_Hidden,0
				
			);


	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_IPD_Ref_No AS IPDNO

	SELECT @p_var_BillNo AS BILLNO

	SELECT @p_var_BillDate AS Bill_Date
	--UPDATE  Discharge_Bill_Hdr
	--		SET		Is_Printed			= 0,
	--				Modified_On			= GETDATE(),
	--				[ModifiedBy_Name]	= @p_var_User_Id

	--		WHERE	Patient_ID	= @p_var_Patient_ID
	--		AND		Doctor_ID	= @p_var_Doctor_ID
	--		AND		Clinic_ID	= @p_var_Clinic_ID
	--		AND		[IPD_RefNo]	= @p_var_IPD_Ref_No
	--		AND		[Bill_No]	= @p_var_BillNo	

END

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_BreakupData]    Script Date: 16-Jan-18 8:20:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_BreakupData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================
-- Author	  : INCRUST
-- Create date: 04 May 2017
-- Description: This stored procedure will insert Patient Original billed amount Break-up data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Billing_BreakupData]

	@p_var_Insert_PatientBillingData		UDT_Insert_PatientBillingData READONLY,
	@p_var_User_Id							NVARCHAR(32),
	@p_nvar_Doctor_ID						NVARCHAR(32),
	@p_tint_Shift_Id						INT,
	@p_nvar_Patient_Id						NVARCHAR(32),
	@p_nvar_Clinic_ID						NVARCHAR(32),
	@p_date_TodyasVisitDate					DATETIME,
	@p_nvar_Patient_Visit_No						NVARCHAR(32)
AS
BEGIN
	
	SET NOCOUNT ON;


	UPDATE [dbo].[Patient_Visit_BillingInfo]
	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_nvar_Doctor_ID
	AND		[Clinic_ID] = @p_nvar_Clinic_ID
	AND		[Shift_ID] = @p_tint_Shift_Id
	AND		[Patient_ID] = @p_nvar_Patient_Id
	AND		[Visit_Date] = @p_date_TodyasVisitDate
	AND		[Delete_Flag] = 0
	and		[Patient_Visit_No] = @p_nvar_Patient_Visit_No


	 MERGE [dbo].[Patient_Visit_BillingInfo] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Billing_Group_Name]		AS BILLING_GROUP_NAME,
					 [Billing_Subgroup_Name]	AS BILLING_SUBGROUPNAME,
					 [Billing_Details]			AS BILLING_DETAILS,
					 [Default_fees]				AS DEFAULT_FEE,
					 [Collected_Fees]			AS COLLECTED_FEES
							
							
			FROM	@p_var_Insert_PatientBillingData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,BILLING_GROUP_NAME,BILLING_SUBGROUPNAME,BILLING_DETAILS,DEFAULT_FEE,COLLECTED_FEES
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Billing_Group_Name]		=SRC.BILLING_GROUP_NAME	AND
				CM.[Billing_Subgroup_Name]	= SRC.BILLING_SUBGROUPNAME AND
				CM.[Billing_Details]		= SRC.BILLING_DETAILS  
				
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Collected_Fees]			= SRC.COLLECTED_FEES,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0
				
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag]
			)
	VALUES	(
				SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.BILLING_GROUP_NAME,SRC.BILLING_SUBGROUPNAME,SRC.BILLING_DETAILS,SRC.DEFAULT_FEE,SRC.COLLECTED_FEES,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			);


	--INSERT INTO		[dbo].[Patient_Visit_BillingInfo](Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag])                  
	--		SELECT			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Billing_Group_Name,Billing_Subgroup_Name,Billing_Details,Default_fees,Collected_Fees,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
 --           FROM			@p_var_Insert_PatientBillingData
  
END



/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_BreakupData_Overwrite]    Script Date: 16-Jan-18 8:20:34 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_BreakupData_For_Billing]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================
-- Author	  : INCRUST
-- Create date: 08 Nov 2019
-- Description: This stored procedure will insert Patient billed amount Break-up data for compounder/operator
-- Created By : 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Billing_BreakupData_For_Billing]

	@p_var_Insert_PatientBillingData		[UDT_Insert_PatientBillingData_services] READONLY,
	@p_var_User_Id								NVARCHAR(32),
	@p_nvar_Doctor_ID						NVARCHAR(32),
	@p_tint_Shift_Id						INT,
	@p_nvar_Patient_Id						NVARCHAR(32),
	@p_nvar_Clinic_ID						NVARCHAR(32),
	@p_date_TodyasVisitDate					DATETIME,
	@p_nvar_Patient_Visit_No				NVARCHAR(32),
	--changed
	@p_nvar_TotalAmt                        decimal(10,3),
    @p_nvar_CollectAmt                      decimal(10,3),
    @p_nvar_Discount                        decimal(10,3),
    @p_nvar_payment_by                      int,
    @p_nvar_remark                          NVARCHAR(100),
    @p_nvar_reason                          NVARCHAR(100), 
	@p_var_Status_Id                         int,
	@p_Var_RefferedBy                       NVARCHAR(1000)
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY

	UPDATE [dbo].[Patient_Visit_Services_BillingInfoOverwrite]
	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_nvar_Doctor_ID
	AND		[Clinic_ID] = @p_nvar_Clinic_ID
	AND		[Shift_ID] = @p_tint_Shift_Id
	AND		[Patient_ID] = @p_nvar_Patient_Id
	AND		[Visit_Date] = @p_date_TodyasVisitDate
	AND		[Delete_Flag] = 0
	AND		[Patient_Visit_No] = @p_nvar_Patient_Visit_No



	 MERGE [dbo].[Patient_Visit_Services_BillingInfoOverwrite] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Billing_Group_Name]		AS BILLING_GROUP_NAME,
					 [Billing_Subgroup_Name]	AS BILLING_SUBGROUPNAME,
					 [Billing_Details]			AS BILLING_DETAILS,
					 [Default_fees]				AS DEFAULT_FEE,
					 [Collected_Fees]			AS COLLECTED_FEES
							
							
			FROM	@p_var_Insert_PatientBillingData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,BILLING_GROUP_NAME,BILLING_SUBGROUPNAME,BILLING_DETAILS,DEFAULT_FEE,COLLECTED_FEES
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Billing_Group_Name]		=SRC.BILLING_GROUP_NAME	AND
				CM.[Billing_Subgroup_Name]	= SRC.BILLING_SUBGROUPNAME AND
				CM.[Billing_Details]		= SRC.BILLING_DETAILS  
				
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Collected_Fees]			= SRC.COLLECTED_FEES,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag]
			)
	VALUES	(
				SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.BILLING_GROUP_NAME,SRC.BILLING_SUBGROUPNAME,SRC.BILLING_DETAILS,SRC.DEFAULT_FEE,SRC.COLLECTED_FEES,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			);

			--changed
			
   UPDATE        [dbo].[Patient_Visits_Services]  
				SET			  Fees_Collected			= @p_nvar_CollectAmt,
							  Fees_To_Collect			= @p_nvar_TotalAmt,
							  Status_Id					= @p_var_Status_Id,
						
							  Comment					= @p_nvar_reason,
							  [Payment_By_ID]			= @p_nvar_payment_by,
							  [Payment_Remark]			= @p_nvar_remark,
							  Modified_On				= GETDATE(),
							  ModifiedBy_Name			= @p_var_User_Id,
							  Discount					= @p_nvar_Discount,
							  Original_Billed_Amount	= @p_nvar_TotalAmt,
							  Referred_By               = @p_Var_RefferedBy

							  --Patient_Last_Visit_No		= @p_var_Patient_Visit_No
				WHERE         Visit_Date				= @p_date_TodyasVisitDate 
				AND			  Patient_Visit_No			= @p_nvar_Patient_Visit_No 
				AND			  Shift_ID					= @p_tint_Shift_Id 
				AND			  Clinic_ID					= @p_nvar_Clinic_ID 
				AND			  Doctor_ID					= @p_nvar_Doctor_ID 
				AND			  Patient_ID				= @p_nvar_Patient_Id


				END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH












	--INSERT INTO	[dbo].[Patient_Visit_BillingInfoOverwrite]
	--			(
	--				Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag]
	--			)                  
	--SELECT		Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Billing_Group_Name,Billing_Subgroup_Name,Billing_Details,Default_fees,Collected_Fees,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
 --   FROM		@p_var_Insert_PatientBillingData
  
END





SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_BreakupData_Overwrite]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================
-- Author	  : INCRUST
-- Create date: 07 May 2017
-- Description: This stored procedure will insert Patient billed amount Break-up data for compounder/operator
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Billing_BreakupData_Overwrite]

	@p_var_Insert_PatientBillingData		UDT_Insert_PatientBillingData READONLY,
	@p_var_User_Id								NVARCHAR(32),
	@p_nvar_Doctor_ID						NVARCHAR(32),
	@p_tint_Shift_Id						INT,
	@p_nvar_Patient_Id						NVARCHAR(32),
	@p_nvar_Clinic_ID						NVARCHAR(32),
	@p_date_TodyasVisitDate					DATETIME,
	@p_nvar_Patient_Visit_No						NVARCHAR(32)
AS
BEGIN
	
	SET NOCOUNT ON;

	UPDATE [dbo].[Patient_Visit_BillingInfoOverwrite]
	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_nvar_Doctor_ID
	AND		[Clinic_ID] = @p_nvar_Clinic_ID
	AND		[Shift_ID] = @p_tint_Shift_Id
	AND		[Patient_ID] = @p_nvar_Patient_Id
	AND		[Visit_Date] = @p_date_TodyasVisitDate
	AND		[Delete_Flag] = 0
	AND		[Patient_Visit_No] = @p_nvar_Patient_Visit_No



	 MERGE [dbo].[Patient_Visit_BillingInfoOverwrite] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Billing_Group_Name]		AS BILLING_GROUP_NAME,
					 [Billing_Subgroup_Name]	AS BILLING_SUBGROUPNAME,
					 [Billing_Details]			AS BILLING_DETAILS,
					 [Default_fees]				AS DEFAULT_FEE,
					 [Collected_Fees]			AS COLLECTED_FEES
							
							
			FROM	@p_var_Insert_PatientBillingData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,BILLING_GROUP_NAME,BILLING_SUBGROUPNAME,BILLING_DETAILS,DEFAULT_FEE,COLLECTED_FEES
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Billing_Group_Name]		=SRC.BILLING_GROUP_NAME	AND
				CM.[Billing_Subgroup_Name]	= SRC.BILLING_SUBGROUPNAME AND
				CM.[Billing_Details]		= SRC.BILLING_DETAILS  
				
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Collected_Fees]			= SRC.COLLECTED_FEES,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag]
			)
	VALUES	(
				SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.BILLING_GROUP_NAME,SRC.BILLING_SUBGROUPNAME,SRC.BILLING_DETAILS,SRC.DEFAULT_FEE,SRC.COLLECTED_FEES,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			);














	--INSERT INTO	[dbo].[Patient_Visit_BillingInfoOverwrite]
	--			(
	--				Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,[Billing_Group_Name],[Billing_Subgroup_Name],[Billing_Details],[Default_fees],[Collected_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag]
	--			)                  
	--SELECT		Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Billing_Group_Name,Billing_Subgroup_Name,Billing_Details,Default_fees,Collected_Fees,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
 --   FROM		@p_var_Insert_PatientBillingData
  
END




/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_MasterData]    Script Date: 16-Jan-18 8:20:41 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 03-May-2017
-- Description	: This stored procedure will insert and update the Billing details in Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Billing_MasterData]	

	@p_var_group															NVARCHAR(50),
	@p_var_subgroup															NVARCHAR(50),
	@p_var_User_Id															NVARCHAR(90),
	@p_var_Insert_Billing_Data		[UDT_Insert_BillingDetail_MasterDataS_data]		READONLY,
	@p_var_detail															NVARCHAR(50),
	@p_var_default_fee														DECIMAL(10,2),
	@p_var_doctor_ID														NVARCHAR(30),
	@p_var_Sequence_no														INT,
	@p_var_Isdefault														bit,
	@p_var_VisitType														NVARCHAR(50)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	

	 MERGE [dbo].[Billing_Details_Master] AS DM

	 USING(
					 SELECT DISTINCT 
					 [OLD_GROUP]			AS [OLD_GROUP],
					 [OLD_SUBGROUP]			AS [OLD_SUBGROUP],
					 [OLD_DETAILS]			AS [OLD_DETAILS],
					 [OLD_AMOUNT]			AS [OLD_AMOUNT],
					 [NEW_GROUP]			AS [NEW_GROUP],
					 [NEW_SUBGROUP]			AS [NEW_SUBGROUP],
					 [NEW_DETAILS]			AS [NEW_DETAILS],
					 [NEW_AMOUNT]			AS	[NEW_AMOUNT],
					 [Doctor_Id] as [Doctor_Id],
				     [NEW_VISIT_TYPE] AS [NEW_VISIT_TYPE],
					 [OLD_VISIT_TYPE] AS [OLD_VISIT_TYPE]


				    
			FROM			@p_var_Insert_Billing_Data 
		  )
	
	 AS	 SRC (
				[OLD_GROUP],[OLD_SUBGROUP],[OLD_DETAILS],[OLD_AMOUNT],[NEW_GROUP],[NEW_SUBGROUP],[NEW_DETAILS],[NEW_AMOUNT],[Doctor_Id],[NEW_VISIT_TYPE],[OLD_VISIT_TYPE]
			 )
	 ON		 (
				DM.[Billing_Details]			= SRC.[OLD_DETAILS] AND
				DM.[Billing_Subgroup_Name]		= SRC.[OLD_SUBGROUP]  AND
				DM.[Billing_Group_Name]			= SRC.[OLD_GROUP] AND
				DM.[Doctor_Id]= SRC.[Doctor_Id] AND
				DM.[Visit_Type]=SRC.[OLD_VISIT_TYPE]
			 )	

	 WHEN MATCHED THEN
	
	UPDATE 
	 SET	
			DM.[Billing_Subgroup_Name]=@p_var_subgroup,
		DM.[Billing_Group_Name]=@p_var_group,
			DM.[Billing_Details]=@p_var_detail,
			DM.[Default_Fees]	=	SRC.[NEW_AMOUNT],
			
			DM.[Sequence_No]	=	@p_var_Sequence_no,
			DM.[Isdefault]		=	@p_var_Isdefault,
			DM.[Visit_Type]		=	@p_var_VisitType
			
			
			

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[Doctor_ID], [Billing_Details],[Billing_Subgroup_Name],[Billing_Group_Name],[Default_Fees],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Sequence_No],[Isdefault],[Visit_Type]
				)
	VALUES
				(	@p_var_doctor_ID,@p_var_detail,@p_var_subgroup,@p_var_group,@p_var_default_fee,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_Sequence_no,@p_var_Isdefault,@p_var_VisitType);


 END


















GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Catagory]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the catagory in Prescription_Category
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Catagory]
	
	@p_var_CatShortDescription	NVARCHAR(60),
	@p_var_CatLongDescription	NVARCHAR(300),
	@p_var_User_Id				NVARCHAR(90),
	@p_var_DoctorID				NVARCHAR(30)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   IF NOT EXISTS (
							SELECT * FROM [dbo].[Prescription_Category] PC 
							WHERE	PC.Cat_Short_Name	= @p_var_CatShortDescription			   
							AND		PC.DOCTOR_ID		=	@p_var_DoctorID
										    
						  )
		  BEGIN 
			 INSERT INTO [dbo].[Prescription_Category]
			                    (
						          Cat_Short_Name,Cat_Long_Description,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name,[DOCTOR_ID]
								)
			 VALUES   (	@p_var_CatShortDescription,@p_var_CatLongDescription,GetDate(),GetDate(),@p_var_User_Id,@p_var_User_Id,@p_var_DoctorID)	
			 END			
	       	ELSE
			BEGIN
			UPDATE [dbo].[Prescription_Category] 
			 SET		Cat_Short_Name		 = @p_var_CatShortDescription,		  
			   	        Cat_Long_Description = @p_var_CatLongDescription 
			WHERE		Cat_Short_Name		 = @p_var_CatShortDescription
			AND			DOCTOR_ID			 = @p_var_DoctorID			   
			SELECT 1 AS SAVE_STATUS
		  END
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END

















GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Charges_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Charges_MasterData]
 	
	@p_var_chargecat															NVARCHAR(100),
	@p_var_chargdesubcat														NVARCHAR(100),
	@p_var_sortorder															int,
	@p_var_comments																NVARCHAR(1000),
	@p_var_amount																decimal(7,2),
	@p_var_User_Id																NVARCHAR(90),
	@p_var_Insert_Keyword_Data		UDT_Insert_charges_MasterData				READONLY,
	@p_var_calculationtype														NVARCHAR(100)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE [dbo].[IPD_BillData_CHARGESMASTER] AS DM

	 USING(
			SELECT DISTINCT [Charges_Category]			AS CHARGECAT,
							[Charges_SubCategory]		AS CHARGESUBCAT
					 
					 
			FROM			 @p_var_Insert_Keyword_Data
		  )
	
	 AS	 SRC (
				CHARGECAT,CHARGESUBCAT
			 )
	 ON		 (
				DM.[Charges_Category]			= SRC.CHARGECAT
				AND
				DM.[Charges_SubCategory]		= SRC.CHARGESUBCAT
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	DM.[Charges_Category]				= SRC.CHARGECAT,
			--DM.[Charges_SubCategory]			= SRC.CHARGESUBCAT,
			DM.[Charges_SubCategory]			= @p_var_chargdesubcat,
			DM.[SortOrder]						= @p_var_sortorder,
			DM.[Comments]						= @p_var_comments,
			DM.[Amount]							= @p_var_amount,
			DM.Delete_Flag						= 0,
			DM.[Calculation_Type]				= @p_var_calculationtype

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[Charges_Category],	
					[Charges_SubCategory],
					[SortOrder],			
					[Comments],			
					[Amount],				
					Delete_Flag,
					[Calculation_Type]						
				)
	VALUES
				(	@p_var_chargecat,@p_var_chargdesubcat,@p_var_sortorder,@p_var_comments,@p_var_amount,0,@p_var_calculationtype);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_City]    Script Date: 16-Jan-18 8:21:06 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_City]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the catagory in Prescription_Category
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_City]
	
	@p_var_CountryID NVARCHAR(6),
	@p_var_StateID NVARCHAR(6),
	@p_var_LanguageID INT,
	@p_var_City_ID nvarchar(6),
	@p_var_CityName NVARCHAR(60)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		  IF NOT EXISTS(
		  SELECT CM.ID from  City_Master CM 
		  where ID like @p_var_City_ID 
		  )
		  begin
		  INSERT INTO  [dbo].[City_Master](Country_ID,State_ID,ID)
		  VALUES(@p_var_CountryID,@p_var_StateID,@p_var_City_ID)

			 INSERT INTO [dbo].[City_Translations]
			                    (
						         Country_ID,State_ID,City_ID,Language_Id, City_Name
								)
			 VALUES   (@p_var_CountryID,@p_var_StateID,@p_var_City_ID,@p_var_LanguageID,@p_var_CityName)	
			 select 1 as SAVE_STATUS
			end
			ELSE
			begin
			select 0 as SAVE_STATUS
			end
			
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Company]    Script Date: 16-Jan-18 8:21:23 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Company]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 12 Dec 2016
-- Description:	This stored procedure is used to insert company details for MR Login
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Company]
	@p_var_companyname		NVARCHAR(200),
	@p_var_companydesc		NVARCHAR(300),
	@p_var_loginname		NVARCHAR(15),
	@p_var_password			NVARCHAR(100)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF EXISTS (
						   SELECT * FROM [dbo].[Company_Master] CM
						   WHERE  CM.[Company_Name]		  = @p_var_companyname			    
						  )
	BEGIN
	SELECT 0 AS SAVE_STATUS
	END
	ELSE
	BEGIN

   INSERT INTO [dbo].[Company_Master]
						([Company_Name],
							[Company_Description],
							[LoginName],
							[LoginPassword])
	VALUES(@p_var_companyname,@p_var_companydesc,@p_var_loginname,@p_var_password);

	SELECT 1 AS SAVE_STATUS
	END
   
END





/****** Object:  StoredProcedure [dbo].[USP_Insert_Company_MasterData]    Script Date: 16-Jan-18 8:21:33 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Company_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 27-Dec-2016
-- Description	: This stored procedure will insert and update Pharma Company in Company Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Company_MasterData]	
	@p_var_Company_Name																		NVARCHAR(200),
	@p_var_CompanyDescription																NVARCHAR(300),
	@p_var_LoginName																		NVARCHAR(15),
	@p_var_Password																			NVARCHAR(100),
	@p_var_Insert_Company_Data		[dbo].[UDT_Insert_Company_MasterData]					READONLY
	
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
	 BEGIN TRY

	 SELECT DISTINCT [Old_Company_Name]			AS OLD_COMPANY_NAME,
					 [Old_Company_Description]	AS OLD_COMPANY_DESC,
					 [Old_LoginName]			AS OLD_LOGIN,
					 [Old_LoginPassword]		AS OLD_PASSWORD,
					 [New_Company_Name]			AS NEW_COMPANY_NAME,
					 [New_Company_Description]	AS NEW_COMPANY_DESC,
					 [New_LoginName]			AS NEW_LOGIN,
					 [New_LoginPassword]		AS NEW_PASSWORD
					 
	 FROM			 @p_var_Insert_Company_Data

	 MERGE [dbo].[Company_Master] as CM

	 USING(
			SELECT DISTINCT	 [Old_Company_Name]			AS OLD_COMPANY_NAME,
							 [Old_Company_Description]	AS OLD_COMPANY_DESC,
							 [Old_LoginName]			AS OLD_LOGIN,
							 [Old_LoginPassword]		AS OLD_PASSWORD,
							 [New_Company_Name]			AS NEW_COMPANY_NAME,
							 [New_Company_Description]	AS NEW_COMPANY_DESC,
							 [New_LoginName]			AS NEW_LOGIN,
							 [New_LoginPassword]		AS NEW_PASSWORD
							
							
			FROM			@p_var_Insert_Company_Data 
		  )
	
	 AS	 SRC (
				OLD_COMPANY_NAME,OLD_COMPANY_DESC,OLD_LOGIN,OLD_PASSWORD,NEW_COMPANY_NAME,NEW_COMPANY_DESC,NEW_LOGIN,NEW_PASSWORD
			 )
	 ON		 (
				CM.[Company_Name]			= SRC.OLD_COMPANY_NAME 
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	CM.[Company_Name]		= SRC.NEW_COMPANY_NAME,
			CM.[Company_Description]	= SRC.NEW_COMPANY_DESC,	
			CM.[LoginName]			= SRC.NEW_LOGIN,
			CM.[LoginPassword]		=	SRC.NEW_PASSWORD,
			CM.[Delete_Flag]		=	0
			

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
				 [Company_Name],[Company_Description],[LoginName],[LoginPassword],[Delete_Flag]
				)
	VALUES
				(	@p_var_Company_Name,@p_var_CompanyDescription,@p_var_LoginName,@p_var_Password,0);

	END TRY

	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_ComplaintsData]    Script Date: 16-Jan-18 8:21:41 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_ComplaintsData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in Visit_Complaints Table 
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_ComplaintsData]
	@p_var_Insert_PatientComplaintData UDT_Insert_PatientComplaint READONLY,
	@p_var_User_Id  NVARCHAR(32)
AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

			INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientComplaintData
	 
	 END TRY
	 BEGIN CATCH
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END







/****** Object:  StoredProcedure [dbo].[USP_Insert_Consolidate_ReceiptDetails]    Script Date: 16-Jan-18 8:21:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Consolidate_ReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 22 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Consolidate_ReceiptDetails]
	@Todays_VisitDate																		DATE,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)									
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	--IF EXISTS 
	--	(	SELECT	*
	--		FROM	Patient_Receipts
	--		WHERE	
	--				Doctor_ID		=	@p_var_Doctor_ID
	--		AND		Clinic_ID		=	@p_var_Clinic_ID
	--		AND		Patient_ID		=	@p_var_Patient_ID
	--		AND		@p_var_from_date	BETWEEN From_Date AND To_Date
			
	--	)
	--	BEGIN
	--		SELECT 2 AS GETSTATUS
	--	END

	--	ELSE

	BEGIN

	----------Generate sequence no. of receipt no.---------------

			SELECT 0 AS GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE --[Doctor_ID] = @p_var_Doctor_ID AND
			 [Clinic_ID] = @p_var_Clinic_ID

			

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE --[Doctor_ID] = @p_var_Doctor_ID AND 
					  [Clinic_ID] = @p_var_Clinic_ID
			END          
	        
	    


	------Add Receipt Details--------------------

	

	
	INSERT INTO Patient_Receipts(
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type]
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,@Todays_VisitDate,@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type
		);
	
	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_Receipt_No AS Receipt_No


	UPDATE  [dbo].[Patient_Visits] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type

	WHERE	Visit_Date BETWEEN @p_var_from_date AND @p_var_to_date
	--AND		Doctor_ID=@p_var_Doctor_ID
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID
	AND		Status_ID=5
	AND		[Receipt_Number] IS NULL

	--UPDATE  [dbo].[Patient_Payments_AdHoc] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type

	--WHERE	CONVERT(DATE,[Payment_Date]) BETWEEN @p_var_from_date AND @p_var_to_date
	----AND		Doctor_ID	=	@p_var_Doctor_ID
	--AND		Clinic_ID	=	@p_var_Clinic_ID
	--AND		Patient_ID	=	@p_var_Patient_ID
	--AND		[Receipt_Number] IS NULL
	--AND		Fees_Collected >= 0
	

	
	
	INSERT INTO [Patient_Payments_AdHoc](
			[Doctor_ID],
			[Clinic_ID],
			[Shift_ID] ,
			[Patient_ID],
			Payment_Date,
			Financial_Year,
			Fees_Collected,
			[Created_On],
			[CreatedBy_Name],
			[Modified_On],
			[ModifiedBy_Name],
			Comment ,
			Payment_By_ID,
			 Payment_Remark,
			 Attended_By ,
			  Attended_By_ID ,
			   Receipt_Number ,
			   Receipt_Type
		)
		VALUES(
		@p_var_Doctor_ID,
		@p_var_Clinic_ID,
		@p_var_Shift_ID, 
		@p_var_Patient_ID,
		@Todays_VisitDate,
		'2019' , -- need to change
		@p_var_ReceiptAmount,
		GETDATE(),
		@p_var_User_Id,
		GETDATE(),
		@p_var_User_Id,
		@p_var_TreatmentDetails,

		'1' , -- need to change
		@p_var_TreatmentDetails,
		@p_var_Doctor_ID , 
		'2',  -- need to change
		@p_var_Receipt_No,
		@p_var_Receipt_Type
		);
	


	END
		



	END TRY

	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	









/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 16-Mar-18 8:38:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Consolidate_ReceiptDetails_New]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 22 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Consolidate_ReceiptDetails_New]
	@Todays_VisitDate																		DATE,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)	,
	--Added new for update payment detail
	@PaymentByID                                                                            TINYINT,
    @PrintPaymentRemark								                                        NVARCHAR(90)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	--IF EXISTS 
	--	(	SELECT	*
	--		FROM	Patient_Receipts
	--		WHERE	
	--				Doctor_ID		=	@p_var_Doctor_ID
	--		AND		Clinic_ID		=	@p_var_Clinic_ID
	--		AND		Patient_ID		=	@p_var_Patient_ID
	--		AND		@p_var_from_date	BETWEEN From_Date AND To_Date
			
	--	)
	--	BEGIN
	--		SELECT 2 AS GETSTATUS
	--	END

	--	ELSE

	BEGIN

	----------Generate sequence no. of receipt no.---------------

			SELECT 0 AS GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE --[Doctor_ID] = @p_var_Doctor_ID AND
			 [Clinic_ID] = @p_var_Clinic_ID

			and Entity_Type='RCT'
 

			

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE --[Doctor_ID] = @p_var_Doctor_ID AND 
					  [Clinic_ID] = @p_var_Clinic_ID
					  and  Entity_Type='RCT'
			END          
	        
	    


	------Add Receipt Details--------------------

	

	
	INSERT INTO Patient_Receipts(
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type]
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,@Todays_VisitDate,@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type
		);
	
	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_Receipt_No AS Receipt_No


	UPDATE  [dbo].[Patient_Visits] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type
	--Added for payment detail
	--,Payment_By_ID=@PaymentByID,Payment_Remark=@PrintPaymentRemark

	WHERE	Visit_Date BETWEEN @p_var_from_date AND @p_var_to_date 
	--AND		Doctor_ID=@p_var_Doctor_ID
	AND       Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID
	AND		Status_ID=5
	AND		[Receipt_Number] IS NULL
	AND     Fees_Collected IS NOT NULL AND Fees_Collected NOT IN ('0','0.00','0.0','00')

	UPDATE  [dbo].[Patient_Payments_AdHoc] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type
	--Added for payment detail
	--,Payment_By_ID=@PaymentByID,Payment_Remark=@PrintPaymentRemark

	WHERE	CONVERT(DATE,[Payment_Date]) BETWEEN @p_var_from_date AND @p_var_to_date
	--AND		Doctor_ID	=	@p_var_Doctor_ID
	AND		Clinic_ID	=	@p_var_Clinic_ID
	AND		Patient_ID	=	@p_var_Patient_ID
	AND		[Receipt_Number] IS NULL
	AND		Fees_Collected >= 0
	AND     Fees_Collected IS NOT NULL AND Fees_Collected NOT IN ('0','0.00','0.0','00')

	
	
	--INSERT INTO [Patient_Payments_AdHoc](
	--		[Doctor_ID],
	--		[Clinic_ID],
	--		[Shift_ID] ,
	--		[Patient_ID],
	--		Payment_Date,
	--		Financial_Year,
	--		Fees_Collected,
	--		[Created_On],
	--		[CreatedBy_Name],
	--		[Modified_On],
	--		[ModifiedBy_Name],
	--		Comment ,
	--		Payment_By_ID,
	--		 Payment_Remark,
	--		 Attended_By ,
	--		  Attended_By_ID ,
	--		   Receipt_Number ,
	--		   Receipt_Type
	--	)
	--	VALUES(
	--	@p_var_Doctor_ID,
	--	@p_var_Clinic_ID,
	--	@p_var_Shift_ID, 
	--	@p_var_Patient_ID,
	--	@Todays_VisitDate,
	--	'2019' , -- need to change
	--	@p_var_ReceiptAmount,
	--	GETDATE(),
	--	@p_var_User_Id,
	--	GETDATE(),
	--	@p_var_User_Id,
	--	@p_var_TreatmentDetails,

	--	'1' , -- need to change
	--	@p_var_TreatmentDetails,
	--	@p_var_Doctor_ID , 
	--	'2',  -- need to change
	--	@p_var_Receipt_No,
	--	@p_var_Receipt_Type
	--	);
	


	END
		



	END TRY

	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	









/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 16-Mar-18 8:38:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Consolidate_ReceiptDetails_New_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 DEC 2019
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Linakshi
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Consolidate_ReceiptDetails_New_Services]
	@Todays_VisitDate																		DATE,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)	,
	--Added new for update payment detail
	@PaymentByID                                                                            TINYINT,
    @PrintPaymentRemark								                                        NVARCHAR(90)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	--IF EXISTS 
	--	(	SELECT	*
	--		FROM	Patient_Receipts_Services
	--		WHERE	
	--				Doctor_ID		=	@p_var_Doctor_ID
	--		AND		Clinic_ID		=	@p_var_Clinic_ID
	--		AND		Patient_ID		=	@p_var_Patient_ID
	--		AND		@p_var_from_date	BETWEEN From_Date AND To_Date
			
	--	)
	--	BEGIN
	--		SELECT 2 AS GETSTATUS
	--	END

	--	ELSE

	BEGIN

	----------Generate sequence no. of receipt no.---------------

			SELECT 0 AS GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE --[Doctor_ID] = @p_var_Doctor_ID AND
			 [Clinic_ID] = @p_var_Clinic_ID

			and Entity_Type='SER'
 

			

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = 'S-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE --[Doctor_ID] = @p_var_Doctor_ID AND 
					  [Clinic_ID] = @p_var_Clinic_ID
					  and  Entity_Type='SER'
			END          
	        
	    


	------Add Receipt Details--------------------

	

	
	INSERT INTO Patient_Receipts_Services(
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type]
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,@Todays_VisitDate,@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type
		);
	
	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_Receipt_No AS Receipt_No


	UPDATE  [dbo].[Patient_Visits_Services] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type
	--Added for payment detail
	--,Payment_By_ID=@PaymentByID,Payment_Remark=@PrintPaymentRemark

	WHERE	Visit_Date BETWEEN @p_var_from_date AND @p_var_to_date
	--AND		Doctor_ID=@p_var_Doctor_ID
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID
	AND		Status_ID=8
	AND		[Receipt_Number] IS NULL
	AND     Fees_Collected IS NOT NULL AND Fees_Collected NOT IN ('0','0.00','0.0','00')

	UPDATE  [dbo].[Patient_Payments_AdHoc] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type

	WHERE	CONVERT(DATE,[Payment_Date]) BETWEEN @p_var_from_date AND @p_var_to_date
	--AND		Doctor_ID	=	@p_var_Doctor_ID
	AND		Clinic_ID	=	@p_var_Clinic_ID
	AND		Patient_ID	=	@p_var_Patient_ID
	AND		[Receipt_Number] IS NULL
	AND		Fees_Collected >= 0
	AND     Fees_Collected IS NOT NULL AND Fees_Collected NOT IN ('0','0.00','0.0','00')

	
	
	--INSERT INTO [Patient_Payments_AdHoc](
	--		[Doctor_ID],
	--		[Clinic_ID],
	--		[Shift_ID] ,
	--		[Patient_ID],
	--		Payment_Date,
	--		Financial_Year,
	--		Fees_Collected,
	--		[Created_On],
	--		[CreatedBy_Name],
	--		[Modified_On],
	--		[ModifiedBy_Name],
	--		Comment ,
	--		Payment_By_ID,
	--		 Payment_Remark,
	--		 Attended_By ,
	--		  Attended_By_ID ,
	--		   Receipt_Number ,
	--		   Receipt_Type
	--	)
	--	VALUES(
	--	@p_var_Doctor_ID,
	--	@p_var_Clinic_ID,
	--	@p_var_Shift_ID, 
	--	@p_var_Patient_ID,
	--	@Todays_VisitDate,
	--	'2019' , -- need to change
	--	@p_var_ReceiptAmount,
	--	GETDATE(),
	--	@p_var_User_Id,
	--	GETDATE(),
	--	@p_var_User_Id,
	--	@p_var_TreatmentDetails,

	--	'1' , -- need to change
	--	@p_var_TreatmentDetails,
	--	@p_var_Doctor_ID , 
	--	'2',  -- need to change
	--	@p_var_Receipt_No,
	--	@p_var_Receipt_Type
	--	);
	


	END
		



	END TRY

	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	









/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 16-Mar-18 8:38:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_data_complaints]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  02-March-2016
-- Description :  This stored procedure will save FullRegistrationDetails.
--  created by :  suyog khairnar    
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_data_complaints]
	@p_nvar_Patient_Id                     NVARCHAR(32),
	@p_nvar_Doctor_Id                      NVARCHAR(30),
	@p_nvar_Clinic_ID				NVARCHAR(30),

	@p_nvar_Ear                            NVARCHAR(30),
	@p_nvar_Nose							NVARCHAR(30),
	
	@p_nvar_Throat								NVARCHAR(30),
	@p_nvar_Vertigo								NVARCHAR(30),
	@p_nvar_Thyroid								NVARCHAR(30),
	@p_nvar_Allergy						     NVARCHAR(30),
	@p_nvar_NeckMass						 NVARCHAR(30),
	@p_nvar_Others                           NVARCHAR(30),
	@p_var_User_Id                           NVARCHAR(30),
	@p_date_TodyasVisitDate     DATE
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY


		
	
              IF EXISTS(SELECT Patient_ID
                         FROM    Patient_Master_ComplaintsData PMC 
                         --INNER JOIN  Patient_Master_ComplaintsData PMC
                         --ON          PM.ID=PMC.Patient_ID
                         --INNER JOIN  Patient_Master_Family PMF
                        -- ON          PM.ID=PMF.Patient_ID
                         WHERE PMC.Patient_ID   = @p_nvar_Patient_Id  AND
						       PMC.Doctor_ID=@p_nvar_Doctor_Id and
							    PMC.Visit_Date=@p_date_TodyasVisitDate) 
                BEGIN
                  UPDATE [dbo].[Patient_Master_ComplaintsData]
				    SET    [Ear]        =  @p_nvar_Ear,
				           [Nose]   =  @p_nvar_Nose,
				           [Throat]      =  @p_nvar_Throat,
				           [Vertigo]   =  @p_nvar_Vertigo,
				           [Thyroid]         =  @p_nvar_Thyroid,
				           [Allergy]          =  @p_nvar_Allergy,
						   [NeckMass]  =  @p_nvar_NeckMass,
						 
						[Others]  =  @p_nvar_Others,
						 Modified_On   =  GetDate(),
						 ModifiedBy_Name =  @p_var_User_Id,
					[Visit_Date]=@p_date_TodyasVisitDate

				 WHERE   Patient_ID   = @p_nvar_Patient_Id  AND
                          Doctor_ID=@p_nvar_Doctor_Id AND
				          Visit_Date=@p_date_TodyasVisitDate
				 
			   END
			  
		    ELSE
		      BEGIN	
                INSERT INTO [Patient_Master_ComplaintsData]
						    (	 Patient_ID,
								 Doctor_ID,
								 [Clinic_Id],

								 [Ear] ,    
								 [Nose] , 
								 Throat,   
								 Vertigo, 
								 [Thyroid],
								 [Allergy] ,
								 [NeckMass],
								 [Others],

								 Created_On,
								 CreatedBy_Name,
								 Modified_On,
								 ModifiedBy_Name,
								 Visit_Date)
							 
							
                     VALUES
						    (@p_nvar_Patient_Id,
							@p_nvar_Doctor_Id,
							@p_nvar_Clinic_ID,

							 @p_nvar_Ear,
							 @p_nvar_Nose,
							 @p_nvar_Throat,
							 @p_nvar_Vertigo,
							 @p_nvar_Thyroid,
							 @p_nvar_Allergy,
							 @p_nvar_NeckMass,
							 @p_nvar_Others,
							
							 GetDate(),
							 @p_var_User_Id,
							 GetDate(),
							 @p_var_User_Id,
							 @p_date_TodyasVisitDate)

				END
			
				SELECT 1 AS SAVE_STATUS
		

	
		
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
        END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_FullRegistrationDetails_For_Gynec]    Script Date: 16-Jan-18 8:23:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_DiagnosisData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in Visit_Dignosis Data
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_Insert_DiagnosisData]
	
	@p_var_Insert_PatientDiagnosisData UDT_Insert_PatientDiagnosis READONLY,
	@p_var_User_Id                                                 NVARCHAR(32)
AS
BEGIN
	 -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

			  INSERT INTO	Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	          SELECT	    Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
              FROM			@p_var_Insert_PatientDiagnosisData
	 END TRY
     BEGIN CATCH
              SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
     END CATCH
 END




/****** Object:  StoredProcedure [dbo].[USP_Insert_Discharge_MasterData]    Script Date: 16-Jan-18 8:22:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Discharge_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Discharge_MasterData]
 	
	@p_var_keyword					NVARCHAR(60),
	@p_var_diagnosis				NVARCHAR(max),
	@p_var_complaint				NVARCHAR(max),
	@p_var_history					NVARCHAR(max),
	@p_var_investigation			NVARCHAR(max),
	@p_var_OE						NVARCHAR(max),
	@p_var_SE						NVARCHAR(max),
	@p_var_procedure				NVARCHAR(max),
	@p_var_treatment				NVARCHAR(max),
	@p_var_discharge				NVARCHAR(max),
	@p_var_instruction				NVARCHAR(max),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Keyword_Data		UDT_Insert_Discharge_MasterData							READONLY,
	@p_var_operative                NVARCHAR(max)
	
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE [dbo].[IPD_DischargeData] AS DM

	 USING(
			SELECT DISTINCT [Keyword]			AS KEYWORD
					 
			FROM			 @p_var_Insert_Keyword_Data
		  )
	
	 AS	 SRC (
				KEYWORD
			 )
	 ON		 (
				DM.[IPD_Keyword]		= SRC.KEYWORD
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	DM.[IPD_Keyword]		= @p_var_keyword,
			DM.[Diagnosis]			= @p_var_diagnosis,
			DM.[Complaints]			= @p_var_complaint,
			DM.[History]			= @p_var_history,
			DM.[Investigations]		= @p_var_investigation,
			DM.[OE]					= @p_var_OE,
			DM.[SE]					= @p_var_SE,
			DM.[Procedure]			= @p_var_procedure,
			DM.[Treatment]			= @p_var_treatment,
			DM.[Discharge]			= @p_var_discharge,
			DM.[Instructions]		= @p_var_instruction,
			DM.[Operative_Notes_Description]=@p_var_operative,
			DM.[Delete_Flag]		= 0

			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[IPD_Keyword],[Diagnosis],[Complaints],[History],[Investigations],[OE],[SE],[Procedure],[Treatment],
					[Discharge],[Instructions],[Delete_Flag],[Operative_Notes_Description]
				)
	VALUES
				(	@p_var_keyword,
					@p_var_diagnosis,
					@p_var_complaint,
					@p_var_history,
					@p_var_investigation,
					@p_var_OE,
					@p_var_SE,
					@p_var_procedure,
					@p_var_treatment,
					@p_var_discharge,
					@p_var_instruction,
					0,
					@p_var_operative
				);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_DischargeData]    Script Date: 16-Jan-18 8:22:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_DischargeData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21 July 2017
-- Description	: This stored procedure will insert and update the discharge details in Discharge_Data table
-- Created By	: Varsha Khandre
-- =============================================
 
 CREATE PROCEDURE [dbo].[USP_Insert_DischargeData]
	

	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Shift_ID																			TINYINT,
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_IPD_Ref_No																		NVARCHAR(100),
	@Admission_Date																			DATETIME,
	@Admission_Time																			Time(7),
	@p_var_TreatingDoctor																	NVARCHAR(60),
	@p_var_ConsultingDoctor																	NVARCHAR(60),
	@Discharge_Date																			DATETIME,
	@Discharge_Time																			Time(7),
	@p_dec_weight																			DECIMAL(5,2),
	@p_var_IPD_NO																			NVARCHAR(30),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Discharge_Data		[dbo].UDT_Insert_Discharge_Details_new				READONLY,
	@p_var_attachFiles_DataTable		UDT_Insert_Keyword_Investigations_Attachments		READONLY,
	@p_var_Keyword																			NVARCHAR(30),
	@p_var_Visit_Date																		DATETIME,
	@p_dt_OperationStart_Date																DATETIME,
	@p_dt_OperationEnd_Date																	DATETIME,
	@p_dt_OperationStart_Time																Time(7),
	@p_dt_OperationEnd_Time																	Time(7),
	@p_var_operativenotes																	NVARCHAR(max),
	@p_var_Remark																			NVARCHAR(1000),
	@p_var_Followupnotes																	NVARCHAR(1000),
	@p_var_Anesthesia																        NVARCHAR(100),
	@P_var_Reasonfordischarge																NVARCHAR(300),

	@p_str_referred_doctr															    	NVARCHAR(50),
	@p_str_ConditionOnDischarge																NVARCHAR(1000),
	@p_str_footer																			NVARCHAR(max),
	@p_str_defauldate																		NVARCHAR(1000),
		
	@p_var_ward																				NVARCHAR(100),
	@p_var_Room																				NVARCHAR(100),
	@p_var_Admitted_Days																	NVARCHAR(100),
	@p_var_OT_Hours																			NVARCHAR(100),
 @p_str_Company																		NVARCHAR(max) ,
 @p_dt_Followupdate																		DATETIME 
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN

	IF (@p_dt_OperationStart_Date = '')
	BEGIN
	SET @p_dt_OperationStart_Date=NULL;
	END

	IF(@p_dt_OperationEnd_Date = '')
	  BEGIN
         SET @p_dt_OperationEnd_Date = NULL;
	  END

	IF(@p_dt_OperationStart_Time = '')
	  BEGIN
         SET @p_dt_OperationStart_Time = NULL;
	  END

	IF(@p_dt_OperationEnd_Time = '')
	  BEGIN
         SET @p_dt_OperationEnd_Time = NULL;
	  END



	  IF(@p_dt_Followupdate = '01-Jan-1900 12:00:00 AM')
	  BEGIN
         SET @p_dt_Followupdate = NULL;
	  END

	  


	IF EXISTS(
			SELECT	*
			FROM	[dbo].[Discharge_Data]
			WHERE	([Admission_Date] BETWEEN @Admission_Date AND @Discharge_Date

			OR		[Discharge_Date] BETWEEN @Admission_Date AND @Discharge_Date)
			AND		Patient_ID = @p_var_Patient_ID
			AND		Doctor_ID = @p_var_Doctor_ID
			AND		IPD_RefNo != @p_var_IPD_Ref_No
	)

	BEGIN
		SELECT 1 AS DISCHARGE_EXISTS
	END

	ELSE IF EXISTS(
			SELECT	*
			FROM	[dbo].[Discharge_Data]
			WHERE	(@Admission_Date BETWEEN [Admission_Date] AND [Discharge_Date]

			OR		@Discharge_Date BETWEEN [Admission_Date] AND [Discharge_Date])
			AND		Patient_ID = @p_var_Patient_ID
			AND		Doctor_ID = @p_var_Doctor_ID
			AND		IPD_RefNo != @p_var_IPD_Ref_No
	)

	BEGIN
		SELECT 1 AS DISCHARGE_EXISTS
	END

	ELSE

	BEGIN
	SELECT 0 AS DISCHARGE_EXISTS
	----------Generate sequence of IPD no.---------------

	IF NOT EXISTS 
		(	
		
			SELECT	*
			FROM	[dbo].[Discharge_Data]
			WHERE	
			 		Doctor_ID		=	@p_var_Doctor_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		[IPD_RefNo]		=	@p_var_IPD_Ref_No
			
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoIPD BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @strMonth NVARCHAR(3)
			
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_IPD_Ref_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoIPD = Last_SequenceNo, 
					@strPrefixChar         = Prefix_Char,
					@intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 
				WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'IPD'

			

				IF(@bintLastSequenceNoIPD = 9999)
				BEGIN
					SET   @bintLastSequenceNoIPD = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoIPD = @bintLastSequenceNoIPD + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(4),@bintLastSequenceNoIPD)))

				SET @strMonth= SUBSTRING(CONVERT(nvarchar(6),getdate(), 112),5,2)
				
				
				SET   @p_var_IPD_Ref_No = @strPrefixChar + '-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY )+ '-' + @strMonth + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoIPD)
				 
				SET		@p_var_IPD_Ref_No = @p_var_IPD_Ref_No

				

				UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNoIPD
					  WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'IPD'
			END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------



	------Add and Update IPD Details--------------------

	

	 MERGE  [dbo].[Discharge_Data] as MR

	 USING(
			SELECT DISTINCT 
					 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [IPD_RefNo]				AS IPDREFNO,
					 [Diagnosis]				AS DIAGNOSIS,
					 [Complaints]				AS COMPLAINTS,
					 [History]					AS HISTORY,
					 [Investigations]			AS INVESTIGATION,
					 [OE]						AS OE,
					 [SE]						AS SE,
					 [Procedure]				AS IPDPROCEDURE,
					 [Treatment]				AS TREATMENT,
					 [Discharge]				AS DISCHARGE,
					 [Instructions]				AS INSTRUCTION
												
			FROM	@p_var_Insert_Discharge_Data
		  )										
	
	 AS	 SRCREM 
			 (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,IPDREFNO,DIAGNOSIS,COMPLAINTS,HISTORY,INVESTIGATION,OE,SE,IPDPROCEDURE,TREATMENT,DISCHARGE,INSTRUCTION
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				--MR.[Shift_ID]				=SRCREM.SHIFT_ID    AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[IPD_RefNo]				=SRCREM.IPDREFNO	
				
				
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		
				MR.[Admission_Date]			= @Admission_Date,
				MR.[Admission_Time]			= @Admission_Time,
				MR.[Treating_Doctor]		= @p_var_TreatingDoctor,
				MR.[Consulting_Doctor]		= @p_var_ConsultingDoctor,
				MR.[Discharge_Date]			= @Discharge_Date,
				MR.[Discharge_Time]			= @Discharge_Time,
				MR.[Weight]					= @p_dec_weight,
				MR.[Diagnosis]				= SRCREM.DIAGNOSIS,
				MR.[Complaints]				= SRCREM.COMPLAINTS,
				MR.[History]				= SRCREM.HISTORY,
				MR.[Investigations]			= SRCREM.INVESTIGATION,
				MR.[OE]						= SRCREM.OE,
				MR.[SE]						= SRCREM.SE,
				MR.[Procedure]				= SRCREM.IPDPROCEDURE,
				MR.[Treatment]				= SRCREM.TREATMENT,
				MR.[Discharge]				= SRCREM.DISCHARGE,
				MR.[IPD_No]					= @p_var_IPD_NO,
				MR.[Keyword]				= @p_var_Keyword,
				MR.[Instructions]			= SRCREM.INSTRUCTION,
		     	MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
		 		MR.[Operation_Start_Date]	= @p_dt_OperationStart_Date,	
				MR.[Operation_End_Date]		= @p_dt_OperationEnd_Date,		
				MR.[Operation_Start_Time]	= @p_dt_OperationStart_Time,	
				MR.[Operation_End_Time]		= @p_dt_OperationEnd_Time,		
				MR.[Operative_Notes]		= @p_var_operativenotes,		
				MR.[Remark]					= @p_var_Remark,				
				MR.[Follow_up_comments]		= @p_var_Followupnotes,
				MR.[Anesthesia]				= @p_var_Anesthesia		,
				MR.[ReasonforDIscharge]		= @P_var_Reasonfordischarge,

				MR.	[Referred_Doctor]		= @p_str_referred_doctr,
				MR.	[Condition_Discharge]   = @p_str_ConditionOnDischarge,
				MR.[Footer]		            = @p_str_footer,
				MR.Printed_On_Date			=@p_str_defauldate,
			
                MR. [BedNo]					= @p_var_ward,
				MR. [Room]					= @p_var_Room,
				MR.[Admitted_Days]			= @p_var_Admitted_Days,
				MR.[OT_Hours]				= @p_var_OT_Hours,
				MR.[Company]				=@p_str_Company,
				MR.	[FollowUp_Date]			= @p_dt_Followupdate

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],[Admission_Date],[Admission_Time],[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Date],[Discharge_Time],[Weight],[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],[Created_On]
			,[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Keyword],[Visit_Date],[Shift_ID],
			[Operation_Start_Date],[Operation_End_Date],[Operation_Start_Time],[Operation_End_Time],[Operative_Notes],
			[Remark],[Follow_up_comments],[Anesthesia],[ReasonforDIscharge],[Referred_Doctor],[Condition_Discharge],[Footer],Printed_On_Date,[BedNo],[Room],[Admitted_Days],[OT_Hours],[Company],[FollowUp_Date])
		
		VALUES(
				@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_IPD_Ref_No,@Admission_Date,@Admission_Time,@p_var_TreatingDoctor,
				@p_var_ConsultingDoctor,@Discharge_Date,@Discharge_Time,@p_dec_weight,@p_var_IPD_NO,SRCREM.DIAGNOSIS,SRCREM.COMPLAINTS,SRCREM.HISTORY,SRCREM.INVESTIGATION,
				SRCREM.OE,SRCREM.SE,SRCREM.IPDPROCEDURE,SRCREM.TREATMENT,SRCREM.DISCHARGE,SRCREM.INSTRUCTION,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
				@p_var_Keyword,@p_var_Visit_Date,@p_var_Shift_ID,
				@p_dt_OperationStart_Date,@p_dt_OperationEnd_Date,@p_dt_OperationStart_Time,@p_dt_OperationEnd_Time,@p_var_operativenotes,
				@p_var_Remark,@p_var_Followupnotes,@p_var_Anesthesia,@P_var_Reasonfordischarge
				,@p_str_referred_doctr,@p_str_ConditionOnDischarge,@p_str_footer,@p_str_defauldate,@p_var_ward,@p_var_Room,@p_var_Admitted_Days,@p_var_OT_Hours
			,@p_str_Company,@p_dt_Followupdate);

		
		
	INSERT INTO [dbo].[Discharge_Investigations](

			[Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],[Attachment_Path],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name]
		)

		SELECT	@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_IPD_Ref_No,[Folder_Path],GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id

		FROM @p_var_attachFiles_DataTable

	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_IPD_Ref_No AS IPDNO

	UPDATE  [dbo].[Discharge_Data]
			SET		Is_Printed			= 0,
					Modified_On			= GETDATE(),
				   [ModifiedBy_Name]	= @p_var_User_Id

			WHERE	Patient_ID	= @p_var_Patient_ID
			AND		Doctor_ID	= @p_var_Doctor_ID
			AND		Clinic_ID	= @p_var_Clinic_ID
			AND		[IPD_RefNo]	= @p_var_IPD_Ref_No


					   UPDATE [dbo].[Admission_Data]
           SET 
           [TreatingDoctor]= @p_var_TreatingDoctor 
           ,[ConsultantDoctor]=@p_var_ConsultingDoctor
           ,[IPDFileNo]=@p_var_IPD_NO
         , Referred_Doctor=     @p_str_referred_doctr
		 ,[InsuranceDetails]=@p_str_Company
		   ,Modified_On = GETDATE()
		   ,ModifiedBy_Name = @p_var_User_Id
  
			WHERE	Patient_ID	= @p_var_Patient_ID
			AND		Doctor_ID	= @p_var_Doctor_ID
			AND		Clinic_ID	= @p_var_Clinic_ID
			AND		[IPD_RefNo]	= @p_var_IPD_Ref_No


END

END


	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_DischargeDataPrintDate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

CREATE PROCEDURE[dbo].[USP_Insert_DischargeDataPrintDate]

@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100),
	@p_nvar_printed_On			NVARCHAR(100)
	
	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY


	 BEGIN TRANSACTION

  update [dbo].[Discharge_Data] set 
  
   [Printed_On_Date] =@p_nvar_printed_On
    , Is_Printed ='true'
    where [Patient_ID] = @p_nvar_Patient_Id
	and     [IPD_RefNo] =@p_nvar_IPD_No
		
        
			 
		
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_DischargeDataPrintDateNote]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

CREATE PROCEDURE[dbo].[USP_Insert_DischargeDataPrintDateNote]

@p_nvar_Patient_Id			NVARCHAR(32),
	@p_tint_Shift_Id				TINYINT,
	@p_nvar_Clinic_ID			NVARCHAR(10),
	@p_nvar_Doctor_ID			NVARCHAR(30),
	@p_nvar_IPD_No				NVARCHAR(100),
	@p_nvar_printed_On			NVARCHAR(100)
	
	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY


	 BEGIN TRANSACTION

  update [dbo].[Discharge_Data] set 
  
      [Printed_On_Date] =@p_nvar_printed_On
    , Is_Printed ='true'
    where [Patient_ID] = @p_nvar_Patient_Id
	and     [IPD_RefNo] =@p_nvar_IPD_No
		
        
			 
		
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Disease_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 07-Sep-2016
-- Description	: This stored procedure will insert and update the symptoms in Complaint_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Disease_MasterData]	
	@p_var_DiseaseShortDescription															NVARCHAR(40),
	@p_var_DiagnosisDescription																NVARCHAR(1000),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Disease_Data		[dbo].[UDT_Insert_Disease_MasterData]					READONLY,
	@p_var_priority																			INT,
	@p_var_DoctorID																			NVARCHAR(30)
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 SELECT DISTINCT [Old_Short_Name]			AS OLD_DISEASE_SHORT_NAME,
					 [Old_DiagnosisDescription] AS OLD_DISEASE_NAME,
					 [Old_Priority_Value]		AS OLD_PRIORITY,
					 [New_Short_Name]			AS NEW_DISEASE_SHORT_NAME,
					 [New_DiagnosisDescription] AS NEW_DISEASE_NAME,
					 [New_Priority_Value]		AS NEW_PRIORITY
					 
	 FROM			 @p_var_Insert_Disease_Data

	 MERGE [dbo].[Diagnosis_Master] AS DM

	 USING(
			SELECT DISTINCT [Old_Short_Name]			AS OLD_DISEASE_SHORT_NAME,
							[Old_DiagnosisDescription]	AS OLD_DISEASE_NAME,
							[Old_Priority_Value]		AS OLD_PRIORITY,
							[New_Short_Name]			AS NEW_DISEASE_SHORT_NAME,
							[New_DiagnosisDescription]	AS NEW_DISEASE_NAME,
							[New_Priority_Value]		AS NEW_PRIORITY
							
							
			FROM			@p_var_Insert_Disease_Data 
		  )
	
	 AS	 SRC (
				OLD_DISEASE_SHORT_NAME,OLD_DISEASE_NAME,OLD_PRIORITY,NEW_DISEASE_SHORT_NAME,NEW_DISEASE_NAME,NEW_PRIORITY
			 )
	 ON		 (
				DM.Short_Description			=	SRC.OLD_DISEASE_SHORT_NAME		AND
				DM.Diagnosis_Description		=	SRC.OLD_DISEASE_NAME			AND
				ISNULL(DM.Priority_Value,'') 	=	SRC.OLD_PRIORITY				AND
				DOCTOR_ID						=	@p_var_DoctorID
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	DM.Short_Description		= SRC.NEW_DISEASE_SHORT_NAME,
			DM.Diagnosis_Description	= SRC.NEW_DISEASE_NAME,	
			DM.Priority_Value			= SRC.NEW_PRIORITY
			

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
				 Short_Description,Diagnosis_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value,DOCTOR_ID
				)
	VALUES
				(	@p_var_DiseaseShortDescription,@p_var_DiagnosisDescription,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority,@p_var_DoctorID);


 END



















GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_DressingData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================================
-- Author	  :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in Visit_Dressing Table
-- Created By : Nilesh Wani
-- ==============================================================================
CREATE PROCEDURE [dbo].[USP_Insert_DressingData]
	@p_var_Insert_PatientDressingData UDT_Insert_PatientDressingData READONLY,
	@p_var_User_Id  NVARCHAR(32)
AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

				INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
				SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
                FROM			@p_var_Insert_PatientDressingData
	 END TRY
     BEGIN CATCH
				SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH
 END
















/****** Object:  StoredProcedure [dbo].[USP_Insert_FeesOnly]    Script Date: 16-Jan-18 8:22:41 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_FeesOnly]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-June-2016
-- Description	: This stored procedure will insert the Fees in Adhoc Table
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_FeesOnly]
	
	@p_var_DoctorID			NVARCHAR(30),
	@p_var_ClinicID			NVARCHAR(10),
	@p_var_ShiftID			TINYINT,
	@p_var_PatientID		NVARCHAR(32),
	@p_var_PaymentDate		DATE,
	@p_var_FeesCollected	DECIMAL(10,2),
	@p_var_User_Id			NVARCHAR(90),
	@p_var_Comment			NVARCHAR(1000),
	@p_var_PaymentBy_ID		INT,
	@p_var_Payment_Remark	NVARCHAR(1000),
	@p_var_attended_by		NVARCHAR(30),
	@p_var_attendedby_ID	int
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 declare @doctr_id nvarchar(30)

		BEGIN TRY
		select @doctr_id=doctor_id from User_Master
		where ID=@p_var_attendedby_ID

		print @doctr_id



		  BEGIN 

		  IF EXISTS 
		(	SELECT  *
			FROM	[Patient_Payments_AdHoc] 
			WHERE	CONVERT(DATE,Payment_Date)	= @p_var_PaymentDate
			AND		Shift_ID		= @p_var_ShiftID
			AND		Clinic_ID		= @p_var_ClinicID
			AND		Doctor_ID		= @doctr_id
			AND		Patient_ID		= @p_var_PatientID
			
		)
		BEGIN
			SELECT 0 AS SAVE_STATUS;
		END
		ELSE

		BEGIN

			 INSERT INTO [dbo].[Patient_Payments_AdHoc]
			                    (
						          Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Payment_Date,Financial_Year,Fees_Collected,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag,Comment,Payment_By_ID,Payment_Remark,[Attended_By],Attended_By_ID
								)
			 VALUES				(	@doctr_id,
									@p_var_ClinicID,
									@p_var_ShiftID,
									@p_var_PatientID,
									GetDate(),
									CASE WHEN DatePart(Month, @p_var_PaymentDate) >= 4
									THEN DatePart(Year, @p_var_PaymentDate) + 1
									ELSE DatePart(Year, @p_var_PaymentDate) END,
									@p_var_FeesCollected,
									@p_var_PaymentDate,
									@p_var_User_Id,
									GetDate(),@p_var_User_Id,0,@p_var_Comment,@p_var_PaymentBy_ID,@p_var_Payment_Remark,@p_var_attended_by,@p_var_attendedby_ID)	
			 SELECT 1 AS SAVE_STATUS;
			 END		
		END	
	       
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


 
/****** Object:  StoredProcedure [dbo].[USP_Insert_Consolidate_ReceiptDetails]    Script Date: 16-Mar-18 6:59:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Findings]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 01 March 2017
-- Description	: This stored procedure will insert the findings in [Doctor_Procedure_Findings] table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Findings]
	
	@p_var_ProcedureDescription NVARCHAR(100),
	@p_var_User_Id				NVARCHAR(90),
	@p_var_Doctor_ID			NVARCHAR(30),
	@p_var_priority				INT,
	@p_var_Findings				NVARCHAR(200)

 AS


 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   IF NOT EXISTS (
						   SELECT * FROM [dbo].[Doctor_Procedure_Findings] PC
						   WHERE  PC.Procedure_Description	= @p_var_ProcedureDescription	
						   AND		PC.Findings_Description=@p_var_Findings		   
							
										    
						  )
		  BEGIN 
			 INSERT INTO Doctor_Procedure_Findings
			                    (
						          Doctor_ID,Procedure_Description,[Findings_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value
								)
			 VALUES   (	@p_var_Doctor_ID,@p_var_ProcedureDescription,@p_var_Findings,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority)	
			 END			
	       	ELSE
			BEGIN
			UPDATE		Doctor_Procedure_Findings
			 SET		Procedure_Description		 = @p_var_ProcedureDescription,
						Findings_Description		=  @p_var_Findings,	  
			   	        Priority_Value = @p_var_priority 
			WHERE		Procedure_Description		 = @p_var_ProcedureDescription
			AND			Findings_Description		= 		@p_var_Findings	   
			SELECT 1 AS SAVE_STATUS
		  END
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_FullRegistrationDetails]    Script Date: 16-Jan-18 8:23:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_FullRegistrationDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  02-March-2016
-- Description :  This stored procedure will save FullRegistrationDetails.
--  created by :  suyog khairnar    
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_FullRegistrationDetails]
	@p_nvar_Patient_Id                     NVARCHAR(32),
	@p_nvar_Doctor_Id                      NVARCHAR(30),
	@p_nvar_Folder_No                      NVARCHAR(30),
	@p_nvar_First_Name                     NVARCHAR(100),
	@p_nvar_Middle_Name                    NVARCHAR(100),
	@p_nvar_Last_Name                      NVARCHAR(100),
	@p_nvar_Email_Id                       NVARCHAR(60),
	@p_chr_Gender_ID                       CHAR(1),
	@p_nvar_Address_1                      NVARCHAR(150),
	@p_nvar_Address_2                      NVARCHAR(150),
	@p_int_Area_Id                         INT,
	@p_nvar_City_Id                        NVARCHAR(6),
	@p_nvar_State_Id                       NVARCHAR(5),
	@p_nvar_Country_Id                     NVARCHAR(6),
	@p_nvar_PinCode                        NVARCHAR(20),
	@p_dt_Date_Of_Birth                    DATE,
	@p_sint_Age_Given                      SMALLINT,
	@p_dec_Weight_IN_KGS                   DECIMAL(8, 2),
	@p_dec_Height_In_CMS                   DECIMAL(8, 2),
	@p_int_BloodGroup_ID                   INT, 
	@P_nvar_Mobile_1                       NVARCHAR(20),
	@P_nvar_Emerg_No                       NVARCHAR(30), 
	@P_nvar_Emerg_Name                     NVARCHAR(60),
	@p_dt_Date_Of_Reg                      DATE,
	@p_chr_Registration_Status             CHAR(1),

	@p_bit_Asthama                         BIT,
	@p_bit_Hypertension                    BIT,
	@p_bit_Diabetes                        BIT,
	@p_bit_Cholestrol                      BIT,
	@p_bit_IHD                             BIT,
	@p_bit_TH                              BIT,
	@p_bit_Smoking                         BIT,
	@p_bit_Tobaco                          BIT,
	@p_bit_Alchohol                        BIT,
	@p_nvar_Past_Surgeries                 NVARCHAR(1000),
	@p_nvar_Allergy_Dtls                   NVARCHAR(1000),
	@p_nvar_Past_Medication                NVARCHAR(1000),
	@p_nvar_Chronic_DiseaseComments        NVARCHAR(1000),
	@p_nvar_Habits_Comments                NVARCHAR(1000),
	@p_nvar_Other_Chronic_Disease          NVARCHAR(1000),

	@p_bit_Family_Asthama                  BIT,
	@p_bit_Family_Hypertension             BIT,
	@p_bit_Family_Diabetes                 BIT,
	@p_bit_Family_Cholestrol               BIT,
	@p_bit_Family_IHD                      BIT,
	@p_bit_Family_TH                       BIT,
	@p_nvar_Family_Chronic_DiseaseComments NVARCHAR(1000),
	@p_nvar_Family_History                 NVARCHAR(1000),
	@p_var_User_Id			               NVARCHAR(32),
	@p_nvar_AdditionalComments			   NVARCHAR(1000),
	@p_nvar_AddictionComments			   NVARCHAR(1000),
	@p_nvar_Family_AdditionalComments	   NVARCHAR(1000),
	@p_nvar_FolderPath					   NVARCHAR(100),
	@p_nvar_ResidentialNo				   NVARCHAR(30),
	@p_var_refer_by_ID					   CHAR(1),
	@p_nvar_refer_doctor_details           NVARCHAR(200),

	@p_chr_Marital_Status_ID		CHAR(1),
	@p_chr_Occupation_ID			INT,
	@p_nvar_DoctorAddress			NVARCHAR(150),
	@p_nvar_Doctor_Mobile			NVARCHAR(20),
	@p_nvar_Doctor_Email			NVARCHAR(60),
	@p_var_SupportiveTest			NVARCHAR(1000)
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY

       IF(@p_int_BloodGroup_ID = 0)
         SET @p_int_BloodGroup_ID = NULL;

	  IF(@p_chr_Marital_Status_ID = '')
	  BEGIN
         SET @p_chr_Marital_Status_ID = NULL;
	  END

	  IF(@p_chr_Occupation_ID = 0)
	  BEGIN
         SET @p_chr_Occupation_ID = NULL;
	  END
		

		
		IF(LEN(@p_nvar_Patient_Id) > 0 )
		BEGIN
				UPDATE [dbo].[Patient_Master]
				   SET  Folder_No								=   @p_nvar_Folder_No,
						First_Name								=   @p_nvar_First_Name,
						Middle_Name								=   @p_nvar_Middle_Name,
						Last_Name								=   @p_nvar_Last_Name,
						Email_ID								=   @p_nvar_Email_Id,
						Gender_ID								=   @p_chr_Gender_ID,
						Address_1								=   @p_nvar_Address_1,
						--Address_2								=   @p_nvar_Address_2,
						Area_ID									=   @p_int_Area_Id,
						City_ID									=   @p_nvar_City_Id,
						State_ID								=   @p_nvar_State_Id,
						Country_ID								=   @p_nvar_Country_Id,
						Pincode									=   @p_nvar_PinCode,
						Date_Of_Birth							=   @p_dt_Date_Of_Birth,
						Age_Given								=   @p_sint_Age_Given,
						Weight_IN_KGS							=   @p_dec_Weight_IN_KGS,
						Height_In_CMS							=   @p_dec_Height_In_CMS,
						BloodGroup_ID							=   @p_int_BloodGroup_ID,
						Mobile_1								=   @p_nvar_Mobile_1,
						Emergency_Number						=	@p_nvar_Emerg_No,
						Emergency_Name							=	@p_nvar_Emerg_Name,
						Date_Of_Registration					=	@p_dt_Date_Of_Reg,
						Registration_Status						=	@p_chr_Registration_Status,
						Modified_On								=	 GetDate(),
						ModifiedBy_Name							=	 @p_var_User_Id,
						Folder_Path								=	@p_nvar_FolderPath	,
						Residential_No							=	@p_nvar_ResidentialNo,
						Refer_ID								=	@p_var_refer_by_ID,
						Refer_Doctor_Details					=	@p_nvar_refer_doctor_details,

						Marital_Status_ID						=	@p_chr_Marital_Status_ID,
						Occupation_ID							=	@p_chr_Occupation_ID,
						Doctor_Address							=	@p_nvar_DoctorAddress,
						Doctor_Email							=	@p_nvar_Doctor_Email,
						Doctor_Mobile							=	@p_nvar_Doctor_Mobile



						
                 WHERE  ID    = @p_nvar_Patient_Id
                 
              IF EXISTS(SELECT ID
                         FROM    Patient_Master PM 
                         INNER JOIN  Patient_Master_ChronicData PMC
                         ON          PM.ID=PMC.Patient_ID
                         INNER JOIN  Patient_Master_Family PMF
                         ON          PM.ID=PMF.Patient_ID
                         WHERE  ID    = @p_nvar_Patient_Id ) 
                BEGIN
                  UPDATE [dbo].[Patient_Master_ChronicData]
				    SET  Asthama          =  @p_bit_Asthama,
				         Hypertension     =  @p_bit_Hypertension,
				         Diabetes         =  @p_bit_Diabetes,
				         Cholestrol       =  @p_bit_Cholestrol,
				         IHD              =  @p_bit_IHD,
				         TH               =  @p_bit_TH,
						 Smoking          =  @p_bit_Smoking,
						 Tobaco           =  @p_bit_Tobaco,
						 Alchohol         =  @p_bit_Alchohol,
						 Past_Surgeries   =  @p_nvar_Past_Surgeries,
						 Allergy_Dtls     =  @p_nvar_Allergy_Dtls,
						 Past_Medication  =  @p_nvar_Past_Medication,
						 Chronic_DiseaseComments = @p_nvar_Chronic_DiseaseComments,
						 Habits_Comments       =  @p_nvar_Habits_Comments,
						 Other_Chronic_Disease =  @p_nvar_Other_Chronic_Disease,
						 Modified_On   =  GetDate(),
						 ModifiedBy_Name =  @p_var_User_Id,
						 Additional_Comment=@p_nvar_AdditionalComments,
						 Addiction_Comment=@p_nvar_AddictionComments
				 WHERE   Patient_ID   = @p_nvar_Patient_Id
				
                 UPDATE [dbo].[Patient_Master_Family]
				    SET  Asthama					=	@p_bit_Family_Asthama,
						 Hypertension				=	@p_bit_Family_Hypertension,
						 Diabetes					=	@p_bit_Family_Diabetes,
						 Cholestrol					=	@p_bit_Family_Cholestrol,
						 IHD						=	@p_bit_Family_IHD,
						 TH							=	@p_bit_Family_TH,
						 Chronic_DiseaseComments	=	@p_nvar_Family_Chronic_DiseaseComments,
						 Family_History				=	@p_nvar_Family_History,
						 Modified_On				=	GetDate(),
						 ModifiedBy_Name			=	@p_var_User_Id,
						 FamilyAdditional_Comment	=	@p_nvar_Family_AdditionalComments,
						 Supportive_Tests			=	@p_var_SupportiveTest

				 WHERE   Patient_ID   = @p_nvar_Patient_Id
				 
			   END
			  
		    ELSE
		      BEGIN	
                INSERT INTO Patient_Master_ChronicData
						    (Patient_ID,
							Doctor_ID,
						     Asthama,
						     Hypertension,
							 Diabetes,
							 Cholestrol,
							 IHD,
							 TH,
							 Smoking,
							 Tobaco,
							 Alchohol,
							 Past_Surgeries,
							 Allergy_Dtls,
							 Past_Medication,
							 Chronic_DiseaseComments,
							 Habits_Comments,
							 Other_Chronic_Disease,
							 Created_On,
							 CreatedBy_Name,
							 Modified_On,
							 ModifiedBy_Name,
							 Additional_Comment,
							 Addiction_Comment
							 )
                     VALUES
						    (@p_nvar_Patient_Id,
							@p_nvar_Doctor_Id,
							 @p_bit_Asthama,
							 @p_bit_Hypertension,
							 @p_bit_Diabetes,
							 @p_bit_Cholestrol,
							 @p_bit_IHD,
							 @p_bit_TH,
							 @p_bit_Smoking,
							 @p_bit_Tobaco,
							 @p_bit_Alchohol,
							 @p_nvar_Past_Surgeries,
							 @p_nvar_Allergy_Dtls,
							 @p_nvar_Past_Medication,
							 @p_nvar_Chronic_DiseaseComments,
							 @p_nvar_Habits_Comments,
							 @p_nvar_Other_Chronic_Disease,
							 GetDate(),
							 @p_var_User_Id,
							 GetDate(),
							 @p_var_User_Id,
							 @p_nvar_AdditionalComments,
							 @p_nvar_AddictionComments)

			     INSERT INTO Patient_Master_Family
							 (Patient_ID,
							 Doctor_ID,
							  Asthama,
							  Hypertension,
							  Diabetes,
							  Cholestrol,
							  IHD,
							  TH,
							  Chronic_DiseaseComments,
							  Family_History,
							  Created_On,
							  CreatedBy_Name,
							  Modified_On,
							  ModifiedBy_Name,
							  FamilyAdditional_Comment,
							  Supportive_Tests)		  
					  VALUES
							 (@p_nvar_Patient_Id,
							 @p_nvar_Doctor_Id,
							  @p_bit_Family_Asthama,
							  @p_bit_Family_Hypertension,
							  @p_bit_Family_Diabetes,
							  @p_bit_Family_Cholestrol,
							  @p_bit_Family_IHD,
							  @p_bit_Family_TH,
							  @p_nvar_Family_Chronic_DiseaseComments,
							  @p_nvar_Family_History,
							  GetDate(),
							  @p_var_User_Id,
							  GetDate(),
							  @p_var_User_Id,
							  @p_nvar_Family_AdditionalComments,
							  @p_var_SupportiveTest)
				END
				BEGIN
				SELECT 1 AS SAVE_STATUS
				END
		END 
		ELSE 
			BEGIN     
					DECLARE @bintLastSequenceNo BIGINT
					DECLARE @bintLastSequenceNoFld BIGINT
					DECLARE @strPrefixChar VARCHAR(4)
					DECLARE @intTotalLengthFLD  INT
			        DECLARE @intTotalLengthPAT  INT
					
					
			 IF ( LEN(LTRIM(RTRIM(@p_nvar_Folder_No))) <=0 )
	         BEGIN	
				 SELECT @bintLastSequenceNoFld = Last_SequenceNo, 
			            @strPrefixChar= Prefix_Char,
			            @intTotalLengthFLD =  Total_Length
    	           FROM [dbo].[Sequence_Nos] 
                  WHERE DOCTOR_ID = @p_nvar_Doctor_ID AND Entity_Type = 'FLD'
                  
                    SET @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
                    SET @p_nvar_Folder_No = @p_nvar_Last_Name + '-' + 
                    REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld))) 
                    + convert(nvarchar(5),@bintLastSequenceNoFld)
             END  
             
                  

				 SELECT @bintLastSequenceNo = Last_SequenceNo,
					    @strPrefixChar= Prefix_Char,
					    @intTotalLengthPAT =  Total_Length
                   FROM [dbo].[Sequence_Nos] 
                  WHERE DOCTOR_ID = @p_nvar_Doctor_Id AND Entity_Type = 'PAT'

                   SET @bintLastSequenceNo = @bintLastSequenceNo + 1

                   SET @p_nvar_Patient_Id = CONVERT(nvarchar(10),getdate(),105) + '-' 
                       + REPLICATE('0',@intTotalLengthPAT - LEN(convert(nvarchar(5),@bintLastSequenceNo))) 
                       + convert(nvarchar(5),@bintLastSequenceNo)


				INSERT INTO Patient_Master
							(ID,
							Doctor_ID,
							Folder_No,
							First_Name,
							Middle_Name,
							Last_Name,
							Email_ID,
							Gender_ID,
							Address_1,
							Address_2,
							Area_ID,
							City_ID,
							State_ID,
							Country_ID,
							Pincode,
							Date_Of_Birth,
							Age_Given,
							Weight_IN_KGS,
							Height_In_CMS,
							BloodGroup_ID,
							Mobile_1,
							Emergency_Number,
							Emergency_Name,
							Date_Of_Registration,
							Registration_Status,
							Created_On,
							CreatedBy_Name,
							Modified_On,
							ModifiedBy_Name,Folder_Path,Residential_No,
							Refer_ID,
							Refer_Doctor_Details)
                   VALUES
							(@p_nvar_Patient_Id,
							@p_nvar_Doctor_Id,
							@p_nvar_Folder_No,
							@p_nvar_First_Name,                     
							@p_nvar_Middle_Name,                  
							@p_nvar_Last_Name,                   
							@p_nvar_Email_Id,                      
							@p_chr_Gender_ID,                      
							@p_nvar_Address_1,                    
							@p_nvar_Address_2,                     
							@p_int_Area_Id,                       
							@p_nvar_City_Id,                       
							@p_nvar_State_Id,                       
							@p_nvar_Country_Id,                    
							@p_nvar_PinCode,                        
							@p_dt_Date_Of_Birth,                  
							@p_sint_Age_Given,                    
							@p_dec_Weight_IN_KGS,
							@p_dec_Height_In_CMS,             
							@p_int_BloodGroup_ID,                  
							@p_nvar_Mobile_1,                    
							@p_nvar_Emerg_No,                   
							@p_nvar_Emerg_Name,                    
							@p_dt_Date_Of_Reg,                     
							@p_chr_Registration_Status,
							GetDate(),
							@p_var_User_Id,
							GetDate(),
							@p_var_User_Id,@p_nvar_FolderPath,@p_nvar_ResidentialNo,
							@p_var_refer_by_ID,
							@p_nvar_refer_doctor_details)


					 UPDATE [dbo].[Sequence_Nos]
						SET Last_SequenceNo = @bintLastSequenceNo
					  WHERE DOCTOR_ID = @p_nvar_Doctor_Id AND Entity_Type ='PAT'
					  
				 IF ( LEN(LTRIM(RTRIM(@p_nvar_Folder_No))) > 0 )
				BEGIN				 
					UPDATE [dbo].[Sequence_Nos]
					SET    Last_SequenceNo = @bintLastSequenceNoFld 
					WHERE  DOCTOR_ID = @p_nvar_Doctor_ID AND Entity_Type = 'FLD'   				 
				END
				

                INSERT INTO Patient_Master_ChronicData
							(Patient_ID,
							Asthama,
							Hypertension,
							Diabetes,
							Cholestrol,
							IHD,
							TH,
							Smoking,
							Tobaco,
							Alchohol,
							Past_Surgeries,
							Allergy_Dtls,
							Past_Medication,
							Chronic_DiseaseComments,
							Habits_Comments,
							Other_Chronic_Disease,
							Created_On,
							CreatedBy_Name,
							Modified_On,
							ModifiedBy_Name,
							Additional_Comment,
							 Addiction_Comment)
					VALUES
							(@p_nvar_Patient_Id,
							@p_bit_Asthama,
							@p_bit_Hypertension,
							@p_bit_Diabetes,
							@p_bit_Cholestrol,
							@p_bit_IHD,
							@p_bit_TH,
							@p_bit_Smoking,
							@p_bit_Tobaco,
							@p_bit_Alchohol,
							@p_nvar_Past_Surgeries,
							@p_nvar_Allergy_Dtls,
							@p_nvar_Past_Medication,
							@p_nvar_Chronic_DiseaseComments,
							@p_nvar_Habits_Comments,
							@p_nvar_Other_Chronic_Disease,
							GetDate(),
							@p_var_User_Id,
							GetDate(),
							@p_var_User_Id,
							 @p_nvar_AdditionalComments,
							 @p_nvar_AddictionComments)

				INSERT INTO Patient_Master_Family
							(
							Patient_ID,
							Asthama,
							Hypertension,
							Diabetes,
							Cholestrol,
							IHD,
							TH,
							Chronic_DiseaseComments,
							Family_History,
							Created_On,
							CreatedBy_Name,
							Modified_On,
							ModifiedBy_Name,
							FamilyAdditional_Comment)		  
					VALUES
							(@p_nvar_Patient_Id,
							@p_bit_Family_Asthama,
							@p_bit_Family_Hypertension,
							@p_bit_Family_Diabetes,
							@p_bit_Family_Cholestrol,
							@p_bit_Family_IHD,
							@p_bit_Family_TH,
							@p_nvar_Family_Chronic_DiseaseComments,
							@p_nvar_Family_History,
							GetDate(),
							@p_var_User_Id,
							GetDate(),
							@p_var_User_Id,
							@p_nvar_Family_AdditionalComments)


		
		END
	    --END
		
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
        END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_FullRegistrationDetails_For_Gynec]    Script Date: 16-Jan-18 8:23:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_FullRegistrationDetails_For_Gynec]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  02-March-2016
-- Description :  This stored procedure will save FullRegistrationDetails.
--  created by :  suyog khairnar    
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_FullRegistrationDetails_For_Gynec]

	@p_nvar_Patient_Id                     NVARCHAR(32),
	@p_nvar_Doctor_Id                      NVARCHAR(30),

	@p_bit_Asthama                         BIT,
	@p_bit_Hypertension                    BIT,
	@p_bit_Diabetes                        BIT,
	@p_bit_Cholestrol                      BIT,
	@p_bit_IHD                             BIT,
	@p_bit_TH                              BIT,
	@p_bit_Smoking                         BIT,
	@p_bit_Tobaco                          BIT,
	@p_bit_Alchohol                        BIT,

	@p_nvar_Past_Surgeries                 NVARCHAR(1000),
	@p_nvar_Allergy_Dtls                   NVARCHAR(1000),
	@p_nvar_Past_Medication                NVARCHAR(1000),
	@p_nvar_Chronic_DiseaseComments        NVARCHAR(1000),
	@p_nvar_Habits_Comments                NVARCHAR(1000),
	@p_nvar_Other_Chronic_Disease          NVARCHAR(1000),

	@p_bit_Family_Asthama                  BIT,
	@p_bit_Family_Hypertension             BIT,
	@p_bit_Family_Diabetes                 BIT,
	@p_bit_Family_Cholestrol               BIT,
	@p_bit_Family_IHD                      BIT,
	@p_bit_Family_TH                       BIT,
	@p_nvar_Family_Chronic_DiseaseComments NVARCHAR(1000),
	@p_nvar_Family_History                 NVARCHAR(1000),
	@p_var_User_Id			               NVARCHAR(32),
	@p_nvar_AdditionalComments			   NVARCHAR(1000),
	@p_nvar_AddictionComments			   NVARCHAR(1000),
	@p_nvar_Family_AdditionalComments	   NVARCHAR(1000),
	@p_var_SupportiveTest				   NVARCHAR(1000),

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),
	@p_var_PatientVisitNo				   INT
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY

		IF(LEN(@p_nvar_Patient_Id) > 0 )
		BEGIN
				
                 
              IF EXISTS(SELECT ID
                         FROM    Patient_Master PM 
                         INNER JOIN  Patient_Master_ChronicData PMC
                         ON          PM.ID=PMC.Patient_ID
                         WHERE  ID    = @p_nvar_Patient_Id ) 
                BEGIN
                  
				  UPDATE [dbo].[Patient_Master_ChronicData]
				    SET  Asthama          =  @p_bit_Asthama,
				         Hypertension     =  @p_bit_Hypertension,
				         Diabetes         =  @p_bit_Diabetes,
				         Cholestrol       =  @p_bit_Cholestrol,
				         IHD              =  @p_bit_IHD,
				         TH               =  @p_bit_TH,
						 Smoking          =  @p_bit_Smoking,
						 Tobaco           =  @p_bit_Tobaco,
						 Alchohol         =  @p_bit_Alchohol,
						 Past_Surgeries   =  @p_nvar_Past_Surgeries,
						 Allergy_Dtls     =  @p_nvar_Allergy_Dtls,
						 Past_Medication  =  @p_nvar_Past_Medication,
						 Chronic_DiseaseComments = @p_nvar_Chronic_DiseaseComments,
						 Habits_Comments       =  @p_nvar_Habits_Comments,
						 Other_Chronic_Disease =  @p_nvar_Other_Chronic_Disease,
						 Modified_On   =  GetDate(),
						 ModifiedBy_Name =  @p_var_User_Id,
						 Additional_Comment=@p_nvar_AdditionalComments,
						 Addiction_Comment=@p_nvar_AddictionComments

				 WHERE   Patient_ID   = @p_nvar_Patient_Id
				 AND	 Doctor_ID	= @p_nvar_Doctor_Id

				 END

				 ELSE

				 BEGIN
				 INSERT INTO Patient_Master_ChronicData
						    (Patient_ID,
							Doctor_ID,
						     Asthama,
						     Hypertension,
							 Diabetes,
							 Cholestrol,
							 IHD,
							 TH,
							 Smoking,
							 Tobaco,
							 Alchohol,
							 Past_Surgeries,
							 Allergy_Dtls,
							 Past_Medication,
							 Chronic_DiseaseComments,
							 Habits_Comments,
							 Other_Chronic_Disease,
							 Created_On,
							 CreatedBy_Name,
							 Modified_On,
							 ModifiedBy_Name,
							 Additional_Comment,
							 Addiction_Comment
							 )
                     VALUES
						    (@p_nvar_Patient_Id,
							@p_nvar_Doctor_Id,
							 @p_bit_Asthama,
							 @p_bit_Hypertension,
							 @p_bit_Diabetes,
							 @p_bit_Cholestrol,
							 @p_bit_IHD,
							 @p_bit_TH,
							 @p_bit_Smoking,
							 @p_bit_Tobaco,
							 @p_bit_Alchohol,
							 @p_nvar_Past_Surgeries,
							 @p_nvar_Allergy_Dtls,
							 @p_nvar_Past_Medication,
							 @p_nvar_Chronic_DiseaseComments,
							 @p_nvar_Habits_Comments,
							 @p_nvar_Other_Chronic_Disease,
							 GetDate(),
							 @p_var_User_Id,
							 GetDate(),
							 @p_var_User_Id,
							 @p_nvar_AdditionalComments,
							 @p_nvar_AddictionComments)
				 END


				 IF EXISTS(SELECT ID
                         FROM    Patient_Master PM 
                         INNER JOIN  Patient_Master_Family PMF
                         ON          PM.ID=PMF.Patient_ID
                         WHERE  ID    = @p_nvar_Patient_Id ) 

				BEGIN
				
                 UPDATE [dbo].[Patient_Master_Family]
				    SET  Asthama					=	@p_bit_Family_Asthama,
						 Hypertension				=	@p_bit_Family_Hypertension,
						 Diabetes					=	@p_bit_Family_Diabetes,
						 Cholestrol					=	@p_bit_Family_Cholestrol,
						 IHD						=	@p_bit_Family_IHD,
						 TH							=	@p_bit_Family_TH,
						 Chronic_DiseaseComments	=	@p_nvar_Family_Chronic_DiseaseComments,
						 Family_History				=	@p_nvar_Family_History,
						 Modified_On				=	GetDate(),
						 ModifiedBy_Name			=	@p_var_User_Id,
						 FamilyAdditional_Comment	=	@p_nvar_Family_AdditionalComments,
						 Supportive_Tests			=	@p_var_SupportiveTest

				 

				 WHERE   Patient_ID   = @p_nvar_Patient_Id
				 AND	 Doctor_ID	= @p_nvar_Doctor_Id
				END

				ELSE

				BEGIN
				 INSERT INTO Patient_Master_Family
							 (Patient_ID,
							 Doctor_ID,
							  Asthama,
							  Hypertension,
							  Diabetes,
							  Cholestrol,
							  IHD,
							  TH,
							  Chronic_DiseaseComments,
							  Family_History,
							  Created_On,
							  CreatedBy_Name,
							  Modified_On,
							  ModifiedBy_Name,
							  FamilyAdditional_Comment,
							  [Supportive_Tests])		  
					  VALUES
							 (@p_nvar_Patient_Id,
							 @p_nvar_Doctor_Id,
							  @p_bit_Family_Asthama,
							  @p_bit_Family_Hypertension,
							  @p_bit_Family_Diabetes,
							  @p_bit_Family_Cholestrol,
							  @p_bit_Family_IHD,
							  @p_bit_Family_TH,
							  @p_nvar_Family_Chronic_DiseaseComments,
							  @p_nvar_Family_History,
							  GetDate(),
							  @p_var_User_Id,
							  GetDate(),
							  @p_var_User_Id,
							  @p_nvar_Family_AdditionalComments,
							  @p_var_SupportiveTest)
				END


				IF EXISTS(SELECT ID
                         FROM    Patient_Master PM 
                         INNER JOIN  [dbo].[Patient_Menstruation History] PMH
                         ON          PM.ID=PMH.Patient_ID
                         WHERE  ID    = @p_nvar_Patient_Id ) 

				BEGIN
				 UPDATE	[dbo].[Patient_Menstruation History]
				 SET	[FMP]	=							@p_var_FMP,					
						[PRMC]	=							@p_var_PRMC	,				
						[PAMC]	=							@p_var_PAMC	,				
						[LMP]	=							@p_var_LMP,					
						[Obstetrics_History]	=			@p_var_ObstetricHistory,		
						[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
						[Additional_Comments]	=			@p_var_Menstrual_Add_Comments,
						Modified_On				=	GetDate(),
						ModifiedBy_Name			=	@p_var_User_Id

				WHERE   Patient_ID  = @p_nvar_Patient_Id
				AND		Doctor_ID	= @p_nvar_Doctor_Id
				END

				ELSE

				BEGIN
				INSERT INTO [dbo].[Patient_Menstruation History]
							  VALUES(
								@p_nvar_Patient_Id,
								@p_nvar_Doctor_Id,
								@p_var_FMP,					
								@p_var_PRMC,				
								@p_var_PAMC,				
								@p_var_LMP,					
								@p_var_ObstetricHistory,		
								@p_var_SurgicalHistory,		
								@p_var_Menstrual_Add_Comments,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id
								)

				END

				UPDATE  Patient_Visits
				SET		IS_Submit_Gynec_Details = 1
				WHERE	Patient_ID		 = @p_nvar_Patient_Id
				AND		Patient_Visit_No = @p_var_PatientVisitNo
				AND		Doctor_ID = @p_nvar_Doctor_Id
				 
			   
			
				BEGIN
				SELECT 1 AS SAVE_STATUS
				END
		END 
		
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
        END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_Invoice_KeywordMedicine_MasterData]    Script Date: 16-Jan-18 8:23:22 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_HopitalBillReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_HopitalBillReceiptDetails]
	@Todays_VisitDate																		DATETIME,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Receipt_Data		[dbo].[UDT_Insert_Receipt_Hospital_Details]				READONLY,
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	--@p_var_Patient_Visit_No																int,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)	,						
	@p_var_Bill_No																			NVARCHAR(30),
	@p_str_IPDRefereNumber																			NVARCHAR(100)
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN


	----------Generate sequence no. of receipt no.---------------

	IF NOT EXISTS 
		(	SELECT	*
			FROM	Patient_IPD_Receipts
			WHERE	Receipt_Date	=	@Todays_VisitDate
			AND		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			--AND		Shift_ID		=	@p_var_Shift_ID
			AND		Receipt_Type	=	@p_var_Receipt_Type
			AND		ISNULL(Visit_Type,'')		=	@p_var_Visit_Type	
			AND    IPD_RefNo=@p_str_IPDRefereNumber
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE  [Clinic_ID] = @p_var_Clinic_ID

			and entity_type = 'IRC'

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = 'I-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE  [Clinic_ID] = @p_var_Clinic_ID
					  and entity_type = 'IRC'
			END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------



	------Add and Update Receipt Details--------------------

	

	 MERGE  [dbo].[Patient_IPD_Receipts] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Receipt_Number]			AS RECEIPT_NO,
					 [Receipt_Date]				AS RECEIPT_DATE,
					 [Receipt_Type]				AS RECEIPT_TYPE,
					 [Receipt_Amount]			AS RECEIPT_AMOUNT,
					 [Shift_ID]					AS SHIFT_ID
	
			FROM	@p_var_Insert_Receipt_Data 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,RECEIPT_NO,RECEIPT_DATE,RECEIPT_TYPE,RECEIPT_AMOUNT,SHIFT_ID
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[Receipt_Number]			=SRCREM.RECEIPT_NO	AND
				MR.[Shift_ID]				=SRCREM.SHIFT_ID
				
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		--MR.[Receipt_Type]			= SRCREM.RECEIPT_TYPE,
				MR.[Receipt_Amount]			= SRCREM.RECEIPT_AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				MR.[Treatment_Details]		= @p_var_TreatmentDetails,
				MR.Title					= @p_var_Title,
				MR.[From_Date]				= @p_var_from_date,
				MR.[To_Date]				= @p_var_to_date,
				MR.[Receipt_Date]				= @Todays_VisitDate,
				MR.IPD_RefNo= @p_str_IPDRefereNumber
				

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type], IPD_RefNo
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,CONVERT(date,@Todays_VisitDate),@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type,@p_str_IPDRefereNumber
		);
		

		IF @p_var_Visit_Type='V'

		BEGIN
			UPDATE [dbo].[Discharge_Bill_Hdr]  set	[Receipt_Number]=@p_var_Receipt_No
													

			WHERE	--CONVERT(DATE,[P])=@Todays_VisitDate
					Doctor_ID=@p_var_Doctor_ID AND
					Clinic_ID=@p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			and     Bill_No =@p_var_Bill_No
				
		END

	
	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_Receipt_No AS Receipt_No

END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_Regenerate]    Script Date: 16-Jan-18 8:30:35 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Invoice_KeywordMedicine_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Invoice_KeywordMedicine_MasterData]

 	@p_var_Keyword																NVARCHAR(100),
	@p_var_description															NVARCHAR(1000),
	@p_var_quantity																decimal(7,2),
	@p_var_sortorder															int,
	@p_var_User_Id																NVARCHAR(90),
	@p_var_Insert_Keyword_Data		UDT_Insert_Keyword_Medicine_MasterData			READONLY
	
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE [dbo].[IPD_INVOICEDATA] AS DM

	 USING(
			SELECT DISTINCT 
							[IPD_Keyword]			AS KEYWORD,
							[Description]			AS DESCR

			FROM			 @p_var_Insert_Keyword_Data
		  )
	
	 AS	 SRC (
				KEYWORD,DESCR
			 )
	 ON		 (
				DM.[IPD_Keyword]	= SRC.KEYWORD AND
				DM.[Description]	= SRC.DESCR
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	
			DM.[SortOrder]					= @p_var_sortorder,
			DM.[Quantity]					= @p_var_quantity,
			DM.Delete_Flag					= 0
			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[IPD_Keyword],
					[Description],	
					[Quantity],
					[SortOrder],		
					Delete_Flag			
				)
	VALUES
				(	@p_var_Keyword,@p_var_description,@p_var_quantity,@p_var_sortorder,0);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_InvoiceData]    Script Date: 16-Jan-18 8:23:33 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_InvoiceData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 26 July 2017
-- Description	: This stored procedure will insert and update the INVOICE details
-- Created By	: Varsha Khandre
-- =============================================
 
 CREATE PROCEDURE [dbo].[USP_Insert_InvoiceData]
	
	
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Shift_ID																			TINYINT,
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_IPD_Ref_No																		NVARCHAR(100),
	@p_var_InvoiceNo																		NVARCHAR(100),
	@p_var_InvoiceDate																		DATETIME,
	@p_dec_TotalAmount																		DECIMAL(10,2),
	@p_dec_CollectedAmt																	    DECIMAL(10,2),
	@p_dec_Discount																			DECIMAL(10,2),
	@p_dec_Balance																			DECIMAL(10,2),
	@p_dec_NetAmount																		DECIMAL(10,2),
	@p_var_Comments																			NVARCHAR(1000),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Discharge_Data		UDT_Insert_Invoice_Details							READONLY,
	@p_dt_Insert_Invoice_DataHdr		UDT_Update_Invoice_Hdr								READONLY
		
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN



	----------Generate sequence of IPD no.---------------

	IF NOT EXISTS 
		(	
		
			SELECT	*
			FROM	[dbo].[Discharge_Invoice_Details]
			WHERE	
			 		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			--AND		Shift_ID		=	@p_var_Shift_ID
			AND		[IPD_RefNo]		=	@p_var_IPD_Ref_No
			AND		[Invoice_No]	=	@p_var_InvoiceNo
			
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoIPD BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @strMonth NVARCHAR(3)
			
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_InvoiceNo))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoIPD = Last_SequenceNo, 
					@strPrefixChar         = Prefix_Char,
					@intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 
				WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'INV'

			

				IF(@bintLastSequenceNoIPD = 9999)
				BEGIN
					SET   @bintLastSequenceNoIPD = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoIPD = @bintLastSequenceNoIPD + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(4),@bintLastSequenceNoIPD)))

				SET @strMonth= SUBSTRING(CONVERT(nvarchar(6),getdate(), 112),5,2)
				
				
				SET   @p_var_InvoiceNo = @strPrefixChar + '-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY )+ '-' + @strMonth + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoIPD)
				 
				SET		@p_var_InvoiceNo = @p_var_InvoiceNo

				

				UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNoIPD
					  WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'INV'
			END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS

		UPDATE [dbo].[Discharge_Invoice_Details] SET Delete_Flag = 1
		WHERE		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		[IPD_RefNo]		=	@p_var_IPD_Ref_No
			AND		[Invoice_No]		=	@p_var_InvoiceNo

		END

	----------------------------------------------------------------------------------------------------------------


		MERGE  [dbo].[Discharge_Invoice_Hdr] as DH

		USING(
			SELECT DISTINCT 
					 
					 [Doctor_ID]				AS DOCTOR_ID_HD,
					 [Clinic_ID]				AS CLINIC_ID_HD,
					 [Patient_ID]				AS PATIENT_ID_HD,
					 [IPD_RefNo]				AS IPDREFNO_HD,
					 [Invoice_No]				AS INVOICENO_HD
					
					 
												
			FROM	@p_dt_Insert_Invoice_DataHdr
		  )		

		  AS	 SRCHDR 
			 (
				DOCTOR_ID_HD,CLINIC_ID_HD,PATIENT_ID_HD,IPDREFNO_HD,INVOICENO_HD
			 )
	 ON		 (
				DH.[Doctor_ID]				=SRCHDR.DOCTOR_ID_HD	AND
				DH.[Clinic_ID]				=SRCHDR.CLINIC_ID_HD	AND
				DH.[Patient_ID]				=SRCHDR.PATIENT_ID_HD	AND
				DH.[IPD_RefNo]				=SRCHDR.IPDREFNO_HD	AND
				DH.[Invoice_No]				=SRCHDR.INVOICENO_HD
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		
				DH.[Total_Amount]				= @p_dec_TotalAmount,
				DH.[Collected_Amount]			= @p_dec_CollectedAmt,
				DH.[Discount]					= @p_dec_Discount,
				DH.[Balance]					= @p_dec_Balance,
				DH.[Net_Amount]					= @p_dec_NetAmount,
				DH.[Comments]					= @p_var_Comments,
				DH.Is_Printed					= 0,
				DH.[Modified_On]				= GETDATE(),
				DH.[ModifiedBy_Name]			= @p_var_User_Id
					

	WHEN NOT MATCHED THEN


	INSERT  (
			 [Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],[Invoice_No],[Invoice_Date],
			[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Total_Amount],[Collected_Amount],[Discount],
			[Balance],[Net_Amount],[Comments],[Is_Printed]
			)
		
		VALUES(
				@p_var_Doctor_ID,@p_var_Clinic_ID,
				@p_var_Patient_ID,
				@p_var_IPD_Ref_No,
				@p_var_InvoiceNo,
				@p_var_InvoiceDate,
				GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
				@p_dec_TotalAmount,
				@p_dec_CollectedAmt,
				@p_dec_Discount,
				@p_dec_Balance,
				@p_dec_NetAmount,
				@p_var_Comments	,
				0
			);


	------Add and Update IPD Details--------------------

	

	 MERGE  [dbo].[Discharge_Invoice_Details] as MR

	 USING(
			SELECT DISTINCT 
					 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [IPD_RefNo]				AS IPDREFNO,
					 [Invoice_No]				AS INVOICENO,
					 [Description]				AS DESCR,
					 [Unit_Price]				AS UNIT_PRICE,
					 [Quantity]					AS QUANTITY
					 
												
			FROM	@p_var_Insert_Discharge_Data
		  )										
	
	 AS	 SRCREM 
			 (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,IPDREFNO,INVOICENO,DESCR,UNIT_PRICE,QUANTITY
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				--MR.[Shift_ID]				=SRCREM.SHIFT_ID    AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[IPD_RefNo]				=SRCREM.IPDREFNO	AND
				MR.[Invoice_No]				=SRCREM.INVOICENO	AND
				MR.[Description]			=SRCREM.DESCR
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		
				MR.[Description]			= SRCREM.DESCR,
				MR.[Unit_Price]				= SRCREM.UNIT_PRICE,
				MR.[Quantity]				= SRCREM.QUANTITY,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				Delete_Flag					= 0
					

	WHEN NOT MATCHED THEN


	INSERT  (
			 [Doctor_ID],[Clinic_ID],[Patient_ID],[IPD_RefNo],
			 [Invoice_No],[Description],[Unit_Price],[Quantity],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Delete_Flag
			)
		
		VALUES(
				@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_IPD_Ref_No,
				@p_var_InvoiceNo,SRCREM.DESCR,SRCREM.UNIT_PRICE,SRCREM.QUANTITY
				,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
				
			);

		
		
	

	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_IPD_Ref_No AS IPDNO

	SELECT @p_var_InvoiceNo AS INVNO

	--UPDATE  Discharge_Invoice_Hdr
	--		SET		Is_Printed			= 0,
	--				Modified_On			= GETDATE(),
	--				[ModifiedBy_Name]	= @p_var_User_Id

	--		WHERE	Patient_ID		= @p_var_Patient_ID
	--		AND		Doctor_ID		= @p_var_Doctor_ID
	--		AND		Clinic_ID		= @p_var_Clinic_ID
	--		AND		[IPD_RefNo]		= @p_var_IPD_Ref_No
	--		AND		[Invoice_No]	= @p_var_InvoiceNo	

END

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_InvoiceMedicine_MasterData]    Script Date: 16-Jan-18 8:23:44 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_InvoiceMedicine_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ====================================================================================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- ====================================================================================================

 CREATE PROCEDURE [dbo].[USP_Insert_InvoiceMedicine_MasterData]
 	
	@p_var_description															NVARCHAR(100),
	@p_var_amount																decimal(7,2),
	@p_var_sortorder															int,
	@p_var_User_Id																NVARCHAR(90),
	@p_var_Insert_Keyword_Data		UDT_Insert_InvoiceMed_MasterData			READONLY
	
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE [dbo].[IPD_INVOICE_MEDICINEMASTER] AS DM

	 USING(
			SELECT DISTINCT [Description]			AS DESCR

			FROM			 @p_var_Insert_Keyword_Data
		  )
	
	 AS	 SRC (
				DESCR
			 )
	 ON		 (
				DM.[Description]	= SRC.DESCR
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	
			DM.[SortOrder]						= @p_var_sortorder,
			DM.[Unit_Price]						= @p_var_amount,
			DM.Delete_Flag						= 0
			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[Description],	
					[Unit_Price],
					[SortOrder],		
					Delete_Flag			
				)
	VALUES
				(	@p_var_description,@p_var_amount,@p_var_sortorder,0);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Keyword_Charges_MasterData]    Script Date: 16-Jan-18 8:23:50 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Keyword_Charges_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Keyword_Charges_MasterData]
 	
	@p_var_Keyword																NVARCHAR(100),
	@p_var_chargecat															NVARCHAR(100),
	@p_var_chargdesubcat														NVARCHAR(100),
	@p_var_sortorder															int,
	@p_var_comments																NVARCHAR(1000),
	@p_var_User_Id																NVARCHAR(90),
	@p_var_Insert_Keyword_Data		UDT_Insert_Keyword_charges_MasterData		READONLY
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE  [dbo].[IPD_BillData]	AS DM

	 USING(
			SELECT DISTINCT 
							[IPD_Keyword]				AS KEYWORD,
							[Charges_Category]			AS CHARGECAT,
							[Charges_SubCategory]		AS CHARGESUBCAT

			FROM			@p_var_Insert_Keyword_Data
		  )
	
	 AS	 SRC (
				KEYWORD,CHARGECAT,CHARGESUBCAT
			 )
	 ON		 (
				DM.[IPD_Keyword]			= SRC.KEYWORD		AND
				DM.[Charges_Category]		= SRC.CHARGECAT		--AND
				--DM.[Charges_SubCategory]	= SRC.CHARGESUBCAT
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	
			--DM.[SortOrder]						= @p_var_sortorder,
			DM.[Charges_SubCategory]			= @p_var_chargdesubcat,
			DM.[Comments]						= @p_var_comments,
			DM.Delete_Flag						= 0
			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[IPD_Keyword],
					[Charges_Category],	
					[Charges_SubCategory],
					[SortOrder],			
					[Comments],				
					Delete_Flag			
				)
	VALUES
				(	@p_var_Keyword,@p_var_chargecat,@p_var_chargdesubcat,@p_var_sortorder,@p_var_comments,0);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Keyword_MasterData]    Script Date: 16-Jan-18 8:23:58 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Keyword_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Keyword_MasterData]
 	
	@p_var_KeywordShortDescription															NVARCHAR(40),
	@p_var_KeywordDescription																NVARCHAR(1000),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Keyword_Data		UDT_Insert_Keyword_MasterData							READONLY
	
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE [dbo].[IPD_Keywords] AS DM

	 USING(
			SELECT DISTINCT [Keyword]			AS KEYWORD,
							[Description]		AS KEYWORD_DESC
					 
					 
			FROM			 @p_var_Insert_Keyword_Data
		  )
	
	 AS	 SRC (
				KEYWORD,KEYWORD_DESC
			 )
	 ON		 (
				DM.[Keyword]			= SRC.KEYWORD
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	DM.[Keyword]				= SRC.KEYWORD,
			DM.[Description]			= SRC.KEYWORD_DESC
			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					[Keyword],[Description]
				)
	VALUES
				(	@p_var_KeywordShortDescription,@p_var_KeywordDescription);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTest]    Script Date: 16-Jan-18 8:24:06 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Labour_Details]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- Author      :  INCRUST
-- Create date :  05 Oct 2017
-- Description :  This stored procedure will Save the Data In Patient Master table
--  created By :  Varsha Khandre
-- ================================================================================

CREATE PROCEDURE [dbo].[USP_Insert_Labour_Details]

		@p_var_Doctor_ID				NVARCHAR(30),
        @p_var_Clinic_ID				nvarchar(10),
        @p_var_Shift_ID					tinyint,
        @p_var_Patient_ID				nvarchar(32),


        @p_dt_Delivery_date				datetime,
        @p_str_Labour_time				time(7),
        @p_dc_Weight					nvarchar(30),
        @p_dc_Weight_Dis				nvarchar(30),
        @p_str_Child_Sex				nvarchar(15),


		
        @p_dt_Delivery_date1				datetime,
        @p_str_Labour_time1				time(7),
        @p_dc_Weight1					nvarchar(30),
        @p_dc_Weight_Dis1				nvarchar(30),
        @p_str_Child_Sex1				nvarchar(15),

		
        @p_dt_Delivery_date2			datetime,
        @p_str_Labour_time2				time(7),
        @p_dc_Weight2					nvarchar(30),
        @p_dc_Weight_Dis2				nvarchar(30),
        @p_str_Child_Sex2				nvarchar(15),

        @p_str_user_Id					NVARCHAR(90),
        @p_str_Obstetric_History		nvarchar(300),
        @p_str_Name_of_Labour			nvarchar(50),
        @p_str_Operative_Interference	nvarchar(150),
        @p_str_Indication				nvarchar(100),
        @p_str_Puerperium				nvarchar(100),
	@p_var_IPD_Ref_No				nvarchar(50),
	@p_str_Remark					nvarchar(100)
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY
	if exists(select LI.IPD_Ref_Id from [IPD_Labour_Card] LI where LI.IPD_Ref_Id = @p_var_IPD_Ref_No)
begin 
			  update [IPD_Labour_Card] set
								[Obstetric_History] = @p_str_Obstetric_History,
						
								[Labour_Name] = @p_str_Name_of_Labour,
								[Operative_Interference] = @p_str_Operative_Interference,
								[Indication] = @p_str_Indication,
								[Puerperium] = @p_str_Puerperium,


								[Date_Of_Delivery] = @p_dt_Delivery_date,
								[Time_Of_Delivery] = @p_str_Labour_time,
								[Child_Sex]= @p_str_Child_Sex,
								[Wt_At_Birth] = @p_dc_Weight,
								[Wt_At_Discharge] = @p_dc_Weight_Dis,


								[Date_Of_Delivery1] = @p_dt_Delivery_date1,
								[Time_Of_Delivery1] = @p_str_Labour_time1,
								[Child_Sex1]= @p_str_Child_Sex1,
								[Wt_At_Birth1] = @p_dc_Weight1,
								[Wt_At_Discharge1] = @p_dc_Weight_Dis1,

								[Date_Of_Delivery2] = @p_dt_Delivery_date2,
								[Time_Of_Delivery2] = @p_str_Labour_time2,
								[Child_Sex2]= @p_str_Child_Sex2,
								[Wt_At_Birth2] = @p_dc_Weight2,
								[Wt_At_Discharge2] = @p_dc_Weight_Dis2,

								[remark] = @p_str_Remark
								
								 where  IPD_ref_id = @p_var_IPD_Ref_No 
								 and [Clinic_ID] = @p_var_Clinic_ID
								 and [Doctor_ID] = @p_var_Doctor_ID
						   
end
else
begin


			  INSERT INTO [IPD_Labour_Card]
								(
								[Obstetric_History],
						
								[Labour_Name],
								[Operative_Interference],
								[Indication],
								[Puerperium],

								[Date_Of_Delivery],
								[Time_Of_Delivery],
								[Child_Sex],
								[Wt_At_Birth],
								[Wt_At_Discharge],

										[Date_Of_Delivery1],
								[Time_Of_Delivery1],
								[Child_Sex1],
								[Wt_At_Birth1],
								[Wt_At_Discharge1],

										[Date_Of_Delivery2],
								[Time_Of_Delivery2],
								[Child_Sex2],
								[Wt_At_Birth2],
								[Wt_At_Discharge2],

								[Clinic_ID],
								[Doctor_ID],
								[Shift_ID],
								[Patient_ID],
								[IPD_Ref_Id],
								[remark])
								VALUES
								(			
								@p_str_Obstetric_History,
					
								@p_str_Name_of_Labour,			
								@p_str_Operative_Interference,	
								@p_str_Indication,			
								@p_str_Puerperium,

								@p_dt_Delivery_date,	
								@p_str_Labour_time,				
								@p_str_Child_Sex,	
								@p_dc_Weight,
								@p_dc_Weight_Dis,

								
								@p_dt_Delivery_date1,	
								@p_str_Labour_time1,				
								@p_str_Child_Sex1,	
								@p_dc_Weight1,
								@p_dc_Weight_Dis1,

								
								@p_dt_Delivery_date2,	
								@p_str_Labour_time2,				
								@p_str_Child_Sex2,	
								@p_dc_Weight2,
								@p_dc_Weight_Dis2,

								@p_var_Clinic_ID,
								@p_var_Doctor_ID,
								@p_var_Shift_ID,			
								@p_var_Patient_ID,
								@p_var_IPD_Ref_No,
								@p_str_Remark)     
					
			end
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



/****** Object:  StoredProcedure [dbo].[USP_Insert_Referral_Doctor_List]    Script Date: 20-Nov-18 8:28:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTest]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 17 june 2016
-- Description:	This stored procedure is useed to insert lab test details and labtest parameters
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_LabTest]
	@p_var_doctorID		NVARCHAR(30),
	@p_var_labtestdec	NVARCHAR(10),
	@p_var_groupname	NVARCHAR(40),
	@p_var_createdBy	NVARCHAR(90),
	@p_var_modifiedBy	NVARCHAR(90)


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   INSERT INTO Lab_Test_Master
						(Doctor_ID,
						Lab_Test_Description,
						Group_Name,
						Created_On,
						CreatedBy_Name,
						Modified_On,
						ModifiedBy_Name)
	VALUES(@p_var_doctorID,@p_var_labtestdec,@p_var_groupname,GetDate(),@p_var_createdBy,GetDate(),@p_var_modifiedBy);
   
END





/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTest_And_Parameters]    Script Date: 16-Jan-18 8:24:13 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTest_And_Parameters]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 20 june 2016
-- Description:	This stored procedure is used to insert and update lab test details and labtest parameters
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_LabTest_And_Parameters]
	@p_var_doctorID			NVARCHAR(30),
	@p_var_labtestdec		NVARCHAR(80),
	@p_var_groupname		NVARCHAR(40),
	@p_var_createdBy		NVARCHAR(90),
	@p_var_modifiedBy		NVARCHAR(90),
	@p_var_Insert_ParameterData		[dbo].[UDT_Insert_LabTest_And_Parameter]	READONLY,
	@p_int_priority			INT
	


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
	declare @labid		INT,
			@maxid		INT,
			@maxparamid	INT;

     SET @maxid = 0
		IF EXISTS (SELECT TOP 1 ID FROM Lab_Test_Master )
		SELECT @maxid=MAX(ID)  +1  FROM Lab_Test_Master;
    ELSE 
		SET @maxid = 1
	

	DECLARE @MyTableID table(  ID int );  

	--BEGIN
	--	SELECT 0 AS SAVE_STATUS;
	--END

	SELECT DISTINCT Old_Lab_Test AS OLD_DESCRIPTION,[New_Lab_Test] AS NEW_DESCRIPTION,[Old_Priority] AS OLD_PRIORITY,[New_Priority] AS NEW_PRIORITY from @p_var_Insert_ParameterData

	MERGE   Lab_Test_Master as TGT

	USING(
		 SELECT DISTINCT Old_Lab_Test AS OLD_DESCRIPTION,
						[New_Lab_Test] AS NEW_DESCRIPTION,
						[Old_Priority] AS OLD_PRIORITY,
						[New_Priority] AS NEW_PRIORITY 

		 FROM @p_var_Insert_ParameterData

		 )
	AS	 SRC (
			OLD_DESCRIPTION, NEW_DESCRIPTION, OLD_PRIORITY, NEW_PRIORITY
		 )
	ON	 (
			TGT.Doctor_ID	=	@p_var_doctorID		AND
			TGT.Lab_Test_Description=SRC.OLD_DESCRIPTION 
		 )
	WHEN MATCHED THEN

	UPDATE 

	SET 
		TGT.Lab_Test_Description = SRC.NEW_DESCRIPTION,

		TGT.Priority_Value=SRC.NEW_PRIORITY
	
	
	WHEN NOT MATCHED THEN
		
	INSERT 
				(Doctor_ID,
				ID,
				Lab_Test_Description,
				Group_Name,
				Created_On,
				CreatedBy_Name,
				Modified_On,
				ModifiedBy_Name,
				Priority_Value)
	VALUES
				(@p_var_doctorID,
				@maxid,
				SRC.NEW_DESCRIPTION,
				@p_var_groupname,
				GetDate(),
				@p_var_createdBy,
				GetDate(),
				@p_var_modifiedBy,
				ISNULL(@p_int_priority,9))
		OUTPUT INSERTED.ID INTO @MyTableID;		
		

		IF EXISTS (SELECT ID FROM @MyTableID)
		BEGIN
			SELECT @maxid= ID   FROM @MyTableID
		END
			
		--BEGIN
		--SELECT 1 AS SAVE_STATUS;
		--END
		 
		BEGIN 
		
		IF EXISTS(SELECT [Parameter_Name] FROM @p_var_Insert_ParameterData)
		BEGIN

		INSERT INTO [dbo].[Lab_Test_Parameter]
			                    (
						         Doctor_ID,Lab_Test_ID,Parameter_Name,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name
								)
		
		SELECT  @p_var_DoctorID,@maxid,[Parameter_Name],GetDate(),@p_var_createdBy,GetDate(),@p_var_modifiedBy
		FROM @p_var_Insert_ParameterData
		WHERE [Parameter_Name] IS NOT NULL
		END
		
		
		END
		
		END TRY
		BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
		
END




/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTest_Parameters]    Script Date: 16-Jan-18 8:24:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTest_Parameters]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Varsha Khandre
-- Create date: 17 june 2016
-- Description:	This stored procedure is used to insert lab test details and labtest parameters
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_LabTest_Parameters]
	@p_var_doctorID			NVARCHAR(30),
	@p_var_labtestdec		NVARCHAR(80),
	@p_var_groupname		NVARCHAR(40),
	@p_var_createdBy		NVARCHAR(90),
	@p_var_modifiedBy		NVARCHAR(90),
	@p_var_Insert_ParameterData [dbo].[UDT_Insert_LabTestParameter_Type]	READONLY
	


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
	declare @labid		INT,
			@maxid		INT,
			@maxparamid	INT;

	SELECT @maxid=MAX(ID)  +1  FROM Lab_Test_Master;
	--SELECT @maxparamid=MAX(ID) FROM Lab_Test_Parameter;

	BEGIN
		SELECT 0 AS SAVE_STATUS;
	END

	MERGE   Lab_Test_Master as TGT

	USING(
		 select DISTINCT Lab_Test_Description from @p_var_Insert_ParameterData
		 )
	AS	 SRC (
		 Lab_Test_Description
		 )
	ON	 (
		 TGT.Lab_Test_Description=SRC.Lab_Test_Description
		 )

	WHEN NOT MATCHED THEN
			
	INSERT 
				(Doctor_ID,
				ID,
				Lab_Test_Description,
				Group_Name,
				Created_On,
				CreatedBy_Name,
				Modified_On,
				ModifiedBy_Name)
	VALUES
				(@p_var_doctorID,
				@maxid,
				SRC.Lab_Test_Description,
				@p_var_groupname,
				GetDate(),
				@p_var_createdBy,
				GetDate(),
				@p_var_modifiedBy);
				
		--WHEN MATCHED  THEN
		--SELECT @maxid=MAX(ID) FROM Lab_Test_Master WHERE Lab_Test_Description=@p_var_labtestdec;

	MERGE   Lab_Test_Parameter as TGT

	USING(

		 select Parameter_Name,@maxid from @p_var_Insert_ParameterData
		 )
	AS	SRC(
		Parameter_Name,Lab_Test_ID
		)
	ON	(
		TGT.Parameter_Name=SRC.Parameter_Name
		AND TGT.Lab_Test_ID=@maxid
		)

	WHEN NOT MATCHED THEN
			
	INSERT 

				(Doctor_ID,
				--ID,
				Lab_Test_ID,
				Parameter_Name,
				Created_On,
				CreatedBy_Name,
				Modified_On,
				ModifiedBy_Name)
	VALUES
				(@p_var_doctorID,
				--@maxparamid +1,
				@maxid,
				SRC.Parameter_Name,
				GetDate(),
				@p_var_createdBy,
				GetDate(),
				@p_var_modifiedBy);
			
			
		BEGIN
		SELECT 1 AS SAVE_STATUS;
		END

		END TRY
		BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
		
END










/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestAllData]    Script Date: 16-Jan-18 8:24:32 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestAllData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
-- Modified By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_LabTestAllData]
	@p_nvar_Patient_Id							NVARCHAR(32),
    @p_int_Patient_Visit_No						INT,
    @p_nvar_Doctor_Id							NVARCHAR(30),
    @p_nvar_Clinic_Id							NVARCHAR(10),
    @P_nvar_Shift_Id							INT,
	@p_TestReportData 	UDT_InsertTestReport	READONLY,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_doctor_name							NVARCHAR(200),
	@p_var_lab_name								NVARCHAR(200),
	@p_dt_labtestconductdate					NVARCHAR(200),
	@p_nvar_comment								NVARCHAR(1000)	
 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

	   --SELECT * INTO TempPrescriptionOverwrite FROM @p_var_Insert_PatientPrescriptionData;

					MERGE   Patient_Visit_LabTestResults as TGT
					USING  (
							SELECT Visit_Date, Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID, Lab_Test_Description, Parameter_Name, Test_Parameter_Value
									
							FROM   @p_TestReportData
						   )
					AS		SRC (
								 Visit_Date, Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID, Lab_Test_Description, Parameter_Name, Test_Parameter_Value
								 
								)
					ON	   (
							
							TGT.Patient_Visit_No  = SRC.Patient_Visit_No
					AND		TGT.Shift_ID		  = SRC.Shift_ID 
					AND     TGT.Clinic_ID		  = SRC.Clinic_ID 
					--AND		TGT.Doctor_ID		  = SRC.Doctor_ID 
					AND		TGT.Patient_ID		  = SRC.Patient_ID 
					AND		TGT.Lab_Test_Description = SRC.Lab_Test_Description
					AND		TGT.Parameter_Name = SRC.Parameter_Name
					
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							Visit_Date, Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID, Lab_Test_Description, Parameter_Name, Test_Parameter_Value,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Doctor_Name,Lab_Name,Report_Date,[Comment]
						   )
					VALUES (
							Visit_Date, Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID, Lab_Test_Description, Parameter_Name, Test_Parameter_Value,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,ISNULL(@p_var_doctor_name,''),ISNULL(@p_var_lab_name,''),ISNULL(@p_dt_labtestconductdate,''),ISNULL(@p_nvar_comment,'')		
			
						   )

				WHEN MATCHED  THEN
					
					 
					   UPDATE SET  Test_Parameter_Value	= SRC.Test_Parameter_Value,
								   Modified_On		    =   Getdate(),
								   ModifiedBy_Name		=	@p_var_User_Id,
								   Delete_Flag			=	0,
								   Doctor_Name			=	@p_var_doctor_name,
								   Lab_Name				=	@p_var_lab_name,
								   Report_Date			=	@p_dt_labtestconductdate,
								   Comment				=	@p_nvar_comment
								   	;					  
			     
				 UPDATE [dbo].[Patient_Visits]

	               SET	Reports_Received = 1,
						Is_Submit_Patient_LabTest = 1

				   WHERE Patient_ID			= @p_nvar_Patient_Id
					AND  Patient_Visit_No	= @p_int_Patient_Visit_No
					AND  Shift_ID			= @P_nvar_Shift_Id
					AND  Doctor_ID			= @p_nvar_Doctor_Id
					AND  Clinic_ID			= @p_nvar_Clinic_Id

				 UPDATE [dbo].[Patient_Visit_LabTestResults]
				 SET	Doctor_Name	=	@p_var_doctor_name,
						Lab_Name	=	@p_var_lab_name,
						Report_Date	=	@p_dt_labtestconductdate,
						Comment		=	@p_nvar_comment
				 
				 WHERE  Patient_ID = @p_nvar_Patient_Id
	              AND  Patient_Visit_No = @p_int_Patient_Visit_No
	              AND  Shift_ID = @P_nvar_Shift_Id
	              --AND  Doctor_ID = @p_nvar_Doctor_Id
	              AND  Clinic_ID = @p_nvar_Clinic_Id
				
	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestData]    Script Date: 16-Jan-18 8:24:42 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in LabTestAsked Table and Update
--				ReportAsked Flag true in Patient Visit
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_LabTestData]
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Report_Asked							BIT,
	@p_var_Insert_PatientLabTestData UDT_Insert_PatientLabTest READONLY

AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY
			MERGE Patient_Visit_LabTestAsked as TGT
			USING(
					SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Lab_Test_Description
					FROM		    @p_var_Insert_PatientLabTestData
				  )
			AS	SRC
					(
					  Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Lab_Test_Description
					 )	 
		    ON (
						    TGT.Visit_Date		  = SRC.Visit_Date 
					AND		TGT.Patient_Visit_No  = SRC.Patient_Visit_No
					AND		TGT.Shift_ID		  = SRC.Shift_ID 
					AND     TGT.Clinic_ID		  = SRC.Clinic_ID 
					AND		TGT.Doctor_ID		  = SRC.Doctor_ID 
					AND		TGT.Patient_ID		  = SRC.Patient_ID 
					AND		TGT.Lab_Test_Description=SRC.Lab_Test_Description
		       ) 
		       WHEN NOT MATCHED THEN
		       INSERT(
		              Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Lab_Test_Description
		              )
		       VALUES (
		       SRC.Patient_ID,SRC.Visit_Date,SRC.Patient_Visit_No,SRC.Shift_ID,SRC.Clinic_ID,SRC.Doctor_ID,SRC.Lab_Test_Description
					   )
			   WHEN MATCHED THEN
			   UPDATE SET		   Lab_Test_Description=SRC.Lab_Test_Description,
								   Visit_Date		    = SRC.Visit_Date,
								   Patient_Visit_No	    = SRC.Patient_Visit_No, 
								   Shift_ID			    = SRC.Shift_ID,
								   Clinic_ID		    = SRC.Clinic_ID,
								   Doctor_ID			= SRC.Doctor_ID ,
								   Patient_ID			= SRC.Patient_ID;    
		--	INSERT INTO		Patient_Visit_LabTestAsked(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Lab_Test_Description)
		--	SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Lab_Test_Description
        --   FROM		    @p_var_Insert_PatientLabTestData

		

			

			Update			Patient_Visits SET
							Reports_Asked= @p_var_Report_Asked
			WHERE			Patient_ID= @p_var_Patient_ID 
			AND				Visit_Date= @p_var_Visit_Date 
			AND				Patient_Visit_No= @p_var_Patient_Visit_No 
			AND				Shift_ID= @p_var_Shift_ID 
			AND				Clinic_ID= @p_var_Clinic_ID 
			AND				Doctor_ID= @p_var_Doctor_ID
					  
	END TRY
    BEGIN CATCH
		    SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH    
 END
















/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestDataAll]    Script Date: 16-Jan-18 8:24:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestDataAll]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_LabTestDataAll]
	@p_nvar_Patient_Id      NVARCHAR(32),
    @p_int_Patient_Visit_No INT,
    @p_nvar_Doctor_Id       NVARCHAR(30),
    @p_nvar_Clinic_Id       NVARCHAR(10),
    @P_nvar_Shift_Id        INT,
	@p_TestReportData UDT_InsertTestReport READONLY
 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

	  	IF NOT EXISTS(
			
				SELECT TGT.Visit_Date, TGT.Patient_Visit_No, TGT.Shift_ID, TGT.Clinic_ID, TGT.Doctor_ID,TGT.Patient_ID, TGT.Lab_Test_Description, TGT.Parameter_Name, TGT.Test_Parameter_Value
				FROM Patient_Visit_LabTestResults TGT
				LEFT JOIN @p_TestReportData PT
				ON TGT.Lab_Test_Description = PT.Lab_Test_Description
				WHERE 			TGT.Patient_Visit_No  =@p_int_Patient_Visit_No
					AND		TGT.Shift_ID		  = @P_nvar_Shift_Id
					AND     TGT.Clinic_ID		  = @p_nvar_Clinic_Id   
					AND		TGT.Doctor_ID		  = @p_nvar_Doctor_Id  
					AND		TGT.Patient_ID		  = @p_nvar_Patient_Id 
					AND		TGT.Lab_Test_Description = PT.Lab_Test_Description
					--AND		PT.Lab_Test_Description IS NULL
				
				)
				BEGIN
				INSERT INTO Patient_Visit_LabTestResults(
							Visit_Date, Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID, Lab_Test_Description, Parameter_Name, Test_Parameter_Value
						   )
					SELECT PT.Visit_Date, PT.Patient_Visit_No, PT.Shift_ID, PT.Clinic_ID, PT.Doctor_ID,PT.Patient_ID, PT.Lab_Test_Description, 
					PT.Parameter_Name, PT.Test_Parameter_Value
							FROM  @p_TestReportData PT
				LEFT JOIN Patient_Visit_LabTestResults TGT
				ON   PT.Lab_Test_Description = TGT.Lab_Test_Description
				AND 		PT.Patient_Visit_No = TGT.Patient_Visit_No
					AND		PT.Shift_ID	 = TGT.Shift_ID
					AND     PT.Clinic_ID = TGT.Clinic_ID
					AND		PT.Doctor_ID = TGT.Doctor_ID	
					AND		PT.Patient_ID =	 TGT.Patient_ID	
					AND		PT.Lab_Test_Description = TGT.Lab_Test_Description
					--where		 TGT.Lab_Test_Description IS NULL
				END
				--WHEN MATCHED  THEN
				ELSE
				BEGIN
				  UPDATE Patient_Visit_LabTestResults
								SET  Test_Parameter_Value	= PT.Test_Parameter_Value					  
						 FROM   @p_TestReportData PT
						 LEFT JOIN Patient_Visit_LabTestResults TGT
							ON   PT.Lab_Test_Description = TGT.Lab_Test_Description
							AND 		PT.Patient_Visit_No = TGT.Patient_Visit_No
								AND		PT.Shift_ID	 = TGT.Shift_ID
								AND     PT.Clinic_ID = TGT.Clinic_ID
								AND		PT.Doctor_ID = TGT.Doctor_ID	
								AND		PT.Patient_ID =	 TGT.Patient_ID	
								AND		PT.Lab_Test_Description = TGT.Lab_Test_Description
								AND     PT.Parameter_Name=TGT.Parameter_Name
							where		
					        TGT.Patient_Visit_No  =@p_int_Patient_Visit_No
					AND		TGT.Shift_ID		  = @P_nvar_Shift_Id
					AND     TGT.Clinic_ID		  = @p_nvar_Clinic_Id   
					AND		TGT.Doctor_ID		  = @p_nvar_Doctor_Id  
					AND		TGT.Patient_ID		  = @p_nvar_Patient_Id 
					  
					--AND		SRC.Lab_Test_Description IS NULL
				 END

				 UPDATE [dbo].[Patient_Visits]
	               SET Reports_Received = 1
	            WHERE  Patient_ID = @p_nvar_Patient_Id
	              AND  Patient_Visit_No = @p_int_Patient_Visit_No
	              AND  Shift_ID = @P_nvar_Shift_Id
	              AND  Doctor_ID = @p_nvar_Doctor_Id
	              AND  Clinic_ID = @p_nvar_Clinic_Id

	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_LicenseKey]    Script Date: 16-Jan-18 8:25:00 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_LicenseKey]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 26 June 2017
-- Description	: This stored procedure will insert License Key
-- Created By	: Varsha Khandre
-- =============================================

 CREATE PROCEDURE [dbo].[USP_Insert_LicenseKey]
	
	@p_var_LicenseKey	VARCHAR(1000)
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		  IF NOT EXISTS(
							SELECT License_Key from  License_Key
						)
		  BEGIN
		  
		  INSERT INTO  License_Key(License_Key)

		  VALUES(
					@p_var_LicenseKey
				)

				SELECT 1 as SAVE_STATUS
			END
			ELSE
			BEGIN
				UPDATE License_Key SET License_Key=@p_var_LicenseKey
				SELECT 0 as SAVE_STATUS
			END
			
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Medicine_MasterData]    Script Date: 16-Jan-18 8:25:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Medicine_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 29-Aug-2016
-- Description	: This stored procedure will insert and update the prescription medicine in Prescription_Medicine Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Medicine_MasterData]	
	@p_var_MedShortDescription																NVARCHAR(60),
	@p_var_MedicineDescription																NVARCHAR(1000),
	@p_var_Isactive																			BIT,
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Medicine_Data		[dbo].[UDT_Insert_Medicine_MasterData]					READONLY,
	@p_var_priority																			INT,
	@p_var_Morning																			Float,
	@p_var_Afternoon																		Float,
	@p_var_Night																			Float,
	@p_var_No_Of_Days																		INT,
	@p_var_Instructions																		NVARCHAR(4000),
	@p_var_DoctorID																			NVARCHAR(30)


 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 SELECT DISTINCT [Old_Short_Name] AS OLD_MED_SHORT_NAME,
					 [Old_MedicineDescription] AS OLD_MED_NAME,
					 [Old_Priority_Value] AS OLD_PRIORITY,
					 [Old_Morning] AS OLD_MORNING,
					 [Old_Afternoon] AS OLD_AFTERNOON,
					 [Old_Night] AS OLD_NIGHT,
					 [Old_No_Of_Days] AS OLD_NO_OF_DAYS,
					 [Old_Instruction] AS OLD_INSTRUCTION,
					 [New_Short_Name] AS NEW_MED_SHORT_NAME,
					 [New_MedicineDescription] AS NEW_MED_NAME,
					 [New_Priority_Value] AS NEW_PRIORITY,
					 [New_Morning] AS NEW_MORNING,
					 [New_Afternoon] AS NEW_AFTERNOON,
					 [New_Night] AS NEW_NIGHT,
					 [New_No_Of_Days] AS NEW_NO_OF_DAYS,
					 [New_Instruction] AS NEW_INSTRUCTION
	 FROM			 @p_var_Insert_Medicine_Data

	 MERGE [dbo].[Medicine_Master] as MM

	 USING(
			SELECT DISTINCT [Old_Short_Name] AS OLD_MED_SHORT_NAME,
							[Old_MedicineDescription] AS OLD_MED_NAME,
							[Old_Priority_Value] AS OLD_PRIORITY,
							[Old_Morning] AS OLD_MORNING,
							[Old_Afternoon] AS OLD_AFTERNOON,
							[Old_Night] AS OLD_NIGHT,
							[Old_No_Of_Days] AS OLD_NO_OF_DAYS,
							[Old_Instruction] AS OLD_INSTRUCTION,
							[New_Short_Name] AS NEW_MED_SHORT_NAME,
							[New_MedicineDescription] AS NEW_MED_NAME,
							[New_Priority_Value] AS NEW_PRIORITY,
							[New_Morning] AS NEW_MORNING,
							[New_Afternoon] AS NEW_AFTERNOON,
							[New_Night] AS NEW_NIGHT,
							[New_No_Of_Days] AS NEW_NO_OF_DAYS,
							[New_Instruction] AS NEW_INSTRUCTION		
							
			FROM			@p_var_Insert_Medicine_Data 
		  )
	
	 AS	 SRC (
				OLD_MED_SHORT_NAME, OLD_MED_NAME,OLD_PRIORITY,OLD_MORNING,OLD_AFTERNOON,OLD_NIGHT,OLD_NO_OF_DAYS,OLD_INSTRUCTION,
				NEW_MED_SHORT_NAME,NEW_MED_NAME,NEW_PRIORITY,NEW_MORNING,NEW_AFTERNOON,NEW_NIGHT,NEW_NO_OF_DAYS,NEW_INSTRUCTION
			 )
	 ON		 (
				MM.Short_Description			= SRC.OLD_MED_SHORT_NAME AND
				MM.Medicine_Description			= SRC.OLD_MED_NAME  AND
				ISNULL(MM.Priority_Value,'') 	= SRC.OLD_PRIORITY	AND
				ISNULL(MM.Morning,'')			= SRC.OLD_MORNING	AND
				ISNULL(MM.Afternoon,'')			= SRC.OLD_AFTERNOON	AND
				ISNULL(MM.Night,'')				= SRC.OLD_NIGHT	AND
				ISNULL(MM.No_Of_Days,'')		= SRC.OLD_NO_OF_DAYS	AND
				ISNULL(MM.Instruction,'')		= SRC.OLD_INSTRUCTION	AND
				DOCTOR_ID						= @p_var_DoctorID
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	MM.Short_Description		= SRC.NEW_MED_SHORT_NAME,
			MM.Medicine_Description		= SRC.NEW_MED_NAME,	
			MM.Priority_Value			= SRC.NEW_PRIORITY,
			MM.Morning					= ISNULL(SRC.NEW_MORNING,''),	
			MM.Afternoon				=  ISNULL(SRC.NEW_AFTERNOON,''),	
			MM.Night					= ISNULL(SRC.NEW_NIGHT,''),
			MM.No_Of_Days				=  ISNULL(SRC.NEW_NO_OF_DAYS,''),
			MM.Instruction				=  ISNULL(SRC.NEW_INSTRUCTION,''),
			MM.Active					= @p_var_Isactive

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
				 Short_Description,Medicine_Description,Active,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction,DOCTOR_ID
				)
	VALUES
				(	@p_var_MedShortDescription,@p_var_MedicineDescription,@p_var_Isactive,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority,@p_var_Morning,@p_var_Afternoon,@p_var_Night,@p_var_No_Of_Days,@p_var_Instructions,@p_var_DoctorID);

 END






GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =====================================================================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in Visit_Medicine Table
-- Created By : Nilesh Wani
-- ======================================================================================
CREATE PROCEDURE [dbo].[USP_Insert_MedicineData]
	@p_var_Insert_PatientMedicineData UDT_Insert_PatientMedicineData READONLY,
	@p_var_User_Id  NVARCHAR(32)
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY

			INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData
   
   END TRY
   BEGIN CATCH

			SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
   END CATCH
 END













/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwrite]    Script Date: 16-Jan-18 8:25:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwrite]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
--=============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MedicineDataOverwrite]
	@p_var_Visit_Date															DATETIME,
	@p_var_Patient_Visit_No														INT,
	@p_var_Shift_Id																TINYINT,
	@p_var_Clinic_Id															NVARCHAR(10),
	@p_var_Doctor_Id															NVARCHAR(30),
	@p_var_Patient_Id															NVARCHAR(32),
	@p_var_Insert_PatientMedicineData UDT_Insert_Medicine_Table_Type			READONLY,
	@p_var_Insert_PatientPrescriptionData UDT_Insert_Prescription_Table_Type_Id	READONLY,
	@p_var_fees_to_collect														DECIMAL(10,2),
	@p_var_fees_collected														DECIMAL(10,2),
	@p_var_User_Id																NVARCHAR(32),
	@p_var_Status_Id															TINYINT,
	@p_var_bloodpressure														NVARCHAR(10),
	@p_var_allergy_details														NVARCHAR(1000),
	@p_var_habit_details														NVARCHAR(1000),
	@p_var_comment																NVARCHAR(1000),
	@p_var_PaymentBy_ID															INT,
	@p_var_Payment_Remark														NVARCHAR(1000),
	@p_var_Discount																DECIMAL(10,2)

 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

	   --SELECT * INTO TempPrescriptionOverwrite FROM @p_var_Insert_PatientPrescriptionData;

				MERGE   Visit_Medicine_Overwrite as TGT
					USING  (
							SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Descirption,
								   Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator 
							FROM   @p_var_Insert_PatientMedicineData
						   )
					AS		SRC (
								 Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description,Medicine_Descirption,
								 Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
								)
					ON	   (
							TGT.Visit_Date		  = SRC.Visit_Date 
					AND		TGT.Patient_Visit_No  = SRC.Patient_Visit_No
					AND		TGT.Shift_ID		  = SRC.Shift_ID 
					AND     TGT.Clinic_ID		  = SRC.Clinic_ID 
					AND		TGT.Doctor_ID		  = SRC.Doctor_ID 
					AND		TGT.Patient_ID		  = SRC.Patient_ID 
					AND		TGT.Short_Description = SRC.Short_Description
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Description,Morning,
							Afternoon,Night,No_Of_Days,Instruction,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name,Delete_Indicator
						   )
					VALUES (
							SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Short_Description, 
							SRC.Medicine_Descirption,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),GetDate(),
							@p_var_User_Id,@p_var_User_Id,SRC.DeleteIndicator
						   )
				WHEN MATCHED  THEN
					   UPDATE SET  Visit_Date		    = SRC.Visit_Date,
								   Patient_Visit_No	    = SRC.Patient_Visit_No, 
								   Shift_ID			    = SRC.Shift_ID,
								   Clinic_ID		    = SRC.Clinic_ID,
								   Doctor_ID			= SRC.Doctor_ID ,
								   Patient_ID			= SRC.Patient_ID,    
								   Short_Description	= SRC.Short_Description,
								   Medicine_Description = SRC.Medicine_Descirption,
								   Morning				= SRC.Morning,
								   Afternoon			= SRC.Afternoon,
								   Night				= SRC.Night,
								   No_Of_Days			= SRC.No_Of_Days,
								   Instruction			= SRC.Instruction,
								   Delete_Indicator		= SRC.DeleteIndicator	;					  
			     
				MERGE Visit_Prescription_Overwrite as TGT
					USING  (
		   					 SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Descritption,
									Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
							 FROM   @p_var_Insert_PatientPrescriptionData
						   )
					AS		 SRC (
								  Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Description,
								  Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
								 )
					ON	   (
							 TGT.Visit_Date			 = SRC.Visit_Date 
					AND		 TGT.Patient_Visit_No	 = SRC.Patient_Visit_No 
					AND		 TGT.Shift_ID			 = SRC.Shift_ID
					AND		 TGT.Clinic_ID			 = SRC.Clinic_ID 
					AND		 TGT.Doctor_ID			 = SRC.Doctor_ID 
					AND		 TGT.Patient_ID		     = SRC.Patient_ID 
					AND		 TGT.Brand_Name			 = SRC.Brand_Name
					AND		 TGT.Medicine_Name		 = SRC.Medicine_Name
					AND      TGT.CatSub_Description  = SRC.CatSub_Description
					AND      TGT.Cat_Short_Name		 = SRC.Cat_Short_Name
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							 Visit_Date,Patient_Visit_No, 
							 Shift_ID, 
							 Clinic_ID, 
							 Doctor_ID,
							 Patient_ID,
							 Brand_Name,
							 Medicine_Name,
							 CatSub_Description,
							 Cat_Short_Name,
							 [Marketed_By],
							 Morning,
							 Afternoon,
							 Night,
							 No_Of_Days,
							 Instruction,
							 Created_On,
							 Modified_On,
							 CreatedBy_Name,
							 ModifiedBy_Name,
							 Delete_Indicator,
							 Sequence_Id
						   )
					VALUES ( 
							 SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Brand_Name, SRC.Medicine_Name,
							 SRC.CatSub_Description,SRC.Cat_Short_Name,SRC.Marketed_By,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),
							 GetDate(),@p_var_User_Id,@p_var_User_Id,SRC.DeleteIndicator,(select max(Sequence_Id)+1 from Visit_Prescription_Overwrite)
							)
				WHEN MATCHED  THEN 
					   UPDATE SET  Visit_Date         = SRC.Visit_Date,
								   Patient_Visit_No   = SRC.Patient_Visit_No,
								   Shift_ID           = SRC.Shift_ID,
								   Clinic_ID          = SRC.Clinic_ID,
								   Doctor_ID		  = SRC.Doctor_ID,
								   Patient_ID		  = SRC.Patient_ID,
								   Brand_Name		  = SRC.Brand_Name,
								   Medicine_Name	  = SRC.Medicine_Name,
								   --Marketed_By		  = SRC.Marketed_By,
								   CatSub_Description = SRC.CatSub_Description,
								   Cat_Short_Name     = SRC.Cat_Short_Name,
								   Morning            = SRC.Morning,
								   Afternoon          = SRC.Afternoon,
								   Night              = SRC.Night,
				  				   No_Of_Days         = SRC.No_Of_Days,
								   Instruction        = SRC.Instruction,
								   Delete_Indicator   = SRC.DeleteIndicator	;			
	   
				IF EXISTS(
					SELECT * FROM Patient_Visits 
					WHERE	Fees_Collected>0
					AND		Visit_Date	= @p_var_Visit_Date 
				AND			  Patient_Visit_No	= @p_var_Patient_Visit_No 
				AND			  Shift_ID			= @p_var_Shift_Id 
				AND			  Clinic_ID			= @p_var_Clinic_Id 
				AND			  Doctor_ID			= @p_var_Doctor_Id 
				AND			  Patient_ID		= @p_var_Patient_Id

				)
				BEGIN
					UPDATE        [dbo].[Patient_Visits]  
				SET			 
							  Status_Id					= @p_var_Status_Id,
							  Blood_Pressure			= @p_var_bloodpressure,
							  Allergy_dtls				= @p_var_allergy_details,
							  Habits_Comments			= @p_var_habit_details,
							  Modified_On				= GETDATE(),
							  ModifiedBy_Name				=@p_var_User_Id
							  
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_Id 
				AND			  Clinic_ID					= @p_var_Clinic_Id 
				AND			  Doctor_ID					= @p_var_Doctor_Id 
				AND			  Patient_ID				= @p_var_Patient_Id
				END

				ELSE

				BEGIN
				
				UPDATE        [dbo].[Patient_Visits]  
				SET			  Fees_Collected			= @p_var_fees_collected,
							  Fees_To_Collect			= @p_var_fees_to_collect,
							  Status_Id					= @p_var_Status_Id,
							  Blood_Pressure			= @p_var_bloodpressure,
							  Allergy_dtls				= @p_var_allergy_details,
							  Habits_Comments			= @p_var_habit_details,
							  Comment					= @p_var_comment,
							  [Payment_By_ID]			= @p_var_PaymentBy_ID,
							  [Payment_Remark]			= @p_var_Payment_Remark,
							  Modified_On				= GETDATE(),
							  ModifiedBy_Name			= @p_var_User_Id,
							  Discount					= @p_var_Discount
							  

							  --Patient_Last_Visit_No		= @p_var_Patient_Visit_No
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_Id 
				AND			  Clinic_ID					= @p_var_Clinic_Id 
				AND			  Doctor_ID					= @p_var_Doctor_Id 
				AND			  Patient_ID				= @p_var_Patient_Id

				END
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	  Doctor_ID			   = @p_var_Doctor_Id 
				AND			  ID				   = @p_var_Patient_Id 

	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END





/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwriteOffline]    Script Date: 16-Jan-18 8:25:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwrite_Audio]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
--=============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MedicineDataOverwrite_Audio]
	@p_var_Visit_Date															DATETIME,
	@p_var_Patient_Visit_No														INT,
	@p_var_Shift_Id																TINYINT,
	@p_var_Clinic_Id															NVARCHAR(10),
	@p_var_Doctor_Id															NVARCHAR(30),
	@p_var_Patient_Id															NVARCHAR(32),
	@p_var_Insert_PatientMedicineData UDT_Insert_Medicine_Table_Type			READONLY,
	@p_var_Insert_PatientPrescriptionData UDT_Insert_Prescription_Table_Type	READONLY,
	@p_var_fees_to_collect														DECIMAL(10,2),
	@p_var_fees_collected														DECIMAL(10,2),
	@p_var_User_Id																NVARCHAR(32),
	@p_var_Status_Id															TINYINT,
	@p_var_bloodpressure														NVARCHAR(10),
	@p_var_allergy_details														NVARCHAR(1000),
	@p_var_habit_details														NVARCHAR(1000)
	--@p_var_comment																NVARCHAR(1000),
	--@p_var_PaymentBy_ID															INT,
	--@p_var_Payment_Remark														NVARCHAR(1000)
 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

	   --SELECT * INTO TempPrescriptionOverwrite FROM @p_var_Insert_PatientPrescriptionData;

				MERGE   Visit_Medicine_Overwrite as TGT
					USING  (
							SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Descirption,
								   Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator 
							FROM   @p_var_Insert_PatientMedicineData
						   )
					AS		SRC (
								 Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description,Medicine_Descirption,
								 Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
								)
					ON	   (
							TGT.Visit_Date		  = SRC.Visit_Date 
					AND		TGT.Patient_Visit_No  = SRC.Patient_Visit_No
					AND		TGT.Shift_ID		  = SRC.Shift_ID 
					AND     TGT.Clinic_ID		  = SRC.Clinic_ID 
					AND		TGT.Doctor_ID		  = SRC.Doctor_ID 
					AND		TGT.Patient_ID		  = SRC.Patient_ID 
					AND		TGT.Short_Description = SRC.Short_Description
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Description,Morning,
							Afternoon,Night,No_Of_Days,Instruction,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name,Delete_Indicator
						   )
					VALUES (
							SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Short_Description, 
							SRC.Medicine_Descirption,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),GetDate(),
							@p_var_User_Id,@p_var_User_Id,SRC.DeleteIndicator
						   )
				WHEN MATCHED  THEN
					   UPDATE SET  Visit_Date		    = SRC.Visit_Date,
								   Patient_Visit_No	    = SRC.Patient_Visit_No, 
								   Shift_ID			    = SRC.Shift_ID,
								   Clinic_ID		    = SRC.Clinic_ID,
								   Doctor_ID			= SRC.Doctor_ID ,
								   Patient_ID			= SRC.Patient_ID,    
								   Short_Description	= SRC.Short_Description,
								   Medicine_Description = SRC.Medicine_Descirption,
								   Morning				= SRC.Morning,
								   Afternoon			= SRC.Afternoon,
								   Night				= SRC.Night,
								   No_Of_Days			= SRC.No_Of_Days,
								   Instruction			= SRC.Instruction,
								   Delete_Indicator		= SRC.DeleteIndicator	;					  
			     
				MERGE Visit_Prescription_Overwrite as TGT
					USING  (
		   					 SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Descritption,
									Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
							 FROM   @p_var_Insert_PatientPrescriptionData
						   )
					AS		 SRC (
								  Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Description,
								  Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
								 )
					ON	   (
							 TGT.Visit_Date			 = SRC.Visit_Date 
					AND		 TGT.Patient_Visit_No	 = SRC.Patient_Visit_No 
					AND		 TGT.Shift_ID			 = SRC.Shift_ID
					AND		 TGT.Clinic_ID			 = SRC.Clinic_ID 
					AND		 TGT.Doctor_ID			 = SRC.Doctor_ID 
					AND		 TGT.Patient_ID		     = SRC.Patient_ID 
					AND		 TGT.Brand_Name			 = SRC.Brand_Name
					AND		 TGT.Medicine_Name		 = SRC.Medicine_Name
					AND      TGT.CatSub_Description  = SRC.CatSub_Description
					AND      TGT.Cat_Short_Name		 = SRC.Cat_Short_Name
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							 Visit_Date,Patient_Visit_No, 
							 Shift_ID, 
							 Clinic_ID, 
							 Doctor_ID,
							 Patient_ID,
							 Brand_Name,
							 Medicine_Name,
							 CatSub_Description,
							 Cat_Short_Name,
							 [Marketed_By],
							 Morning,
							 Afternoon,
							 Night,
							 No_Of_Days,
							 Instruction,
							 Created_On,
							 Modified_On,
							 CreatedBy_Name,
							 ModifiedBy_Name,
							 Delete_Indicator,
							 Sequence_Id
						   )
					VALUES ( 
							 SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Brand_Name, SRC.Medicine_Name,
							 SRC.CatSub_Description,SRC.Cat_Short_Name,SRC.Marketed_By,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),
							 GetDate(),@p_var_User_Id,@p_var_User_Id,SRC.DeleteIndicator,(select max(Sequence_Id)+1 from Visit_Prescription_Overwrite)
							)
				WHEN MATCHED  THEN 
					   UPDATE SET  Visit_Date         = SRC.Visit_Date,
								   Patient_Visit_No   = SRC.Patient_Visit_No,
								   Shift_ID           = SRC.Shift_ID,
								   Clinic_ID          = SRC.Clinic_ID,
								   Doctor_ID		  = SRC.Doctor_ID,
								   Patient_ID		  = SRC.Patient_ID,
								   Brand_Name		  = SRC.Brand_Name,
								   Medicine_Name	  = SRC.Medicine_Name,
								   --Marketed_By		  = SRC.Marketed_By,
								   CatSub_Description = SRC.CatSub_Description,
								   Cat_Short_Name     = SRC.Cat_Short_Name,
								   Morning            = SRC.Morning,
								   Afternoon          = SRC.Afternoon,
								   Night              = SRC.Night,
				  				   No_Of_Days         = SRC.No_Of_Days,
								   Instruction        = SRC.Instruction,
								   Delete_Indicator   = SRC.DeleteIndicator	;			
	   
				IF EXISTS(
					SELECT * FROM Patient_Visits 
					WHERE	Fees_Collected>0
					AND		Visit_Date	= @p_var_Visit_Date 
				AND			  Patient_Visit_No	= @p_var_Patient_Visit_No 
				AND			  Shift_ID			= @p_var_Shift_Id 
				AND			  Clinic_ID			= @p_var_Clinic_Id 
				AND			  Doctor_ID			= @p_var_Doctor_Id 
				AND			  Patient_ID		= @p_var_Patient_Id

				)
				BEGIN
					UPDATE        [dbo].[Patient_Visits]  
				SET			 
							  Status_Id					= @p_var_Status_Id,
							  Blood_Pressure			= @p_var_bloodpressure,
							  Allergy_dtls				= @p_var_allergy_details,
							  Habits_Comments			= @p_var_habit_details,
							  Modified_On				= GETDATE(),
							  ModifiedBy_Name				=@p_var_User_Id
							  
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_Id 
				AND			  Clinic_ID					= @p_var_Clinic_Id 
				AND			  Doctor_ID					= @p_var_Doctor_Id 
				AND			  Patient_ID				= @p_var_Patient_Id
				END

				ELSE

				BEGIN
				
				UPDATE        [dbo].[Patient_Visits]  
				SET			  Fees_Collected			= @p_var_fees_collected,
							  Fees_To_Collect			= @p_var_fees_to_collect,
							  Status_Id					= @p_var_Status_Id,
							  Blood_Pressure			= @p_var_bloodpressure,
							  Allergy_dtls				= @p_var_allergy_details,
							  Habits_Comments			= @p_var_habit_details,
							 -- Comment					= @p_var_comment,
							--  [Payment_By_ID]			= @p_var_PaymentBy_ID,
							--  [Payment_Remark]			= @p_var_Payment_Remark,
							  Modified_On				= GETDATE(),
							  ModifiedBy_Name				=@p_var_User_Id

							  --Patient_Last_Visit_No		= @p_var_Patient_Visit_No
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_Id 
				AND			  Clinic_ID					= @p_var_Clinic_Id 
				AND			  Doctor_ID					= @p_var_Doctor_Id 
				AND			  Patient_ID				= @p_var_Patient_Id

				END
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	  Doctor_ID			   = @p_var_Doctor_Id 
				AND			  ID				   = @p_var_Patient_Id 

	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END





/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwriteOffline]    Script Date: 16-Jan-18 8:25:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwrite_completed]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
--=============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MedicineDataOverwrite_completed]
	
	@p_var_Insert_PatientMedicineData UDT_Insert_Medicine_Table_Type			READONLY,
	@p_var_Insert_PatientPrescriptionData UDT_Insert_Prescription_Table_Type_Id	READONLY,
										
	@p_var_User_Id																NVARCHAR(32),
	@p_var_Status_Id															TINYINT
	
 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

	   --SELECT * INTO TempPrescriptionOverwrite FROM @p_var_Insert_PatientPrescriptionData;

				MERGE   Visit_Medicine_Overwrite as TGT
					USING  (
							SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Descirption,
								   Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator 
							FROM   @p_var_Insert_PatientMedicineData
						   )
					AS		SRC (
								 Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description,Medicine_Descirption,
								 Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
								)
					ON	   (
							TGT.Visit_Date		  = SRC.Visit_Date 
					AND		TGT.Patient_Visit_No  = SRC.Patient_Visit_No
					AND		TGT.Shift_ID		  = SRC.Shift_ID 
					AND     TGT.Clinic_ID		  = SRC.Clinic_ID 
					AND		TGT.Doctor_ID		  = SRC.Doctor_ID 
					AND		TGT.Patient_ID		  = SRC.Patient_ID 
					AND		TGT.Short_Description = SRC.Short_Description
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Description,Morning,
							Afternoon,Night,No_Of_Days,Instruction,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name,Delete_Indicator
						   )
					VALUES (
							SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Short_Description, 
							SRC.Medicine_Descirption,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),GetDate(),
							@p_var_User_Id,@p_var_User_Id,SRC.DeleteIndicator
						   )
				WHEN MATCHED  THEN
					   UPDATE SET  Visit_Date		    = SRC.Visit_Date,
								   Patient_Visit_No	    = SRC.Patient_Visit_No, 
								   Shift_ID			    = SRC.Shift_ID,
								   Clinic_ID		    = SRC.Clinic_ID,
								   Doctor_ID			= SRC.Doctor_ID ,
								   Patient_ID			= SRC.Patient_ID,    
								   Short_Description	= SRC.Short_Description,
								   Medicine_Description = SRC.Medicine_Descirption,
								   Morning				= SRC.Morning,
								   Afternoon			= SRC.Afternoon,
								   Night				= SRC.Night,
								   No_Of_Days			= SRC.No_Of_Days,
								   Instruction			= SRC.Instruction,
								   Delete_Indicator		= SRC.DeleteIndicator	;					  
			     
				MERGE Visit_Prescription_Overwrite as TGT
					USING  (
		   					 SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Descritption,
									Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
							 FROM   @p_var_Insert_PatientPrescriptionData
						   )
					AS		 SRC (
								  Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Description,
								  Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,DeleteIndicator
								 )
					ON	   (
							 TGT.Visit_Date			 = SRC.Visit_Date 
					AND		 TGT.Patient_Visit_No	 = SRC.Patient_Visit_No 
					AND		 TGT.Shift_ID			 = SRC.Shift_ID
					AND		 TGT.Clinic_ID			 = SRC.Clinic_ID 
					AND		 TGT.Doctor_ID			 = SRC.Doctor_ID 
					AND		 TGT.Patient_ID		     = SRC.Patient_ID 
					AND		 TGT.Brand_Name			 = SRC.Brand_Name
					AND		 TGT.Medicine_Name		 = SRC.Medicine_Name
					AND      TGT.CatSub_Description  = SRC.CatSub_Description
					AND      TGT.Cat_Short_Name		 = SRC.Cat_Short_Name
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							 Visit_Date,Patient_Visit_No, 
							 Shift_ID, 
							 Clinic_ID, 
							 Doctor_ID,
							 Patient_ID,
							 Brand_Name,
							 Medicine_Name,
							 CatSub_Description,
							 Cat_Short_Name,
							 [Marketed_By],
							 Morning,
							 Afternoon,
							 Night,
							 No_Of_Days,
							 Instruction,
							 Created_On,
							 Modified_On,
							 CreatedBy_Name,
							 ModifiedBy_Name,
							 Delete_Indicator,
							 Sequence_Id
						   )
					VALUES ( 
							 SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Brand_Name, SRC.Medicine_Name,
							 SRC.CatSub_Description,SRC.Cat_Short_Name,SRC.Marketed_By,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),
							 GetDate(),@p_var_User_Id,@p_var_User_Id,SRC.DeleteIndicator,(select max(Sequence_Id)+1 from Visit_Prescription_Overwrite)
							)
				WHEN MATCHED  THEN 
					   UPDATE SET  Visit_Date         = SRC.Visit_Date,
								   Patient_Visit_No   = SRC.Patient_Visit_No,
								   Shift_ID           = SRC.Shift_ID,
								   Clinic_ID          = SRC.Clinic_ID,
								   Doctor_ID		  = SRC.Doctor_ID,
								   Patient_ID		  = SRC.Patient_ID,
								   Brand_Name		  = SRC.Brand_Name,
								   Medicine_Name	  = SRC.Medicine_Name,
								   --Marketed_By		  = SRC.Marketed_By,
								   CatSub_Description = SRC.CatSub_Description,
								   Cat_Short_Name     = SRC.Cat_Short_Name,
								   Morning            = SRC.Morning,
								   Afternoon          = SRC.Afternoon,
								   Night              = SRC.Night,
				  				   No_Of_Days         = SRC.No_Of_Days,
								   Instruction        = SRC.Instruction,
								   Delete_Indicator   = SRC.DeleteIndicator	;			
	   
			

	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END





/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwriteOffline]    Script Date: 16-Jan-18 8:25:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicineDataOverwriteOffline]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MedicineDataOverwriteOffline]
	@p_var_Visit_Date														 DATETIME,
	@p_var_Patient_Visit_No													 INT,
	@p_var_Shift_Id															 TINYINT,
	@p_var_Clinic_Id														 NVARCHAR(10),
	@p_var_Doctor_Id														 NVARCHAR(30),
	@p_var_Patient_Id														 NVARCHAR(32),
	@p_var_Insert_PatientMedicineData UDT_Insert_Medicine_TableType			 READONLY,
	@p_var_Insert_PatientPrescriptionData UDT_Insert_Prescription_TableType  READONLY,
	@p_var_fees_collected													 DECIMAL(10,2),
	@p_var_User_Id															 NVARCHAR(32),
	@p_var_Status_Id														 TINYINT
 AS
 BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
	   BEGIN TRY

	 --  SELECT * INTO TempPrescriptionOverwrite FROM @p_var_Insert_PatientPrescriptionData;

				MERGE   Visit_Medicine_Overwrite as TGT
					USING  (
							SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Descirption,
								   Morning,Afternoon,Night,No_Of_Days,Instruction 
							FROM   @p_var_Insert_PatientMedicineData
						   )
					AS		SRC (
								 Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description,Medicine_Descirption,
								 Morning,Afternoon,Night,No_Of_Days,Instruction
								)
					ON	   (
							TGT.Visit_Date		  = SRC.Visit_Date 
					AND		TGT.Patient_Visit_No  = SRC.Patient_Visit_No
					AND		TGT.Shift_ID		  = SRC.Shift_ID 
					AND     TGT.Clinic_ID		  = SRC.Clinic_ID 
					AND		TGT.Doctor_ID		  = SRC.Doctor_ID 
					AND		TGT.Patient_ID		  = SRC.Patient_ID 
					AND		TGT.Short_Description = SRC.Short_Description
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Description,Morning,
							Afternoon,Night,No_Of_Days,Instruction,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name
						   )
					VALUES (
							SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Short_Description, 
							SRC.Medicine_Descirption,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),GetDate(),
							@p_var_User_Id,@p_var_User_Id
						   )
				WHEN MATCHED  THEN
					   UPDATE SET  Visit_Date		    = SRC.Visit_Date,
								   Patient_Visit_No	    = SRC.Patient_Visit_No, 
								   Shift_ID			    = SRC.Shift_ID,
								   Clinic_ID		    = SRC.Clinic_ID,
								   Doctor_ID			= SRC.Doctor_ID ,
								   Patient_ID			= SRC.Patient_ID,    
								   Short_Description	= SRC.Short_Description,
								   Medicine_Description = SRC.Medicine_Descirption,
								   Morning				= SRC.Morning,
								   Afternoon			= SRC.Afternoon,
								   Night				= SRC.Night,
								   No_Of_Days			= SRC.No_Of_Days,
								   Instruction			= SRC.Instruction	;					  
			     
				MERGE Visit_Prescription_Overwrite as TGT
					USING  (
		   					 SELECT Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Descritption,
									Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction
							 FROM   @p_var_Insert_PatientPrescriptionData
						   )
					AS		 SRC (
								  Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,Marketed_By,CatSub_Description,
								  Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction
								 )
					ON	   (
							 TGT.Visit_Date			 = SRC.Visit_Date 
					AND		 TGT.Patient_Visit_No	 = SRC.Patient_Visit_No 
					AND		 TGT.Shift_ID			 = SRC.Shift_ID
					AND		 TGT.Clinic_ID			 = SRC.Clinic_ID 
					AND		 TGT.Doctor_ID			 = SRC.Doctor_ID 
					AND		 TGT.Patient_ID		     = SRC.Patient_ID 
					AND		 TGT.Brand_Name			 = SRC.Brand_Name
					AND		 TGT.Medicine_Name		 = SRC.Medicine_Name
					AND      TGT.CatSub_Description  = SRC.CatSub_Description
					AND      TGT.Cat_Short_Name		 = SRC.Cat_Short_Name
						   )
				WHEN NOT MATCHED THEN
					INSERT (
							 Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name,Medicine_Name,CatSub_Description,
							 Cat_Short_Name,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name
						   )
					VALUES ( 
							 SRC.Visit_Date,SRC.Patient_Visit_No, SRC.Shift_ID, SRC.Clinic_ID, SRC.Doctor_ID,SRC.Patient_ID,SRC.Brand_Name, SRC.Medicine_Name,
							 SRC.CatSub_Description,SRC.Cat_Short_Name,SRC.Morning,SRC.Afternoon,SRC.Night,SRC.No_Of_Days,SRC.Instruction,GetDate(),
							 GetDate(),@p_var_User_Id,@p_var_User_Id
							)
				WHEN MATCHED  THEN 
					   UPDATE SET  Visit_Date         = SRC.Visit_Date,
								   Patient_Visit_No   = SRC.Patient_Visit_No,
								   Shift_ID           = SRC.Shift_ID,
								   Clinic_ID          = SRC.Clinic_ID,
								   Doctor_ID		  = SRC.Doctor_ID,
								   Patient_ID		  = SRC.Patient_ID,
								   Brand_Name		  = SRC.Brand_Name,
								   Medicine_Name	  = SRC.Medicine_Name,
								   --Marketed_By		  = SRC.Marketed_By,
								   CatSub_Description = SRC.CatSub_Description,
								   Cat_Short_Name     = SRC.Cat_Short_Name,
								   Morning            = SRC.Morning,
								   Afternoon          = SRC.Afternoon,
								   Night              = SRC.Night,
				  				   No_Of_Days         = SRC.No_Of_Days,
								   Instruction        = SRC.Instruction	;			
	   

				UPDATE        [dbo].[Patient_Visits]  
				SET			  Fees_Collected			= @p_var_fees_collected,
							  Status_Id					= @p_var_Status_Id 
							  --Patient_Last_Visit_No		= @p_var_Patient_Visit_No
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_Id 
				AND			  Clinic_ID					= @p_var_Clinic_Id 
				AND			  Doctor_ID					= @p_var_Doctor_Id 
				AND			  Patient_ID				= @p_var_Patient_Id
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	  Doctor_ID			   = @p_var_Doctor_Id 
				AND			  ID				   = @p_var_Patient_Id 

	   END TRY
	   BEGIN CATCH
		SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
       END CATCH
     
 END




/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicinePrescriptionOverwrite]    Script Date: 16-Jan-18 8:25:50 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MedicinePrescriptionOverwrite]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 31-Mar-2016
-- Description	: This stored procedure will insert the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MedicinePrescriptionOverwrite]
	@p_var_Visit_Date DATETIME,
	@p_var_Patient_Visit_No INT,
	@p_var_Shift_Id TINYINT,
	@p_var_Clinic_Id NVARCHAR(10),
	@p_var_Doctor_Id NVARCHAR(30),
	@p_var_Patient_Id NVARCHAR(32),
	@p_var_User_Id NVARCHAR(32)

 AS

 DECLARE @p_var_Short_Description NVARCHAR(80),
		 @p_var_Brand_Name NVARCHAR(200),
		 @p_var_Medicine_Name NVARCHAR(300)

 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   IF NOT EXISTS (
						   SELECT * FROM [dbo].[Visit_Medicine_Overwrite] VM 
						   WHERE  VM.Visit_Date		  = @p_var_Visit_Date			   
							AND	  VM.Patient_Visit_No = @p_var_Patient_Visit_No 
							AND	  VM.Shift_ID		  = @p_var_Shift_Id				   
							AND	  VM.Clinic_ID		  = @p_var_Clinic_Id			   
							AND	  VM.Doctor_ID		  = @p_var_Doctor_Id			   
							AND	  VM.Patient_ID		  = @p_var_Patient_Id			    
						  )
		  BEGIN 
			 INSERT INTO [dbo].[Visit_Medicine_Overwrite]
			                    (
						          Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description, Medicine_Description,
								  Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name,Delete_Indicator,Delete_Flag
								)
	       	 SELECT		Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Short_Description,Medicine_Description,Morning,
						Afternoon,Night,No_Of_Days,Instruction,GetDate(),GetDate(),@p_var_User_Id,@p_var_User_Id,0,0 
		   	 FROM		[dbo].[Visit_Medicine] VM
			 WHERE		VM.Visit_Date		= @p_var_Visit_Date			  
			 AND	    VM.Patient_Visit_No = @p_var_Patient_Visit_No 
			 AND	    VM.Shift_ID		    = @p_var_Shift_Id				  
			 AND	    VM.Clinic_ID	    = @p_var_Clinic_Id				  
			 AND		VM.Doctor_ID	    = @p_var_Doctor_Id				  
			 AND		VM.Patient_ID       = @p_var_Patient_Id			  
		  END
		  IF NOT EXISTS (
						  SELECT * FROM [dbo].[Visit_Prescription_Overwrite] VP 
						  WHERE VP.Visit_Date		 = @p_var_Visit_Date			   
						  AND    VP.Patient_Visit_No = @p_var_Patient_Visit_No 
						  AND    VP.Shift_ID		 = @p_var_Shift_Id				   
						  AND    VP.Clinic_ID		 = @p_var_Clinic_Id			   
					      AND    VP.Doctor_ID		 = @p_var_Doctor_Id			   
						  AND    VP.Patient_ID		 = @p_var_Patient_Id									 
						 )
		  BEGIN 
			 INSERT INTO [dbo].[Visit_Prescription_Overwrite] 
			                    (
								  Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name, Medicine_Name,
								  CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,
								  Created_On,Modified_On,CreatedBy_Name,
								  ModifiedBy_Name,Delete_Indicator,Delete_Flag,Sequence_Id
								)
			SELECT		Visit_Date,Patient_Visit_No, Shift_ID, Clinic_ID, Doctor_ID,Patient_ID,Brand_Name, Medicine_Name,CatSub_Description,
						Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GetDate(),GetDate(),@p_var_User_Id,@p_var_User_Id,
						0,0,Sequence_Id
			FROM	    [dbo].[Visit_Prescription] VP
		    WHERE		VP.Visit_Date		= @p_var_Visit_Date			   
			AND		    VP.Patient_Visit_No = @p_var_Patient_Visit_No  
			AND		    VP.Shift_ID			= @p_var_Shift_Id				   
			AND		    VP.Clinic_ID		= @p_var_Clinic_Id			       
			AND		    VP.Doctor_ID		= @p_var_Doctor_Id			       
			AND		    VP.Patient_ID	    = @p_var_Patient_Id			   										   
		  END			  


		  /**********************************************Save Billing Overwrite details********************************************/

		  IF NOT EXISTS (
						  SELECT * FROM [dbo].[Patient_Visit_BillingInfoOverwrite] VP 
						  WHERE  VP.Visit_Date		 = @p_var_Visit_Date			   
						  AND    VP.Patient_Visit_No = @p_var_Patient_Visit_No 
						  AND    VP.Shift_ID		 = @p_var_Shift_Id				   
						  AND    VP.Clinic_ID		 = @p_var_Clinic_Id			   
					      AND    VP.Doctor_ID		 = @p_var_Doctor_Id			   
						  AND    VP.Patient_ID		 = @p_var_Patient_Id									 
						 )
		  BEGIN 
			 INSERT INTO [dbo].[Patient_Visit_BillingInfoOverwrite] 
			                    (
								  [Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Billing_Group_Name],[Billing_Subgroup_Name],
								  [Billing_Details],[Default_fees],[Collected_Fees],
								  Created_On,CreatedBy_Name,Modified_On,
								  ModifiedBy_Name,Delete_Flag
								)
			SELECT		[Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Billing_Group_Name],[Billing_Subgroup_Name],
								  [Billing_Details],[Default_fees],[Collected_Fees],GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,Delete_Flag
						
			FROM	    [dbo].[Patient_Visit_BillingInfo] VP
		    WHERE		VP.Visit_Date		= @p_var_Visit_Date			   
			AND		    VP.Patient_Visit_No = @p_var_Patient_Visit_No  
			AND		    VP.Shift_ID			= @p_var_Shift_Id				   
			AND		    VP.Clinic_ID		= @p_var_Clinic_Id			       
			AND		    VP.Doctor_ID		= @p_var_Doctor_Id			       
			AND		    VP.Patient_ID	    = @p_var_Patient_Id	

			END
				
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_MR_Appointment]    Script Date: 16-Jan-18 8:26:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MR_Appointment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  13 Dec 2016
-- Description	:  This stored procedure will Book MR Apointment.
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_MR_Appointment]
	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_MR_ID					INT,
	@p_time_Visit_Time				TIME(7),
	@p_var_User_Id					NVARCHAR(32),
	@p_var_company_name				NVARCHAR(200)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					MR_ID
			FROM	[dbo].[MR_Visits] 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		MR_ID		= @p_nvar_MR_ID
			AND		Delete_Flag = 0
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			
           
			
			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 OR ID=6 or ID=11 or ID=12 or ID=7 or ID=8 OR ID=9 OR ID=13))
			AND		Doctor_ID=@p_nvar_Doctor_ID;
            
           
   
			INSERT INTO [dbo].[MR_Visits](
						
						Doctor_ID,
						Clinic_ID,
						Shift_ID,
						MR_ID,
						Company_Name,
						Visit_Date,
						Visit_Time,
						Status_ID,
						Created_On,
						CreatedBy_Name,
						Modified_On,
						ModifiedBy_Name,
						Delete_Flag
						
						)
			VALUES		(
						
						
						@p_nvar_Doctor_ID,
						@p_nvar_Clinic_ID,
						@p_int_Shift_ID,
						@p_nvar_MR_ID,
						@p_var_company_name,
						@p_date_Visit_Date,
						@p_time_Visit_Time,
						@int_StatusId,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						0
						)
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END







/****** Object:  StoredProcedure [dbo].[USP_Insert_MR_Reminder_And_Medicine]    Script Date: 16-Jan-18 8:26:12 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MR_Reminder_And_Medicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 15 Dec 2016
-- Description	: This stored procedure will insert and update the prescription medicine in MR_Added_Prescription table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MR_Reminder_And_Medicine]
	@Todays_MR_VisitDate																	DATE,
	@p_var_Shift_ID																			TINYINT,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_MR_ID																			INT,
	@p_var_VisitTime																		time,
	@p_var_CompanyId																		NVARCHAR(200),	
	--@p_var_CatShortDescription																NVARCHAR(60),
	--@p_var_CatSubDescription																NVARCHAR(200),
	--@p_var_MedicineName																		NVARCHAR(200),
	--@p_var_Brandname																		NVARCHAR(200),
	@p_var_MarketedBy																		NVARCHAR(200),
	@p_var_Isactive																			BIT,
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Prescription_Data		[dbo].[UDT_Insert_New_MR_Medicine]						READONLY,
	--@p_var_priority																			INT,
	@p_var_Morning																			Float,
	@p_var_Afternoon																		Float,
	@p_var_Night																			Float,
	@p_var_No_Of_Days																		INT,
	@p_var_Instructions																		NVARCHAR(400),
	@p_var_remindertext_DataTable			UDT_Insert_New_MR_ReminderText						READONLY,
	@p_var_reminderattachFiles_DataTable	UDT_Insert_MR_ReminderAttachFiles				READONLY

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	

	BEGIN TRY

	IF EXISTS(
				SELECT * FROM MR_Visits 
				WHERE	Visit_Date	= @Todays_MR_VisitDate
				AND		Shift_ID	= @p_var_Shift_ID
				AND		Company_Name= @p_var_CompanyId
				AND		MR_ID		= @p_var_MR_ID
				AND		Visit_Time	= @p_var_VisitTime
				AND		Delete_Flag=1
			)
			BEGIN
			SELECT 0 AS SAVE_STATUS
			END

	ELSE
	BEGIN

	--SELECT DISTINCT	 
	
	--				 [Doctor_ID]				AS DOCTOR_ID,
	--				 [Clinic_ID]				AS CLINIC_ID,
	--				 [Shift_ID]					AS SHIFT_ID,
	--				 [MR_ID]					AS MR_ID,
	--				 [Visit_Date]				AS VISIT_DATE,
	--				 [Visit_Time]				AS VISIT_TIME,
	--				 [Company_ID]				AS COMPANY_ID,
	--				 [Old_Cat_Short_Name]			AS SHORT_CAT_NAME,
	--				 [Old_CatSubDescription]		AS CAT_SUB_DESC,
	--				 [Old_Medicine_Name]			AS MEDICINE,
	--				 [Old_Brand_Name]				AS BRANDNAME,
	--				 [Priority]					AS NEWPRIORITY
					 
					 
	-- FROM			 @p_var_Insert_Prescription_Data

	 MERGE [dbo].[MR_Added_Prescriptions] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [MR_ID]					AS MR_ID,
					 [Visit_Date]				AS VISIT_DATE,
					 [Visit_Time]				AS VISIT_TIME,
					 [Company_ID]				AS COMPANY_ID,
					 [Old_Cat_Short_Name]			AS SHORT_CAT_NAME,
					 [Old_CatSubDescription]		AS CAT_SUB_DESC,
					 [Old_Medicine_Name]			AS MEDICINE,
					 [Old_Brand_Name]				AS BRANDNAME,
					 [Priority]					AS NEWPRIORITY
							
							
			FROM	@p_var_Insert_Prescription_Data 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,MR_ID,VISIT_DATE,VISIT_TIME,COMPANY_ID,SHORT_CAT_NAME,CAT_SUB_DESC,MEDICINE,BRANDNAME,NEWPRIORITY
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[MR_ID]				=SRC.MR_ID	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Visit_Time]				=SRC.VISIT_TIME	AND
				CM.[Company_ID]				=SRC.COMPANY_ID	AND
				CM.[Cat_Short_Name]			= SRC.SHORT_CAT_NAME AND
				CM.[CatSub_Description]		= SRC.CAT_SUB_DESC  AND
				CM.[Medicine_Name]			=SRC.MEDICINE		AND
				CM.[Brand_Name]				=SRC.BRANDNAME		
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Cat_Short_Name]			= SRC.SHORT_CAT_NAME,
				CM.[CatSub_Description]		= SRC.CAT_SUB_DESC,
				CM.[Medicine_Name]			=SRC.MEDICINE,
				CM.[Brand_Name]				=SRC.BRANDNAME,
				CM.[Created_On]				=GETDATE(),
				CM.[Modified_On]			=GETDATE(),
				CM.[Priority_Value]			=SRC.NEWPRIORITY
				
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[MR_ID],[Visit_Date],[Visit_Time],[Company_ID],Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Active,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Priority_Value],Morning,Afternoon,Night,No_Of_Days,Instruction)
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.MR_ID,SRC.VISIT_DATE,SRC.VISIT_TIME,SRC.COMPANY_ID,SRC.SHORT_CAT_NAME,SRC.CAT_SUB_DESC,SRC.MEDICINE,SRC.BRANDNAME,@p_var_MarketedBy,@p_var_Isactive,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,SRC.NEWPRIORITY,@p_var_Morning,@p_var_Afternoon,@p_var_Night,@p_var_No_Of_Days,@p_var_Instructions);
			--FROM			@p_var_Insert_PatientPrescriptionData


	------Add and Update Reminder

	--SELECT DISTINCT	 
	--				 [Doctor_ID]				AS DOCTOR_ID,
	--				 [Clinic_ID]				AS CLINIC_ID,
	--				 [Shift_ID]					AS SHIFT_ID,
	--				 [MR_ID]					AS MR_ID,
	--				 [Visit_Date]				AS VISIT_DATE,
	--				 [Visit_Time]				AS VISIT_TIME,
	--				 [Company_ID]				AS COMPANY_ID,
	--				 [Reminder_Text]				AS REMINDER
					 
					 
	-- FROM			 @p_var_remindertext_DataTable

	 MERGE [dbo].[MR_Reminders] as MR

	 USING(
			SELECT DISTINCT 
					  [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [MR_ID]					AS MR_ID,
					 [Visit_Date]				AS VISIT_DATE,
					 [Visit_Time]				AS VISIT_TIME,
					 [Company_ID]				AS COMPANY_ID,
					 [Reminder_Text]				AS REMINDER
					
							
			FROM	@p_var_remindertext_DataTable 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,MR_ID,VISIT_DATE,VISIT_TIME,COMPANY_ID,REMINDER
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]			=SRCREM.CLINIC_ID	AND
				MR.[Shift_ID]				=SRCREM.SHIFT_ID	AND
				MR.[MR_ID]				=SRCREM.MR_ID	AND
				MR.[Visit_Date]				=SRCREM.VISIT_DATE	AND
				MR.[Visit_Time]				=SRCREM.VISIT_TIME	AND
				MR.[Company_ID]				=SRCREM.COMPANY_ID	AND
				MR.[Reminder_Text]			= SRCREM.REMINDER 
				
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		MR.[Reminder_Text]			= SRCREM.REMINDER
				
				
				

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Shift_ID],[MR_ID],[Company_ID],[Visit_Date],[Visit_Time],[Reminder_Text]
		)
		VALUES(
		SRCREM.DOCTOR_ID,SRCREM.CLINIC_ID,SRCREM.SHIFT_ID,SRCREM.MR_ID,SRCREM.COMPANY_ID,SRCREM.VISIT_DATE,SRCREM.VISIT_TIME,SRCREM.REMINDER);
		
		--FROM @p_var_remindertext_DataTable

	INSERT INTO [dbo].[MR_Visit_Attachments](
			[Doctor_ID],[Clinic_ID],[Shift_ID],[MR_ID],[Visit_Date],[Visit_Time],[Company_Name],[Folder_Path],[Attachment_Name]
		)
		SELECT
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Shift_ID,@p_var_MR_ID,@Todays_MR_VisitDate,@p_var_VisitTime,@p_var_CompanyId,[Folder_Path],[Attachment_Name]
		
		FROM @p_var_reminderattachFiles_DataTable


	UPDATE [dbo].[MR_Visits] set [Status_ID]=6
	WHERE	Visit_Date=@Todays_MR_VisitDate
	AND		Shift_ID=@p_var_Shift_ID
	AND		Visit_Time=@p_var_VisitTime
	AND		MR_ID=@p_var_MR_ID

	SELECT 1 AS SAVE_STATUS
	
	END

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_MRMedicine]    Script Date: 16-Jan-18 8:26:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MRMedicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 14 Dec 2016
-- Description	: This stored procedure will insert the prescription medicine in Prescription_Medicine
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_MRMedicine]	
	@Todays_MR_VisitDate								DATE,
	@p_var_Shift_ID										TINYINT,
	@p_var_Clinic_ID									NVARCHAR(10),
	@p_var_Doctor_ID									NVARCHAR(30),
	@p_var_MR_ID										INT,
	@p_var_VisitTime									time,
	@p_var_CompanyId									NVARCHAR(200),
	@p_var_CatShortDescription							NVARCHAR(60),
	@p_var_CatSubDescription							NVARCHAR(200),
	@p_var_MedicineName									NVARCHAR(200),
	@p_var_Brandname									NVARCHAR(200),
	@p_var_MarketedBy									NVARCHAR(200),
	@p_var_Isactive										BIT,
	@p_var_User_Id										NVARCHAR(90),
	@p_var_priority										INT,
	@p_var_Morning										Float,
	@p_var_Afternoon									Float,
	@p_var_Night										Float,
	@p_var_No_Of_Days									INT,
	@p_var_Instructions									NVARCHAR(4000)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		CREATE TABLE #temp3 (CATSHORT NVARCHAR(200),CATSUB NVARCHAR(200),MEDNAME NVARCHAR(200),BRANDNAME NVARCHAR(200))

		   IF EXISTS (
						   SELECT * FROM [dbo].[MR_Added_Prescriptions] PC 
						   WHERE  PC.Cat_Short_Name		  = @p_var_CatShortDescription	
						   AND    PC.CatSub_Description	  =	@p_var_CatSubDescription
						   AND	  PC.Medicine_Name		  =	@p_var_MedicineName
						   AND	  PC.Brand_Name			  = @p_var_Brandname			    
						  )
			BEGIN
			SELECT 0 AS SAVE_STATUS;
			END

			ELSE IF EXISTS(
						   SELECT * FROM Prescription_Medicines PM
						   WHERE  PM.Cat_Short_Name		  = @p_var_CatShortDescription	
						   AND    PM.CatSub_Description	  =	@p_var_CatSubDescription
						   AND	  PM.Medicine_Name		  =	@p_var_MedicineName
						   AND	  PM.Brand_Name			  = @p_var_Brandname			    
						  )
			BEGIN
			SELECT 0 AS SAVE_STATUS;
			END
			ELSE

		  BEGIN
		   
			 INSERT INTO [dbo].[MR_Added_Prescriptions]
			                    (
						          Doctor_ID,
								  Clinic_ID,
								  Shift_ID,
								  MR_ID,
								  Visit_Date,
								  Visit_Time,
								  Company_ID,  
								  Cat_Short_Name,
								  CatSub_Description,
								  Medicine_Name,
								  Brand_Name,
								  Marketed_By,
								  Active,
								  Created_On,
								  CreatedBy_Name,
								  Modified_On,
								  ModifiedBy_Name,
								  Priority_Value,
								  Morning,
								  Afternoon,
								  Night,
								  No_Of_Days,
								  Instruction
								)

						OUTPUT INSERTED.Cat_Short_Name,INSERTED.CatSub_Description,INSERTED.Medicine_Name,INSERTED.Brand_Name INTO  #temp3
					 VALUES   (
								@p_var_Doctor_ID,
								@p_var_Clinic_ID,
								@p_var_Shift_ID,
								@p_var_MR_ID,
								@Todays_MR_VisitDate,
								@p_var_VisitTime,
								@p_var_CompanyId,
								@p_var_CatShortDescription,
								@p_var_CatSubDescription,
								@p_var_MedicineName,
								@p_var_Brandname,
								@p_var_MarketedBy,
								@p_var_Isactive,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id,
								@p_var_priority,
								@p_var_Morning,
								@p_var_Afternoon,
								@p_var_Night,
								@p_var_No_Of_Days,
								@p_var_Instructions)	
			 
			 SELECT 1 AS SAVE_STATUS;

				SELECT 1 AS MEDTABLE,*  FROM #temp3

			 END			
	      
		   
		 
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_MRRegistration]    Script Date: 16-Jan-18 8:26:28 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MRRegistration]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  12-Dec-2016
-- Description :  This stored procedure will Save MR Data In MR Master table
--  created By :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_MRRegistration]
		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_CompanyName				NVARCHAR(200),
		@p_nvar_First_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_nvar_ShortName			    NVARCHAR(30),
		@p_nvar_Mobile					NVARCHAR(20),
		@p_nvar_MRPhoto					VARCHAR(300),
		@p_var_User_Id				    NVARCHAR(32)
		--@p_var_Insert_MR_Data		[dbo].[UDT_Insert_MR]					READONLY
AS
BEGIN
	
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY

	declare @maxid		INT

	SET @maxid = 0
		IF EXISTS (SELECT TOP 1 MR_ID FROM MR_Master )
		SELECT @maxid=MAX(MR_ID)  +1  FROM MR_Master;
    ELSE 
		SET @maxid = 1


	CREATE TABLE #temp3 (MR_ID INT)

		
      	
        IF EXISTS 
		(	SELECT	[MR_ID]
			FROM	[dbo].[MR_Master]
			WHERE	[Company_Name]		= @p_nvar_CompanyName
			AND		[First_Name]		= @p_nvar_First_Name
			AND		[Last_Name]			= @p_nvar_Last_Name
			AND		Mobile_No			= @p_nvar_Mobile
			AND		Doctor_ID			= @p_nvar_Doctor_ID
			AND		Delete_Flag			=0
		)
		BEGIN
		SELECT 0 AS SAVE_STATUS;
		END

		ELSE IF EXISTS 
		(	SELECT	[MR_ID]
			FROM	[dbo].[MR_Master]
			WHERE	[Company_Name]		= @p_nvar_CompanyName
			AND		[First_Name]		= @p_nvar_First_Name
			AND		[Last_Name]			= @p_nvar_Last_Name
			AND		Mobile_No			= @p_nvar_Mobile
			AND		Doctor_ID			= @p_nvar_Doctor_ID
			AND		Delete_Flag			=1
		)
		BEGIN

			SELECT 3 AS SAVE_STATUS;

		END

		ELSE IF EXISTS
		(
			SELECT	[MR_ID]
			FROM	[dbo].[MR_Master]
			WHERE	
					[First_Name]		= @p_nvar_First_Name
			AND		[Last_Name]			= @p_nvar_Last_Name
			AND		Mobile_No			= @p_nvar_Mobile
			AND		Doctor_ID			= @p_nvar_Doctor_ID
		)
		BEGIN
		SELECT 2 AS SAVE_STATUS;
		END


        ELSE
		 BEGIN
		
		

			  INSERT INTO [dbo].[MR_Master]
								(
								MR_ID,
								Doctor_ID,
								[Company_Name],
								First_Name,
								Middle_Name,
								Last_Name,
								[Short_Name],
								[Mobile_No],
								[Created_On],
								CreatedBy_Name,
								Modified_On,
								ModifiedBy_Name,
								[MR_Photo],
								[Delete_Flag]
								)
								VALUES
								(
								--NEXT VALUE FOR MR_Sequence,
								@maxid,
								@p_nvar_Doctor_ID,
								@p_nvar_CompanyName,
								@p_nvar_First_Name,
								@p_nvar_Middle_Name,
								@p_nvar_Last_Name,
								@p_nvar_ShortName,
								@p_nvar_Mobile,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id,
								@p_nvar_MRPhoto,
								0
								)

					  
					 SELECT 1 AS SAVE_STATUS;
					 SELECT MAX(MR_ID) AS MR_ID from MR_Master    
			END
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END













/****** Object:  StoredProcedure [dbo].[USP_Insert_MRRegistration_ForDuplicate]    Script Date: 16-Jan-18 8:26:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MRRegistration_ForDuplicate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  02 Jan 2016
-- Description :  This stored procedure will Save the Data In MR Master table for duplicate MR
--  created By :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_MRRegistration_ForDuplicate]
		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_CompanyName				NVARCHAR(200),
		@p_nvar_First_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_nvar_ShortName			    NVARCHAR(30),
		@p_nvar_Mobile					NVARCHAR(20),
		@p_nvar_MRPhoto					VARCHAR(300),
		@p_var_User_Id				    NVARCHAR(32),
		@p_bool_ischeck					BIT,
		--@p_chr_Registration_Status      CHAR(1),
		@p_date_Visit_Date        DATETIME,
		@p_int_Shift_ID           TINYINT,
		@p_nvar_Clinic_ID         NVARCHAR(10),
		@p_time_Visit_Time        TIME(7)
		
	
AS
BEGIN
	
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY

	declare @maxid		INT

	SET @maxid = 0
		IF EXISTS (SELECT TOP 1 MR_ID FROM MR_Master )
		SELECT @maxid=MAX(MR_ID)  +1  FROM MR_Master;
    ELSE 
		SET @maxid = 1


   CREATE TABLE #temp3 (MR_ID INT)
   DECLARE @ID  INT;

			 INSERT INTO [dbo].[MR_Master]
								(
								MR_ID,
								Doctor_ID,
								[Company_Name],
								First_Name,
								Middle_Name,
								Last_Name,
								[Short_Name],
								[Mobile_No],
								[Created_On],
								CreatedBy_Name,
								Modified_On,
								ModifiedBy_Name,
								[MR_Photo],
								[Delete_Flag]
								)
								OUTPUT INSERTED.MR_ID INTO  #temp3
								VALUES
								(
								--NEXT VALUE FOR MR_Sequence,
								@maxid,
								@p_nvar_Doctor_ID,
								@p_nvar_CompanyName,
								@p_nvar_First_Name,
								@p_nvar_Middle_Name,
								@p_nvar_Last_Name,
								@p_nvar_ShortName,
								@p_nvar_Mobile,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id,
								@p_nvar_MRPhoto,
								0
								)

					 
					 SELECT 1 AS SAVE_STATUS;
					 SELECT @ID=MR_ID FROM #temp3   


					 
					 IF @p_bool_ischeck = 1

		BEGIN TRY
	        DECLARE @int_StatusId  INT
			SELECT @ID=MR_ID FROM #temp3   
		     	 SELECT @int_StatusId = ID 
			       FROM Status_Ref 
			      WHERE ID NOT IN(Select ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6))AND
			            Doctor_ID=@p_nvar_Doctor_ID

			INSERT INTO [dbo].[MR_Visits](
						
						Doctor_ID,
						Clinic_ID,
						Shift_ID,
						MR_ID,
						Company_Name,
						Visit_Date,
						Visit_Time,
						Status_ID,
						Created_On,
						CreatedBy_Name,
						Modified_On,
						ModifiedBy_Name,
						Delete_Flag
						
						)
			VALUES(		
						
						@p_nvar_Doctor_ID,
						@p_nvar_Clinic_ID,
						@p_int_Shift_ID,
						@ID,
						@p_nvar_CompanyName,
						@p_date_Visit_Date,
						@p_time_Visit_Time,
						@int_StatusId,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						0
					)	
						
		          
                 

				  END TRY

				  

	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
					
			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END












/****** Object:  StoredProcedure [dbo].[USP_Insert_MRRegistrationForSameCompany]    Script Date: 16-Jan-18 8:26:43 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MRRegistrationForSameCompany]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  12-Dec-2016
-- Description :  This stored procedure will Save MR Data In MR Master table
--  created By :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_MRRegistrationForSameCompany]
		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_CompanyName				NVARCHAR(200),
		@p_nvar_First_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_nvar_ShortName			    NVARCHAR(30),
		@p_nvar_Mobile					NVARCHAR(20),
		@p_nvar_MRPhoto					VARCHAR(300),
		@p_var_User_Id				    NVARCHAR(32),
		@p_bool_ischeck					BIT,
		@p_date_Visit_Date        DATETIME,
		@p_int_Shift_ID           TINYINT,
		@p_nvar_Clinic_ID         NVARCHAR(10),
		@p_time_Visit_Time        TIME(7)
		
AS
BEGIN
	
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
	CREATE TABLE #temp3 (MR_ID INT)
	DECLARE @ID  INT;

			UPDATE MR_Master SET Delete_Flag=0

			OUTPUT INSERTED.MR_ID INTO  #temp3

			WHERE	[Company_Name]		= @p_nvar_CompanyName
			AND		[First_Name]		= @p_nvar_First_Name
			AND		[Last_Name]			= @p_nvar_Last_Name
			AND		Mobile_No			= @p_nvar_Mobile
			AND		Doctor_ID			= @p_nvar_Doctor_ID
			AND		Delete_Flag			=1

			SELECT 1 AS SAVE_STATUS;
			--SELECT 1 AS MRTABLE,*  FROM #temp3

		
			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	IF @p_bool_ischeck = 1

		BEGIN TRY
	        DECLARE @int_StatusId  INT
			SELECT @ID=MR_ID FROM #temp3   
		     	 SELECT @int_StatusId = ID 
			       FROM Status_Ref 
			      WHERE ID NOT IN(Select ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6))AND
			            Doctor_ID=@p_nvar_Doctor_ID

			INSERT INTO [dbo].[MR_Visits](
						
						Doctor_ID,
						Clinic_ID,
						Shift_ID,
						MR_ID,
						Company_Name,
						Visit_Date,
						Visit_Time,
						Status_ID,
						Created_On,
						CreatedBy_Name,
						Modified_On,
						ModifiedBy_Name,
						Delete_Flag
						
						)
			VALUES(		
						
						@p_nvar_Doctor_ID,
						@p_nvar_Clinic_ID,
						@p_int_Shift_ID,
						@ID,
						@p_nvar_CompanyName,
						@p_date_Visit_Date,
						@p_time_Visit_Time,
						@int_StatusId,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						0
					)	
						
		          
                 

				  END TRY

				  

	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END














/****** Object:  StoredProcedure [dbo].[USP_Insert_MRVisitDataFromDoctor]    Script Date: 16-Jan-18 8:26:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_MRVisitDataFromDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author	  : INCRUST
-- Create date: 21 Dec 2016
-- Description: This stored procedure will insert MR Visit Data from Doctor
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_MRVisitDataFromDoctor]
	
	@p_var_Insert_PatientPrescriptionData UDT_Insert_MRPrescriptionData_Doctor	READONLY,
	@p_var_MR_ID								NVARCHAR(32),
	@p_var_Visit_Date							DATETIME,
	@p_var_Visit_Time							TIME,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	--@p_bit_Active								BIT,
	@p_var_notes								NVARCHAR(500),
	@p_var_rating								INT
	
AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 BEGIN TRANSACTION


	 SELECT DISTINCT [Cat_Short_Name]			AS SHORT_CAT_NAME,
					 [CatSub_Description]		AS CAT_SUB_DESC,
					 [Medicine_Name]			AS MEDICINE,
					 [Brand_Name]				AS BRANDNAME,
					 [Marketed_By]				AS MARKETEDBY,
					 [Priority_Value]			AS NEWPRIORITY,
					 [Morning]					AS MORNING,
					 [Afternoon]				AS AFTERNOON,
					 [Night]					AS NIGHT,
				     [No_Of_Days]				AS NOOFDAYS,
					 [Instruction]				AS INSTRUCTION,
					 [Active]					AS ACTIVE
					 
	 FROM			 @p_var_Insert_PatientPrescriptionData

	 MERGE [dbo].[Prescription_Medicines] as CM

	 USING(
			SELECT DISTINCT [Cat_Short_Name]			AS SHORT_CAT_NAME,
							[CatSub_Description]		AS CAT_SUB_DESC,
							[Medicine_Name]				AS MEDICINE,
							[Brand_Name]				AS BRANDNAME,
							[Marketed_By]				AS MARKETEDBY,
							[Priority_Value]			AS NEWPRIORITY,
							[Morning]					AS MORNING,
							[Afternoon]					AS AFTERNOON,
							[Night]						AS NIGHT,
							[No_Of_Days]				AS NOOFDAYS,
							[Instruction]				AS INSTRUCTION,
							[Active]					AS ACTIVE
							
							
			FROM	@p_var_Insert_PatientPrescriptionData 
		  )
	
	 AS	 SRC (
				SHORT_CAT_NAME,CAT_SUB_DESC,MEDICINE,BRANDNAME,MARKETEDBY,NEWPRIORITY,MORNING,AFTERNOON,NIGHT,NOOFDAYS,INSTRUCTION,ACTIVE
			 )
	 ON		 (
				CM.[Cat_Short_Name]			= SRC.SHORT_CAT_NAME AND
				CM.[CatSub_Description]		= SRC.CAT_SUB_DESC  AND
				CM.[Medicine_Name]			=SRC.MEDICINE		AND
				CM.[Brand_Name]				=SRC.BRANDNAME		
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	CM.[Cat_Short_Name]				= SRC.SHORT_CAT_NAME,
				CM.[CatSub_Description]		= SRC.CAT_SUB_DESC,
				CM.[Medicine_Name]			=SRC.MEDICINE,
				CM.[Brand_Name]				=SRC.BRANDNAME,
				CM.[Marketed_By]			=SRC.MARKETEDBY,
				CM.Priority_Value 			= SRC.NEWPRIORITY,
				CM.[Morning] 				= SRC.MORNING,
				CM.[Afternoon] 				= SRC.AFTERNOON,
				CM.[Night]					= SRC.NIGHT,
				CM.[No_Of_Days] 			= SRC.NOOFDAYS,
				CM.[Instruction]			= SRC.INSTRUCTION,
				CM.[Active] 				= SRC.ACTIVE,
				--CM.[Created_On]				=	GETDATE(),
				CM.[Modified_On]			=	GETDATE()

	WHEN NOT MATCHED THEN
		
	INSERT (Cat_Short_Name,
			CatSub_Description,
			Medicine_Name,
			Brand_Name,
			Marketed_By,
			Active,
			Created_On,
			CreatedBy_Name,
			Modified_On,
			ModifiedBy_Name,
			[Priority_Value],
			Morning,
			Afternoon,
			Night,
			No_Of_Days,
			Instruction)

			VALUES
			(
			SRC.SHORT_CAT_NAME,
			SRC.CAT_SUB_DESC,
			SRC.MEDICINE,
			SRC.BRANDNAME,
			SRC.MARKETEDBY,
			SRC.ACTIVE,
			GETDATE(),
			@p_var_User_Id,
			GETDATE(),
			@p_var_User_Id,
			SRC.NEWPRIORITY,
			SRC.MORNING,
			SRC.AFTERNOON,
			SRC.NIGHT,
			SRC.NOOFDAYS,
			SRC.INSTRUCTION
			);
			



			--INSERT INTO		[dbo].[Prescription_Medicines](Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Active,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Morning,Afternoon,Night,No_Of_Days,Instruction)
			--SELECT	        [Cat_Short_Name],[CatSub_Description],[Medicine_Name],[Brand_Name],[Marketed_By],[Active],GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,[Morning],[Afternoon],[Night],[No_Of_Days],[Instruction]
			--FROM			@p_var_Insert_PatientPrescriptionData
			
			

			UPDATE			MR_Visits SET
							
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							[Notes]					= @p_var_notes,
							[Rating]				= @p_var_rating
							
			 WHERE			MR_ID					= @p_var_MR_ID		
			 AND			Visit_Date				= @p_var_Visit_Date
			 AND			Visit_Time				= @p_var_Visit_Time
			 AND			Shift_ID				= @p_var_Shift_ID			
			 AND			Clinic_ID				= @p_var_Clinic_ID		
			 AND			Doctor_ID				= @p_var_Doctor_ID	
			 


			 /*********************************UPDATE MR_VISIT_PRESCRIPTION TABLE***************************************/
			 SELECT DISTINCT 
					 [Cat_Short_Name]			AS SHORT_CAT_NAME,
					 [CatSub_Description]		AS CAT_SUB_DESC,
					 [Medicine_Name]			AS MEDICINE,
					 [Brand_Name]				AS BRANDNAME,
					 [Marketed_By]				AS MARKETEDBY,
					 [Priority_Value]			AS NEWPRIORITY,
					 [Morning]					AS MORNING,
					 [Afternoon]				AS AFTERNOON,
					 [Night]					AS NIGHT,
				     [No_Of_Days]				AS NOOFDAYS,
					 [Instruction]				AS INSTRUCTION,
					 [Active]					AS ACTIVE
					 
	 FROM			 @p_var_Insert_PatientPrescriptionData

	 MERGE [dbo].[MR_Added_Prescriptions] as MP

	 USING(
			SELECT DISTINCT [Cat_Short_Name]			AS SHORT_CAT_NAME,
							[CatSub_Description]		AS CAT_SUB_DESC,
							[Medicine_Name]				AS MEDICINE,
							[Brand_Name]				AS BRANDNAME,
							[Marketed_By]				AS MARKETEDBY,
							[Priority_Value]			AS NEWPRIORITY,
							[Morning]					AS MORNING,
							[Afternoon]					AS AFTERNOON,
							[Night]						AS NIGHT,
							[No_Of_Days]				AS NOOFDAYS,
							[Instruction]				AS INSTRUCTION,
							[Active]					AS ACTIVE
							
							
			FROM	@p_var_Insert_PatientPrescriptionData 
		  )
	
	 AS	 SRC (
				SHORT_CAT_NAME,CAT_SUB_DESC,MEDICINE,BRANDNAME,MARKETEDBY,NEWPRIORITY,MORNING,AFTERNOON,NIGHT,NOOFDAYS,INSTRUCTION,ACTIVE
			 )
	 ON		 (
				MP.[Cat_Short_Name]			= SRC.SHORT_CAT_NAME	AND
				MP.[CatSub_Description]		= SRC.CAT_SUB_DESC		AND
				MP.[Medicine_Name]			=SRC.MEDICINE			AND
				MP.[Brand_Name]				=SRC.BRANDNAME			AND
				MP.MR_ID					=@p_var_MR_ID			AND
				MP.Visit_Date				=@p_var_Visit_Date		AND
				MP.Visit_Time				=@p_var_Visit_Time
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	
				MP.[Morning] 				= SRC.MORNING,
				MP.[Afternoon] 				= SRC.AFTERNOON,
				MP.[Night]					= SRC.NIGHT,
				MP.[No_Of_Days] 			= SRC.NOOFDAYS,
				MP.[Instruction]			= SRC.INSTRUCTION,
				MP.[Active] 				= SRC.ACTIVE,
				MP.[Modified_On]			=	GETDATE();

	 



			
                SELECT 1 AS SAVE_STATUS
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END





/****** Object:  StoredProcedure [dbo].[USP_Insert_ParameterName]    Script Date: 16-Jan-18 8:27:00 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_ParameterName]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the para,meter name in Lab_TestPrameter table
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_ParameterName]
	
	@p_var_DoctorID			NVARCHAR(30),
	@p_var_labtestID		INT,
	@p_var_Parametername	NVARCHAR(100),
	@p_var_User_Id NVARCHAR(90)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		declare 	@maxid		INT,
					@maxparamid	INT;
		SELECT @maxparamid=MAX(ID) FROM Lab_Test_Parameter;
		SELECT @maxid=MAX(ID)  +1  FROM Lab_Test_Master;
		  
		  BEGIN 
			 INSERT INTO [dbo].[Lab_Test_Parameter]
			                    (
						         Doctor_ID,Lab_Test_ID,Parameter_Name,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name
								)
			 VALUES   (	@p_var_DoctorID,@p_var_labtestID,@p_var_Parametername,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id)	
			 END			
	       
			
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_OvulationInductionData]    Script Date: 16-Jan-18 8:27:09 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_OvulationInductionData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Patient_OvulationInductionData]
	
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Patient_ID																		NVARCHAR(30),
	@p_var_Shift_ID																			TINYINT,
	@p_var_Patient_visit_no																	INT,
	@Todays_VisitDate																		DATE,
	@p_var_User_Id																			NVARCHAR(90),
	--@p_var_Day																				INT,
	--@p_var_RT																				NVARCHAR(1000),
	--@p_var_LT																				NVARCHAR(1000),
	--@p_var_ET																				NVARCHAR(1000),
	--@p_var_ClinicalNotes																	NVARCHAR(1000),
	@p_var_Ovulation_DataTable			UDT_Insert_OvulationData							READONLY
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	

	BEGIN TRY

	UPDATE Visit_Ovulation_Induction_Data SET Delete_Flag = 1
	WHERE	Patient_ID	=	@p_var_Patient_ID
	AND		Doctor_ID	=	@p_var_Doctor_ID
	AND		Clinic_ID	=	@p_var_Clinic_ID
	

	 MERGE [dbo].[Visit_Ovulation_Induction_Data] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]					AS DOCTOR_ID,
					 [Clinic_ID]					AS CLINIC_ID,
					 [Shift_ID]						AS SHIFT_ID,
					 [Patient_ID]					AS PATIENT_ID,
					 [Patient_Visit_No]				AS VISIT_NO,
					 [Visit_Date]					AS O_DATE,
					 [Day]                          AS  DAY,
	                 [RT]                           AS  RT,
	                 [LT]                           AS  LT,
                     [ET]                           AS  ET,
                     [Clinical Notes]               AS  CLINICAL_NOTES
					 
			FROM	@p_var_Ovulation_DataTable 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,O_DATE,DAY,RT,LT,ET,CLINICAL_NOTES
			 )
	 ON		 (
				MR.[Doctor_ID]			=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]			=SRCREM.CLINIC_ID	AND
				--MR.[Shift_ID]			=SRCREM.SHIFT_ID	AND
				MR.[Patient_ID]			=SRCREM.PATIENT_ID	AND
				MR.[Patient_Visit_No]	=SRCREM.VISIT_NO	AND
				MR.[O_Date]			=SRCREM.O_DATE	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 

	 SET		MR.Day							=	SRCREM.DAY,
				MR.RT							=	SRCREM.RT,
				MR.LT							=	SRCREM.LT,
				MR.ET							=	SRCREM.ET,
				MR.[Clinical Notes]				=	SRCREM.CLINICAL_NOTES,
				MR.[Modified_On]				=	GETDATE(),
				MR.[ModifiedBy_Name]			=	@p_var_User_Id,
				MR.[Delete_Flag]				=	0
				
				
				

	WHEN NOT MATCHED THEN


	INSERT  (

			[Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[O_Date],[Day],[RT],[LT],[ET],[Clinical Notes],
			[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Delete_Flag]

			)
		VALUES
			(
				SRCREM.DOCTOR_ID,SRCREM.CLINIC_ID,SRCREM.SHIFT_ID,SRCREM.PATIENT_ID,SRCREM.VISIT_NO,@Todays_VisitDate,SRCREM.O_DATE,
				SRCREM.DAY,SRCREM.RT,SRCREM.LT,SRCREM.ET,SRCREM.CLINICAL_NOTES,
				GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			);
		
		SELECT 1 AS SAVE_STATUS

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	




/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_TreatmentDetails]    Script Date: 16-Jan-18 8:27:18 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_TreatmentDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================

-- Author		:  INCRUST

-- Create date	: 02 Jun 2017

-- Description	: This stored procedure will insert and update the prescription medicine in MR_Added_Prescription table

-- Created By	: Varsha Khandre

-- =============================================

 CREATE PROCEDURE [dbo].[USP_Insert_Patient_TreatmentDetails]

	

	@p_var_Doctor_ID																		NVARCHAR(30),

	@p_var_Clinic_ID																		NVARCHAR(10),

	@p_var_Patient_ID																		NVARCHAR(30),

	@p_var_Shift_ID																			TINYINT,

	@p_var_Patient_visit_no																	INT,

	@Todays_VisitDate																		DATE,

	@p_var_User_Id																			NVARCHAR(90),

	@p_var_TreatmentPlan_DataTable				UDT_Insert_Patient_TreatmentPlan			READONLY,

	@p_var_TreatmentDetail_DataTable			UDT_Insert_Patient_TreatmentDetail			READONLY,

	@p_var_attachFiles_DataTable				UDT_Insert_TreatmentDetail_Attachments		READONLY

	



 AS







 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from

     -- interfering with SELECT statements. 

     SET NOCOUNT ON;





	 DECLARE @maxid		INT

		SET @maxid = 0

	BEGIN TRY

	



	 MERGE [dbo].[Dentist_Patient_TreatmentPlan] as MR



	 USING(

			SELECT DISTINCT 

					 [Doctor_ID]					AS DOCTOR_ID,

					 [Clinic_ID]					AS CLINIC_ID,

					 [Patient_ID]					AS PATIENT_ID,

					 [Step_No]						AS STEP_NO,

					 [Advised_Details]				AS ADVISED_DETAILS,

					 [Operation_Sequence1]			AS OPR_SEQ_1,

					 [Operation_Sequence2]			AS OPR_SEQ_2,

					 [Operation_Sequence3]			AS OPR_SEQ_3,

					 [Operation_Sequence4]			AS OPR_SEQ_4,

					 [Advised_Date]					AS ADVISE_DATE,	

					 [Treatment_Plan_Status_ID]		AS STATUS_ID,	

					 [Comments]						AS COMMENT,

					 [Shift_ID]						AS SHIFT_ID,

					 [Patient_Visit_No]				AS VISIT_NO,

					 [Visit_Date]					AS VISIT_DATE

					 				

					

							

			FROM	@p_var_TreatmentPlan_DataTable 

		  )

	

	 AS	 SRCREM (

				DOCTOR_ID,CLINIC_ID,PATIENT_ID,STEP_NO,ADVISED_DETAILS,OPR_SEQ_1,OPR_SEQ_2,

				OPR_SEQ_3,OPR_SEQ_4,ADVISE_DATE,STATUS_ID,COMMENT,SHIFT_ID,VISIT_NO,VISIT_DATE

			 )

	 ON		 (

				MR.[Doctor_ID]			=SRCREM.DOCTOR_ID	AND

				MR.[Clinic_ID]			=SRCREM.CLINIC_ID	AND

				MR.[Patient_ID]			=SRCREM.PATIENT_ID	AND

				MR.[Step_No]			=CONVERT(INT,SRCREM.STEP_NO)

			 )	



	 WHEN MATCHED THEN

	

	 UPDATE 

	 SET		MR.[Advised_Details]			=	SRCREM.ADVISED_DETAILS ,

				MR.[Notation_Sequence1]			=	SRCREM.OPR_SEQ_1,

				MR.[Notation_Sequence2]			=	SRCREM.OPR_SEQ_2,

				MR.[Notation_Sequence3]			=	SRCREM.OPR_SEQ_3,

				MR.[Notation_Sequence4]			=	SRCREM.OPR_SEQ_4,

				MR.[Advised_Date]				=	SRCREM.ADVISE_DATE,

				MR.[Treatment_Plan_Status_ID]	=	SRCREM.STATUS_ID,

				MR.[Comments]					=	SRCREM.COMMENT,

				MR.[Modified_On]				=	GETDATE(),

				MR.[ModifiedBy_Name]			=	@p_var_User_Id,

				MR.[Delete_Flag]				=	0

				

				

				



	WHEN NOT MATCHED THEN





	INSERT  (



			[Doctor_ID],[Clinic_ID],[Patient_ID],[Step_No],[Advised_Details],[Notation_Sequence1],

			[Notation_Sequence2],[Notation_Sequence3],[Notation_Sequence4],[Advised_Date],[Treatment_Plan_Status_ID],

			[Comments],[Shift_ID],[Patient_Visit_No],[Visit_Date],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],

			[Delete_Flag]



			)

		VALUES

			(

				SRCREM.DOCTOR_ID,SRCREM.CLINIC_ID,SRCREM.PATIENT_ID,SRCREM.STEP_NO,SRCREM.ADVISED_DETAILS,SRCREM.OPR_SEQ_1,SRCREM.OPR_SEQ_2,

				SRCREM.OPR_SEQ_3,SRCREM.OPR_SEQ_4,SRCREM.ADVISE_DATE,SRCREM.STATUS_ID,SRCREM.COMMENT,SRCREM.SHIFT_ID,SRCREM.VISIT_NO,SRCREM.VISIT_DATE,

				GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0

			);



		/**********************************************Insert and update Treatment Details**********************************************/

		

	MERGE [dbo].[Dentist_Patient_TreatmentPlanDetails] as TD



	 USING(

			SELECT DISTINCT 

					 [Doctor_ID]					AS DOCTOR_ID,

					 [Clinic_ID]					AS CLINIC_ID,

					 [Patient_ID]					AS PATIENT_ID,

					 [Step_No]						AS STEP_NO,

					 [Detail_Step_No]				AS DETAIL_STEP_NO,

					 [Actual_Treatment]				AS ACTUAL_TREATMENT,

					 [Remarks]						AS REMARKS,

					 [Shift_ID]						AS SHIFT_ID,

					 [Patient_Visit_No]				AS VISIT_NO,

					 [Visit_Date]					AS VISIT_DATE

					 				

					

							

			FROM	@p_var_TreatmentDetail_DataTable 

		  )

	

	 AS	 SRCDET (

				DOCTOR_ID,CLINIC_ID,PATIENT_ID,STEP_NO,DETAIL_STEP_NO,ACTUAL_TREATMENT,REMARKS

				,SHIFT_ID,VISIT_NO,VISIT_DATE

			 )

	 ON		 (

				TD.[Doctor_ID]			=SRCDET.DOCTOR_ID	AND

				TD.[Clinic_ID]			=SRCDET.CLINIC_ID	AND

				TD.[Patient_ID]			=SRCDET.PATIENT_ID	AND

				TD.[Step_No]			=CONVERT(INT,SRCDET.STEP_NO) AND

				TD.[Detail_Step_No]		=CONVERT(INT,SRCDET.DETAIL_STEP_NO)

			 )	



	 WHEN MATCHED THEN

	

	 UPDATE 

	 SET		TD.[Actual_Treatment]			=	SRCDET.ACTUAL_TREATMENT ,

				TD.[Remarks]					=	SRCDET.REMARKS,

				TD.[Modified_On]				=	GETDATE(),

				TD.[ModifiedBy_Name]			=	@p_var_User_Id,

				TD.[Delete_Flag]				=	0

				

				

				



	WHEN NOT MATCHED THEN





	INSERT  (



			[Doctor_ID],[Clinic_ID],[Patient_ID],[Step_No],[Detail_Step_No],[Actual_Treatment],[Remarks],

			[Shift_ID],[Patient_Visit_No],[Visit_Date],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Delete_Flag]



			)

		VALUES

			(

				SRCDET.DOCTOR_ID,SRCDET.CLINIC_ID,SRCDET.PATIENT_ID,SRCDET.STEP_NO,SRCDET.DETAIL_STEP_NO,SRCDET.ACTUAL_TREATMENT,

				SRCDET.REMARKS,SRCDET.SHIFT_ID,SRCDET.VISIT_NO,SRCDET.VISIT_DATE,

				GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0

			);



		/*******************************************************************************************************************************/



		

		IF EXISTS (SELECT TOP 1 [Sequence_No] FROM [dbo].[Dentist_Patient_Files] )



			SELECT @maxid=MAX([Sequence_No])  FROM [dbo].[Dentist_Patient_Files];



		ELSE 

			SET @maxid = 1

		

		select @maxid + Row_number() OVER (PARTITION BY [Folder_Path] ORDER BY [Folder_Path])  from @p_var_attachFiles_DataTable



		

		INSERT INTO [dbo].[Dentist_Patient_Files](

			[Doctor_ID],[Clinic_ID],[Patient_ID],[Sequence_No],[FilePath_Name],[Shift_ID],[Patient_Visit_No],[Visit_Date],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Delete_Flag]

		)

		SELECT

		

		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,

		@maxid + Row_number() OVER ( ORDER BY [Folder_Path]) 

		,[Folder_Path],@p_var_Shift_ID,

		@p_var_Patient_visit_no,

		@Todays_VisitDate,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0

		

		FROM @p_var_attachFiles_DataTable



		

		





	END TRY

	 BEGIN CATCH

			--ROLLBACK TRANSACTION

            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;

   

	 END CATCH

 END	 		

		 	

		 	

		 		

		 	

		 	

























/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_TreatmentPlan]    Script Date: 16-Jan-18 8:27:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_TreatmentPlan]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 15 Dec 2016
-- Description	: This stored procedure will insert and update the prescription medicine in MR_Added_Prescription table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Patient_TreatmentPlan]
	
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Patient_ID																		NVARCHAR(30),
	@p_var_Shift_ID																			TINYINT,
	@p_var_Patient_visit_no																	INT,
	@Todays_VisitDate																		DATE,
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_TreatmentPlan_DataTable			UDT_Insert_Patient_TreatmentPlan				READONLY
	

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	

	BEGIN TRY


	 MERGE [dbo].[Dentist_Patient_TreatmentPlan] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]					AS DOCTOR_ID,
					 [Clinic_ID]					AS CLINIC_ID,
					 [Patient_ID]					AS PATIENT_ID,
					 [Step_No]						AS STEP_NO,
					 [Advised_Details]				AS ADVISED_DETAILS,
					 [Operation_Sequence1]			AS OPR_SEQ_1,
					 [Operation_Sequence2]			AS OPR_SEQ_2,
					 [Operation_Sequence3]			AS OPR_SEQ_3,
					 [Operation_Sequence4]			AS OPR_SEQ_4,
					 [Advised_Date]					AS ADVISE_DATE,	
					 [Treatment_Plan_Status_ID]		AS STATUS_ID,	
					 [Comments]						AS COMMENT,
					 [Shift_ID]						AS SHIFT_ID,
					 [Patient_Visit_No]				AS VISIT_NO,
					 [Visit_Date]					AS VISIT_DATE
					 				
					
							
			FROM	@p_var_TreatmentPlan_DataTable 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,STEP_NO,ADVISED_DETAILS,OPR_SEQ_1,OPR_SEQ_2,
				OPR_SEQ_3,OPR_SEQ_4,ADVISE_DATE,STATUS_ID,COMMENT,SHIFT_ID,VISIT_NO,VISIT_DATE
			 )
	 ON		 (
				MR.[Doctor_ID]			=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]			=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]			=SRCREM.PATIENT_ID	AND
				MR.[Step_No]			=CONVERT(INT,SRCREM.STEP_NO)
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		MR.[Advised_Details]			=	SRCREM.ADVISED_DETAILS ,
				MR.[Notation_Sequence1]		=	SRCREM.OPR_SEQ_1,
				MR.[Notation_Sequence2]		=	SRCREM.OPR_SEQ_2,
				MR.[Notation_Sequence3]		=	SRCREM.OPR_SEQ_3,
				MR.[Notation_Sequence4]		=	SRCREM.OPR_SEQ_4,
				MR.[Advised_Date]				=	SRCREM.ADVISE_DATE,
				MR.[Treatment_Plan_Status_ID]	=	SRCREM.STATUS_ID,
				MR.[Comments]					=	SRCREM.COMMENT,
				MR.[Modified_On]				=	GETDATE(),
				MR.[ModifiedBy_Name]			=	@p_var_User_Id,
				MR.[Delete_Flag]				=	0
				
				
				

	WHEN NOT MATCHED THEN


	INSERT  (

			[Doctor_ID],[Clinic_ID],[Patient_ID],[Step_No],[Advised_Details],[Notation_Sequence1],
			[Notation_Sequence2],[Notation_Sequence3],[Notation_Sequence4],[Advised_Date],[Treatment_Plan_Status_ID],
			[Comments],[Shift_ID],[Patient_Visit_No],[Visit_Date],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name]

			)
		VALUES
			(
				SRCREM.DOCTOR_ID,SRCREM.CLINIC_ID,SRCREM.PATIENT_ID,SRCREM.STEP_NO,SRCREM.ADVISED_DETAILS,SRCREM.OPR_SEQ_1,SRCREM.OPR_SEQ_2,
				SRCREM.OPR_SEQ_3,SRCREM.OPR_SEQ_4,SRCREM.ADVISE_DATE,SRCREM.STATUS_ID,SRCREM.COMMENT,SRCREM.SHIFT_ID,SRCREM.VISIT_NO,SRCREM.VISIT_DATE,
				GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
			);
		
		

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment]    Script Date: 16-Jan-18 8:27:35 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Patient_Visit_BalanceEvaluation]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_Patient_Visit_BalanceEvaluation]
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),

	@p_bit_Spinning								bit,
	@p_bit_Tinnitus								bit,
	@p_bit_Hearing_Loss							bit,
	@p_bit_Fullness								bit,
	@p_bit_Loss_of_equilibrium					bit,
	@p_bit_PC									bit,
	@p_bit_HC									bit,
	@p_bit_Headshake							tinyint,
	@p_bit_Rombergs								bit,
	@p_bit_Gait									bit,
	@p_bit_Finger_nose							bit,
	@p_bit_Disdiadochokinesis					bit,
	@p_bit_Heel_shin							bit,
	@p_bit_Audiometry							bit,
	@p_bit_MRI									bit,
	@p_bit_Cervical_Xray						bit,
	@p_bit_BPPV									tinyint,
	@p_bit_Vestibular_Hypofunction				tinyint,
	@p_bit_VRT									bit,
	@p_bit_Neck_Rehabilitation					bit,

	@p_var_User_Id								NVARCHAR(32),
	@p_bool_Repositioning								bit
AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY

   IF NOT EXISTS(select *  from [dbo].[Patient_Visit_BalanceEvaluation]
      where 
   [Doctor_ID]=@p_var_Doctor_ID	
   and[Clinic_ID]=@p_var_Clinic_ID	
   and[Shift_ID]=@p_var_Shift_ID							
   and[Patient_ID]=@p_var_Patient_ID						
   and[Patient_Visit_No]=@p_var_Patient_Visit_No					
   and[Visit_Date]=@p_var_Visit_Date						
   
   
   )
   begin 
   select 'insert' as status
   insert into  [Patient_Visit_BalanceEvaluation]
   (
	 [Doctor_ID]
	,[Clinic_ID]
	,[Shift_ID]
	,[Patient_ID]
	,[Patient_Visit_No]
	,[Visit_Date]
	,[Spinning]
	,[Tinnitus]
	,[Hearing_Loss]
	,[Fullness]
	,[Loss_of_equilibrium]
	,[PC]
	,[HC]
	,[Headshake_New]
	,[Rombergs]
	,[Gait]
	,[Finger_nose]
	,[Disdiadochokinesis]
	,[Heel_shin]
	,[Audiometry]
	,[MRI]
	,[Cervical_Xray]
	,[BPPV] 
	,[Vestibular_Hypofunction]
	,[VRT]
	,[Neck_Rehabilitation]
	,[Created_On]
	,[CreatedBy_Name]
	,Repositioning
   )values(

	@p_var_Doctor_ID	
   ,@p_var_Clinic_ID	
   ,@p_var_Shift_ID							
   ,@p_var_Patient_ID						
   ,@p_var_Patient_Visit_No					
   ,@p_var_Visit_Date						
   ,@p_bit_Spinning							
   ,@p_bit_Tinnitus							
   ,@p_bit_Hearing_Loss						
   ,@p_bit_Fullness							
   ,@p_bit_Loss_of_equilibrium				
   ,@p_bit_PC								
   ,@p_bit_HC								
   ,@p_bit_Headshake						
   ,@p_bit_Rombergs							
   ,@p_bit_Gait								
   ,@p_bit_Finger_nose						
   ,@p_bit_Disdiadochokinesis				
   ,@p_bit_Heel_shin						
   ,@p_bit_Audiometry						
   ,@p_bit_MRI								
   ,@p_bit_Cervical_Xray					
   ,@p_bit_BPPV								
   ,@p_bit_Vestibular_Hypofunction			
   ,@p_bit_VRT								
   ,@p_bit_Neck_Rehabilitation				
   ,getdate()
   ,@p_var_User_Id							
   ,@p_bool_Repositioning
   )
   End 
   else
   begin 
   select 'update' as status

   update  [Patient_Visit_BalanceEvaluation] set 

   [Spinning]=@p_bit_Spinning					
   ,[Tinnitus]=@p_bit_Tinnitus					
   ,[Hearing_Loss]=@p_bit_Hearing_Loss				
   ,[Fullness]=@p_bit_Fullness					
   ,[Loss_of_equilibrium]=@p_bit_Loss_of_equilibrium		
   ,[PC]=@p_bit_PC						
   ,[HC]=@p_bit_HC						
   ,[Headshake_New]=@p_bit_Headshake				
   ,[Rombergs]=@p_bit_Rombergs					
   ,[Gait]=@p_bit_Gait						
   ,[Finger_nose]=@p_bit_Finger_nose				
   ,[Disdiadochokinesis]=@p_bit_Disdiadochokinesis		
   ,[Heel_shin]=@p_bit_Heel_shin				
   ,[Audiometry]=@p_bit_Audiometry				
   ,[MRI]=@p_bit_MRI						
   ,[Cervical_Xray]=@p_bit_Cervical_Xray			
   ,[BPPV] =@p_bit_BPPV						
   ,[Vestibular_Hypofunction]=@p_bit_Vestibular_Hypofunction	
   ,[VRT]=@p_bit_VRT						
   ,[Neck_Rehabilitation]=@p_bit_Neck_Rehabilitation		
   ,[Modified_On] = Getdate()
   ,[ModifiedBy_Name] = @p_var_User_Id
   ,Repositioning=@p_bool_Repositioning
   where 
   [Doctor_ID]=@p_var_Doctor_ID	
   and[Clinic_ID]=@p_var_Clinic_ID	
   and[Shift_ID]=@p_var_Shift_ID							
   and[Patient_ID]=@p_var_Patient_ID						
   and[Patient_Visit_No]=@p_var_Patient_Visit_No					
   and[Visit_Date]=@p_var_Visit_Date						
   
   end

   
  
            END TRY
    BEGIN CATCH
			SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
     
 END



/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientRegistration]    Script Date: 16-Jan-18 8:28:30 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppoint_avalibaleService]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment.
--  created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppoint_avalibaleService]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_Visit_Type				char(1)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count INT;
	

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	/*	IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN*/

		
		

		SELECT @int_count= count(Shift_ID)

			FROM	Patient_Visits_Services 
			WHERE	Visit_Date	= @p_date_Visit_Date  
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11 and Status_ID !=8 

if @int_count =0 begin

			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits_Services 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=7 or ID=8))
			--AND		Doctor_ID=@p_nvar_Doctor_ID;
			AND		Clinic_ID = @p_nvar_Clinic_ID;

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
			INSERT INTO Patient_Visits_Services(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						Visit_Type,
						Discount,
						Original_Discount)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						7,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,
						@p_Visit_Type,0,0)
						
		END
		else

		SELECT 0 AS BOOKING_STATUS;
		
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment.
--  created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT--,
	--@p_Visit_Type				char(1)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count INT;
	DECLARE @int_count_patient_Visit INT;


	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	/*	IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN*/

		
		

		SELECT @int_count= count(Shift_ID)

			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date  
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11 and Status_ID !=7 and Status_ID !=8  and Status_ID !=13 and Status_ID !=9
			 
if @int_count =0 begin

			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=7 or ID=8 or ID =13 or ID=9))
			--AND		Doctor_ID=@p_nvar_Doctor_ID;
			AND		Clinic_ID = @p_nvar_Clinic_ID; 

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
			SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
			

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0)

			IF (@int_count_patient_Visit = 0)
			BEGIN
				UPDATE Patient_Visits 
				SET
				Patient_Visits.Refer_ID = PM.Refer_ID,				
				Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
				Patient_Visits.Doctor_Address=PM.Doctor_Address,
				Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
				Patient_Visits.Doctor_Email=PM.Doctor_Email
				FROM Patient_Visits
				INNER JOIN Patient_Master PM ON
				Patient_Visits.Patient_ID=PM.ID 
				AND
				Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
			END
		END
		else
			
		SELECT 0 AS BOOKING_STATUS;
		
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_AssingDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_AssingDoctor]

		@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@p_time_Visit_Time_to				TIME(7),
	@p_Doctor_notes					NVARCHAR(100),
	
	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,
	@P_int_Patient_Visit_No 	INT
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	 IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND Status_ID =11
			AND Patient_Visit_No=@P_int_Patient_Visit_No
			--AND		((Status_ID = 1) OR (Status_ID = 11))
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
   
			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						From_time,
						[Doctor_notes],
						follow_up_type,
						Follow_Up_Date)
						

			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,@p_time_Visit_Time_to,
						@p_Doctor_notes,
						@p_var_FollowUp_Type,
						@p_var_FollowUp_Date)
		END

		IF (@int_count_patient_Visit = 0)
			BEGIN
				UPDATE Patient_Visits 
				SET
				Patient_Visits.Refer_ID = PM.Refer_ID,				
				Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
				Patient_Visits.Doctor_Address=PM.Doctor_Address,
				Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
				Patient_Visits.Doctor_Email=PM.Doctor_Email
				FROM Patient_Visits
				INNER JOIN Patient_Master PM ON
				Patient_Visits.Patient_ID=PM.ID 
				AND
				Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
			END
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_by_patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author            :  INCRUST
-- Create date       : 24-Mar-2016
-- Description       : This stored procedure will Book the patient Apointment.
--  created By       :      Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_by_patient]

       @p_date_Visit_Date                       DATETIME,
       @p_int_Shift_ID                                 INT,
       @p_nvar_Clinic_ID                        NVARCHAR(10),
       @p_nvar_Doctor_ID                        NVARCHAR(30),
       @p_nvar_Patient_ID                       NVARCHAR(32),
       @p_time_Visit_Time                       TIME(7),
       @p_bit_Reports_Received                  BIT,
       @p_var_User_Id                                  NVARCHAR(32),
       @p_bit_In_Person                         BIT,
       @p_str_complaints                        nvarchar(200)
       
AS
BEGIN
       
       SET NOCOUNT ON;
       DECLARE @int_Patient_Visit_No     INT;
       DECLARE @nvar_Folder_No                  NVARCHAR(30);
       DECLARE @bit_Reports_Asked        BIT;
       DECLARE @int_Patient_Last_Visit_No INT;
       DECLARE @int_count INT;
       DECLARE @int_count_patient_Visit INT;

       SET @bit_Reports_Asked = 0;
       BEGIN TRY

       /*     IF EXISTS 
              (      SELECT  Visit_Date,
                                  Shift_ID,
                                  Clinic_ID,
                                  Doctor_ID,
                                  Patient_Visit_No,
                                  Patient_ID 
                     FROM   Patient_Visits 
                     WHERE  Visit_Date    = @p_date_Visit_Date 
                     AND           Shift_ID      = @p_int_Shift_ID
                     AND           Clinic_ID     = @p_nvar_Clinic_ID
                     AND           Doctor_ID     = @p_nvar_Doctor_ID
                     AND           Patient_ID    = @p_nvar_Patient_ID
                     AND           Delete_Flag = 0
                     --AND         (Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
              )
              BEGIN
                     SELECT 0 AS BOOKING_STATUS;
              END
              ELSE
              BEGIN*/

              
              

              SELECT @int_count= count(Shift_ID)

                     FROM   Patient_Visits 
                     WHERE  Visit_Date    = @p_date_Visit_Date  
                     AND           Shift_ID      = @p_int_Shift_ID
                     AND           Clinic_ID     = @p_nvar_Clinic_ID
                     AND           Doctor_ID     = @p_nvar_Doctor_ID
                     AND           Patient_ID    = @p_nvar_Patient_ID
                     AND           Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11 

if @int_count =0 begin

                     SELECT 1 AS BOOKING_STATUS;
                     
                     SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
                     FROM   Patient_Visits 
                     WHERE  
                                  Clinic_ID     = @p_nvar_Clinic_ID
                     --AND         Doctor_ID     = @p_nvar_Doctor_ID
                     AND           Patient_ID    = @p_nvar_Patient_ID;
           
                     SELECT @nvar_Folder_No = Folder_No
                     FROM   Patient_Master 
                     WHERE  ID = @p_nvar_Patient_ID;   

                     DECLARE @int_StatusId  INT;

					
                     SELECT @int_StatusId = ID 
                     FROM   Status_Ref 
                     WHERE  ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID =7 or ID =8 or ID =13  or ID =9))
                     --AND         Doctor_ID=@p_nvar_Doctor_ID;
                     AND           Clinic_ID = @p_nvar_Clinic_ID;

                     SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
                     --WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
                     WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
                     FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
                     PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


                     

                     --INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
                     WHERE  PVL.[Doctor_ID]            =  @p_nvar_Doctor_ID AND 
                                  PVL.[Patient_ID]     =  @p_nvar_Patient_ID AND
                                  
                                  PVL.Delete_Flag            =  0 )

                     SET @bit_Reports_Asked = 1
   
                     SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			         WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0

                     INSERT INTO Patient_Visits(
                                         Visit_Date,
                                         Shift_ID,
                                         Clinic_ID,
                                         Doctor_ID,
                                         Patient_Visit_No,
                                         Patient_ID,
                                         Visit_Time,
                                         Folder_No,
                                         Status_ID,
                                         --Reports_Asked,
                                         Reports_Received,
                                         Patient_Last_Visit_No,
                                         Financial_Year,
                                         CreatedBy_Name,
                                         Created_On,
                                         ModifiedBy_Name,
                                         Modified_On,
                                         On_Call_Status,
                                         In_Person,
                                         Weight_IN_KGS,
                                         Complaints_by_Patient_Per_Visit)
                     VALUES        (@p_date_Visit_Date,
                                         @p_int_Shift_ID,
                                         @p_nvar_Clinic_ID,
                                         @p_nvar_Doctor_ID,
                                         @int_Patient_Visit_No,
                                         @p_nvar_Patient_ID,
                                         @p_time_Visit_Time,
                                         @nvar_Folder_No,
                                         @int_StatusId,
                                         --@bit_Reports_Asked,
                                         @p_bit_Reports_Received,
                                         @int_Patient_Last_Visit_No,
                                         CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
                                 THEN DatePart(Year, @p_date_Visit_Date) + 1
                                         ELSE DatePart(Year, @p_date_Visit_Date) END,
                                         @p_var_User_Id,
                                         GetDate(),
                                         @p_var_User_Id,
                                         GetDate(),
                                         0,
                                         @p_bit_In_Person,
                                         0,
                                         @p_str_complaints)

										 IF (@int_count_patient_Visit = 0)
											BEGIN
												UPDATE Patient_Visits 
												SET
												Patient_Visits.Refer_ID = PM.Refer_ID,				
												Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
												Patient_Visits.Doctor_Address=PM.Doctor_Address,
												Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
												Patient_Visits.Doctor_Email=PM.Doctor_Email
												FROM Patient_Visits
												INNER JOIN Patient_Master PM ON
												Patient_Visits.Patient_ID=PM.ID 
												AND
												Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
											END
              END
              else

              SELECT 0 AS BOOKING_STATUS;
              
              
       END TRY
       BEGIN CATCH
              SELECT ERROR_NUMBER() AS ErrorNumber,
                           ERROR_MESSAGE() AS ErrorMessage;
       END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_ByDoctor]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@p_time_Visit_Time_to				TIME(7)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		((Status_ID = 1) OR (Status_ID = 11))
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
   
			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						From_time)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,@p_time_Visit_Time_to)

						IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END













/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 16-Jan-18 8:27:50 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor_appoinment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_ByDoctor_appoinment]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT
   -- @p_nvar_scheduleday				NVARCHAR(2)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		((Status_ID = 1) OR (Status_ID = 11))
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			--IF(@p_nvar_scheduleday='1')
			--BEGIN
			--		SELECT	@int_StatusId = ID 
			--		FROM	Status_Ref 
			--		WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
			--		--AND		Doctor_ID=@p_nvar_Doctor_ID;
			--		AND		Clinic_ID = @p_nvar_Clinic_ID;
			--END
			--ELSE IF(@p_nvar_scheduleday='2')
			--BEGIN
			--		SELECT	@int_StatusId = ID 
			--		FROM	Status_Ref 
			--		WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
			--		--AND		Doctor_ID=@p_nvar_Doctor_ID;
			--		AND		Clinic_ID = @p_nvar_Clinic_ID;
			--END
			--ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
   
			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0)

						
						IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END













GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient's future Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_ByDoctor_For_Duplicate]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@p_int_Patient_VisitNo			INT,
	@P_int_current_shiftID			INT,
		@p_time_Visit_Time_to				TIME(7)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		((Status_ID = 1) OR (Status_ID = 11))
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						From_time)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,@p_time_Visit_Time_to)


			DELETE FROM	 Patient_Visits 
		  
		 WHERE 
				 Patient_ID       = @p_nvar_Patient_Id 
		   AND	 Patient_Visit_No = @p_int_Patient_VisitNo 
		   AND   Shift_ID         = @P_int_current_shiftID 
		   --AND	 Clinic_ID        = @p_nvar_Clinic_Id 
		   AND	 Doctor_ID        = @p_nvar_Doctor_Id
		   --AND	 Status_ID		  = 12

		   
						IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






------------------------




/****** Object:  StoredProcedure [dbo].[USP_Partial_Search_Previous_Complaints]    Script Date: 11-Jan-18 12:22:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_forPatient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment.
--  created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_forPatient]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	--@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	/*	IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN*/

		
		

		SELECT @int_count= count(Shift_ID)

			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date  
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11

if @int_count =0 begin

			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
			--AND		Doctor_ID=@p_nvar_Doctor_ID;
			AND		Clinic_ID = @p_nvar_Clinic_ID;

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	--PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						--Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						--@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0)


										IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END
		else

		SELECT 0 AS BOOKING_STATUS;
		
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_INSERT_PATIENTAPPOINTMENT_REBBOK]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_INSERT_PATIENTAPPOINTMENT_REBBOK]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@p_time_Visit_Time_to				TIME(7)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		((Status_ID = 1) OR (Status_ID = 11))
		)
		BEGIN
		UPDATE Patient_Visits SET --Visit_Date	=	@p_date_Visit_Date ,
				 Visit_Time	=	@p_time_Visit_Time, 
				 From_time = @p_time_Visit_Time_to,
				 Status_ID = 11--,
				 --Shift_ID = @p_int_Shift_ID
				WHERE	Patient_ID	=	@p_nvar_Patient_ID
				AND		Doctor_ID	=	@p_nvar_Doctor_ID
				AND		Clinic_ID	=	@p_nvar_Clinic_ID
				--AND		Patient_Visit_No	=	@int_Patient_Visit_No
				AND		Delete_Flag			=	0

			SELECT 1 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
   
			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						From_time)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,@p_time_Visit_Time_to)

										IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END













/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 16-Jan-18 8:27:50 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_SingleDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointment_SingleDoctor]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,
	@p_Doctor_notes					NVARCHAR(100)
AS
BEGIN
	

	
	 IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END

	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		((Status_ID = 1) OR (Status_ID = 11))
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN
			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
   
			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						follow_up_type,					
						Follow_Up_Date,
						[Doctor_notes]			
						)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,		
						0,
						@p_var_FollowUp_Type,
						@p_var_FollowUp_Date,
						@p_Doctor_notes)

				        IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END













/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 16-Jan-18 8:27:50 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointmentByDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment.
--  created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointmentByDoctor]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT--,
	--@p_Visit_Type				char(1)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count INT;
	DECLARE @int_count_patient_Visit INT;


	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	/*	IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN*/

		
		

		SELECT @int_count= count(Shift_ID)

			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date  
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11 and Status_ID !=7 and Status_ID !=8  and Status_ID !=13 and Status_ID !=9
			 
if @int_count =0 begin

			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=1 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=7 or ID=8 or ID =13 or ID=9))
			--AND		Doctor_ID=@p_nvar_Doctor_ID;
			AND		Clinic_ID = @p_nvar_Clinic_ID; 

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
			SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0
			

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0)

			IF (@int_count_patient_Visit = 0)
			BEGIN
				UPDATE Patient_Visits 
				SET
				Patient_Visits.Refer_ID = PM.Refer_ID,				
				Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
				Patient_Visits.Doctor_Address=PM.Doctor_Address,
				Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
				Patient_Visits.Doctor_Email=PM.Doctor_Email
				FROM Patient_Visits
				INNER JOIN Patient_Master PM ON
				Patient_Visits.Patient_ID=PM.ID 
				AND
				Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
			END
		END
		else
			
		SELECT 0 AS BOOKING_STATUS;
		
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointmentDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery52.sql|7|0|C:\Users\Admin\AppData\Local\Temp\~vs7BE2.sql
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment.
--  created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointmentDoctor]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@P_bool_follow_up				BIT
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	/*	IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN*/

		
		

		SELECT @int_count= count(Shift_ID)

			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date  
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11 and Status_ID !=13

if @int_count =0 begin

			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=1 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=9 or ID=7 or ID=8 or ID=13))
			--AND		Doctor_ID=@p_nvar_Doctor_ID;
			AND		Clinic_ID = @p_nvar_Clinic_ID;

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
   	        SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						Is_follow_Up)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,
						@P_bool_follow_up)


			IF (@int_count_patient_Visit = 0)
			BEGIN
				UPDATE Patient_Visits 
				SET
				Patient_Visits.Refer_ID = PM.Refer_ID,				
				Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
				Patient_Visits.Doctor_Address=PM.Doctor_Address,
				Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
				Patient_Visits.Doctor_Email=PM.Doctor_Email
				FROM Patient_Visits
				INNER JOIN Patient_Master PM ON
				Patient_Visits.Patient_ID=PM.ID 
				AND
				Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
			END
		END
		else

		SELECT 0 AS BOOKING_STATUS;
		
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointmentOffline]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment for offline visit
--  created By	: Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointmentOffline]
	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

		IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID ,
					Status_ID
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		Status_ID	!=4 OR Status_ID !=5
		)
		BEGIN
			UPDATE	Patient_Visits SET Delete_Flag=1
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			AND		Status_ID	!=4 OR Status_ID !=5	
			--SELECT 0 AS BOOKING_STATUS;

			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	--Visit_Date	= @p_date_Visit_Date
			--AND		Shift_ID	= @p_int_Shift_ID
			--AND		
					Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 OR ID=6))
			AND		Doctor_ID=@p_nvar_Doctor_ID;

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )
			SET @bit_Reports_Asked = 1
    
            SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person)
		
		END
		ELSE
		BEGIN
			--SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	--Visit_Date	= @p_date_Visit_Date
			--AND		Shift_ID	= @p_int_Shift_ID
			--AND		
					Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_Status_Id  INT;

			SELECT	@int_Status_Id = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5))
			AND		Doctor_ID=@p_nvar_Doctor_ID;

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )
			SET @bit_Reports_Asked = 1
   
			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_Status_Id,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person)

						IF (@int_count_patient_Visit = 0)
						BEGIN
							UPDATE Patient_Visits 
							SET
							Patient_Visits.Refer_ID = PM.Refer_ID,				
							Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
							Patient_Visits.Doctor_Address=PM.Doctor_Address,
							Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
							Patient_Visits.Doctor_Email=PM.Doctor_Email
							FROM Patient_Visits
							INNER JOIN Patient_Master PM ON
							Patient_Visits.Patient_ID=PM.ID 
							AND
							Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
						END
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END













/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientDocuments]    Script Date: 16-Jan-18 8:28:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientAppointmentOperator]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery52.sql|7|0|C:\Users\Admin\AppData\Local\Temp\~vs7BE2.sql
-- =============================================
-- Author		:  INCRUST
-- Create date	: 24-Mar-2016
-- Description	: This stored procedure will Book the patient Apointment.
--  created By	:	Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientAppointmentOperator]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@P_bool_follow_up				BIT
	
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @int_Patient_Visit_No	INT;
	DECLARE @nvar_Folder_No			NVARCHAR(30);
	DECLARE @bit_Reports_Asked		BIT;
	DECLARE @int_Patient_Last_Visit_No INT;
	DECLARE @int_count INT;
	DECLARE @int_count_patient_Visit INT;

	SET @bit_Reports_Asked = 0;
	BEGIN TRY

	/*	IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date 
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN
			SELECT 0 AS BOOKING_STATUS;
		END
		ELSE
		BEGIN*/

		
		

		SELECT @int_count= count(Shift_ID)

			FROM	Patient_Visits 
			WHERE	Visit_Date	= @p_date_Visit_Date  
			AND		Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0 and Status_ID !=5 and Status_ID !=4 and Status_ID !=12 and Status_ID !=11 and Status_ID !=13

if @int_count =0 begin

			SELECT 1 AS BOOKING_STATUS;
			
			SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) + 1
			FROM	Patient_Visits 
			WHERE	
					Clinic_ID	= @p_nvar_Clinic_ID
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID;
           
			SELECT	@nvar_Folder_No = Folder_No
			FROM	Patient_Master 
			WHERE	ID = @p_nvar_Patient_ID;   

			DECLARE @int_StatusId  INT;

			SELECT	@int_StatusId = ID 
			FROM	Status_Ref 
			WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12 or ID=9 or ID=7 or ID=8 or ID=13))
			--AND		Doctor_ID=@p_nvar_Doctor_ID;
			AND		Clinic_ID = @p_nvar_Clinic_ID;

			SELECT @int_Patient_Last_Visit_No = Patient_Last_Visit_No FROM dbo.Patient_Master
			--WHERE Doctor_ID = @p_nvar_Doctor_ID AND ID = @p_nvar_Patient_ID
			WHERE Clinic_ID = @p_nvar_Clinic_ID AND ID = @p_nvar_Patient_ID
            
            IF EXISTS ( SELECT PVL.Patient_ID 
			FROM [dbo].[Patient_Visit_LabTestAsked]  PVL INNER JOIN dbo.Patient_Master PM ON
			PVL.[Patient_ID] = PM.ID AND PVL.Doctor_ID = PM.Doctor_ID AND PVL.Patient_Visit_No = PM.Patient_Last_Visit_No


			

			--INNER JOIN Patient_Visits PV ON PVL.Visit_Date=PV.Visit_Date AND PVL.Shift_ID=PV.Shift_ID AND PVL.Patient_ID=PV.Patient_ID 
   
			WHERE	PVL.[Doctor_ID]		=  @p_nvar_Doctor_ID AND 
					PVL.[Patient_ID]	=  @p_nvar_Patient_ID AND
					
					PVL.Delete_Flag		=  0 )

			SET @bit_Reports_Asked = 1
   
   	        SELECT @int_count_patient_Visit=COUNT(Patient_Visit_No) FROM Patient_Visits 
			WHERE Patient_ID=@p_nvar_Patient_ID AND Delete_Flag=0

			INSERT INTO Patient_Visits(
						Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Patient_ID,
						Visit_Time,
						Folder_No,
						Status_ID,
						--Reports_Asked,
						Reports_Received,
						Patient_Last_Visit_No,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						On_Call_Status,
						In_Person,
						Weight_IN_KGS,
						Is_follow_Up)
			VALUES		(@p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						@int_Patient_Visit_No,
						@p_nvar_Patient_ID,
						@p_time_Visit_Time,
						@nvar_Folder_No,
						@int_StatusId,
						--@bit_Reports_Asked,
						@p_bit_Reports_Received,
						@int_Patient_Last_Visit_No,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						0,
						@p_bit_In_Person,
						0,
						@P_bool_follow_up)


			IF (@int_count_patient_Visit = 0)
			BEGIN
				UPDATE Patient_Visits 
				SET
				Patient_Visits.Refer_ID = PM.Refer_ID,				
				Patient_Visits.Refer_Doctor_Details=PM.Refer_Doctor_Details,
				Patient_Visits.Doctor_Address=PM.Doctor_Address,
				Patient_Visits.Doctor_Mobile=PM.Doctor_Mobile,
				Patient_Visits.Doctor_Email=PM.Doctor_Email
				FROM Patient_Visits
				INNER JOIN Patient_Master PM ON
				Patient_Visits.Patient_ID=PM.ID 
				AND
				Patient_Visits.Patient_Visit_No=@int_Patient_Visit_No
			END
		END
		else

		SELECT 0 AS BOOKING_STATUS;
		
		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END






/****** Object:  StoredProcedure [dbo].[USP_Get_PatientAppointmentDetails]    Script Date: 14-Feb-18 3:07:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientComplaintsData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author	  : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in Visit_Complaints Table 
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_PatientComplaintsData]
	@P_Var_Doctor_ID													nvarchar(30),
	@P_Var_Clinic_ID												    nvarchar(10)  ,
	@P_Var_Patient_ID													nvarchar(32) ,
	@P_Var_Visit_Date													datetime,
	@P_Var_Ear															nvarchar(50) ,
	@P_Var_Nose															nvarchar(50),
	@P_Var_Throat														nvarchar(50) ,
	@P_Var_Vertigo														nvarchar(50),
	@P_Var_Thyroid														nvarchar(50),
	@P_Var_Allergy														nvarchar(50) ,
	@P_Var_NeckMass														nvarchar(50),
	@P_Var_UserID														nvarchar(90),
	@P_Var_Others														nvarchar(50) 
AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;

	 declare 
	 @int_Patient_Visit_No     INT;
     BEGIN TRY


	   SELECT  @int_Patient_Visit_No = ISNULL(MAX(Patient_Visit_No),0) 
                     FROM   Patient_Visits 
                     WHERE  
                                  Clinic_ID     = @p_var_Clinic_ID
                     AND           Patient_ID    = @p_var_Patient_ID;

Insert into Patient_Master_ComplaintsData (
		Doctor_ID , 
		[Clinic_ID],
		[Patient_ID],
		[Patient_Visit_No],
		[Visit_Date],
		[Ear],
		[Nose],
		[Throat],
		[Vertigo],
		[Thyroid],
		[Allergy],
		[NeckMass],
		[Others],
		[Created_On],
		[CreatedBy_Name]
)values (
		 @P_Var_Doctor_ID		
		,@P_Var_Clinic_ID		
		,@P_Var_Patient_ID		
		,@int_Patient_Visit_No	
		,@P_Var_Visit_Date		
		,@P_Var_Ear				
		,@P_Var_Nose				
		,@P_Var_Throat			
		,@P_Var_Vertigo			
		,@P_Var_Thyroid			
		,@P_Var_Allergy			
		,@P_Var_NeckMass	
		,@P_Var_Others			
		,GETDATE()				
		,@P_Var_UserID			
)
	 
	 END TRY
	 BEGIN CATCH
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END







/****** Object:  StoredProcedure [dbo].[USP_Insert_Consolidate_ReceiptDetails]    Script Date: 16-Jan-18 8:21:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientDocuments]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  13 June-2016
-- Description :  This stored procedure will save documents of patient.
--  created by :  Snehal Shinde  
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Insert_PatientDocuments]
	@p_nvar_Patient_Id                     NVARCHAR(32),
	@p_nvar_Doctor_Id                      NVARCHAR(30),	
	@p_nvar_Document_Name                  NVARCHAR(100),	
	@p_var_User_Id			               NVARCHAR(32)
	
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
     
       
		BEGIN
		INSERT INTO Patient_Documents
							(Patient_ID,
							Doctor_ID,
							Document_Name,
							Created_On,
							CreatedBy_Name,
							Modified_On,
							ModifiedBy_Name)
                   VALUES
							(@p_nvar_Patient_Id,
							@p_nvar_Doctor_Id,
						    @p_nvar_Document_Name,
							GetDate(),
							@p_var_User_Id,
							GetDate(),
							@p_var_User_Id)
							END
        
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
        END CATCH
END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientProfile]    Script Date: 16-Jan-18 8:28:16 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_INSERT_PatientDocuments_Treatment]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  09 APRIL 2018
-- Description :  This stored procedure will update the Data In Patient Master table
--  created By : Madhura Kale
-- =============================================

CREATE PROCEDURE [dbo].[USP_INSERT_PatientDocuments_Treatment]

		@p_Patient_ID				NVARCHAR(30),
		@p_Doctor_ID				NVARCHAR(100),
		@p_Clinic_ID				NVARCHAR(100),
		@p_Document_Name			NVARCHAR(100),
		@p_CreatedBy_Name			NVARCHAR(100),
		@p_var_Patient_Visit_No     int,
		@p_date_Visit_Date				DATETIME
		
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY


		INSERT INTO [dbo].[Patient_Documents_Treatment]
           ([Patient_ID]
           ,[Doctor_ID]
           ,[Clinic_ID]
           ,[Document_Name]
           ,[Created_On]
           ,[CreatedBy_Name]
            ,[Patient_Visit_No],
			Delete_Flag,
			[Visit_Date])
     VALUES
         (@p_Patient_ID,
		  @p_Doctor_ID,
		  @p_Clinic_ID,
          @p_Document_Name,
		  GETDATE(),
		  @p_CreatedBy_Name,
		  @p_var_Patient_Visit_No,
		  0,
		 GETDATE() )

    /*   UPDATE Patient_Master
	   SET		First_Name	=	@p_nvar_First_Name,
				Middle_Name	=	@p_nvar_Middle_Name,
				Last_Name	=	@p_nvar_Last_Name,
				Gender_ID	=	@p_chr_Gender_ID,
				Date_Of_Birth	=	@p_dt_Date_Of_Birth,
				Age_Given	=	@p_sint_Age_Given,
				Mobile_1	=	@p_nvar_Mobile_1,
				Notes		=	@p_var_Notes,
				Address_1	=	@p_var_Address

		WHERE	ID			=	@p_var_Patient_ID
		AND		Doctor_ID	=	@p_nvar_Doctor_ID

		SELECT 1 AS SAVE_STATUS
       */
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientProfile]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will Update the patient profile Data when Patient Visit to the Doctor in Patient Visit table
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_PatientProfile]
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8, 2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32)
AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY
  
		  UPDATE	 Patient_Visits SET
					 Hypertension		= @p_var_Hypertension,
					 Diabetes			= @p_var_Diabetes,
					 Cholestrol			= @p_var_Cholestrol,
					 IHD				= @p_var_IHD,
					 TH					= @p_var_TH,
					 Asthama			= @p_var_Asthama,
					 Height_In_CMS		= @p_var_Height_In_CMS,
					 Weight_IN_KGS		= @p_var_Weight_IN_KGS,
					 Pulse				= @p_var_Pulse,
					 Blood_Pressure		= @p_var_Blood_Pressure,
					 Fees_To_Collect	= @p_var_Fees_To_Collect,
					 Instructions		= @p_var_Instructions,
					 Status_ID			= @p_var_Status_ID,
					 Created_On         = GETDATE(),
					 CreatedBy_Name		= @p_var_User_Id,
					 Modified_On		= GETDATE(),
					 ModifiedBy_Name	= @p_var_User_Id
			WHERE    Patient_ID			= @p_var_Patient_ID		
			AND		 Visit_Date			= @p_var_Visit_Date		
			AND		 Patient_Visit_No	= @p_var_Patient_Visit_No	
			AND		 Shift_ID		    = @p_var_Shift_ID			
			AND		 Clinic_ID          = @p_var_Clinic_ID		
			AND		 Doctor_ID          = @p_var_Doctor_ID			
				 
            END TRY
    BEGIN CATCH
			SELECT   ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
     
 END
















/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientRegistration]    Script Date: 16-Jan-18 8:28:30 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientRegistration]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- Author      :  INCRUST
-- Create date :  05 Oct 2017
-- Description :  This stored procedure will Save the Data In Patient Master table
--  created By :  Varsha Khandre
-- ================================================================================

CREATE PROCEDURE [dbo].[USP_Insert_PatientRegistration]

		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_Folder_No				NVARCHAR(30),
		@p_nvar_First_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_chr_Gender_ID			    CHAR(1),
		@p_int_Reg_Year					INT,
		@p_dt_Date_Of_Birth				DATE,
		@p_sint_Age_Given				SMALLINT,
		@p_nvar_Mobile_1				NVARCHAR(20),
		@p_int_Area_ID			   	    INT,
		@p_nvar_City_ID				    NVARCHAR(6),
		@p_nvar_State_ID			    NVARCHAR(5),
		@p_nvar_Country_ID			    NVARCHAR(6),
		@p_chr_Registration_Status      CHAR(1),
		@p_var_User_Id				    NVARCHAR(32),
		@p_var_Refer_by					CHAR(1),
		@p_var_refer_by_details			NVARCHAR(200),
		@p_chr_Marital_Status_ID		CHAR(1),
		@p_chr_Occupation_ID			INT,
		@p_nvar_Address					NVARCHAR(150),
		@p_nvar_Patient_Email			NVARCHAR(60),
		@p_nvar_DoctorAddress			NVARCHAR(150),
		@p_nvar_Doctor_Mobile			NVARCHAR(20),
		@p_nvar_Doctor_Email			NVARCHAR(60),
		@p_nvar_Clinic_ID				NVARCHAR(30)

AS
BEGIN
	DECLARE @nvar_Folder_No         NVARCHAR(30)
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY

	IF(@p_chr_Marital_Status_ID = '')
	  BEGIN
         SET @p_chr_Marital_Status_ID = NULL;
	  END

	  IF(@p_chr_Occupation_ID = 0)
	  BEGIN
         SET @p_chr_Occupation_ID = NULL;
	  END

      	
        IF EXISTS 
		(	SELECT	ID
			FROM	Patient_Master
			WHERE	Last_Name		= @p_nvar_Last_Name
			AND		First_Name		= @p_nvar_First_Name
		--	AND		Date_Of_Birth	= @p_dt_Date_Of_Birth
			AND		Gender_ID		= @p_chr_Gender_ID
			--AND		Doctor_ID		= @p_nvar_Doctor_ID
			AND		Clinic_ID = @p_nvar_Clinic_ID
		)
		BEGIN
		SELECT 0 AS SAVE_STATUS;
		END
        ELSE
		 BEGIN
			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @intTotalLengthFLD  INT
			DECLARE @intTotalLengthPAT  INT
			DECLARE @nvarPatientRegNo NVARCHAR(32)
		    
			IF ( LEN(LTRIM(RTRIM(@p_nvar_Folder_No))) <=0 )
			BEGIN
			SELECT @bintLastSequenceNoFld = Last_SequenceNo, 
					@strPrefixChar         = Prefix_Char,
					@intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 
				--WHERE DOCTOR_ID = @p_nvar_Doctor_ID AND Entity_Type = 'FLD'
				WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'FLD'

				
				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
				END

				
				IF(LEN(UPPER(@p_nvar_Last_Name) +  UPPER(@p_nvar_First_Name))>23)
				
				BEGIN
				SET @p_nvar_Folder_No=UPPER(@p_nvar_Last_Name) + '-' +LEFT(UPPER(@p_nvar_First_Name),23-LEN(UPPER(@p_nvar_Last_Name)))+'-' +
				REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))  
				+ convert(nvarchar(5),@bintLastSequenceNoFld)
				END
				
				ELSE

				SET   @p_nvar_Folder_No =  UPPER(@p_nvar_Last_Name) + '-' + UPPER(@p_nvar_First_Name) + '-' +
				REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))  
				+ convert(nvarchar(5),@bintLastSequenceNoFld)


				SET @nvar_Folder_No = @p_nvar_Folder_No
			END          
	        
	    

			 SELECT @bintLastSequenceNo = Last_SequenceNo, 
				    @strPrefixChar= Prefix_Char,
				    @intTotalLengthPAT =  Total_Length
			   FROM  [dbo].[Sequence_Nos] 
			  WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'PAT'

			   SET  @bintLastSequenceNo = @bintLastSequenceNo + 1

			   SET  @nvarPatientRegNo = CONVERT(nvarchar(10),getdate(),105) + '-' + 
			   REPLICATE('0',@intTotalLengthPAT - LEN(convert(nvarchar(5),@bintLastSequenceNo))) 
			   + convert(nvarchar(5),@bintLastSequenceNo)

			  INSERT INTO Patient_Master
								(ID,
								Doctor_ID,
								Folder_No,
								First_Name,
								Middle_Name,
								Last_Name,
								Gender_ID,
								Manual_Registration_Year,
								Date_Of_Birth,
								Age_Given,
								Mobile_1,
								Area_ID,
								City_ID,
								State_ID,
								Country_ID,
								Registration_Status,
								Patient_Last_Visit_No,
								CreatedBy_Name,
								Created_On,
								ModifiedBy_Name,
								Modified_On,
								[Refer_ID],
								[Refer_Doctor_Details],
								[Marital_Status_ID],
								[Occupation_ID],
								[Address_1],
								[Email_ID],
								[Doctor_Address],
								[Doctor_Mobile],
								[Doctor_Email],
								Clinic_ID)
								VALUES
								(
								@nvarPatientRegNo,
								@p_nvar_Doctor_ID,
								@p_nvar_Folder_No,
								@p_nvar_First_Name,
								@p_nvar_Middle_Name,
								@p_nvar_Last_Name,
								@p_chr_Gender_ID,
								@p_int_Reg_Year,
								@p_dt_Date_Of_Birth,
								@p_sint_Age_Given,
								@p_nvar_Mobile_1,
								@p_int_Area_ID,
								@p_nvar_City_ID,
								@p_nvar_State_ID,
								@p_nvar_Country_ID,
								@p_chr_Registration_Status,
								0,
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_var_Refer_by,
								@p_var_refer_by_details,
								@p_chr_Marital_Status_ID,
								@p_chr_Occupation_ID,	
								@p_nvar_Address,			
								@p_nvar_Patient_Email,	
								@p_nvar_DoctorAddress,	
								@p_nvar_Doctor_Mobile,	
								@p_nvar_Doctor_Email,
								@p_nvar_Clinic_ID	
								)

					  UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNo
					  WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'PAT'

				  IF ( LEN(LTRIM(RTRIM(@nvar_Folder_No))) > 0 )
					 BEGIN				 
						UPDATE [dbo].[Sequence_Nos]
						SET Last_SequenceNo = @bintLastSequenceNoFld 
						WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'FLD'   				 
					 END
					 SELECT 1 AS SAVE_STATUS;
					 SELECT @nvarPatientRegNo AS ID      
					
			END
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientRegistration_ForDuplicate]    Script Date: 16-Jan-18 8:28:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_INSERT_PatientRegistration_DOC]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  09 APRIL 2018
-- Description :  This stored procedure will update the Data In Patient Master table
--  created By : APOORVA H
-- =============================================

CREATE PROCEDURE [dbo].[USP_INSERT_PatientRegistration_DOC]

		@p_Patient_ID				NVARCHAR(30),
		@p_Doctor_ID				NVARCHAR(100),
		@p_Clinic_ID				NVARCHAR(100),
		@p_Document_Name			NVARCHAR(100),
		@p_CreatedBy_Name			NVARCHAR(100),
		@p_var_Patient_Visit_No     int
		
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY


		INSERT INTO [dbo].[Patient_Audio_Attachment]
           ([Patient_ID]
           ,[Doctor_ID]
           ,[Clinic_ID]
           ,[Document_Name]
           ,[Created_On]
           ,[CreatedBy_Name]
            ,[Patient_Visit_No])
     VALUES
         (@p_Patient_ID,
		  @p_Doctor_ID,
		  @p_Clinic_ID,
          @p_Document_Name,
		  GETDATE(),
		  @p_CreatedBy_Name,
		  @p_var_Patient_Visit_No)

    /*   UPDATE Patient_Master
	   SET		First_Name	=	@p_nvar_First_Name,
				Middle_Name	=	@p_nvar_Middle_Name,
				Last_Name	=	@p_nvar_Last_Name,
				Gender_ID	=	@p_chr_Gender_ID,
				Date_Of_Birth	=	@p_dt_Date_Of_Birth,
				Age_Given	=	@p_sint_Age_Given,
				Mobile_1	=	@p_nvar_Mobile_1,
				Notes		=	@p_var_Notes,
				Address_1	=	@p_var_Address

		WHERE	ID			=	@p_var_Patient_ID
		AND		Doctor_ID	=	@p_nvar_Doctor_ID

		SELECT 1 AS SAVE_STATUS
       */
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientRegistration_for_patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- Author      :  INCRUST
-- Create date :  05 Oct 2017
-- Description :  This stored procedure will Save the Data In Patient Master table
--  created By :  Varsha Khandre
-- ================================================================================

CREATE PROCEDURE [dbo].[USP_Insert_PatientRegistration_for_patient]

		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_Folder_No				NVARCHAR(30),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_First_Name				NVARCHAR(100),
	    @p_nvar_Mobile_1				NVARCHAR(20),
	    @p_sint_Age_Given				SMALLINT,
		@p_nvar_Gender			    CHAR(1),
	    @p_nvar_PinCode                   nvarchar(20),
	    @p_chr_Registration_Status      CHAR(1),
		@p_nvar_Clinic_ID				NVARCHAR(30),
		@p_var_User_Id				    NVARCHAR(32),
		@p_dt_Date_Of_Birth				DATE

AS
BEGIN
	DECLARE @nvar_Folder_No         NVARCHAR(30),@nvar_City  NVARCHAR(30),@nvar_Area_name   NVARCHAR(100),@nvar_State NVARCHAR(50),@nvar_Country NVARCHAR(50)
	
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY


/*
	select @nvar_City=City_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 

	select @nvar_Area_name=AT.Area_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 


	select @nvar_State=State_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 

	select @nvar_Country=Country_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 
	--PRINT @nvar_City
	*/

	-- 1 OCT

		if exists(
	select City_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode
	)
	begin
	    select @nvar_City=City_ID from [dbo].[Area_Translations] As AT
    	Inner join pincode_Translations PT on
	    AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode
	end
	else
	begin
	 
	   select @nvar_City=City_ID from [dbo].[Area_Translations] As AT
    	--Inner join pincode_Translations PT on
	    	where Area_ID='99999'
	end

	print @nvar_City


	--

	if exists(
	select AT.Area_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode
	)
	begin
	    select @nvar_Area_name=AT.Area_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 
	end
	else
	begin
	  select @nvar_Area_name=AT.Area_ID from [dbo].[Area_Translations] As AT
	--Inner join pincode_Translations PT on
	--AT.Area_ID='99999'

	where Area_ID='99999'
	--where PT.Pincode= @p_nvar_PinCode 
	end

	--PRINT @nvar_Area_name
	--

	
	--
		if exists(
	select State_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 
	)
	begin
	    select @nvar_State=State_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 
	end
	else
	begin
	  select @nvar_State=State_ID from [dbo].[Area_Translations] As AT
	--Inner join pincode_Translations PT on
		where Area_ID='99999'
	--where PT.Pincode= @p_nvar_PinCode 
	end

	PRINT @nvar_State


	--
	
	if exists(
	select Country_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 
	)
	begin
	    select @nvar_Country=Country_ID from [dbo].[Area_Translations] As AT
	Inner join pincode_Translations PT on
	AT.Area_ID=PT.Area_ID
	where PT.Pincode= @p_nvar_PinCode 
	end
	else
	begin
	  select @nvar_Country=Country_ID from [dbo].[Area_Translations] As AT
	--Inner join pincode_Translations PT on
		where Area_ID='99999'
	--where PT.Pincode= @p_nvar_PinCode 
	end

	PRINT @nvar_Country


	-- 2 OCT
      	
        IF EXISTS 
		(	SELECT	ID
			FROM	Patient_Master
			WHERE	Last_Name		= @p_nvar_Last_Name
			AND		First_Name		= @p_nvar_First_Name
			--AND		Date_Of_Birth	= @p_dt_Date_Of_Birth
			AND		Gender_ID		= @p_nvar_Gender
			--AND		Doctor_ID		= @p_nvar_Doctor_ID
	    				
			ANd		Mobile_1  = @p_nvar_Mobile_1
			AND		Clinic_ID = @p_nvar_Clinic_ID

			 
		)
		BEGIN
		SELECT 0 AS SAVE_STATUS;

		SELECT	ID
			FROM	Patient_Master
			WHERE	Last_Name		= @p_nvar_Last_Name
			AND		First_Name		= @p_nvar_First_Name
			--AND		Date_Of_Birth	= @p_dt_Date_Of_Birth
			AND		Gender_ID		= @p_nvar_Gender
			--AND		Doctor_ID		= @p_nvar_Doctor_ID
				ANd		Mobile_1  = @p_nvar_Mobile_1
			AND		Clinic_ID = @p_nvar_Clinic_ID

			 
		END
        ELSE
		 BEGIN
			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @intTotalLengthFLD  INT
			DECLARE @intTotalLengthPAT  INT
			DECLARE @nvarPatientRegNo NVARCHAR(32)
		    
			IF ( LEN(LTRIM(RTRIM(@p_nvar_Folder_No))) <=0 )
			BEGIN
			SELECT @bintLastSequenceNoFld = Last_SequenceNo, 
					@strPrefixChar         = Prefix_Char,
					@intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 
				--WHERE DOCTOR_ID = @p_nvar_Doctor_ID AND Entity_Type = 'FLD'
				WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'FLD'

				
				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
				END

				
				IF(LEN(UPPER(@p_nvar_Last_Name) +  UPPER(@p_nvar_First_Name))>23)
				
				BEGIN
				SET @p_nvar_Folder_No=UPPER(@p_nvar_Last_Name) + '-' +LEFT(UPPER(@p_nvar_First_Name),23-LEN(UPPER(@p_nvar_Last_Name)))+'-' +
				REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))  
				+ convert(nvarchar(5),@bintLastSequenceNoFld)
				END
				
				ELSE

				SET   @p_nvar_Folder_No =  UPPER(@p_nvar_Last_Name) + '-' + UPPER(@p_nvar_First_Name) + '-' +
				REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))  
				+ convert(nvarchar(5),@bintLastSequenceNoFld)


				SET @nvar_Folder_No = @p_nvar_Folder_No
			END          
	        
	    

			 SELECT @bintLastSequenceNo = Last_SequenceNo, 
				    @strPrefixChar= Prefix_Char,
				    @intTotalLengthPAT =  Total_Length
			   FROM  [dbo].[Sequence_Nos] 
			  WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'PAT'

			   SET  @bintLastSequenceNo = @bintLastSequenceNo + 1

			   SET  @nvarPatientRegNo = CONVERT(nvarchar(10),getdate(),105) + '-' + 
			   REPLICATE('0',@intTotalLengthPAT - LEN(convert(nvarchar(5),@bintLastSequenceNo))) 
			   + convert(nvarchar(5),@bintLastSequenceNo)

			  INSERT INTO Patient_Master
								(ID,
								Doctor_ID,
								Folder_No,
								First_Name,
								Middle_Name,
								Last_Name,
								Gender_ID,
								Age_Given,
								Mobile_1,
								[Pincode],
								Registration_Status,
								Patient_Last_Visit_No,
								CreatedBy_Name,
								Created_On,
								ModifiedBy_Name,
								Modified_On,
								Clinic_ID,
								Date_Of_Birth,
								[City_ID],
								[Area_ID],
								[State_ID],
								[Country_ID])
								VALUES
								(
								@nvarPatientRegNo,
								@p_nvar_Doctor_ID,
								@p_nvar_Folder_No,
								@p_nvar_First_Name,
								@p_nvar_Middle_Name,
								@p_nvar_Last_Name,
								@p_nvar_Gender,
							
								@p_sint_Age_Given,
								@p_nvar_Mobile_1,
							    @p_nvar_PinCode,  
								
								@p_chr_Registration_Status,
								0,
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_nvar_Clinic_ID,
								@p_dt_Date_Of_Birth,
								@nvar_City,
								@nvar_Area_name,
								@nvar_State,
								@nvar_Country)
								
								

					  UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNo
					  WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'PAT'

				  IF ( LEN(LTRIM(RTRIM(@nvar_Folder_No))) > 0 )
					 BEGIN				 
						UPDATE [dbo].[Sequence_Nos]
						SET Last_SequenceNo = @bintLastSequenceNoFld 
						WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'FLD'   				 
					 END
					 SELECT 1 AS SAVE_STATUS;
					 SELECT @nvarPatientRegNo AS ID      
					
			END
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END





GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientRegistration_ForDuplicate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ======================================================================================================
-- Author      :  INCRUST
-- Create date :  31 Aug 2016
-- Description :  This stored procedure will Save the Data In Patient Master table for duplicate patient
--  created By :  Varsha Khandre
-- ======================================================================================================

CREATE PROCEDURE [dbo].[USP_Insert_PatientRegistration_ForDuplicate]
		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_Folder_No				NVARCHAR(30),
		@p_nvar_First_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_chr_Gender_ID			    CHAR(1),
		@p_int_Reg_Year					INT,
		@p_dt_Date_Of_Birth				DATE,
		@p_sint_Age_Given				SMALLINT,
		@p_nvar_Mobile_1				NVARCHAR(20),
		@p_int_Area_ID			   	    INT,
		@p_nvar_City_ID				    NVARCHAR(6),
		@p_nvar_State_ID			    NVARCHAR(5),
		@p_nvar_Country_ID			    NVARCHAR(6),
		@p_chr_Registration_Status      CHAR(1),
		@p_var_User_Id				    NVARCHAR(32),
		@p_bool_ischeck					BIT,

		@p_date_Visit_Date        DATETIME,
		@p_int_Shift_ID           TINYINT,
		@p_nvar_Clinic_ID         NVARCHAR(10),
		@p_time_Visit_Time        TIME(7),
		@p_bit_ReportAsked        BIT,
		@p_bit_ReportReceived     BIT,
		@p_var_Refer_by					CHAR(1),
		@p_var_refer_by_details			NVARCHAR(200),
		@p_chr_Marital_Status_ID		CHAR(1),
		@p_chr_Occupation_ID			INT,
		@p_nvar_Address					NVARCHAR(150),
		@p_nvar_Patient_Email			NVARCHAR(60),
		@p_nvar_DoctorAddress			NVARCHAR(150),
		@p_nvar_Doctor_Mobile			NVARCHAR(20),
		@p_nvar_Doctor_Email			NVARCHAR(60)
	
	
AS
BEGIN
	DECLARE @nvar_Folder_No         NVARCHAR(30)
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
      	
	  IF(@p_chr_Marital_Status_ID = '')
	  BEGIN
         SET @p_chr_Marital_Status_ID = NULL;
	  END

	  IF(@p_chr_Occupation_ID = 0)
	  BEGIN
         SET @p_chr_Occupation_ID = NULL;
	  END
			
		
			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @intTotalLengthFLD  INT
			DECLARE @intTotalLengthPAT  INT
			DECLARE @nvarPatientRegNo NVARCHAR(32)
		    
			IF ( LEN(LTRIM(RTRIM(@p_nvar_Folder_No))) <=0 )
			BEGIN
			SELECT @bintLastSequenceNoFld = Last_SequenceNo, 
					@strPrefixChar         = Prefix_Char,
					@intTotalLengthFLD        =  Total_Length
    			FROM  [dbo].[Sequence_Nos] 

				WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'FLD'

				--SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
				END

				
				IF(LEN(UPPER(@p_nvar_Last_Name) +  UPPER(@p_nvar_First_Name))>23)
				
				BEGIN
				SET @p_nvar_Folder_No=UPPER(@p_nvar_Last_Name) + '-' +LEFT(UPPER(@p_nvar_First_Name),23-LEN(UPPER(@p_nvar_Last_Name)))+'-' +
				REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))  
				+ convert(nvarchar(5),@bintLastSequenceNoFld)
				END
				
				ELSE

				SET   @p_nvar_Folder_No =  UPPER(@p_nvar_Last_Name) + '-' + UPPER(@p_nvar_First_Name) + '-' +
				REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))  
				+ convert(nvarchar(5),@bintLastSequenceNoFld)


				SET @nvar_Folder_No = @p_nvar_Folder_No
			END          
	        
	    

			 SELECT @bintLastSequenceNo = Last_SequenceNo, 
				    @strPrefixChar= Prefix_Char,
				    @intTotalLengthPAT =  Total_Length

			   FROM  [dbo].[Sequence_Nos] 

			  WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'PAT'

			   SET  @bintLastSequenceNo = @bintLastSequenceNo + 1

			   SET  @nvarPatientRegNo = CONVERT(nvarchar(10),getdate(),105) + '-' + 
			   REPLICATE('0',@intTotalLengthPAT - LEN(convert(nvarchar(5),@bintLastSequenceNo))) 
			   + convert(nvarchar(5),@bintLastSequenceNo)

			  INSERT INTO Patient_Master
								(ID,
								Doctor_ID,
								Folder_No,
								First_Name,
								Middle_Name,
								Last_Name,
								Gender_ID,
								Manual_Registration_Year,
								Date_Of_Birth,
								Age_Given,
								Mobile_1,
								Area_ID,
								City_ID,
								State_ID,
								Country_ID,
								Registration_Status,
								Patient_Last_Visit_No,
								CreatedBy_Name,
								Created_On,
								ModifiedBy_Name,
								Modified_On,
								[Refer_ID],
								[Refer_Doctor_Details],
								[Marital_Status_ID],
								[Occupation_ID],
								[Address_1],
								[Email_ID],
								[Doctor_Address],
								[Doctor_Mobile],
								[Doctor_Email],
								Clinic_ID)
								VALUES
								(
								@nvarPatientRegNo,
								@p_nvar_Doctor_ID,
								@p_nvar_Folder_No,
								@p_nvar_First_Name,
								@p_nvar_Middle_Name,
								@p_nvar_Last_Name,
								@p_chr_Gender_ID,
								@p_int_Reg_Year,
								@p_dt_Date_Of_Birth,
								@p_sint_Age_Given,
								@p_nvar_Mobile_1,
								@p_int_Area_ID,
								@p_nvar_City_ID,
								@p_nvar_State_ID,
								@p_nvar_Country_ID,
								@p_chr_Registration_Status,
								0,
								@p_var_User_Id,
								GetDate(),
								@p_var_User_Id,
								GetDate(),
								@p_var_Refer_by,
								@p_var_refer_by_details,
								@p_chr_Marital_Status_ID,
								@p_chr_Occupation_ID,	
								@p_nvar_Address,			
								@p_nvar_Patient_Email,	
								@p_nvar_DoctorAddress,	
								@p_nvar_Doctor_Mobile,	
								@p_nvar_Doctor_Email,
								@p_nvar_Clinic_ID
								)

					  UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNo
					  WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'PAT'

				  IF ( LEN(LTRIM(RTRIM(@nvar_Folder_No))) > 0 )
					 BEGIN				 
						UPDATE [dbo].[Sequence_Nos]
						SET Last_SequenceNo = @bintLastSequenceNoFld 
						WHERE Clinic_ID = @p_nvar_Clinic_ID AND Entity_Type = 'FLD'   				 
					 END
					 SELECT 1 AS SAVE_STATUS;
					 SELECT @nvarPatientRegNo AS ID      


					 
					 IF @p_bool_ischeck = 1

		BEGIN TRY
	        DECLARE @int_StatusId  INT
		 
		     	 SELECT @int_StatusId = ID 
			       FROM Status_Ref 
			      WHERE ID NOT IN(Select ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))AND
			            Clinic_ID=@p_nvar_Clinic_ID

			INSERT INTO Patient_Visits
						(Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Folder_No,
						Patient_ID,
						Status_ID,
						Visit_Time,
						--Reports_Asked,
						Reports_Received,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						In_Person)
                 SELECT @p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						Patient_Last_Visit_No + 1,
						Folder_No,
						@nvarPatientRegNo,
						@int_StatusId,
						@p_time_Visit_Time,
						--@p_bit_ReportAsked ,
						@p_bit_ReportReceived ,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						1
		          FROM  Patient_Master
                  WHERE ID=@nvarPatientRegNo


				  END TRY

				  

	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
					
			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

















/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientToVisitQueue]    Script Date: 16-Jan-18 8:28:47 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientToVisitQueue]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  12-Mar-2016
-- Description :  This stored procedure will Save The Data in Patient Visit Master
--  created By :  Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_PatientToVisitQueue]
	@p_date_Visit_Date        DATETIME,
	@p_int_Shift_ID           TINYINT,
	@p_nvar_Clinic_ID         NVARCHAR(10),
	@p_nvar_Doctor_ID         NVARCHAR(30),
	@p_nvar_Patient_ID        NVARCHAR(32),
	@p_time_Visit_Time        TIME(7),
	@p_bit_ReportAsked        BIT,
	@p_bit_ReportReceived     BIT,
	@p_var_User_Id  NVARCHAR(32)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	        DECLARE @int_StatusId  INT
		 
		     	 SELECT @int_StatusId = ID 
			       FROM Status_Ref 
			      WHERE ID NOT IN(Select ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 OR ID=12 or Id=9 or Id=7 or Id=8 or Id=13))AND
			            Doctor_ID=@p_nvar_Doctor_ID

			INSERT INTO Patient_Visits
						(Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Folder_No,
						Patient_ID,
						Status_ID,
						Visit_Time,
						--Reports_Asked,
						Reports_Received,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						In_Person)
                 SELECT @p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						Patient_Last_Visit_No + 1,
						Folder_No,
						@p_nvar_Patient_ID,
						@int_StatusId,
						@p_time_Visit_Time,
						--@p_bit_ReportAsked ,
						@p_bit_ReportReceived ,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						1
		          FROM  Patient_Master
                  WHERE ID=@p_nvar_Patient_ID

	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END








/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientToVisitQueue_For_MR]    Script Date: 16-Jan-18 8:29:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientToVisitQueue_For_MR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  13 Dec 2016
-- Description :  This stored procedure will Save The Data in Patient Visit Master
--  created By :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_PatientToVisitQueue_For_MR]
	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_MR_ID					INT,
	@p_time_Visit_Time				TIME(7),
	@p_var_User_Id					NVARCHAR(32)
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	
	        DECLARE @int_StatusId  INT
		 
		     	 SELECT @int_StatusId = ID 
			       FROM Status_Ref 
			      WHERE ID NOT IN(Select ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 OR ID=12  or ID=7 or ID=8 OR ID=9 OR ID=13))AND
			            Doctor_ID=@p_nvar_Doctor_ID

			
			

			INSERT INTO [dbo].[MR_Visits](
						
						Doctor_ID,
						Clinic_ID,
						Shift_ID,
						MR_ID,
						Company_Name,
						Visit_Date,
						Visit_Time,
						Status_ID,
						Created_On,
						CreatedBy_Name,
						Modified_On,
						ModifiedBy_Name,
						Delete_Flag
						
						)
			SELECT		
						
						@p_nvar_Doctor_ID,
						@p_nvar_Clinic_ID,
						@p_int_Shift_ID,
						@p_nvar_MR_ID,
						Company_Name,
						@p_date_Visit_Date,
						@p_time_Visit_Time,
						@int_StatusId,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						0
						
			FROM MR_Master where MR_ID=@p_nvar_MR_ID

			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_Prescription_Medicine]    Script Date: 16-Jan-18 8:29:33 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientToVisitQueue_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  28-DEC-2019
-- Description :  This stored procedure will Save The Data in Patient Visit services Master services
--  created By :  Suyog Khairnar
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_PatientToVisitQueue_Services]
	@p_date_Visit_Date        DATETIME,
	@p_int_Shift_ID           TINYINT,
	@p_nvar_Clinic_ID         NVARCHAR(10),
	@p_nvar_Doctor_ID         NVARCHAR(30),
	@p_nvar_Patient_ID        NVARCHAR(32),
	@p_time_Visit_Time        TIME(7),
	@p_bit_ReportAsked        BIT,
	@p_bit_ReportReceived     BIT,
	@p_var_User_Id			  NVARCHAR(32)
	--@p_var_Status_Id          int
	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
	        DECLARE @int_StatusId  INT
		 
		     	 SELECT @int_StatusId = ID 
			       FROM Status_Ref 
			      WHERE ID NOT IN(Select ID FROM Status_Ref WHERE(Doctor_ID=@p_nvar_Doctor_ID) AND(ID=2or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 OR ID=12 or Id=9 or Id=8 or Id=13 or Id=1))AND
			            Doctor_ID=@p_nvar_Doctor_ID

			INSERT INTO Patient_Visits_Services
						(Visit_Date,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_Visit_No,
						Folder_No,
						Patient_ID,
						Status_ID,
						Visit_Time,
						--Reports_Asked,
						Reports_Received,
						Financial_Year,
						CreatedBy_Name,
						Created_On,
						ModifiedBy_Name,
						Modified_On,
						In_Person,
						Visit_Type)
                 SELECT @p_date_Visit_Date,
						@p_int_Shift_ID,
						@p_nvar_Clinic_ID,
						@p_nvar_Doctor_ID,
						Patient_Last_Visit_No + 1,
						Folder_No,
						@p_nvar_Patient_ID,
						@int_StatusId,
						@p_time_Visit_Time,
						--@p_bit_ReportAsked ,
						@p_bit_ReportReceived ,
						CASE WHEN DatePart(Month, @p_date_Visit_Date) >= 4
			            THEN DatePart(Year, @p_date_Visit_Date) + 1
						ELSE DatePart(Year, @p_date_Visit_Date) END,
						@p_var_User_Id,
						GetDate(),
						@p_var_User_Id,
						GetDate(),
						1,
						'S'
		          FROM  Patient_Master
                  WHERE ID=@p_nvar_Patient_ID

	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END








/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientToVisitQueue_For_MR]    Script Date: 16-Jan-18 8:29:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

CREATE PROCEDURE[dbo].[USP_Insert_PatientVisitData]
	@p_var_Insert_PatientComplaintData		UDT_Insert_PatientComplaints READONLY,
	@p_var_Insert_PatientDiagnosisData		UDT_Insert_PatientDiagnosis READONLY,
	@p_var_Insert_PatientDressingData		UDT_Insert_PatientDressingData READONLY,
	@p_var_Insert_PatientMedicineData		UDT_Insert_PatientMedicineData_Doctor READONLY,
	@p_var_Insert_PatientPrescriptionData	UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_Smoking								BIT,
	@p_var_Tobaco								BIT,
	@p_var_Alchohol								BIT,
	@p_var_Habit_Details						NVARCHAR(1000),
	@p_var_Allergy_Details						NVARCHAR(1000),
	@p_var_Observation							NVARCHAR(1000),
	@p_bit_In_Person							BIT,
	@p_var_sugar								NVARCHAR(100),
	@p_var_THtext								NVARCHAR(100),
	@p_var_offline_reason						NVARCHAR(1000),
	@p_bit_offlineflag							BIT,
	@p_var_Symptom_Comment						NVARCHAR(1000),
	@p_var_Fees_Paid							DECIMAL(10,2),
	@p_var_Reason								NVARCHAR(1000),
	@p_var_Insert_PatientProcedureData			UDT_Insert_PatientProcedureData READONLY,
	@p_var_Impression							NVARCHAR(1000),
	@p_var_Attended_By							NVARCHAR(32),
	@p_var_PaymentBy_ID							INT,
	@p_var_Payment_Remark						NVARCHAR(1000),
	@p_var_AttendedBy_ID							INT,
	@p_var_Follow_Up							NVARCHAR(100),
	@p_var_Insert_PatientInstructionData		UDT_Insert_PatientInstructionData READONLY,
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),

	@p_var_TPR									NVARCHAR(10),
	@p_var_Important_Findings					NVARCHAR(30),
	@p_var_Additional_Comments					NVARCHAR(30),
	@p_var_Systemic								NVARCHAR(30),
	@p_var_Odeama								NVARCHAR(10),
	@p_var_Pallor								NVARCHAR(10),
	@p_var_GC									NVARCHAR(20),
	@p_var_Insert_AbdominalData					UDT_Insert_Abdominal_Exam_Findings_Data READONLY,

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),

	@p_var_FollowUp_comment					 NVARCHAR(1000),
	@p_var_FollowUp_Date					DATETIME,
	@p_var_Pregnant                             BIT,
	@p_var_EDD							   DATETIME,
	@p_var_Follow_up_Type						    NVARCHAR(1000),
	@p_var_Discount					DECIMAL(10,2),
	@p_var_Original_Discount					DECIMAL(10,2)
	,@Is_Submit_Patient_Visit_Details bit
	
	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 IF(@p_var_EDD = '')
	  BEGIN
         SET @p_var_EDD = NULL;
	  END

	 --IF(@p_var_FollowUp_Type = 0)
	 -- BEGIN
  --       SET @p_var_FollowUp_Type = NULL;
	 -- END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END





	  	UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_var_Fees_Paid ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							Symptom_Comment			= @p_var_Symptom_Comment,
							Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							[Systemic]				= @p_var_Systemic,
							[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							follow_up_Comment				=	@p_var_FollowUp_comment,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							follow_up_type					=	@p_var_Follow_up_Type,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
						Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details

			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	










	 BEGIN TRANSACTION

			--INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			--SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
   --         FROM			@p_var_Insert_PatientComplaintData
   		

	 
	        delete from Visit_Diagnosis where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
			INSERT INTO		Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDiagnosisData


			delete from Visit_Dressing where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
			INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
		    SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDressingData

			delete from Visit_Medicine where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
			INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData

			delete from Visit_Prescription where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID	
			INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_Id)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
			                 ((select max (ISNULL(Sequence_Id,0)) from Visit_Prescription) + ROW_NUMBER() over (order by (select 1)))
			FROM			@p_var_Insert_PatientPrescriptionData
			
		--	delete from Visit_Prescription where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO [dbo].[Complaint_Master] ([Short_Description],[Complaint_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Complaint_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientComplaintData CType LEFT JOIN [dbo].[Complaint_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			--delete from Diagnosis_Master where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO [dbo].[Diagnosis_Master] ([Short_Description],[Diagnosis_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Desease_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientDiagnosisData CType LEFT JOIN [dbo].[Diagnosis_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			delete from Visit_Procedure_Findings where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO		Visit_Procedure_Findings(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,[Findings_Comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,Impression,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_PatientProcedureData


			delete from Visit_Groups_Instructions where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO		Visit_Groups_Instructions(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,[Group_Description],[Instructions_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_No)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Group_Description,Instructions_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,Sequence_No
			FROM			@p_var_Insert_PatientInstructionData

			delete from Visit_Abdominal_Examination_Findings where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO		[dbo].[Visit_Abdominal_Examination_Findings](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_AbdominalData

			UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_var_Fees_Paid ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							Symptom_Comment			= @p_var_Symptom_Comment,
							Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							[Systemic]				= @p_var_Systemic,
							[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							follow_up_Comment				=	@p_var_FollowUp_comment,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							follow_up_type					=	@p_var_Follow_up_Type,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details

			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	
			 
			IF(@p_var_Status_ID = 5)
			 BEGIN
			   UPDATE        [dbo].[Patient_Visits]  
				SET	          Status_Id					= @p_var_Status_ID,
				              --Fees_Collected			= 0 
							  Fees_Collected			= @p_var_Fees_Paid
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_ID 
				AND			  Clinic_ID					= @p_var_Clinic_ID 
				AND			  Doctor_ID					= @p_var_Doctor_ID 
				AND			  Patient_ID				= @p_var_Patient_ID
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	ID				   = @p_var_Patient_ID
				--Doctor_ID			   = @p_var_Doctor_ID 
				--AND	  
				
			 END  

			 /***************************************Add Or Update Complaints**********************************************/

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]		AS COMPLAINTCOMMENT
							
							
			FROM	@p_var_Insert_PatientComplaintData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMPLAINTCOMMENT
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]	=	SRC.COMPLAINTCOMMENT,	
				CM.[Delete_Flag]		=	0,
				CM.[Modified_On]		=	GETDATE(),
				CM.[ModifiedBy_Name]	=	@p_var_User_Id

	WHEN NOT MATCHED THEN
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,SRC.COMPLAINTCOMMENT);
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData_AudioAllergy]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

CREATE PROCEDURE[dbo].[USP_Insert_PatientVisitData_AudioAllergy]
	@p_var_Insert_PatientComplaintData		UDT_Insert_PatientComplaints READONLY,
	@p_var_Insert_PatientDiagnosisData		UDT_Insert_PatientDiagnosis READONLY,
	@p_var_Insert_PatientDressingData		UDT_Insert_PatientDressingData READONLY,
	@p_var_Insert_PatientMedicineData		UDT_Insert_PatientMedicineData_Doctor READONLY,
	@p_var_Insert_PatientPrescriptionData	UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Insert_Schedule               	UDT_Insert_PatientSchedule READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_Smoking								BIT,
	@p_var_Tobaco								BIT,
	@p_var_Alchohol								BIT,
	@p_var_Habit_Details						NVARCHAR(1000),
	@p_var_Allergy_Details						NVARCHAR(1000),
	--@p_var_Observation							NVARCHAR(1000),
	@p_bit_In_Person							BIT,
	@p_var_sugar								NVARCHAR(100),
	@p_var_THtext								NVARCHAR(100),
	@p_var_offline_reason						NVARCHAR(1000),
	@p_bit_offlineflag							BIT,
	--@p_var_Symptom_Comment						NVARCHAR(1000),
	@p_var_Fees_Paid							DECIMAL(10,2),
	--@p_var_Reason								NVARCHAR(1000),
	@p_var_Insert_PatientProcedureData			UDT_Insert_PatientProcedureData READONLY,
	@p_var_Impression							NVARCHAR(1000),
	@p_var_Attended_By							NVARCHAR(32),
	--@p_var_PaymentBy_ID							INT,
	--@p_var_Payment_Remark						NVARCHAR(1000),
	@p_var_AttendedBy_ID							INT,
	@p_var_Follow_Up							NVARCHAR(100),
	@p_var_Insert_PatientInstructionData		UDT_Insert_PatientInstructionData READONLY,
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),

	--@p_var_TPR									NVARCHAR(10),
	@p_var_Important_Findings					NVARCHAR(1000),
	@p_var_Additional_Comments					NVARCHAR(1000),
	--@p_var_Systemic								NVARCHAR(30),
	--@p_var_Odeama								NVARCHAR(10),
	@p_var_Pallor								NVARCHAR(10),
	@p_var_GC									NVARCHAR(20),
	@p_var_Insert_AbdominalData					UDT_Insert_Abdominal_Exam_Findings_Data READONLY,

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),

	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,

	@p_var_Pregnant                             BIT,
	@p_var_EDD							   DATETIME,
	@p_var_Treatment_Plan					 NVARCHAR(1000),
	@p_var_Treatment_Comment				 NVARCHAR(1000),
	@p_var_FollowUp_Comment					 NVARCHAR(1000),
	@p_var_FollowUpAfter				INT
	,
	@p_var_Discount					DECIMAL(10,2),
	@p_var_Original_Discount					DECIMAL(10,2)
	,
	@Is_Submit_Patient_Visit_Details bit,
	@p_var_PaymentBy_ID							INT,
	@p_var_Payment_Remark						NVARCHAR(1000),
   @p_var_Reason								NVARCHAR(1000),
   @p_dec_feess							DECIMAL(10,2)


AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 IF(@p_var_EDD = '')
	  BEGIN
         SET @p_var_EDD = NULL;
	  END

	 IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END
	     IF(@p_var_FollowUpAfter = 0)
	  BEGIN
         SET @p_var_FollowUpAfter = NULL;
	  END

	 







	 	UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_dec_feess ,
							[Instructions]		    = @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							--Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							--Symptom_Comment			= @p_var_Symptom_Comment,
							--Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							--[Payment_By_ID]			= @p_var_PaymentBy_ID,
							--[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,

							[Treatment_plan]				= @p_var_Treatment_Plan,
							[Treatment_comment]				= @p_var_Treatment_Comment,
							[follow_up_Comment]				=  @p_var_FollowUp_Comment,
							[Followup_After]=@p_var_FollowUpAfter,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details
							,[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
								Comment					= @p_var_Reason

			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	



			  BEGIN TRANSACTION

			  
		/***************************************Start Add Or Update Visit_Schedule **********************************************/
		delete from Visit_Schedule where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
		

			INSERT INTO	Visit_Schedule(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_Schedule
			
			
    /***************************************End Add Or Update Visit_Schedule **********************************************/   
			
	/***************************************Start Add Or Update Visit_Diagnosis **********************************************/
	delete from Visit_Diagnosis where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 

	 INSERT INTO		Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDiagnosisData
	 
	 
	
	 /***************************************End Add Or Update Visit_Diagnosis **********************************************/   

      /***************************************Start Add Or Update Visit_Dressing **********************************************/
	delete from Visit_Dressing where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 

	 INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
		    SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDressingData
	 
	 delete from Visit_Medicine where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 

	 INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData
	 
		 /***************************************End Add Or Update Visit_Medicine **********************************************/   	

		 /***************************************Start Add Or Update Visit_Prescription **********************************************/

		-- IF not EXISTS(select * from Visit_Prescription where Patient_ID=@p_var_Patient_ID and Visit_Date=	@p_var_Visit_Date and Patient_Visit_No= @p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID and Clinic_ID=@p_var_Clinic_ID and Shift_ID =@p_var_Shift_ID)
	 --begin

	 -- end
	 delete from Visit_Prescription where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID	

	 INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_Id)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
			                 ((select max (ISNULL(Sequence_Id,0)) from Visit_Prescription) + ROW_NUMBER() over (order by (select 1)))
			FROM			@p_var_Insert_PatientPrescriptionData

 /***************************************End **********************************************/   	


	 
			
			INSERT INTO [dbo].[Complaint_Master] ([Short_Description],[Complaint_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Complaint_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientComplaintData CType LEFT JOIN [dbo].[Complaint_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO [dbo].[Diagnosis_Master] ([Short_Description],[Diagnosis_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Desease_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientDiagnosisData CType LEFT JOIN [dbo].[Diagnosis_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO		Visit_Procedure_Findings(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,[Findings_Comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,Impression,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_PatientProcedureData

			INSERT INTO		Visit_Groups_Instructions(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,[Group_Description],[Instructions_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_No)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Group_Description,Instructions_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,Sequence_No
			FROM			@p_var_Insert_PatientInstructionData

			INSERT INTO		[dbo].[Visit_Abdominal_Examination_Findings](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_AbdominalData

			UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_dec_feess ,
							[Instructions]		    = @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							--Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							--Symptom_Comment			= @p_var_Symptom_Comment,
							--Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							--[Payment_By_ID]			= @p_var_PaymentBy_ID,
							--[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,

							[Treatment_plan]				= @p_var_Treatment_Plan,
							[Treatment_comment]				= @p_var_Treatment_Comment,
							[follow_up_Comment]				=  @p_var_FollowUp_Comment,
							[Followup_After]=@p_var_FollowUpAfter,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details
							
						    ,[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
								Comment					= @p_var_Reason
			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	
			 
			IF(@p_var_Status_ID = 5)
			 BEGIN
			   UPDATE        [dbo].[Patient_Visits]  
				SET	          Status_Id					= @p_var_Status_ID,
				              --Fees_Collected			= 0 
							  Fees_Collected			= @p_dec_feess
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_ID 
				AND			  Clinic_ID					= @p_var_Clinic_ID 
				AND			  Doctor_ID					= @p_var_Doctor_ID 
				AND			  Patient_ID				= @p_var_Patient_ID
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	ID				   = @p_var_Patient_ID
				--Doctor_ID			   = @p_var_Doctor_ID 
				--AND	  
				
			 END  

			 /***************************************Add Or Update Complaints**********************************************/

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]		AS COMPLAINTCOMMENT
							
							
			FROM	@p_var_Insert_PatientComplaintData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMPLAINTCOMMENT
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]	=	SRC.COMPLAINTCOMMENT,	
				CM.[Delete_Flag]		=	0,
				CM.[Modified_On]		=	GETDATE(),
				CM.[ModifiedBy_Name]	=	@p_var_User_Id

	WHEN NOT MATCHED THEN
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,SRC.COMPLAINTCOMMENT);
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData_Balance]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

     CREATE PROCEDURE[dbo].[USP_Insert_PatientVisitData_Balance]
	@p_var_Insert_PatientComplaintData		UDT_Insert_PatientComplaints READONLY,
	@p_var_Insert_PatientDiagnosisData		UDT_Insert_PatientDiagnosis READONLY,
	@p_var_Insert_PatientDressingData		UDT_Insert_PatientDressingData READONLY,
	@p_var_Insert_PatientMedicineData		UDT_Insert_PatientMedicineData_Doctor READONLY,
	@p_var_Insert_PatientPrescriptionData	UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_Smoking								BIT,
	@p_var_Tobaco								BIT,
	@p_var_Alchohol								BIT,
	@p_var_Habit_Details						NVARCHAR(1000),
	@p_var_Allergy_Details						NVARCHAR(1000),
	--@p_var_Observation							NVARCHAR(1000),
	@p_bit_In_Person							BIT,
	@p_var_sugar								NVARCHAR(100),
	@p_var_THtext								NVARCHAR(100),
	@p_var_offline_reason						NVARCHAR(1000),
	@p_bit_offlineflag							BIT,
	--@p_var_Symptom_Comment						NVARCHAR(1000),
	@p_var_Fees_Paid							DECIMAL(10,2),
	@p_var_Reason								NVARCHAR(1000),
	@p_var_Insert_PatientProcedureData			UDT_Insert_PatientProcedureData READONLY,
	@p_var_Impression							NVARCHAR(1000),
	@p_var_Attended_By							NVARCHAR(32),
	@p_var_PaymentBy_ID							INT,
	@p_var_Payment_Remark						NVARCHAR(1000),
	@p_var_AttendedBy_ID							INT,
	@p_var_Follow_Up							NVARCHAR(100),
	@p_var_Insert_PatientInstructionData		UDT_Insert_PatientInstructionData READONLY,
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),

	--@p_var_TPR									NVARCHAR(10),
	@p_var_Important_Findings					NVARCHAR(30),
	@p_var_Additional_Comments					NVARCHAR(30),
	--@p_var_Systemic								NVARCHAR(30),
	--@p_var_Odeama								NVARCHAR(10),
	@p_var_Pallor								NVARCHAR(10),
	@p_var_GC									NVARCHAR(20),
	@p_var_Insert_AbdominalData					UDT_Insert_Abdominal_Exam_Findings_Data READONLY,

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),

	--@p_var_FollowUp_Type					INT,
	--@p_var_FollowUp_Date					DATETIME,
	@p_var_Pregnant                             BIT,
	@p_var_EDD							   DATETIME
	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 IF(@p_var_EDD = '')
	  BEGIN
         SET @p_var_EDD = NULL;
	  END

	 --IF(@p_var_FollowUp_Type = 0)
	 -- BEGIN
  --       SET @p_var_FollowUp_Type = NULL;
	 -- END

	 -- IF(@p_var_FollowUp_Date = '')
	 -- BEGIN
  --       SET @p_var_FollowUp_Date = NULL;
	 -- END

	 BEGIN TRANSACTION

			--INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			--SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
   --         FROM			@p_var_Insert_PatientComplaintData
	 
			INSERT INTO		Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDiagnosisData

			INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
		    SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDressingData

			INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData

			INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_Id)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
			                 ((select max (ISNULL(Sequence_Id,0)) from Visit_Prescription) + ROW_NUMBER() over (order by (select 1)))
			FROM			@p_var_Insert_PatientPrescriptionData
			
			INSERT INTO [dbo].[Complaint_Master] ([Short_Description],[Complaint_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Complaint_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientComplaintData CType LEFT JOIN [dbo].[Complaint_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO [dbo].[Diagnosis_Master] ([Short_Description],[Diagnosis_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Desease_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientDiagnosisData CType LEFT JOIN [dbo].[Diagnosis_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO		Visit_Procedure_Findings(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,[Findings_Comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,Impression,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_PatientProcedureData

			INSERT INTO		Visit_Groups_Instructions(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,[Group_Description],[Instructions_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_No)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Group_Description,Instructions_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,Sequence_No
			FROM			@p_var_Insert_PatientInstructionData

			INSERT INTO		[dbo].[Visit_Abdominal_Examination_Findings](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_AbdominalData

			UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_var_Fees_Paid ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							--Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							--Symptom_Comment			= @p_var_Symptom_Comment,
							Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							--[follow_up_type]				=	@p_var_FollowUp_Type,
							--[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD

			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	
			 
			IF(@p_var_Status_ID = 5)
			 BEGIN
			   UPDATE        [dbo].[Patient_Visits]  
				SET	          Status_Id					= @p_var_Status_ID,
				              --Fees_Collected			= 0 
							  Fees_Collected			= @p_var_Fees_Paid
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_ID 
				AND			  Clinic_ID					= @p_var_Clinic_ID 
				AND			  Doctor_ID					= @p_var_Doctor_ID 
				AND			  Patient_ID				= @p_var_Patient_ID
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	ID				   = @p_var_Patient_ID
				--Doctor_ID			   = @p_var_Doctor_ID 
				--AND	  
				
			 END  

			 /***************************************Add Or Update Complaints**********************************************/

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]		AS COMPLAINTCOMMENT
							
							
			FROM	@p_var_Insert_PatientComplaintData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMPLAINTCOMMENT
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]	=	SRC.COMPLAINTCOMMENT,	
				CM.[Delete_Flag]		=	0,
				CM.[Modified_On]		=	GETDATE(),
				CM.[ModifiedBy_Name]	=	@p_var_User_Id

	WHEN NOT MATCHED THEN
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,SRC.COMPLAINTCOMMENT);
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData_Balance_info]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================


CREATE PROCEDURE[dbo].[USP_Insert_PatientVisitData_Balance_info]

@p_var_Insert_PatientComplaintData		UDT_Insert_PatientComplaints READONLY,
	@p_var_Insert_PatientDiagnosisData		UDT_Insert_PatientDiagnosis READONLY,
	@p_var_Insert_PatientDressingData		UDT_Insert_PatientDressingData READONLY,
	@p_var_Insert_PatientMedicineData		UDT_Insert_PatientMedicineData_Doctor READONLY,
	@p_var_Insert_PatientPrescriptionData	UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
		@p_var_Insert_Schedule               	UDT_Insert_PatientSchedule READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_Smoking								BIT,
	@p_var_Tobaco								BIT,
	@p_var_Alchohol								BIT,
	@p_var_Habit_Details						NVARCHAR(1000),
	@p_var_Allergy_Details						NVARCHAR(1000),
	--@p_var_Observation							NVARCHAR(1000),
	@p_bit_In_Person							BIT,
	@p_var_sugar								NVARCHAR(100),
	@p_var_THtext								NVARCHAR(100),
	@p_var_offline_reason						NVARCHAR(1000),
	@p_bit_offlineflag							BIT,
	--@p_var_Symptom_Comment						NVARCHAR(1000),
	@p_var_Fees_Paid							DECIMAL(10,2),
	--@p_var_Reason								NVARCHAR(1000),
	@p_var_Insert_PatientProcedureData			UDT_Insert_PatientProcedureData READONLY,
	@p_var_Impression							NVARCHAR(1000),
	@p_var_Attended_By							NVARCHAR(32),
	--@p_var_PaymentBy_ID							INT,
	--@p_var_Payment_Remark						NVARCHAR(1000),
	@p_var_AttendedBy_ID							INT,
	@p_var_Follow_Up							NVARCHAR(100),
	@p_var_Insert_PatientInstructionData		UDT_Insert_PatientInstructionData READONLY,
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),

	--@p_var_TPR									NVARCHAR(10),
	@p_var_Important_Findings					NVARCHAR(1000),
	@p_var_Additional_Comments					NVARCHAR(1000),
	--@p_var_Systemic								NVARCHAR(30),
	--@p_var_Odeama								NVARCHAR(10),
	@p_var_Pallor								NVARCHAR(10),
	@p_var_GC									NVARCHAR(20),
	@p_var_Insert_AbdominalData					UDT_Insert_Abdominal_Exam_Findings_Data READONLY,

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),

	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,
	@p_var_Pregnant                             BIT,
	@p_var_EDD							   DATETIME,
	@p_var_planbalance						NVARCHAR(1000),
	@p_var_notesbalance						NVARCHAR(1000),
	@p_var_FollowUpAfter				INT,
	
	@p_var_Impression_finding		INT,

	@p_var_Discount					DECIMAL(10,2),
	@p_var_Original_Discount					DECIMAL(10,2),
	
	@Is_Submit_Patient_Visit_Details bit,
	
	@p_var_PaymentBy_ID							INT,
	@p_var_Payment_Remark						NVARCHAR(1000),
   @p_var_Reason								NVARCHAR(1000),
   @p_dec_feess							DECIMAL(10,2)

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	
	 IF(@p_var_EDD = '')
	  BEGIN
         SET @p_var_EDD = NULL;
	  END

	 IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END
	   IF(@p_var_FollowUpAfter = 0)
	  BEGIN
         SET @p_var_FollowUpAfter = NULL;
	  END
	 
	  UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_dec_feess ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							--Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							--Symptom_Comment			= @p_var_Symptom_Comment,
							--Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							--[Payment_By_ID]			= @p_var_PaymentBy_ID,
							--[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							[Treatment_comment]			=   @p_var_planbalance,
							[Treatment_plan]				=   @p_var_notesbalance,
							[Followup_After]=@p_var_FollowUpAfter,
							[Impression_Finding]=@p_var_Impression_finding,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details
	  ,[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
								Comment					= @p_var_Reason

			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	

	-- BEGIN TRANSACTION

			--INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			--SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
   --         FROM			@p_var_Insert_PatientComplaintData
   		

	 delete from Visit_Schedule where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
	 	   INSERT INTO	Visit_Schedule(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_Schedule
			--INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			--SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
   --         FROM			@p_var_Insert_PatientComplaintData

	      delete from Visit_Diagnosis where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
			INSERT INTO		Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDiagnosisData

			delete from Visit_Dressing where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
			INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
		    SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDressingData

			 delete from Visit_Medicine where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
			INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData
			
			 delete from Visit_Prescription where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID	
			INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_Id)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
			                 ((select max (ISNULL(Sequence_Id,0)) from Visit_Prescription) + ROW_NUMBER() over (order by (select 1)))
			FROM			@p_var_Insert_PatientPrescriptionData
			
			INSERT INTO [dbo].[Complaint_Master] ([Short_Description],[Complaint_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Complaint_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientComplaintData CType LEFT JOIN [dbo].[Complaint_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO [dbo].[Diagnosis_Master] ([Short_Description],[Diagnosis_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Desease_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientDiagnosisData CType LEFT JOIN [dbo].[Diagnosis_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL


			INSERT INTO		Visit_Procedure_Findings(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,[Findings_Comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,Impression,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_PatientProcedureData

			delete from Visit_Groups_Instructions where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO		Visit_Groups_Instructions(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,[Group_Description],[Instructions_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_No)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Group_Description,Instructions_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,Sequence_No
			FROM			@p_var_Insert_PatientInstructionData

			INSERT INTO		[dbo].[Visit_Abdominal_Examination_Findings](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_AbdominalData

			

				UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_dec_feess ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							--Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							--Symptom_Comment			= @p_var_Symptom_Comment,
							--Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							--[Payment_By_ID]			= @p_var_PaymentBy_ID,
							--[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							[Treatment_comment]			=   @p_var_planbalance,
							[Treatment_plan]				=   @p_var_notesbalance,
							[Followup_After]=@p_var_FollowUpAfter,
							[Impression_Finding]=@p_var_Impression_finding,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details
							,[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
								Comment					= @p_var_Reason

			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	
			 
			IF(@p_var_Status_ID = 5)
			 BEGIN
			   UPDATE        [dbo].[Patient_Visits]  
				SET	          Status_Id					= @p_var_Status_ID,
				              --Fees_Collected			= 0 
							  Fees_Collected			= @p_dec_feess
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_ID 
				AND			  Clinic_ID					= @p_var_Clinic_ID 
				AND			  Doctor_ID					= @p_var_Doctor_ID 
				AND			  Patient_ID				= @p_var_Patient_ID
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	ID				   = @p_var_Patient_ID
				--Doctor_ID			   = @p_var_Doctor_ID 
				--AND	  
				
			 END  

			 /***************************************Add Or Update Complaints**********************************************/

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]		AS COMPLAINTCOMMENT
							
							
			FROM	@p_var_Insert_PatientComplaintData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMPLAINTCOMMENT
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]	=	SRC.COMPLAINTCOMMENT,	
				CM.[Delete_Flag]		=	0,
				CM.[Modified_On]		=	GETDATE(),
				CM.[ModifiedBy_Name]	=	@p_var_User_Id

	WHEN NOT MATCHED THEN
			
		INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,SRC.COMPLAINTCOMMENT);
                    
		--COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
		--	ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PatientVisitData_Patientprofile]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

CREATE PROCEDURE[dbo].[USP_Insert_PatientVisitData_Patientprofile]
	@p_var_Insert_PatientComplaintData		UDT_Insert_PatientComplaints READONLY,
	@p_var_Insert_PatientDiagnosisData		UDT_Insert_PatientDiagnosis READONLY,
	@p_var_Insert_PatientDressingData		UDT_Insert_PatientDressingData READONLY,
	@p_var_Insert_PatientMedicineData		UDT_Insert_PatientMedicineData_Doctor READONLY,
	@p_var_Insert_PatientPrescriptionData	UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Insert_Schedule               	UDT_Insert_PatientSchedule READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_Smoking								BIT,
	@p_var_Tobaco								BIT,
	@p_var_Alchohol								BIT,
	@p_var_Habit_Details						NVARCHAR(1000),
	@p_var_Allergy_Details						NVARCHAR(1000),
	@p_var_Observation							NVARCHAR(1000),
	@p_bit_In_Person							BIT,
	@p_var_sugar								NVARCHAR(100),
	@p_var_THtext								NVARCHAR(100),
	@p_var_offline_reason						NVARCHAR(1000),
	@p_bit_offlineflag							BIT,
	@p_var_Symptom_Comment						NVARCHAR(1000),
	@p_var_Fees_Paid							DECIMAL(10,2),
	@p_var_Reason								NVARCHAR(1000),
	@p_var_Insert_PatientProcedureData			UDT_Insert_PatientProcedureData READONLY,
	@p_var_Impression							NVARCHAR(1000),
	@p_var_Attended_By							NVARCHAR(32),
	@p_var_PaymentBy_ID							INT,
	@p_var_Payment_Remark						NVARCHAR(1000),
	@p_var_AttendedBy_ID							INT,
	@p_var_Follow_Up							NVARCHAR(100),
	@p_var_Insert_PatientInstructionData		UDT_Insert_PatientInstructionData READONLY,
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),

	--@p_var_TPR									NVARCHAR(10),
	@p_var_Important_Findings					NVARCHAR(1000),
	@p_var_Additional_Comments					NVARCHAR(1000),
	--@p_var_Systemic								NVARCHAR(30),
	--@p_var_Odeama								NVARCHAR(10),
	@p_var_Pallor								NVARCHAR(10),
	@p_var_GC									NVARCHAR(20),
	@p_var_Insert_AbdominalData					UDT_Insert_Abdominal_Exam_Findings_Data READONLY,

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),

	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,
	@p_var_Pregnant                             BIT,
	@p_var_EDD							   DATETIME,

	@p_var_FollowUpAfter				INT,
	--@p_var_Schedule					INT,
	@p_var_AdditionalInst					NVARCHAR(1000),
	@p_var_Discount					DECIMAL(10,2),
	@p_var_Original_Discount					DECIMAL(10,2),
	@Is_Submit_Patient_Visit_Details bit

	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 IF(@p_var_EDD = '')
	  BEGIN
         SET @p_var_EDD = NULL;
	  END

	 IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END

	  IF(@p_var_FollowUpAfter = 0)
	  BEGIN
         SET @p_var_FollowUpAfter = NULL;
	  END

	 --  IF(@p_var_Schedule = 0)
	 -- BEGIN
      --   SET @p_var_Schedule = NULL;
	 -- END

	 BEGIN TRANSACTION

			--INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			--SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
   --         FROM			@p_var_Insert_PatientComplaintData
	 
			INSERT INTO	Visit_Schedule(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_Schedule


			INSERT INTO		Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDiagnosisData

			INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
		    SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDressingData

			INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData

			INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_Id)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
			                 ((select max (ISNULL(Sequence_Id,0)) from Visit_Prescription) + ROW_NUMBER() over (order by (select 1)))
			FROM			@p_var_Insert_PatientPrescriptionData
			
			INSERT INTO [dbo].[Complaint_Master] ([Short_Description],[Complaint_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Complaint_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientComplaintData CType LEFT JOIN [dbo].[Complaint_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO [dbo].[Diagnosis_Master] ([Short_Description],[Diagnosis_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Desease_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientDiagnosisData CType LEFT JOIN [dbo].[Diagnosis_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO		Visit_Procedure_Findings(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,[Findings_Comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,Impression,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_PatientProcedureData

			INSERT INTO		Visit_Groups_Instructions(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,[Group_Description],[Instructions_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_No)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Group_Description,Instructions_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,Sequence_No
			FROM			@p_var_Insert_PatientInstructionData

			INSERT INTO		[dbo].[Visit_Abdominal_Examination_Findings](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_AbdominalData

			UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_var_Fees_Paid ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							Symptom_Comment			= @p_var_Symptom_Comment,
							Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							[Followup_After]=@p_var_FollowUpAfter,
							--[Schedule]		=	@p_var_Schedule	,			
							[Additional_Instructions]	=@p_var_AdditionalInst,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details



			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	
			 
			IF(@p_var_Status_ID = 5)
			 BEGIN
			   UPDATE        [dbo].[Patient_Visits]  
				SET	          Status_Id					= @p_var_Status_ID,
				              --Fees_Collected			= 0 
							  Fees_Collected			= @p_var_Fees_Paid
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_ID 
				AND			  Clinic_ID					= @p_var_Clinic_ID 
				AND			  Doctor_ID					= @p_var_Doctor_ID 
				AND			  Patient_ID				= @p_var_Patient_ID
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	ID				   = @p_var_Patient_ID
				--Doctor_ID			   = @p_var_Doctor_ID 
				--AND	  
				
			 END  

			 /***************************************Add Or Update Complaints**********************************************/

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]		AS COMPLAINTCOMMENT
							
							
			FROM	@p_var_Insert_PatientComplaintData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMPLAINTCOMMENT
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]	=	SRC.COMPLAINTCOMMENT,	
				CM.[Delete_Flag]		=	0,
				CM.[Modified_On]		=	GETDATE(),
				CM.[ModifiedBy_Name]	=	@p_var_User_Id

	WHEN NOT MATCHED THEN
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,SRC.COMPLAINTCOMMENT);
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PharmacyBillReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_PharmacyBillReceiptDetails]
	@Todays_VisitDate																		DATETIME,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Receipt_Data		[dbo].[UDT_Insert_Receipt_Hospital_Details]				READONLY,
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	--@p_var_Patient_Visit_No																int,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)	,						
	@p_var_Bill_No																			NVARCHAR(30)
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN


	----------Generate sequence no. of receipt no.---------------

	IF NOT EXISTS 
		(	SELECT	*
			FROM	Patient_IPD_Receipts
			WHERE	Receipt_Date	=	@Todays_VisitDate
			AND		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		Shift_ID		=	@p_var_Shift_ID
			AND		Receipt_Type	=	@p_var_Receipt_Type
			AND		ISNULL(Visit_Type,'')		=	@p_var_Visit_Type	
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE  [Clinic_ID] = @p_var_Clinic_ID

			and entity_type = 'IRC'

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = 'I-' + CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE  [Clinic_ID] = @p_var_Clinic_ID
					  and entity_type = 'IRC'
			END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------



	------Add and Update Receipt Details--------------------

	

	 MERGE  [dbo].[Patient_IPD_Receipts] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Receipt_Number]			AS RECEIPT_NO,
					 [Receipt_Date]				AS RECEIPT_DATE,
					 [Receipt_Type]				AS RECEIPT_TYPE,
					 [Receipt_Amount]			AS RECEIPT_AMOUNT,
					 [Shift_ID]					AS SHIFT_ID
	
			FROM	@p_var_Insert_Receipt_Data 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,RECEIPT_NO,RECEIPT_DATE,RECEIPT_TYPE,RECEIPT_AMOUNT,SHIFT_ID
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[Receipt_Number]			=SRCREM.RECEIPT_NO	AND
				MR.[Shift_ID]				=SRCREM.SHIFT_ID
				
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		--MR.[Receipt_Type]			= SRCREM.RECEIPT_TYPE,
				MR.[Receipt_Amount]			= SRCREM.RECEIPT_AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				MR.[Treatment_Details]		= @p_var_TreatmentDetails,
				MR.Title					= @p_var_Title,
				MR.[From_Date]				= @p_var_from_date,
				MR.[To_Date]				= @p_var_to_date

				
				

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type]
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,CONVERT(date,@Todays_VisitDate),@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type
		);
		

		IF @p_var_Visit_Type='B'

		BEGIN
			UPDATE [dbo].[Discharge_Invoice_Hdr]  set	[Receipt_Number]=@p_var_Receipt_No
													

			WHERE	--CONVERT(DATE,[P])=@Todays_VisitDate
					Doctor_ID=@p_var_Doctor_ID
			AND		Clinic_ID=@p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			and     Invoice_No =@p_var_Bill_No
				
		END

	
	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_Receipt_No AS Receipt_No

END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_Regenerate]    Script Date: 16-Jan-18 8:30:35 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Prescription_Medicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 29-Aug-2016
-- Description	: This stored procedure will insert and update the prescription medicine in Prescription_Medicine
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Prescription_Medicine]	
	@p_var_CatShortDescription																NVARCHAR(60),
	@p_var_CatSubDescription																NVARCHAR(200),
	@p_var_MedicineName																		NVARCHAR(200),
	@p_var_Brandname																		NVARCHAR(200),
	@p_var_MarketedBy																		NVARCHAR(200),
	@p_var_Isactive																			BIT,
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Prescription_Data		[dbo].[UDT_Insert_PrescriptionMedicine_TableType]	READONLY,
	@p_var_priority																			INT,
	@p_var_Morning																			Float,
	@p_var_Afternoon																		Float,
	@p_var_Night																			Float,
	@p_var_No_Of_Days																		INT,
	@p_var_Instructions																		NVARCHAR(4000),
	@p_var_DoctorID																			NVARCHAR(30)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 SELECT DISTINCT [Old_Cat_Short_Name] AS OLD_CAT_NAME,
					 [Old_CatSubDescription] AS OLD_SUB_CAT,
					 [Old_Medicine_Name] AS OLD_MEDICINE,
					 [Old_Brand_Name] AS OLD_BRAND,
					 [Old_Marketed_By] AS OLD_MARKETEDBY,
					 [Old_Priority_Value] AS OLD_PRIORITY,
					 [Old_Morning] AS OLD_MORNING,
					 [Old_Afternoon] AS OLD_AFTERNOON,
					 [Old_Night] AS OLD_NIGHT,
					 [Old_No_Of_Days] AS OLD_NO_OF_DAYS,
					 [Old_Instruction] AS OLD_INSTRUCTION,
					 [New_Cat_Short_Name] AS NEW_CAT_NAME,
					 [New_CatSubDescription] AS NEW_SUB_CAT,
					 [New_Medicine_Name] AS NEW_MEDICINE,
					 [New_Brand_Name] AS NEW_BRAND,
					 [New_Marketed_By] AS NEW_MARKETEDBY,
					 [New_Priority_Value] AS NEW_PRIORITY,
					 [New_Morning] AS NEW_MORNING,
					 [New_Afternoon] AS NEW_AFTERNOON,
					 [New_Night] AS NEW_NIGHT,
					 [New_No_Of_Days] AS NEW_NO_OF_DAYS,
					 [New_Instruction] AS NEW_INSTRUCTION
	 FROM			 @p_var_Insert_Prescription_Data

	 MERGE [Prescription_Medicines] as PM

	 USING(
			SELECT DISTINCT [Old_Cat_Short_Name] AS OLD_CAT_NAME,
			[Old_CatSubDescription] AS OLD_SUB_CAT,
			[Old_Medicine_Name] AS OLD_MEDICINE,
			[Old_Brand_Name] AS OLD_BRAND,
			[Old_Marketed_By] AS OLD_MARKETEDBY,
			[Old_Priority_Value] AS OLD_PRIORITY,
			[Old_Morning] AS OLD_MORNING,
			[Old_Afternoon] AS OLD_AFTERNOON,
			[Old_Night] AS OLD_NIGHT,
			[Old_No_Of_Days] AS OLD_NO_OF_DAYS,
			[Old_Instruction] AS OLD_INSTRUCTION,
			[New_Cat_Short_Name] AS NEW_CAT_NAME,
			[New_CatSubDescription] AS NEW_SUB_CAT,
			[New_Medicine_Name] AS NEW_MEDICINE,
			[New_Brand_Name] AS NEW_BRAND,
			[New_Marketed_By] AS NEW_MARKETEDBY,
			[New_Priority_Value] AS NEW_PRIORITY,
			[New_Morning] AS NEW_MORNING,
			[New_Afternoon] AS NEW_AFTERNOON,
			[New_Night] AS NEW_NIGHT,
			[New_No_Of_Days] AS NEW_NO_OF_DAYS,
			[New_Instruction] AS NEW_INSTRUCTION
			from @p_var_Insert_Prescription_Data 
		  )
	
	 AS	 SRC (
				OLD_CAT_NAME, OLD_SUB_CAT,OLD_MEDICINE,OLD_BRAND,OLD_MARKETEDBY,OLD_PRIORITY,OLD_MORNING,OLD_AFTERNOON,OLD_NIGHT,OLD_NO_OF_DAYS,OLD_INSTRUCTION,
				NEW_CAT_NAME,NEW_SUB_CAT,NEW_MEDICINE,NEW_BRAND,NEW_MARKETEDBY,NEW_PRIORITY,NEW_MORNING,NEW_AFTERNOON,NEW_NIGHT,NEW_NO_OF_DAYS,NEW_INSTRUCTION
			 )
	 ON		 (
				PM.Cat_Short_Name				= SRC.OLD_CAT_NAME AND
				PM.CatSub_Description			= SRC.OLD_SUB_CAT  AND
				PM.Medicine_Name				= SRC.OLD_MEDICINE	AND
				PM.Brand_Name					= SRC.OLD_BRAND	AND
		 		ISNULL(PM.Marketed_By,'') 		= SRC.OLD_MARKETEDBY AND
				ISNULL(PM.Priority_Value,'') 	= SRC.OLD_PRIORITY	AND
				ISNULL(PM.Morning,'')			= SRC.OLD_MORNING	AND
				ISNULL(PM.Afternoon,'')			= SRC.OLD_AFTERNOON	AND
				ISNULL(PM.Night,'')				= SRC.OLD_NIGHT	AND
				ISNULL(PM.No_Of_Days,'')		= SRC.OLD_NO_OF_DAYS	AND
				ISNULL(PM.Instruction,'')		= SRC.OLD_INSTRUCTION	AND
				PM.DOCTOR_ID					= @p_var_DoctorID
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	PM.Cat_Short_Name		= SRC.NEW_CAT_NAME,
			PM.CatSub_Description	= SRC.NEW_SUB_CAT,	
			PM.Medicine_Name		= SRC.NEW_MEDICINE,
			PM.Brand_Name			= SRC.NEW_BRAND,
			PM.Marketed_By			= ISNULL(SRC.NEW_MARKETEDBY,''),
			PM.Priority_Value		= SRC.NEW_PRIORITY,
			PM.Morning				= ISNULL(SRC.NEW_MORNING,''),	
			PM.Afternoon			=  ISNULL(SRC.NEW_AFTERNOON,''),	
			PM.Night				= ISNULL(SRC.NEW_NIGHT,''),
			PM.No_Of_Days			=  ISNULL(SRC.NEW_NO_OF_DAYS,''),
			PM.Instruction			=  ISNULL(SRC.NEW_INSTRUCTION,''),
			PM.Active				= @p_var_Isactive

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
				 Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Active,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction,DOCTOR_ID
				)
	VALUES
				(	@p_var_CatShortDescription,@p_var_CatSubDescription,@p_var_MedicineName,@p_var_Brandname,@p_var_MarketedBy,@p_var_Isactive,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority,@p_var_Morning,@p_var_Afternoon,@p_var_Night,@p_var_No_Of_Days,@p_var_Instructions,@p_var_DoctorID);


 END











GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PrescriptionData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =======================================================================
-- Author     : INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert into Visit_Prescription
-- Created By : Nilesh Wani
-- ========================================================================
CREATE PROCEDURE [dbo].[USP_Insert_PrescriptionData]

	@p_var_Insert_PatientPrescriptionData UDT_Insert_PatientPrescriptionData READONLY,
	@p_var_User_Id  NVARCHAR(32)

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

			INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
			FROM			@p_var_Insert_PatientPrescriptionData
	
	 END TRY
     BEGIN CATCH

			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    
	 END CATCH
     
 END



















/****** Object:  StoredProcedure [dbo].[USP_Insert_Procedure]    Script Date: 16-Jan-18 8:29:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_PrescriptionMedicine]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 21-June-2016
-- Description	: This stored procedure will insert the prescription medicine in Prescription_Medicine
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_PrescriptionMedicine]	
	@p_var_CatShortDescription NVARCHAR(60),
	@p_var_CatSubDescription NVARCHAR(200),
	@p_var_MedicineName NVARCHAR(200),
	@p_var_Brandname NVARCHAR(200),
	@p_var_MarketedBy NVARCHAR(200),
	@p_var_Isactive BIT,
	@p_var_User_Id NVARCHAR(90)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   IF NOT EXISTS (
						   SELECT * FROM [dbo].[Prescription_Medicines] PC 
						   WHERE  PC.Cat_Short_Name		  = @p_var_CatShortDescription	
						   AND    PC.CatSub_Description	  =	@p_var_CatSubDescription
						   AND	  PC.Medicine_Name		  =	@p_var_MedicineName
						   AND	  PC.Brand_Name			  = @p_var_Brandname
						   
										    
						  )
		  BEGIN 
			 INSERT INTO [dbo].[Prescription_Medicines]
			                    (
						          Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Active,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name
								)
			 VALUES   (	@p_var_CatShortDescription,@p_var_CatSubDescription,@p_var_MedicineName,@p_var_Brandname,@p_var_MarketedBy,@p_var_Isactive,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id)	
			 END			
	       	ELSE
			BEGIN
			UPDATE [dbo].[Prescription_Medicines] 
			 SET		Cat_Short_Name		 = @p_var_CatShortDescription,		  
			   	        CatSub_Description   = @p_var_CatSubDescription,
						Medicine_Name		 = @p_var_MedicineName,
						Brand_Name			 = @p_var_Brandname,
						Marketed_By			 = @p_var_MarketedBy,
						Active				 = @p_var_Isactive
						
			 WHERE  Cat_Short_Name		  = @p_var_CatShortDescription	
		     AND    CatSub_Description	  =	@p_var_CatSubDescription
			 AND	Medicine_Name		  =	@p_var_MedicineName
		     AND    Brand_Name			  = @p_var_Brandname
			
		  END
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails]    Script Date: 16-Jan-18 8:30:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Procedure]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the Procedure in Doctor_Procedure_Master table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Procedure]
	
	@p_var_ProcedureDescription NVARCHAR(100),
	@p_var_User_Id				NVARCHAR(90),
	@p_var_Doctor_ID			NVARCHAR(30),
	@p_var_priority_proc		INT,
	@p_var_priority_finding		INT,
	@p_var_Insert_FindingData		[dbo].[UDT_Insert_Procedure_And_Findings]	READONLY



 AS


 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		--   IF NOT EXISTS (
		--				   SELECT * FROM Doctor_Procedure_Master PC
		--				   WHERE  PC.Procedure_Description	= @p_var_ProcedureDescription			   
							
										    
		--				  )
		--  BEGIN 
		--	 INSERT INTO Doctor_Procedure_Master
		--	                    (
		--				          Doctor_ID,Procedure_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value
		--						)
		--	 VALUES   (	@p_var_Doctor_ID,@p_var_ProcedureDescription,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority)	
		--	 END			
	 --      	ELSE
		--	BEGIN
		--	UPDATE		Doctor_Procedure_Master
		--	 SET		Procedure_Description		 = @p_var_ProcedureDescription,		  
		--	   	        Priority_Value = @p_var_priority 
		--	WHERE		Procedure_Description		 = @p_var_ProcedureDescription			   
		--	SELECT 1 AS SAVE_STATUS
		--  END
		 
		--END TRY
		--BEGIN CATCH
		--	SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 --   END CATCH  

	 select DISTINCT [Old_Procedure] AS OLD_DESCRIPTION,[New_Procedure] AS NEW_DESCRIPTION,[Old_Priority_Procedure] AS OLD_PRIORITY,[New_Priority_Procedure] AS NEW_PRIORITY,[Old_Priority_Finding] AS OLD_FIND_PRIORITY,[New_Priority_Finding] AS NEW_FIND_PRIORITY from @p_var_Insert_FindingData

	MERGE  [dbo].[Doctor_Procedure_Master]  as TGT

	USING(
		  select DISTINCT [Old_Procedure] AS OLD_DESCRIPTION,[New_Procedure] AS NEW_DESCRIPTION,[Old_Priority_Procedure] AS OLD_PRIORITY,[New_Priority_Procedure] AS NEW_PRIORITY,[Old_Priority_Finding] AS OLD_FIND_PRIORITY,[New_Priority_Finding] AS NEW_FIND_PRIORITY from @p_var_Insert_FindingData
		 )
	AS	 SRC (
		 OLD_DESCRIPTION, NEW_DESCRIPTION, OLD_PRIORITY, NEW_PRIORITY,OLD_FIND_PRIORITY,NEW_FIND_PRIORITY
		 )
	ON	 (
		 TGT.[Procedure_Description]=SRC.OLD_DESCRIPTION 
		
		 )
	WHEN MATCHED THEN
	UPDATE 
	SET TGT.[Procedure_Description] = SRC.NEW_DESCRIPTION,

		TGT.Priority_Value=SRC.NEW_PRIORITY
	
	
	WHEN NOT MATCHED THEN
		
	INSERT 
				(Doctor_ID,
				[Procedure_Description],
				Created_On,
				CreatedBy_Name,
				Modified_On,
				ModifiedBy_Name,
				Priority_Value)
	VALUES
				(@p_var_Doctor_ID,
				SRC.NEW_DESCRIPTION,
				GetDate(),
				@p_var_User_Id,
				GetDate(),
				@p_var_User_Id,
				ISNULL(@p_var_priority_proc,9));

		
			
	
		 
		BEGIN 
		
		IF EXISTS(SELECT [Findings_Description] FROM @p_var_Insert_FindingData)
		BEGIN

		INSERT INTO [dbo].[Doctor_Procedure_Findings]
			                    (
						         Doctor_ID,[Procedure_Description],[Findings_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value
								)
		
		SELECT  @p_var_Doctor_ID,@p_var_ProcedureDescription,[Findings_Description],GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority_finding
		
		FROM @p_var_Insert_FindingData

		WHERE [Findings_Description] IS NOT NULL
		END
		
		
		END
		
		END TRY
		BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_PrescriptionMedicine]    Script Date: 16-Jan-18 8:29:48 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_ReceiptDetails]
	@Todays_VisitDate																		DATETIME,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Receipt_Data		[dbo].[UDT_Insert_Receipt_Details]						READONLY,
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	--@p_var_Patient_Visit_No																	int,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)							
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN



	----------Generate sequence no. of receipt no.---------------

	IF NOT EXISTS 
		(	SELECT	*
			FROM	Patient_Receipts
			WHERE	Receipt_Date	=	@Todays_VisitDate
			AND		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		Shift_ID		=	@p_var_Shift_ID
			AND		Receipt_Type	=	@p_var_Receipt_Type
			AND		ISNULL(Visit_Type,'')		=	@p_var_Visit_Type	
		)

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
					    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length
    		FROM   [dbo].[Sequence_Nos_Clinic]
			WHERE  [Clinic_ID] = @p_var_Clinic_ID
			and 	entity_type = 'RCT'

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
				END

				SET @NVAR_FENERATEFY= CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				SET @p_var_Receipt_No = CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				SET @p_var_Receipt_No = @p_var_Receipt_No

				UPDATE [dbo].[Sequence_Nos_Clinic]
					SET Last_SequenceNo = @bintLastSequenceNoFld
					WHERE  [Clinic_ID] = @p_var_Clinic_ID
				  	and entity_type = 'RCT'
			END          
	        
	    END

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------
	------ Add and Update Receipt Details --------------------

	 MERGE  [dbo].[Patient_Receipts] as MR
	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Receipt_Number]			AS RECEIPT_NO,
					 [Receipt_Date]				AS RECEIPT_DATE,
					 [Receipt_Type]				AS RECEIPT_TYPE,
					 [Receipt_Amount]			AS RECEIPT_AMOUNT,
					 [Shift_ID]					AS SHIFT_ID
			FROM	@p_var_Insert_Receipt_Data 
		  )
		 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,RECEIPT_NO,RECEIPT_DATE,RECEIPT_TYPE,RECEIPT_AMOUNT,SHIFT_ID
			 )
	 ON		 (
				MR.[Doctor_ID]				=	SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=	SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=	SRCREM.PATIENT_ID	AND
				MR.[Receipt_Number]			=	SRCREM.RECEIPT_NO	AND
				MR.[Shift_ID]				=	SRCREM.SHIFT_ID
			 )
	 WHEN MATCHED THEN
	 UPDATE 
	 SET		--MR.[Receipt_Type]			= SRCREM.RECEIPT_TYPE,
				MR.[Receipt_Amount]			= SRCREM.RECEIPT_AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				MR.[Treatment_Details]		= @p_var_TreatmentDetails,
				MR.Title					= @p_var_Title,
				MR.[From_Date]				= @p_var_from_date,
				MR.[To_Date]				= @p_var_to_date
	WHEN NOT MATCHED THEN
	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type]
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,CONVERT(date,@Todays_VisitDate),@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type
		);

		IF @p_var_Visit_Type='A'
		BEGIN
			UPDATE [dbo].[Patient_Payments_AdHoc]  set	[Receipt_Number]=@p_var_Receipt_No,
														[Receipt_Type]=@p_var_Receipt_Type	
			WHERE	CONVERT(DATE,[Payment_Date])=@Todays_VisitDate
			AND		Doctor_ID=@p_var_Doctor_ID
			AND		Clinic_ID=@p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			AND		Shift_ID=@p_var_Shift_ID
		END
		ELSE
		BEGIN
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) > 0 OR (@p_var_Receipt_No <> ''))
			BEGIN
				UPDATE  [dbo].[Patient_Visits] set	[Receipt_Number]=@p_var_Receipt_No,
													[Receipt_Type]=@p_var_Receipt_Type
				WHERE	Visit_Date=@Todays_VisitDate
				AND		Doctor_ID=@p_var_Doctor_ID
				AND		Clinic_ID=@p_var_Clinic_ID
				AND		Patient_ID=@p_var_Patient_ID
				AND		Shift_ID=@p_var_Shift_ID
			END	
		END
	
	SELECT 1 AS SAVE_STATUS

	BEGIN
		DELETE FROM [dbo].[Patient_Receipts] 
		WHERE	Doctor_ID=@p_var_Doctor_ID
		AND		Clinic_ID=@p_var_Clinic_ID
		AND		Patient_ID=@p_var_Patient_ID
		AND		Shift_ID=@p_var_Shift_ID
		AND		Receipt_number = ''
	END

	IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) > 0 OR (@p_var_Receipt_No <> ''))
	BEGIN
		SELECT @p_var_Receipt_No AS Receipt_No
	END
END
	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   	 END CATCH
 END
GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_Receipt]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_ReceiptDetails_Receipt]
	@Todays_VisitDate																		DATETIME,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Receipt_Data		[dbo].[UDT_Insert_Receipt_Details]						READONLY,
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	--@p_var_Patient_Visit_No																	int,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1),
	@p_nvar_pvisitno																		int													
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
	 
	 SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN



	----------Generate sequence no. of receipt no.---------------

	IF NOT EXISTS 
		(	--SELECT	*
		--	FROM	Patient_Receipts
		--	WHERE	Receipt_Date	=	@Todays_VisitDate
		--	AND		Doctor_ID		=	@p_var_Doctor_ID
		--	AND		Clinic_ID		=	@p_var_Clinic_ID
		--	AND		Patient_ID		=	@p_var_Patient_ID
		--	AND		Shift_ID		=	@p_var_Shift_ID
			--AND		Receipt_Type	=	@p_var_Receipt_Type
			--AND		ISNULL(Visit_Type,'')		=	@p_var_Visit_Type	
		--	AND		Patient_Visit_No			=	@p_nvar_pvisitno -- 2018-02-25

			  SELECT *  from Patient_Receipts rs
			  LEFT JOIN Patient_Visits pv   
			    on  pv.Receipt_Number=rs.Receipt_Number
			WHERE	Receipt_Date	=	@Todays_VisitDate
			AND		rs.Doctor_ID		=	@p_var_Doctor_ID
			AND		rs.Clinic_ID		=	@p_var_Clinic_ID
			AND		rs.Patient_ID		=	@p_var_Patient_ID
			AND		rs.Shift_ID		=	@p_var_Shift_ID
		--	AND		Receipt_Type	=	@p_var_Receipt_Type
			--AND		ISNULL(Visit_Type,'')		=	@p_var_Visit_Type	
			AND		pv.Patient_Visit_No			=	@p_nvar_pvisitno -- 2018-02-25
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			--IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			--BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE  [Clinic_ID] = @p_var_Clinic_ID
			and entity_type = 'RCT'

			

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE  [Clinic_ID] = @p_var_Clinic_ID
					 -- AND  [Doctor_ID] = @p_var_Doctor_ID
					 	and entity_type = 'RCT'
			--END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------



	------Add and Update Receipt Details--------------------

	

	 MERGE  [dbo].[Patient_Receipts] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Receipt_Number]			AS RECEIPT_NO,
					 [Receipt_Date]				AS RECEIPT_DATE,
					 [Receipt_Type]				AS RECEIPT_TYPE,
					 [Receipt_Amount]			AS RECEIPT_AMOUNT,
					 [Shift_ID]					AS SHIFT_ID
							
			FROM	@p_var_Insert_Receipt_Data 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,RECEIPT_NO,RECEIPT_DATE,RECEIPT_TYPE,RECEIPT_AMOUNT,SHIFT_ID
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[Receipt_Number]			=SRCREM.RECEIPT_NO	AND
				MR.[Shift_ID]				=SRCREM.SHIFT_ID	--AND
				--MR.Patient_Visit_No			= @p_nvar_pvisitno
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		--MR.[Receipt_Type]			= SRCREM.RECEIPT_TYPE,
				MR.[Receipt_Amount]			= SRCREM.RECEIPT_AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				MR.[Treatment_Details]		= @p_var_TreatmentDetails,
				MR.Title					= @p_var_Title,
				MR.[From_Date]				= @p_var_from_date,
				MR.[To_Date]				= @p_var_to_date

				
				

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type],Patient_Visit_No
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,CONVERT(date,@Todays_VisitDate),@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type,@p_nvar_pvisitno
		);
		

		IF @p_var_Visit_Type='A'
		BEGIN
			UPDATE [dbo].[Patient_Payments_AdHoc]  set	[Receipt_Number]=@p_var_Receipt_No,
														[Receipt_Type]=@p_var_Receipt_Type	
			WHERE	CONVERT(DATE,[Payment_Date])=@Todays_VisitDate
			AND		Doctor_ID=@p_var_Doctor_ID
			AND		Clinic_ID=@p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			AND		Shift_ID=@p_var_Shift_ID
		END
		ELSE
		BEGIN
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) > 0 OR (@p_var_Receipt_No <> ''))
			BEGIN
				UPDATE  [dbo].[Patient_Visits] set	[Receipt_Number]=@p_var_Receipt_No,
													[Receipt_Type]=@p_var_Receipt_Type
				WHERE	Visit_Date=@Todays_VisitDate
				AND		Doctor_ID=@p_var_Doctor_ID
				AND		Clinic_ID=@p_var_Clinic_ID
				AND		Patient_ID=@p_var_Patient_ID
				AND		Shift_ID=@p_var_Shift_ID
			END	
		END
	
	SELECT 1 AS SAVE_STATUS

	BEGIN
		DELETE FROM [dbo].[Patient_Receipts] 
		WHERE	Doctor_ID=@p_var_Doctor_ID
		AND		Clinic_ID=@p_var_Clinic_ID
		AND		Patient_ID=@p_var_Patient_ID
		AND		Shift_ID=@p_var_Shift_ID
		AND		Receipt_number = ''
	END

	IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) > 0 OR (@p_var_Receipt_No <> ''))
	BEGIN
		SELECT @p_var_Receipt_No AS Receipt_No
	END
END
	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   	 END CATCH
 END 		
		 	









GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_Receipt_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_ReceiptDetails_Receipt_Services]
	@Todays_VisitDate																		DATETIME,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Receipt_Data		[dbo].[UDT_Insert_Receipt_BillServices]						READONLY,
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	--@p_var_Patient_Visit_No																	int,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1),
	@p_nvar_pvisitno																		int													
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
	 
	 SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN



	----------Generate sequence no. of receipt no.---------------

	IF NOT EXISTS 
		(	SELECT	*
			FROM	[dbo].[Patient_Receipts_Services]
			WHERE	Receipt_Date	=	@Todays_VisitDate
			AND		Doctor_ID		=	@p_var_Doctor_ID
			AND		Clinic_ID		=	@p_var_Clinic_ID
			AND		Patient_ID		=	@p_var_Patient_ID
			AND		Shift_ID		=	@p_var_Shift_ID
			AND		Receipt_Type	=	@p_var_Receipt_Type
			AND		ISNULL(Visit_Type,'')		=	@p_var_Visit_Type	
			AND		Patient_Visit_No			=	@p_nvar_pvisitno -- 2018-02-25 UNCOMMENT MADHURA
		)

		

		BEGIN
			select 1 as GETSTATUS

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE  [Clinic_ID] = @p_var_Clinic_ID
			and entity_type = 'SER'

			

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No ='S-'+ CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE  [Clinic_ID] = @p_var_Clinic_ID
					 -- AND  [Doctor_ID] = @p_var_Doctor_ID
					 	and entity_type = 'SER'
			END          
	        
	    END


		

		ELSE
		BEGIN
		SELECT 0 AS GETSTATUS
		END

	----------------------------------------------------------------------------------------------------------------



	------Add and Update Receipt Details--------------------

	

	 MERGE  [dbo].[Patient_Receipts_Services] as MR

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Receipt_Number]			AS RECEIPT_NO,
					 [Receipt_Date]				AS RECEIPT_DATE,
					 [Receipt_Type]				AS RECEIPT_TYPE,
					 [Receipt_Amount]			AS RECEIPT_AMOUNT,
					 [Shift_ID]					AS SHIFT_ID
							
			FROM	@p_var_Insert_Receipt_Data 
		  )
	
	 AS	 SRCREM (
				DOCTOR_ID,CLINIC_ID,PATIENT_ID,RECEIPT_NO,RECEIPT_DATE,RECEIPT_TYPE,RECEIPT_AMOUNT,SHIFT_ID
			 )
	 ON		 (
				MR.[Doctor_ID]				=SRCREM.DOCTOR_ID	AND
				MR.[Clinic_ID]				=SRCREM.CLINIC_ID	AND
				MR.[Patient_ID]				=SRCREM.PATIENT_ID	AND
				MR.[Receipt_Number]			=SRCREM.RECEIPT_NO	AND
				MR.[Shift_ID]				=SRCREM.SHIFT_ID	--AND
				--MR.Patient_Visit_No			= @p_nvar_pvisitno
			 )

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		--MR.[Receipt_Type]			= SRCREM.RECEIPT_TYPE,
				MR.[Receipt_Amount]			= SRCREM.RECEIPT_AMOUNT,
				MR.[Modified_On]			= GETDATE(),
				MR.[ModifiedBy_Name]		= @p_var_User_Id,
				MR.[Treatment_Details]		= @p_var_TreatmentDetails,
				MR.Title					= @p_var_Title,
				MR.[From_Date]				= @p_var_from_date,
				MR.[To_Date]				= @p_var_to_date

				
				

	WHEN NOT MATCHED THEN


	INSERT  (
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],[Visit_Type],Patient_Visit_No
		)
		VALUES(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,CONVERT(date,@Todays_VisitDate),@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type,@p_nvar_pvisitno
		);
		

		IF @p_var_Visit_Type='A'

		BEGIN
			UPDATE [dbo].[Patient_Payments_AdHoc]  set	[Receipt_Number]=@p_var_Receipt_No,
														[Receipt_Type]=@p_var_Receipt_Type	

			WHERE	CONVERT(DATE,[Payment_Date])=@Todays_VisitDate
			AND		Doctor_ID=@p_var_Doctor_ID
			AND		Clinic_ID=@p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			AND		Shift_ID=@p_var_Shift_ID
			--AND		Patient_Visit_No			=	@p_nvar_pvisitno
				
		END

		ELSE

		BEGIN
			UPDATE  [dbo].[Patient_Visits_Services] set	[Receipt_Number]=@p_var_Receipt_No,
												[Receipt_Type]=@p_var_Receipt_Type

			WHERE	Visit_Date=@Todays_VisitDate
			AND		Doctor_ID=@p_var_Doctor_ID
			AND		Clinic_ID=@p_var_Clinic_ID
			AND		Patient_ID=@p_var_Patient_ID
			AND		Shift_ID=@p_var_Shift_ID
			AND		Patient_Visit_No			=	@p_nvar_pvisitno  --madhura
		END
	
	SELECT 1 AS SAVE_STATUS

	SELECT @p_var_Receipt_No AS Receipt_No

END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_ReceiptDetails_Regenerate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 22 March 2017
-- Description	: This stored procedure will insert and update the receipt details in Patient_Receipt table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_ReceiptDetails_Regenerate]
	@Todays_VisitDate																		DATE,
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Receipt_Type																		NVARCHAR(1),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_Shift_ID																			TINYINT,
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Visit_Type																		CHAR(1)							
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY
	CREATE TABLE #temp3 (Receipt_Number NVARCHAR(200))
	DECLARE @NVAR_RECEIPT_NEW NVARCHAR(30)
	
	BEGIN

	----------Generate sequence no. of receipt no.---------------

	

			DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @intTotalLengthFLD  INT
			DECLARE @NVAR_FENERATEFY INT
			DECLARE @NVAR_REPLICATE NVARCHAR(30)
			DECLARE @NVAR_len int
			
			
		    
			IF ( LEN(LTRIM(RTRIM(@p_var_Receipt_No))) <=0 )
			BEGIN

			SELECT @bintLastSequenceNoFld = isnull(Last_SequenceNo,0), 
					@intTotalLengthFLD    =  Total_Length

    		FROM   [dbo].[Sequence_Nos_Clinic]

			WHERE [Doctor_ID] = @p_var_Doctor_ID AND [Clinic_ID] = @p_var_Clinic_ID

			and entity_type = 'RCT'
			

				IF(@bintLastSequenceNoFld = 99999)
				BEGIN
					SET   @bintLastSequenceNoFld = 1
				END
				ELSE
				BEGIN
				
					SET   @bintLastSequenceNoFld = @bintLastSequenceNoFld + 1
					
				END

				SET @NVAR_FENERATEFY= 	CASE WHEN DatePart(Month, Getdate()) >= 4 THEN DatePart(Year, Getdate()) + 1 ELSE DatePart(Year, Getdate()) END
				
				SET @NVAR_REPLICATE= REPLICATE('0',@intTotalLengthFLD - LEN(convert(nvarchar(5),@bintLastSequenceNoFld)))
				
				
				SET   @p_var_Receipt_No = CONVERT(NVARCHAR(100),@NVAR_FENERATEFY ) + '-' +CONVERT(NVARCHAR(100), @NVAR_REPLICATE) + convert(nvarchar(5),@bintLastSequenceNoFld)
				 
				SET @p_var_Receipt_No = @p_var_Receipt_No

				

				UPDATE [dbo].[Sequence_Nos_Clinic]
					  SET Last_SequenceNo = @bintLastSequenceNoFld
					  WHERE [Doctor_ID] = @p_var_Doctor_ID AND [Clinic_ID] = @p_var_Clinic_ID
					  	and entity_type = 'RCT'
			END          
	        
	    END


	------Add Receipt Details--------------------

	

	
	INSERT INTO Patient_Receipts(
			[Doctor_ID],[Clinic_ID],[Patient_ID],[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],[Shift_ID],[Treatment_Details],[Title],[From_Date],[To_Date],Visit_Type
		)

		OUTPUT INSERTED.Receipt_Number INTO  #temp3

		VALUES
		(
		@p_var_Doctor_ID,@p_var_Clinic_ID,@p_var_Patient_ID,@p_var_Receipt_No,@Todays_VisitDate,@p_var_Receipt_Type,@p_var_ReceiptAmount,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,@p_var_Shift_ID,@p_var_TreatmentDetails,@p_var_Title,@p_var_from_date,@p_var_to_date,@p_var_Visit_Type
		);
		
		

	SELECT 1 AS SAVE_STATUS

	
	SELECT @NVAR_RECEIPT_NEW	=	Receipt_Number from #temp3

	SELECT	1 AS TABLE2,[Receipt_Number],[Receipt_Date],[Receipt_Type],[Receipt_Amount],[Treatment_Details],Title,PT.Title_Description,PM.First_Name+' '+PM.Last_Name AS Patient_Name,
				ISNULL(CONVERT(VARCHAR(11),VGI.From_Date,106),'') AS From_Date,ISNULL(CONVERT(VARCHAR(11),VGI.To_Date,106),'') AS To_Date
	FROM		[dbo].[Patient_Receipts] VGI

	INNER JOIN Patient_Title PT

	ON	VGI.Title=PT.ID

	INNER JOIN Patient_Master PM
	ON	PM.ID=VGI.Patient_ID

	where Receipt_Number=@NVAR_RECEIPT_NEW


	UPDATE  [dbo].[Patient_Visits] set	[Receipt_Number]=@p_var_Receipt_No,
										[Receipt_Type]=@p_var_Receipt_Type

	WHERE	Visit_Date BETWEEN @p_var_from_date AND @p_var_to_date
	AND		Doctor_ID=@p_var_Doctor_ID
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID
	AND		Status_ID=5
	AND		[Receipt_Number] IS NULL

	UPDATE  [dbo].[Patient_Payments_AdHoc] set	[Receipt_Number]=@p_var_Receipt_No,
												[Receipt_Type]=@p_var_Receipt_Type

	WHERE	CONVERT(DATE,[Payment_Date]) BETWEEN @p_var_from_date AND @p_var_to_date
	AND		Doctor_ID	=	@p_var_Doctor_ID
	AND		Clinic_ID	=	@p_var_Clinic_ID
	AND		Patient_ID	=	@p_var_Patient_ID
	AND		[Receipt_Number] IS NULL
	AND		Fees_Collected > 0
	


	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Consolidate_ReceiptDetails]    Script Date: 16-Jan-18 8:30:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Referrel_Doctor_List]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- Author      :  INCRUST
-- Create date :  05 Oct 2017
-- Description :  This stored procedure will Save the Data In Patient Master table
--  created By :  Varsha Khandre
-- ================================================================================

CREATE PROCEDURE [dbo].[USP_Insert_Referrel_Doctor_List]

		@p_nvar_Doctor_Name				NVARCHAR(30),
		@p_nvar_DoctorAddress			NVARCHAR(150),
		@p_nvar_Doctor_Mobile			NVARCHAR(20),
		@p_nvar_Doctor_Email			NVARCHAR(60),
		@p_nvar_delete_flag				bit,
		@p_nvar_Refer_ID				char(1),
		@p_nvar_LanguageId				int,
		@p_nvar_Remarks			nvarchar(500)


AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY

			  INSERT INTO Referrel_Doctors_List
								(
								[Doctor_Name],
								[Doctor_Address],
								[Doctor_Mob],
								[Doctor_mail],
								[Delete_Flag],
								[Refer_ID],
								[Language_Id],
								[Remarks])
								VALUES
								(
								@p_nvar_Doctor_Name,
								@p_nvar_DoctorAddress,	
								@p_nvar_Doctor_Mobile,	
								@p_nvar_Doctor_Email,
								@p_nvar_delete_flag,
								@p_nvar_Refer_ID,
								@p_nvar_LanguageId,
								@p_nvar_Remarks
								)     
					
			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



/****** Object:  StoredProcedure [dbo].[USP_Insert_Referral_Doctor_List]    Script Date: 20-Nov-18 8:28:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Consolidate_ReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will update the receipt details in Patient_Receipt table for Consolidate Reprint Receipt
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Reprint_Consolidate_ReceiptDetails]
	
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Receipt_Type																		NVARCHAR(1)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN
	------ Update Receipt Details--------------------

	
	
	 UPDATE Patient_Receipts 
	 SET		
				[Receipt_Amount]		= @p_var_ReceiptAmount,
				[Modified_On]			= GETDATE(),
				[ModifiedBy_Name]		= @p_var_User_Id,
				[Treatment_Details]		= @p_var_TreatmentDetails,
				Title					= @p_var_Title,
				[From_Date]				= @p_var_from_date,
				[To_Date]				= @p_var_to_date

	WHERE	[Receipt_Number]	=	@p_var_Receipt_No
	AND		[Doctor_ID]		=	@p_var_Doctor_ID
	AND		[Clinic_ID]		=	@p_var_Clinic_ID
	AND		[Patient_ID]		=	@p_var_Patient_ID
				

	UPDATE  [dbo].[Patient_Visits] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type

	WHERE	Visit_Date BETWEEN @p_var_from_date AND @p_var_to_date
	AND		Doctor_ID=@p_var_Doctor_ID
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID
	AND		Status_ID=5
	AND		[Receipt_Number] IS NULL

	UPDATE  [dbo].[Patient_Payments_AdHoc] set	[Receipt_Number]=@p_var_Receipt_No,
												[Receipt_Type]=@p_var_Receipt_Type

	WHERE	CONVERT(DATE,[Payment_Date]) BETWEEN @p_var_from_date AND @p_var_to_date
	AND		Doctor_ID	=	@p_var_Doctor_ID
	AND		Clinic_ID	=	@p_var_Clinic_ID
	AND		Patient_ID	=	@p_var_Patient_ID
	AND		[Receipt_Number] IS NULL
	AND		Fees_Collected > 0

	SELECT 1 AS SAVE_STATUS


END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Individual_ReceiptDetails]    Script Date: 16-Jan-18 8:30:58 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Consolidate_ReceiptDetails_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will update the receipt details in Patient_Receipt table for Consolidate Reprint Receipt
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Reprint_Consolidate_ReceiptDetails_Services]
	
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT,
	@p_var_from_date																		DATE,
	@p_var_to_date																			DATE,
	@p_var_Receipt_Type																		NVARCHAR(1)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN
	------ Update Receipt Details--------------------

	
	
	 UPDATE Patient_Receipts_Services
	 SET		
				[Receipt_Amount]		= @p_var_ReceiptAmount,
				[Modified_On]			= GETDATE(),
				[ModifiedBy_Name]		= @p_var_User_Id,
				[Treatment_Details]		= @p_var_TreatmentDetails,
				Title					= @p_var_Title,
				[From_Date]				= @p_var_from_date,
				[To_Date]				= @p_var_to_date

	WHERE	[Receipt_Number]	=	@p_var_Receipt_No
	AND		[Doctor_ID]		=	@p_var_Doctor_ID
	AND		[Clinic_ID]		=	@p_var_Clinic_ID
	AND		[Patient_ID]		=	@p_var_Patient_ID
				

	UPDATE  [dbo].[Patient_Visits_Services] set [Receipt_Number]=@p_var_Receipt_No,[Receipt_Type]=@p_var_Receipt_Type

	WHERE	Visit_Date BETWEEN @p_var_from_date AND @p_var_to_date
	AND		Doctor_ID=@p_var_Doctor_ID
	AND		Clinic_ID=@p_var_Clinic_ID
	AND		Patient_ID=@p_var_Patient_ID
	AND		Status_ID=8
	AND		[Receipt_Number] IS NULL

	UPDATE  [dbo].[Patient_Payments_AdHoc] set	[Receipt_Number]=@p_var_Receipt_No,
												[Receipt_Type]=@p_var_Receipt_Type

	WHERE	CONVERT(DATE,[Payment_Date]) BETWEEN @p_var_from_date AND @p_var_to_date
	AND		Doctor_ID	=	@p_var_Doctor_ID
	AND		Clinic_ID	=	@p_var_Clinic_ID
	AND		Patient_ID	=	@p_var_Patient_ID
	AND		[Receipt_Number] IS NULL
	AND		Fees_Collected > 0

	SELECT 1 AS SAVE_STATUS


END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Individual_ReceiptDetails]    Script Date: 16-Jan-18 8:30:58 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Individual_ReceiptDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 16 March 2017
-- Description	: This stored procedure will update the receipt details in Patient_Receipt table for individual Reprint Receipt
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Reprint_Individual_ReceiptDetails]
	
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(10),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN
	------ Update Receipt Details--------------------

	
	
	 UPDATE Patient_Receipts 
	 SET		
				[Receipt_Amount]			= @p_var_ReceiptAmount,
				[Modified_On]			= GETDATE(),
				[ModifiedBy_Name]		= @p_var_User_Id,
				[Treatment_Details]		= @p_var_TreatmentDetails,
				Title					= @p_var_Title

	WHERE	[Receipt_Number]	=	@p_var_Receipt_No
	AND		[Doctor_ID]			=	@p_var_Doctor_ID
	AND		[Clinic_ID]			=	@p_var_Clinic_ID
	AND		[Patient_ID]		=	@p_var_Patient_ID
				

	SELECT 1 AS SAVE_STATUS


END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_Sub_Charges_MasterData]    Script Date: 16-Jan-18 8:31:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Reprint_Individual_ReceiptDetails_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 17-Dec-2019
-- Description	: This stored procedure will update the receipt details in Patient_Receipt table for individual Reprint Receipt
-- Created By	: Vasudha
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Reprint_Individual_ReceiptDetails_Services]
	
	@p_var_Clinic_ID																		NVARCHAR(10),
	@p_var_Doctor_ID																		NVARCHAR(30),
	@p_var_Patient_ID																		NVARCHAR(32),
	@p_var_Receipt_No																		NVARCHAR(15),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_ReceiptAmount																	DECIMAL(10,2),
	@p_var_TreatmentDetails																	NVARCHAR(1000),
	@p_var_Title																			INT

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	BEGIN TRY

	
	BEGIN
	------ Update Receipt Details--------------------

	
	
	 UPDATE Patient_Receipts_Services 
	 SET		
				[Receipt_Amount]			= @p_var_ReceiptAmount,
				[Modified_On]			= GETDATE(),
				[ModifiedBy_Name]		= @p_var_User_Id,
				[Treatment_Details]		= @p_var_TreatmentDetails,
				Title					= @p_var_Title

	WHERE	[Receipt_Number]	=	@p_var_Receipt_No
	AND		[Doctor_ID]			=	@p_var_Doctor_ID
	AND		[Clinic_ID]			=	@p_var_Clinic_ID
	AND		[Patient_ID]		=	@p_var_Patient_ID
				

	SELECT 1 AS SAVE_STATUS


END

	

	
	
	

	END TRY
	 BEGIN CATCH
			--ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END	 		
		 	
		 	
		 		
		 	
		 	













/****** Object:  StoredProcedure [dbo].[USP_Insert_Sub_Charges_MasterData]    Script Date: 16-Jan-18 8:31:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Save_PatientVisitData_Patientprofile]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--==============================================
-- Author	  : INCRUST
-- Create date: 21-feb-2017
-- Description: This stored procedure will insert Patient Visit Data
-- Created By : Varsha Khandre
-- =============================================

CREATE PROCEDURE[dbo].[USP_Insert_Save_PatientVisitData_Patientprofile]
	@p_var_Insert_PatientComplaintData		UDT_Insert_PatientComplaints READONLY,
	@p_var_Insert_PatientDiagnosisData		UDT_Insert_PatientDiagnosis READONLY,
	@p_var_Insert_PatientDressingData		UDT_Insert_PatientDressingData READONLY,
	@p_var_Insert_PatientMedicineData		UDT_Insert_PatientMedicineData_Doctor READONLY,
	@p_var_Insert_PatientPrescriptionData	UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Insert_Schedule               	UDT_Insert_PatientSchedule READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Hypertension							BIT,
	@p_var_Diabetes								BIT,
	@p_var_Cholestrol							BIT,
	@p_var_IHD									BIT,
	@p_var_TH									BIT,
	@p_var_Asthama								BIT,
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_var_Fees_To_Collect						DECIMAL(10,2),
	@p_var_Instructions							NVARCHAR(1000),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_Status_ID							TINYINT,
	@p_var_User_Id								NVARCHAR(32),
	@p_var_Smoking								BIT,
	@p_var_Tobaco								BIT,
	@p_var_Alchohol								BIT,
	@p_var_Habit_Details						NVARCHAR(1000),
	@p_var_Allergy_Details						NVARCHAR(1000),
	@p_var_Observation							NVARCHAR(1000),
	@p_bit_In_Person							BIT,
	@p_var_sugar								NVARCHAR(100),
	@p_var_THtext								NVARCHAR(100),
	@p_var_offline_reason						NVARCHAR(1000),
	@p_bit_offlineflag							BIT,
	@p_var_Symptom_Comment						NVARCHAR(1000),
	@p_var_Fees_Paid							DECIMAL(10,2),
	@p_var_Reason								NVARCHAR(1000),
	@p_var_Insert_PatientProcedureData			UDT_Insert_PatientProcedureData READONLY,
	@p_var_Impression							NVARCHAR(1000),
	@p_var_Attended_By							NVARCHAR(32),
	@p_var_PaymentBy_ID							INT,
	@p_var_Payment_Remark						NVARCHAR(1000),
	@p_var_AttendedBy_ID							INT,
	@p_var_Follow_Up							NVARCHAR(100),
	@p_var_Insert_PatientInstructionData		UDT_Insert_PatientInstructionData READONLY,
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),

	--@p_var_TPR									NVARCHAR(10),
	@p_var_Important_Findings					NVARCHAR(1000),
	@p_var_Additional_Comments					NVARCHAR(1000),
	--@p_var_Systemic								NVARCHAR(30),
	--@p_var_Odeama								NVARCHAR(10),
	@p_var_Pallor								NVARCHAR(10),
	@p_var_GC									NVARCHAR(20),
	@p_var_Insert_AbdominalData					UDT_Insert_Abdominal_Exam_Findings_Data READONLY,

	@p_var_FMP							   NVARCHAR(1000),
	@p_var_PRMC							   NVARCHAR(1000),
	@p_var_PAMC							   NVARCHAR(1000),
	@p_var_LMP							   NVARCHAR(1000),
	@p_var_ObstetricHistory				   NVARCHAR(1000),
	@p_var_SurgicalHistory				   NVARCHAR(1000),
	@p_var_Menstrual_Add_Comments		   NVARCHAR(1000),

	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,
	@p_var_Pregnant                             BIT,
	@p_var_EDD							   DATETIME,

	@p_var_FollowUpAfter				INT,
	--@p_var_Schedule					INT,
	@p_var_AdditionalInst					NVARCHAR(1000),
	@p_var_Discount					DECIMAL(10,2),
	@p_var_Original_Discount					DECIMAL(10,2),
	@Is_Submit_Patient_Visit_Details bit

	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 IF(@p_var_EDD = '')
	  BEGIN
         SET @p_var_EDD = NULL;
	  END

	 IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END

	  IF(@p_var_FollowUpAfter = 0)
	  BEGIN
         SET @p_var_FollowUpAfter = NULL;
	  END

	 --  IF(@p_var_Schedule = 0)
	 -- BEGIN
      --   SET @p_var_Schedule = NULL;
	 -- END
	 		UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_var_Fees_Paid ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							Symptom_Comment			= @p_var_Symptom_Comment,
							Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							[Followup_After]=@p_var_FollowUpAfter,
							--[Schedule]		=	@p_var_Schedule	,			
							[Additional_Instructions]	=@p_var_AdditionalInst,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details



			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID	
			
	 BEGIN TRANSACTION

			--INSERT INTO		Visit_Complaints(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)                  
			--SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Complaint_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
   --         FROM			@p_var_Insert_PatientComplaintData
	 

	

		/***************************************Start Add Or Update Visit_Schedule **********************************************/
		delete from Visit_Schedule where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 
		

			INSERT INTO	Visit_Schedule(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_Schedule
			
			
    /***************************************End Add Or Update Visit_Schedule **********************************************/   
			
	/***************************************Start Add Or Update Visit_Diagnosis **********************************************/
	delete from Visit_Diagnosis where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 

	 INSERT INTO		Visit_Diagnosis(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Desease_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDiagnosisData
	 
	 
	
	 /***************************************End Add Or Update Visit_Diagnosis **********************************************/   

      /***************************************Start Add Or Update Visit_Dressing **********************************************/
	delete from Visit_Dressing where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 

	 INSERT INTO		Visit_Dressing(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
		    SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Dressing_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientDressingData
	 
	 delete from Visit_Medicine where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID 

	 INSERT INTO		Visit_Medicine(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
			SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Short_Description,Medicine_Description,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientMedicineData
	 
		 /***************************************End Add Or Update Visit_Medicine **********************************************/   	

		 /***************************************Start Add Or Update Visit_Prescription **********************************************/

		-- IF not EXISTS(select * from Visit_Prescription where Patient_ID=@p_var_Patient_ID and Visit_Date=	@p_var_Visit_Date and Patient_Visit_No= @p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID and Clinic_ID=@p_var_Clinic_ID and Shift_ID =@p_var_Shift_ID)
	 --begin

	 -- end
	 delete from Visit_Prescription where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID	

	 INSERT INTO		Visit_Prescription(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_Id)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,
			                 ((select max (ISNULL(Sequence_Id,0)) from Visit_Prescription) + ROW_NUMBER() over (order by (select 1)))
			FROM			@p_var_Insert_PatientPrescriptionData
	
	
	 --else
	 --begin
		-- MERGE [dbo].[Visit_Prescription] as VP

	 --USING(
		--	SELECT DISTINCT 
		--			 [Patient_ID]				AS Patient_ID,
		--			 [Visit_Date]				AS VISIT_DATE,
		--			 [Patient_Visit_No]			AS VISITNO,
		--			 [Shift_ID]					AS SHIFT_ID,
		--			 [Clinic_ID]				AS CLINIC_ID,
		--			 [Doctor_ID]		        AS Doctor_ID,
		--			 [Medicine_Name]        AS Medicine_Name,
		--			 Brand_Name AS Brand_Name,
		--			 CatSub_Description AS CatSub_Description,
		--			 Cat_Short_Name AS Cat_Short_Name,
		--			 Marketed_By AS Marketed_By,
		--			 Morning AS Morning,
		--			 Afternoon AS Afternoon,
		--			 Night AS Night,
		--			 No_Of_Days AS No_Of_Days,
		--		     Instruction AS Instruction,
		--		     Sequence_Id AS Sequence_Id
				
		--	FROM	@p_var_Insert_PatientPrescriptionData
		--  )
	
	 --AS	 SRC (
		--		Patient_ID,VISIT_DATE,VISITNO,SHIFT_ID,CLINIC_ID,Doctor_ID,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,Sequence_Id
		--	 )
	 --ON		 (
		--		VP.Patient_ID=SRC.Patient_ID AND
		--		VP.VISIT_DATE =SRC.VISIT_DATE AND
		--		--VM.VISITNO=SRC.VISITNO AND
		--		VP.SHIFT_ID=SRC.SHIFT_ID AND
		--		VP.CLINIC_ID=SRC.CLINIC_ID AND
		--		VP.Doctor_ID=SRC.DOCTOR_ID AND
		--		VP.Medicine_Name=SRC.Medicine_Name AND
		--		VP.Brand_Name =SRC.Brand_Name AND
		--		VP.CatSub_Description=SRC.CatSub_Description AND
		--		VP.Cat_Short_Name=SRC.Cat_Short_Name AND
		--		VP.Marketed_By=SRC.Marketed_By AND
		--		VP.Morning=SRC.Morning AND
		--		VP.Afternoon=SRC.Afternoon AND
		--		VP.Night=SRC.Night AND
		--		VP.No_Of_Days=SRC.No_Of_Days AND
		--		VP.Instruction=SRC.Instruction AND
		--		VP.Sequence_Id=SRC.Sequence_Id
			
		--	 )	

	 --WHEN MATCHED THEN
	
	 --UPDATE 

	 --SET 	
	 --           VP.Medicine_Name=SRC.Medicine_Name ,
		--		VP.Brand_Name =SRC.Brand_Name ,
		--		VP.CatSub_Description=SRC.CatSub_Description ,
		--		VP.Cat_Short_Name=SRC.Cat_Short_Name ,
		--		VP.Marketed_By=SRC.Marketed_By,
		--		VP.Morning=SRC.Morning ,
		--		VP.Afternoon=SRC.Afternoon ,
		--		VP.Night=SRC.Night ,
		--		VP.Instruction=SRC.Instruction,
		--		VP.Sequence_Id=SRC.Sequence_Id;
		--		end

		 /***************************************End Add Or Update Visit_Prescription **********************************************/   
			
			

			
			
			INSERT INTO [dbo].[Complaint_Master] ([Short_Description],[Complaint_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Complaint_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientComplaintData CType LEFT JOIN [dbo].[Complaint_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			INSERT INTO [dbo].[Diagnosis_Master] ([Short_Description],[Diagnosis_Description],[Created_On],[CreatedBy_Name],[Modified_On],[ModifiedBy_Name],Priority_Value )
			SELECT CType.[Short_Description],CType.Desease_Description,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,9
			FROM  @p_var_Insert_PatientDiagnosisData CType LEFT JOIN [dbo].[Diagnosis_Master] CTable ON 
			CType.Short_Description = CTable.Short_Description
			WHERE CTable.Short_Description IS NULL

			delete from Visit_Procedure_Findings where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO		Visit_Procedure_Findings(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,[Findings_Comment],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Procedure_Description,Findings_Description,Impression,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_PatientProcedureData


			
            delete from Visit_Groups_Instructions where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID
			INSERT INTO		Visit_Groups_Instructions(Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,[Group_Description],[Instructions_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Sequence_No)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Group_Description,Instructions_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,Sequence_No
			FROM			@p_var_Insert_PatientInstructionData

			 delete from Visit_Abdominal_Examination_Findings where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID

			INSERT INTO		[dbo].[Visit_Abdominal_Examination_Findings](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Delete_Flag)
			SELECT	        Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Category_Description,Findings_Description,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0
			FROM			@p_var_Insert_AbdominalData

			 
			 UPDATE			Patient_Visits SET
							Hypertension			= @p_var_Hypertension,
							Diabetes				= @p_var_Diabetes,
							Cholestrol				= @p_var_Cholestrol,
							IHD						= @p_var_IHD,
							TH						= @p_var_TH,
							Asthama					= @p_var_Asthama,
							Height_In_CMS			= @p_var_Height_In_CMS,
							Weight_IN_KGS			= @p_var_Weight_IN_KGS,
							Pulse					= @p_var_Pulse,
							Blood_Pressure			= @p_var_Blood_Pressure,
							Fees_To_Collect			= @p_var_Fees_To_Collect,
							Fees_Collected			= @p_var_Fees_Paid ,
							Instructions			= @p_var_Instructions,
							Status_ID				= @p_var_Status_ID,
						    --Created_On				= GETDATE(),
							--CreatedBy_Name			= @p_var_User_Id,
							Modified_On				= GETDATE(),
							ModifiedBy_Name			= @p_var_User_Id,
							Smoking					= @p_var_Smoking,
							Tobaco					= @p_var_Tobaco,
							Alchohol				= @p_var_Alchohol,
							Pregnant				= @p_var_Pregnant,
							Habits_Comments			= @p_var_Habit_Details,
							Allergy_dtls			= @p_var_Allergy_Details,
							Observation				= @p_var_Observation,
							Original_Billed_Amount	= @p_var_Fees_To_Collect,
							In_Person				= @p_bit_In_Person,
							Sugar					= @p_var_sugar,
							THtext					= @p_var_THtext,
							Offline_Reason			= @p_var_offline_reason,
							Offline_Flag			= @p_bit_offlineflag,
							Symptom_Comment			= @p_var_Symptom_Comment,
							Comment					= @p_var_Reason,
							Impression				= @p_var_Impression,
							Attended_By				= @p_var_Attended_By,
							[Payment_By_ID]			= @p_var_PaymentBy_ID,
							[Payment_Remark]		= @p_var_Payment_Remark,
							Attended_By_ID			= @p_var_AttendedBy_ID,
							[follow_up]				= @p_var_Follow_Up,
							Current_Complaints		= @p_var_current_complaint,
							Current_Medicines		= @p_var_current_medicines,
							Visit_Comments			= @p_var_visit_comments,
							Is_follow_Up			= @p_bit_follow_up,
							--[TPR]					= @p_var_TPR,
							[Important_Findings]	= @p_var_Important_Findings,
							[Additional_Comments]	= @p_var_Additional_Comments,
							--[Systemic]				= @p_var_Systemic,
							--[Odeama]				= @p_var_Odeama,
							[Pallor]				= @p_var_Pallor,
							[GC]					= @p_var_GC,
							[FMP]					= @p_var_FMP,					
							[PRMC]					= @p_var_PRMC,				
							[PAMC]					= @p_var_PAMC,				
							[LMP]					= @p_var_LMP,					
							[Obstetrics_History]			=	@p_var_ObstetricHistory,		
							[Surgical_History_Past_History]	=	@p_var_SurgicalHistory,		
							[Gynec_Additional_Comments]		=	@p_var_Menstrual_Add_Comments,
							[follow_up_type]				=	@p_var_FollowUp_Type,
							[Follow_Up_Date]				=	@p_var_FollowUp_Date,
							[EDD]                           =   @p_var_EDD,
							[Followup_After]=@p_var_FollowUpAfter,
							--[Schedule]		=	@p_var_Schedule	,			
							[Additional_Instructions]	=@p_var_AdditionalInst,
							[Discount]					=@p_var_Discount,
							Original_Discount                  =@p_var_Original_Discount,
							Is_Submit_Patient_Visit_Details=@Is_Submit_Patient_Visit_Details



			 WHERE			Patient_ID						= @p_var_Patient_ID		
			 AND			Visit_Date						= @p_var_Visit_Date		
			 AND			Patient_Visit_No				= @p_var_Patient_Visit_No	
			 AND			Shift_ID						= @p_var_Shift_ID			
			 AND			Clinic_ID						= @p_var_Clinic_ID		
			 AND			Doctor_ID						= @p_var_Doctor_ID
		
			IF(@p_var_Status_ID = 5)
			 BEGIN
			   UPDATE        [dbo].[Patient_Visits]  
				SET	          Status_Id					= @p_var_Status_ID,
				              --Fees_Collected			= 0 
							  Fees_Collected			= @p_var_Fees_Paid
				WHERE         Visit_Date				= @p_var_Visit_Date 
				AND			  Patient_Visit_No			= @p_var_Patient_Visit_No 
				AND			  Shift_ID					= @p_var_Shift_ID 
				AND			  Clinic_ID					= @p_var_Clinic_ID 
				AND			  Doctor_ID					= @p_var_Doctor_ID 
				AND			  Patient_ID				= @p_var_Patient_ID
				
				UPDATE        [dbo].[Patient_Master] 
				SET			  Patient_Last_Visit_No= @p_var_Patient_Visit_No
				WHERE    	ID				   = @p_var_Patient_ID
				--Doctor_ID			   = @p_var_Doctor_ID 
				--AND	  
				
			 END  

			 /***************************************Add Or Update Complaints**********************************************/
			 delete from Visit_Complaints where Patient_ID = @p_var_Patient_ID and Patient_Visit_No=@p_var_Patient_Visit_No and Doctor_ID=@p_var_Doctor_ID  and Shift_ID=@p_var_Shift_ID	

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]		AS COMPLAINTCOMMENT
						
							
			FROM	@p_var_Insert_PatientComplaintData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMPLAINTCOMMENT
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]	=	SRC.COMPLAINTCOMMENT,	
				CM.[Delete_Flag]		=	0,
				CM.[Modified_On]		=	GETDATE(),
				CM.[ModifiedBy_Name]	=	@p_var_User_Id

	WHEN NOT MATCHED THEN
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,SRC.COMPLAINTCOMMENT);
                
		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END


 

 
/****** Object:  StoredProcedure [dbo].[USP_Get_TodaysDashboardDetails]    Script Date: 19-Feb-18 11:38:06 AM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Sub_Charges_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 01 Aug 2017
-- Description	: This stored procedure will insert and update the symptoms in IPD_KEYWORD Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Sub_Charges_MasterData]
 	
	
	@p_var_chargdesubcat														NVARCHAR(100),
	@p_var_sortorder															int,
	@p_var_User_Id																NVARCHAR(90),
	@p_var_Insert_Subcharge_Data		UDT_Insert_Subcharges_MasterData				READONLY
	
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 

	 MERGE [dbo].[IPD_SubCategory_CHARGESMASTER] AS DM

	 USING(
			SELECT DISTINCT 
							[Charges_SubCategory]		AS CHARGESUBCAT
					 
					 
			FROM			 @p_var_Insert_Subcharge_Data
		  )
	
	 AS	 SRC (
				CHARGESUBCAT
			 )
	 ON		 (
				
				DM.[Charges_SubCategory]		= SRC.CHARGESUBCAT
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	
			DM.[Charges_SubCategory]			= SRC.CHARGESUBCAT,
			DM.[SortOrder]						= @p_var_sortorder,
			DM.Delete_Flag						= 0
			
	WHEN NOT MATCHED THEN
		
	INSERT 
				(
					
					[Charges_SubCategory],
					[SortOrder],				
					Delete_Flag			
				)
	VALUES
				(	@p_var_chargdesubcat,@p_var_sortorder,0);


 END


















/****** Object:  StoredProcedure [dbo].[USP_Insert_SubCatagory]    Script Date: 16-Jan-18 8:31:20 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_SubCatagory]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 18-June-2016
-- Description	: This stored procedure will insert the catagory in Prescription_Category
-- Created By	: Snehal Shinde
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_SubCatagory]
	
	@p_var_CatShortDescription	NVARCHAR(60),
	@p_var_CatSubDescription	NVARCHAR(300),
	@p_var_User_Id				NVARCHAR(90),
	@p_var_doctorID				NVARCHAR(30)

 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;
		BEGIN TRY
		   IF NOT EXISTS (
							SELECT * FROM	[dbo].[Prescription_SubCategory] PC 
							WHERE			PC.Cat_Short_Name	  = @p_var_CatShortDescription			   
							AND				PC.CatSub_Description = @p_var_CatSubDescription 
							AND				PC.DOCTOR_ID		  = @p_var_doctorID
						  )
		  BEGIN 
			 INSERT INTO [dbo].[Prescription_SubCategory]
			             (
						  Cat_Short_Name,CatSub_Description,Created_On,Modified_On,CreatedBy_Name,ModifiedBy_Name,DOCTOR_ID
						 )
			 VALUES		 (	
						  @p_var_CatShortDescription,@p_var_CatSubDescription,GetDate(),GetDate(),@p_var_User_Id,@p_var_User_Id,@p_var_doctorID
						 )	
			 END			
	       	ELSE
			BEGIN
			UPDATE [dbo].[Prescription_SubCategory] 
			 SET		Cat_Short_Name	   = @p_var_CatShortDescription,		  
			   	        CatSub_Description = @p_var_CatSubDescription 
			WHERE		Cat_Short_Name	   = @p_var_CatShortDescription			   
			AND			CatSub_Description = @p_var_CatSubDescription 	
			AND			DOCTOR_ID		   = @p_var_doctorID
			SELECT 1 AS SAVE_STATUS	  
		  END
		 
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	    END CATCH  
 END


















GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Symptom_MasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 07-Sep-2016
-- Description	: This stored procedure will insert and update the symptoms in Complaint_Master Table
-- Created By	: Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Insert_Symptom_MasterData]	
	
	@p_var_SymptomShortDescription															NVARCHAR(60),
	@p_var_ComplaintDescription																NVARCHAR(1000),
	@p_var_User_Id																			NVARCHAR(90),
	@p_var_Insert_Symptom_Data		[dbo].[UDT_Insert_Symptom_MasterData]					READONLY,
	@p_var_priority																			INT,
	@p_var_DoctorID																			NVARCHAR(30),
	@p_var_Show_To_Operator                                                                 Bit
	
 AS



 BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements. 
     SET NOCOUNT ON;

	 SELECT DISTINCT [Old_Short_Name]			AS OLD_SYMPTOM_SHORT_NAME,
					 [Old_ComplaintDescription] AS OLD_SYMPTOM_NAME,
					 [Old_Priority_Value]		AS OLD_PRIORITY,
					 [New_Short_Name]			AS NEW_SYMPTOM_SHORT_NAME,
					 [New_ComplaintDescription] AS NEW_SYMPTOM_NAME,
					 [New_Priority_Value]		AS NEW_PRIORITY
					 
	 FROM			 @p_var_Insert_Symptom_Data

	 MERGE [dbo].[Complaint_Master] as CM

	 USING(
			SELECT DISTINCT [Old_Short_Name] AS OLD_SYMPTOM_SHORT_NAME,
							[Old_ComplaintDescription] AS OLD_SYMPTOM_NAME,
							[Old_Priority_Value] AS OLD_PRIORITY,
							[New_Short_Name] AS NEW_SYMPTOM_SHORT_NAME,
							[New_ComplaintDescription] AS NEW_SYMPTOM_NAME,
							[New_Priority_Value] AS NEW_PRIORITY
							
							
			FROM			@p_var_Insert_Symptom_Data 
		  )
	
	 AS	 SRC (
				OLD_SYMPTOM_SHORT_NAME,OLD_SYMPTOM_NAME,OLD_PRIORITY,NEW_SYMPTOM_SHORT_NAME,NEW_SYMPTOM_NAME,NEW_PRIORITY
			 )
	 ON		 (
				CM.Short_Description			=	SRC.OLD_SYMPTOM_SHORT_NAME AND
				CM.Complaint_Description		=	SRC.OLD_SYMPTOM_NAME  AND
				ISNULL(CM.Priority_Value,'') 	=	SRC.OLD_PRIORITY	AND
				DOCTOR_ID						=	@p_var_DoctorID
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET	CM.Short_Description		= SRC.NEW_SYMPTOM_SHORT_NAME,
			CM.Complaint_Description	= SRC.NEW_SYMPTOM_NAME,	
			CM.Priority_Value			= SRC.NEW_PRIORITY,
			CM.[Display_to_Operator]    = @p_var_Show_To_Operator
			

	WHEN NOT MATCHED THEN
		
	INSERT 
				(
				 Short_Description,Complaint_Description,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,Priority_Value,DOCTOR_ID,[Display_to_Operator]
				)
	VALUES
				(	@p_var_SymptomShortDescription,@p_var_ComplaintDescription,GetDate(),@p_var_User_Id,GetDate(),@p_var_User_Id,@p_var_priority,@p_var_DoctorID,@p_var_Show_To_Operator);


 END




GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Temporary_OverwriteData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--==============================================
-- Author	  : INCRUST
-- Create date: 19-May-2017
-- Description: This stored procedure will insert Patient Visit Temporary Data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE[dbo].[USP_Insert_Temporary_OverwriteData]

	
	@p_var_Insert_PatientPrescriptionData		UDT_Insert_Prescription_Table_Type_Id READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_User_Id								NVARCHAR(32)
	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 BEGIN TRANSACTION

	UPDATE [dbo].[Visit_Prescription_Overwrite_Temp]

	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND		[Delete_Flag] = 0



	MERGE [dbo].[Visit_Prescription_Overwrite_Temp] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Medicine_Name]			AS MEDICINE_NAME,
					 [Brand_Name]				AS BRAND_NAME,
					 [CatSub_Descritption]		AS CATSUB_DESC,
					 [Cat_Short_Name]			AS CATSHORT,
					 [Marketed_By]				AS MARKETED_BY,
					 [Morning]					AS MORNING,
					 [Afternoon]				AS AFTERNOON,
					 [Night]					AS NIGHT,
					 [No_Of_Days]				AS NOOFDAYS,
					 [Instruction]				AS INSTRUCTION,
					 [Sequence_Id]              As Sequence_Id	
							
							
			FROM	@p_var_Insert_PatientPrescriptionData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,MEDICINE_NAME,BRAND_NAME,CATSUB_DESC,CATSHORT,MARKETED_BY,MORNING,
				AFTERNOON,NIGHT,NOOFDAYS,INSTRUCTION,Sequence_Id
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Medicine_Name]			= SRC.MEDICINE_NAME	AND
				CM.[Brand_Name]				= SRC.BRAND_NAME AND
				CM.[CatSub_Description]		= SRC.CATSUB_DESC	AND  
				CM.[Cat_Short_Name]		= SRC.CATSHORT  
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Marketed_By]			= SRC.MARKETED_BY,
				CM.[Morning]				= SRC.MORNING,
				CM.[Afternoon]				= SRC.AFTERNOON,
				CM.[Night]					= SRC.NIGHT,
				CM.[No_Of_Days]				= SRC.NOOFDAYS,
				CM.[Instruction]			= SRC.INSTRUCTION,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0,
				CM. [Sequence_Id]		= SRC.Sequence_Id
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,[Sequence_Id],
			Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Indicator],[Delete_Flag]
			
			)
	VALUES	(
				SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.MEDICINE_NAME,SRC.BRAND_NAME,SRC.CATSUB_DESC,SRC.CATSHORT,SRC.MARKETED_BY,
				SRC.MORNING,SRC.AFTERNOON,SRC.NIGHT,SRC.NOOFDAYS,SRC.INSTRUCTION,SRC.Sequence_Id,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,0
				
			);

	

		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END



























/****** Object:  StoredProcedure [dbo].[USP_Insert_Temporary_PatientVisitData]    Script Date: 16-Jan-18 8:31:53 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Temporary_PatientVisitData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--==============================================
-- Author	  : INCRUST
-- Create date: 19-May-2017
-- Description: This stored procedure will insert Patient Visit Temporary Data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE[dbo].[USP_Insert_Temporary_PatientVisitData]

	
	@p_var_Insert_PatientPrescriptionData		UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_User_Id								NVARCHAR(32),
	@p_var_follow_up							NVARCHAR(1000),
	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,

	@p_var_FollowUpAfter				INT,
	@p_var_Schedule					INT,
	@p_var_AdditionalInst					NVARCHAR(1000)

	

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 BEGIN TRANSACTION

	  IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END

	UPDATE	[dbo].[Visit_Prescription_Temp]

	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND		[Delete_Flag] = 0



	MERGE [dbo].[Visit_Prescription_Temp] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Medicine_Name]			AS MEDICINE_NAME,
					 [Brand_Name]				AS BRAND_NAME,
					 [CatSub_Description]		AS CATSUB_DESC,
					 [Cat_Short_Name]			AS CATSHORT,
					 [Marketed_By]				AS MARKETED_BY,
					 [Morning]					AS MORNING,
					 [Afternoon]				AS AFTERNOON,
					 [Night]					AS NIGHT,
					 [No_Of_Days]				AS NOOFDAYS,
					 [Instruction]				AS INSTRUCTION,
					 [Sequence_Id]              AS Sequence_Id
							
							
			FROM	@p_var_Insert_PatientPrescriptionData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,MEDICINE_NAME,BRAND_NAME,CATSUB_DESC,CATSHORT,MARKETED_BY,MORNING,
				AFTERNOON,NIGHT,NOOFDAYS,INSTRUCTION,Sequence_Id
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Medicine_Name]			= SRC.MEDICINE_NAME	AND
				CM.[Brand_Name]				= SRC.BRAND_NAME AND
				CM.[CatSub_Description]		= SRC.CATSUB_DESC	AND  
				CM.[Cat_Short_Name]		= SRC.CATSHORT  
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Marketed_By]			= SRC.MARKETED_BY,
				CM.[Morning]				= SRC.MORNING,
				CM.[Afternoon]				= SRC.AFTERNOON,
				CM.[Night]					= SRC.NIGHT,
				CM.[No_Of_Days]				= SRC.NOOFDAYS,
				CM.[Instruction]			= SRC.INSTRUCTION,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0,
				CM.[Sequence_Id]			= SRC.Sequence_Id
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,
			Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Weight_IN_KGS],
			[follow_up],[follow_up_type],[Follow_Up_Date], [Sequence_Id],[Followup_After],[Schedule],[Additional_Instructions]
			)
	VALUES	(
				SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.MEDICINE_NAME,SRC.BRAND_NAME,SRC.CATSUB_DESC,SRC.CATSHORT,SRC.MARKETED_BY,
				SRC.MORNING,SRC.AFTERNOON,SRC.NIGHT,SRC.NOOFDAYS,SRC.INSTRUCTION,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,
				@p_var_Weight_IN_KGS,@p_var_follow_up,@p_var_FollowUp_Type,@p_var_FollowUp_Date, SRC.Sequence_Id,@p_var_FollowUpAfter,@p_var_Schedule,@p_var_AdditionalInst		
							
							
			);

	UPDATE [Visit_Prescription_Temp]

	SET [Weight_IN_KGS]		=	@p_var_Weight_IN_KGS,
		[follow_up]			=	@p_var_follow_up,
		[follow_up_type]	=	@p_var_FollowUp_Type,
		[Follow_Up_Date]	=	@p_var_FollowUp_Date,
		[Followup_After]=@p_var_FollowUpAfter,
							[Schedule]		=	@p_var_Schedule	,			
							[Additional_Instructions]	=@p_var_AdditionalInst

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND		[Delete_Flag] = 0

		COMMIT TRANSACTION
	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END



























/****** Object:  StoredProcedure [dbo].[USP_Insert_TestReportDetails]    Script Date: 16-Jan-18 8:32:13 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Temporary_PatientVisitData_Ent]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--==============================================
-- Author	  : INCRUST
-- Create date: 19-May-2017
-- Description: This stored procedure will insert Patient Visit Temporary Data
-- Created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE[dbo].[USP_Insert_Temporary_PatientVisitData_Ent]

	
	@p_var_Insert_PatientPrescriptionData		UDT_Insert_PatientPrescriptionData_Doctor_Id READONLY,
	@p_var_Patient_ID							NVARCHAR(32),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Visit_Date							DATETIME,
	@p_var_Patient_Visit_No						INT,
	@p_var_Shift_ID								TINYINT,
	@p_var_Clinic_ID							NVARCHAR(10),
	@p_var_Doctor_ID							NVARCHAR(30),
	@p_var_User_Id								NVARCHAR(32),
	@p_var_follow_up							NVARCHAR(100),
	@p_var_FollowUp_Type					INT,
	@p_var_FollowUp_Date					DATETIME,

	@p_var_FollowUpAfter				INT,

	@p_var_AdditionalInst					NVARCHAR(1000),
	@p_var_Insert_PatientSchedule               	UDT_Insert_PatientSchedule_Print READONLY,
	@p_var_plan_Instruction			         	NVARCHAR(1000)
    --@p_var_Insert_PatientPlanDetails                                            UDT_Insert_Patientpalndeatils_Print READONLY

AS
BEGIN
     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY

	 BEGIN TRANSACTION

	  IF(@p_var_FollowUp_Type = 0)
	  BEGIN
         SET @p_var_FollowUp_Type = NULL;
	  END

	  IF(@p_var_FollowUp_Date = '')
	  BEGIN
         SET @p_var_FollowUp_Date = NULL;
	  END

	  		
	UPDATE [dbo].[Visit_plans_details]

	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND     [Patient_Visit_No]= @p_var_Patient_Visit_No
	AND		[Delete_Flag] = 0
	
	 INSERT INTO [dbo].[Visit_plans_details]
			                    (
						          Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Followup_type,Followup_After,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name
								)
			 VALUES   (	@p_var_Patient_ID,@p_var_Visit_Date,@p_var_Patient_Visit_No,@p_var_Shift_ID,@p_var_Clinic_ID,@p_var_Doctor_ID,@p_var_FollowUp_Type,@p_var_FollowUpAfter,@p_var_plan_Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id)	
	
	
	--UPDATE [dbo].[Visit_plans_details]

	--SET		[Delete_Flag]=1

	--WHERE	[Doctor_ID] = @p_var_Doctor_ID
	--AND		[Clinic_ID] = @p_var_Clinic_ID
	--AND		[Shift_ID] = @p_var_Shift_ID
	--AND		[Patient_ID] = @p_var_Patient_ID
	--AND		[Visit_Date] = @p_var_Visit_Date
	--AND     [Patient_Visit_No]= @p_var_Patient_Visit_No
	--AND		[Delete_Flag] = 0


	--  	INSERT INTO	[dbo].[Visit_plans_details](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Followup_type,Followup_After,Instruction,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	--        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,Followup_type,Followup_After,Instruction,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
 --           FROM			@p_var_Insert_PatientPlanDetails
	

		

	UPDATE[dbo].[Visit_Schedule_Print]

	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND     [Patient_Visit_No]= @p_var_Patient_Visit_No
	AND		[Delete_Flag] = 0


	  	INSERT INTO	[dbo].[Visit_Schedule_Print](Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name)
	        SELECT			Patient_ID,Visit_Date,Patient_Visit_No,Shift_ID,Clinic_ID,Doctor_ID,ID,Schedule,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id
            FROM			@p_var_Insert_PatientSchedule
	

	UPDATE	[dbo].[Visit_Prescription_Temp]

	SET		[Delete_Flag]=1

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND		[Delete_Flag] = 0



	MERGE [dbo].[Visit_Prescription_Temp] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS	VISIT_NO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Medicine_Name]			AS MEDICINE_NAME,
					 [Brand_Name]				AS BRAND_NAME,
					 [CatSub_Description]		AS CATSUB_DESC,
					 [Cat_Short_Name]			AS CATSHORT,
					 [Marketed_By]				AS MARKETED_BY,
					 [Morning]					AS MORNING,
					 [Afternoon]				AS AFTERNOON,
					 [Night]					AS NIGHT,
					 [No_Of_Days]				AS NOOFDAYS,
					 [Instruction]				AS INSTRUCTION,
					 [Sequence_Id]              AS Sequence_Id
							
							
			FROM	@p_var_Insert_PatientPrescriptionData 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISIT_NO,VISIT_DATE,MEDICINE_NAME,BRAND_NAME,CATSUB_DESC,CATSHORT,MARKETED_BY,MORNING,
				AFTERNOON,NIGHT,NOOFDAYS,INSTRUCTION,Sequence_Id
			 )
	 ON		 (
				CM.[Doctor_ID]				=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]				=SRC.CLINIC_ID	AND
				CM.[Shift_ID]				=SRC.SHIFT_ID	AND
				CM.[Patient_ID]				=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]		=SRC.VISIT_NO	AND
				CM.[Visit_Date]				=SRC.VISIT_DATE	AND
				CM.[Medicine_Name]			= SRC.MEDICINE_NAME	AND
				CM.[Brand_Name]				= SRC.BRAND_NAME AND
				CM.[CatSub_Description]		= SRC.CATSUB_DESC	AND  
				CM.[Cat_Short_Name]		= SRC.CATSHORT  
				
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Marketed_By]			= SRC.MARKETED_BY,
				CM.[Morning]				= SRC.MORNING,
				CM.[Afternoon]				= SRC.AFTERNOON,
				CM.[Night]					= SRC.NIGHT,
				CM.[No_Of_Days]				= SRC.NOOFDAYS,
				CM.[Instruction]			= SRC.INSTRUCTION,
				CM.[Modified_On]			= GETDATE(),
				CM.[ModifiedBy_Name]		= @p_var_User_Id,
				CM.[Delete_Flag]			= 0,
				CM.[Sequence_Id]			= SRC.Sequence_Id
				

	WHEN NOT MATCHED THEN
			
				
			
			
	INSERT (
			Doctor_ID,Clinic_ID,Shift_ID,Patient_ID,Patient_Visit_No,Visit_Date,Medicine_Name,Brand_Name,CatSub_Description,Cat_Short_Name,Marketed_By,Morning,Afternoon,Night,No_Of_Days,Instruction,
			Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Weight_IN_KGS],
			[follow_up],[follow_up_type],[Follow_Up_Date], [Sequence_Id]--,[Followup_After],[Additional_Instructions],[Instructions]
			)
	VALUES	(
				SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISIT_NO,SRC.VISIT_DATE,SRC.MEDICINE_NAME,SRC.BRAND_NAME,SRC.CATSUB_DESC,SRC.CATSHORT,SRC.MARKETED_BY,
				SRC.MORNING,SRC.AFTERNOON,SRC.NIGHT,SRC.NOOFDAYS,SRC.INSTRUCTION,GETDATE(),@p_var_User_Id,GETDATE(),@p_var_User_Id,0,
				@p_var_Weight_IN_KGS,@p_var_follow_up,@p_var_FollowUp_Type,@p_var_FollowUp_Date, SRC.Sequence_Id--,@p_var_FollowUpAfter,@p_var_AdditionalInst,@p_var_plan_Instruction	
							
							
			);
		
			
	UPDATE [Visit_Prescription_Temp]

	SET [Weight_IN_KGS]		=	@p_var_Weight_IN_KGS,
		[follow_up]			=	@p_var_follow_up,
		[follow_up_type]	=	@p_var_FollowUp_Type,
		[Follow_Up_Date]	=	@p_var_FollowUp_Date--,
		--[Followup_After]=@p_var_FollowUpAfter,
									
	--	[Additional_Instructions]	=@p_var_AdditionalInst,
		--[Instructions]=	@p_var_plan_Instruction

	WHERE	[Doctor_ID] = @p_var_Doctor_ID
	AND		[Clinic_ID] = @p_var_Clinic_ID
	AND		[Shift_ID] = @p_var_Shift_ID
	AND		[Patient_ID] = @p_var_Patient_ID
	AND		[Visit_Date] = @p_var_Visit_Date
	AND		[Delete_Flag] = 0





		COMMIT TRANSACTION


		

	 END TRY
	 BEGIN CATCH
			ROLLBACK TRANSACTION
            SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   
	 END CATCH
 END



























/****** Object:  StoredProcedure [dbo].[USP_Insert_TestReportDetails]    Script Date: 16-Jan-18 8:32:13 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_TestReportDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  02-March-2016
-- Description :  This stored procedure will save the lab test report.
--  created by :  suyog khairnar    
-- =============================================
CREATE PROCEDURE [dbo].[USP_Insert_TestReportDetails] 
    @p_nvar_Patient_Id      NVARCHAR(32),
    @p_int_Patient_Visit_No INT,
    @p_nvar_Doctor_Id       NVARCHAR(30),
    @p_nvar_Clinic_Id       NVARCHAR(10),
    @P_nvar_Shift_Id        INT,
	@p_TestReportData UDT_InsertTestReport READONLY
	
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
	  IF EXISTS ( SELECT Patient_ID,
	                     Patient_Visit_No
	              FROM   Patient_Visit_LabTestResults
	              WHERE  Patient_ID = @p_nvar_Patient_Id
	              AND    Patient_Visit_No = @p_int_Patient_Visit_No
	             )
	        BEGIN
			   UPDATE  [dbo].[Patient_Visit_LabTestResults]
				  SET  Patient_Visit_LabTestResults.Test_Parameter_Value = V.Test_Parameter_Value
				 FROM  @p_TestReportData V
	            WHERE  Patient_Visit_LabTestResults.Patient_ID  =  @p_nvar_Patient_Id
	            AND    Patient_Visit_LabTestResults.Patient_Visit_No = @p_int_Patient_Visit_No
	            AND    Patient_Visit_LabTestResults.Lab_Test_Description=V.Lab_Test_Description
	            
	            UPDATE [dbo].[Patient_Visits]
	               SET Reports_Received = 1
	            WHERE  Patient_ID = @p_nvar_Patient_Id
	              AND  Patient_Visit_No = @p_int_Patient_Visit_No
	              AND  Shift_ID = @P_nvar_Shift_Id
	              AND  Doctor_ID = @p_nvar_Doctor_Id
	              AND  Clinic_ID = @p_nvar_Clinic_Id
	              
	        END
	    ELSE 
	     BEGIN  
			INSERT INTO [dbo].[Patient_Visit_LabTestResults] 
						(Visit_Date,
						 Patient_Visit_No,
						 Shift_ID,
						 Clinic_ID,
						 Doctor_ID,
						 Patient_ID,
						 Lab_Test_Description,
						 Parameter_Name,
						 Test_Parameter_Value)
				SELECT  Visit_Date,
						Patient_Visit_No,
						Shift_ID,
						Clinic_ID,
						Doctor_ID,
						Patient_ID,
						Lab_Test_Description,
						Parameter_Name,
						Test_Parameter_Value
				  FROM	@p_TestReportData
				  
				  
				    
	            UPDATE [dbo].[Patient_Visits]
	               SET Reports_Received = 1
	            WHERE  Patient_ID  = @p_nvar_Patient_Id
	              AND  Patient_Visit_No = @p_int_Patient_Visit_No
	              AND  Shift_ID = @P_nvar_Shift_Id
	              AND  Doctor_ID = @p_nvar_Doctor_Id
	              AND  Clinic_ID = @p_nvar_Clinic_Id
		END

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Log_Error]    Script Date: 16-Jan-18 8:32:22 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Insert_Update_Delivery_Registraion]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- Author      :  INCRUST
-- Create date :  12 Dec 2018
-- Description :  This stored procedure will Save the Data In Delivery Registraion table
--  created By :  Shubham Kule
-- ================================================================================

CREATE PROCEDURE [dbo].[USP_Insert_Update_Delivery_Registraion]
		   @p_var_DeliveryReg_ID nvarchar(100),
           @p_var_Clinic_ID nvarchar(10),
           @p_var_Doctor_ID nvarchar(30),
           @p_var_Patient_ID nvarchar(32),
           @p_var_Shift_ID tinyint,
           @p_var_M_S  nvarchar(30),
           @p_var_Todays_Date datetime,
           @p_var_G nvarchar(20),
           @p_var_P nvarchar(20),
           @p_var_A nvarchar(20),
           @p_var_L nvarchar(20),
           @p_var_Obstrac_History nvarchar(1000),
           @p_var_LMP datetime,
           @p_var_EDD datetime,
           @p_var_Medical_HO nvarchar(1000),
           @p_var_Surgical_HO nvarchar(1000),
           @p_var_Height float,
           @p_var_Flu_Vaccine nvarchar(40),
           @p_var_INJ_TT_1 nvarchar(40),
           @p_var_INJ_TT_2 nvarchar(40),
           @p_var_INJ_TT_3 nvarchar(40),
           @p_var_Blood_Group tinyint,
           @p_var_Hb nvarchar(20),
           @p_var_BSL nvarchar(20),
           @p_var_VDRL nvarchar(20),
           @p_var_HIV nvarchar(20),
           @p_var_HCV nvarchar(20),
           @p_var_BP nvarchar(20),
           @p_var_HBsAg nvarchar(20),
           @p_var_Urine nvarchar(20),
           @p_var_TSH nvarchar(20),
           @p_var_Dual_Marker nvarchar(20),
           @p_var_Triple_Marker nvarchar(20),
           @p_var_Quadrulple_Marker nvarchar(20),
           @p_var_Hb_Electrophoresis nvarchar(20),
           @p_var_High_Risk nvarchar(1000),
		   @p_var_LoginId	nvarchar(90),
		   @p_dt_UsgSummary UDT_INSERT_Gynec_USG_Summary readonly
		   

AS
BEGIN
		DECLARE @bintLastSequenceNo BIGINT
			DECLARE @bintLastSequenceNoFld BIGINT
			DECLARE @strPrefixChar VARCHAR(4)
			DECLARE @intTotalLengthFLD  INT
			DECLARE @intTotalLengthPAT  INT
			DECLARE @nvarDeliRegNo NVARCHAR(32)

	SET NOCOUNT ON;
	BEGIN TRY
	if exists(select GDR.DeliveryReg_ID from Gynec_Delivery_Registration GDR where GDR.Patient_ID = @p_var_Patient_ID and gdr.Clinic_id = @p_var_Clinic_ID)
begin 
		UPDATE [dbo].[Gynec_Delivery_Registration] 
   SET 
       [M_S] = @p_var_M_S ,
      [Delivery_Registraion_Date] = @p_var_Todays_Date,
      [G] = @p_var_G, 
      [P] = @p_var_P, 
      [A] = @p_var_A, 
      [L] = @p_var_L, 
      [Obstrac_History] =  @p_var_Obstrac_History,
	  [LMP] = @p_var_LMP,
      [EDD] =  @p_var_EDD, 
      [Medical_HO] =  @p_var_Medical_HO,
      [Surgical_HO] =  @p_var_Surgical_HO,
      [Height] =  @p_var_Height,  
      [Flu_Vaccine] = @p_var_Flu_Vaccine , 
      [INJ_TT_1] = @p_var_INJ_TT_1,
      [INJ_TT_2] = @p_var_INJ_TT_2,
      [INJ_TT_3] = @p_var_INJ_TT_3,
      [Blood_Group] =  @p_var_Blood_Group, 
      [Hb] =  @p_var_Hb ,
      [BSL] = @p_var_BSL ,
      [VDRL] = @p_var_VDRL ,
      [HIV] = @p_var_HIV ,
      [HCV] = @p_var_HCV ,
      [BP] =  @p_var_BP ,
      [HBsAg] = @p_var_HBsAg, 
      [Urine] = @p_var_Urine,
      [TSH] =  @p_var_TSH ,
      [Dual_Marker] =  @p_var_Dual_Marker,
      [Triple_Marker] =  @p_var_Triple_Marker, 
      [Quadrulple_Marker] =  @p_var_Quadrulple_Marker, 
      [Hb_Electrophoresis] =  @p_var_Hb_Electrophoresis, 
      [High_Risk] =  @p_var_High_Risk,
	  [ModifiedBy] = @p_var_LoginId,
	  [ModifiedOn] = getdate()


 WHERE Patient_ID = @p_var_Patient_ID  and Clinic_id = @p_var_Clinic_ID
	select GDR.DeliveryReg_ID from [Gynec_Delivery_Registration] GDR where  GDR.Patient_ID = @p_var_Patient_ID  and GDR.Clinic_id = @p_var_Clinic_ID


end
else
begin

		
			 SELECT @bintLastSequenceNo = Last_SequenceNo, 
				    @strPrefixChar= Prefix_Char,
				    @intTotalLengthPAT =  Total_Length
			   FROM  [dbo].[Sequence_Nos] 
			  WHERE   Entity_Type = 'GDR'

			   SET  @bintLastSequenceNo = @bintLastSequenceNo + 1

			   SET  @nvarDeliRegNo = 'DR-'+ CONVERT(nvarchar(10),getdate(),120) + '-' + 
			   REPLICATE('0',@intTotalLengthPAT - LEN(convert(nvarchar(5),@bintLastSequenceNo))) 
			   + convert(nvarchar(5),@bintLastSequenceNo)
			--   print @nvarDeliRegNo
	

INSERT INTO [dbo].[Gynec_Delivery_Registration]
           ([DeliveryReg_ID]
           ,[Clinic_ID]
           ,[Doctor_ID]
           ,[Patient_ID]
           ,[Shift_ID]
           ,[M_S]
           ,[Delivery_Registraion_Date]
           ,[G]
           ,[P]
           ,[A]
           ,[L]
           ,[Obstrac_History]
           ,[LMP]
           ,[EDD]
           ,[Medical_HO]
           ,[Surgical_HO]
           ,[Height]
           ,[Flu_Vaccine]
           ,[INJ_TT_1]
           ,[INJ_TT_2]
           ,[INJ_TT_3]
           ,[Blood_Group]
           ,[Hb]
           ,[BSL]
           ,[VDRL]
           ,[HIV]
           ,[HCV]
           ,[BP]
           ,[HBsAg]
           ,[Urine]
           ,[TSH]
           ,[Dual_Marker]
           ,[Triple_Marker]
           ,[Quadrulple_Marker]
           ,[Hb_Electrophoresis]
           ,[High_Risk]
		   ,[CreatedBy]
		   ,[CreatedOn]
		  ,[ModifiedBy] 
		  ,[ModifiedOn] 
		   )
     VALUES
           (
		   		   @nvarDeliRegNo,
           @p_var_Clinic_ID ,
           @p_var_Doctor_ID ,
           @p_var_Patient_ID,
           @p_var_Shift_ID ,
           @p_var_M_S ,
           @p_var_Todays_Date ,
           @p_var_G  ,
           @p_var_P  ,
           @p_var_A  ,
           @p_var_L  ,
           @p_var_Obstrac_History  ,
           @p_var_LMP ,
           @p_var_EDD ,
           @p_var_Medical_HO   ,
           @p_var_Surgical_HO  ,
           @p_var_Height ,
           @p_var_Flu_Vaccine  ,
           @p_var_INJ_TT_1    ,
           @p_var_INJ_TT_2     ,
           @p_var_INJ_TT_3    ,
           @p_var_Blood_Group ,
           @p_var_Hb  ,
           @p_var_BSL ,
           @p_var_VDRL,
           @p_var_HIV ,
           @p_var_HCV ,
           @p_var_BP  ,
           @p_var_HBsAg ,
           @p_var_Urine ,
           @p_var_TSH   ,
           @p_var_Dual_Marker	,
           @p_var_Triple_Marker	   	,
           @p_var_Quadrulple_Marker ,
           @p_var_Hb_Electrophoresis,
           @p_var_High_Risk,
		   @p_var_LoginId ,
		   getdate(),
		   	   @p_var_LoginId ,
		   getdate()
		   )  ;

select GDR.DeliveryReg_ID from [Gynec_Delivery_Registration] GDR where  GDR.Patient_ID = @p_var_Patient_ID  and gdr.Clinic_id = @p_var_Clinic_ID


		   
		   	  UPDATE [dbo].[Sequence_Nos]
					  SET Last_SequenceNo = @bintLastSequenceNo
					  WHERE Clinic_ID = @p_var_Clinic_ID AND Entity_Type = 'GDR'

	

			end


			
MERGE [dbo].Gynec_USG_Summary_Delivery_Reg AS [Target]
USING @p_dt_UsgSummary AS [Source]
ON [Target].deliveryReg_ID = [Source].deliveryReg_ID and 
[Target].USg_id = [Source].USg_id
WHEN MATCHED THEN
    UPDATE SET 
	[target].[D_Date] = [source].[D_Date]
	,[target].[G_Wt]  = [source].[G_Wt] 
	,[target].[Present] = [source].[Present]
	,[target].[Placenta] = [source].[Placenta]
	,[target].[Liquor] = [source].[Liquor]
	,[target].[EDD] = [source].[EDD] 
	,[target].[wt_gm] = [source].[wt_gm]
	,[target].[ModifiedBy] = @p_var_LoginId
	,[target].[ModifiedOn] = getdate()
	     
               
WHEN NOT MATCHED THEN
    INSERT (  
	DeliveryReg_ID, 
	[D_Date]
    ,[G_Wt]
    ,[Present]
    ,[Placenta]
    ,[Liquor]
    ,[EDD]
    ,[wt_gm]
	,createdBy
	,createdOn)
    VALUES (
	@nvarDeliRegNo
	,[source].[D_Date]
	,[source].[G_Wt]
	,[source].[Present]
	,[source].[Placenta]
	,[source].[Liquor]
	,[source].[EDD]
	,[source].[wt_gm]
	,@p_var_LoginId
	,getdate()
	);

		select UGDR.usg_id from Gynec_USG_Summary_Delivery_Reg UGDR where  UGDR.deliveryReg_ID = @nvarDeliRegNo   --and UGDR.Clinic_id = @p_var_Clinic_ID

	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END



/****** Object:  StoredProcedure [dbo].[USP_Insert_Referral_Doctor_List]    Script Date: 20-Nov-18 8:28:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Log_Error]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	:  24-Mar-2016
-- Description	:  This stored procedure will Get the error message in error log.
-- Created By	:  Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_Log_Error]
	@USER_ID VARCHAR(100),
	@FUNCTION_NAME VARCHAR(30),
	@SCREEN_PAGE VARCHAR(20),
	@ERROR_DATE DATETIME,
	@ERROR_MESSAGE NVARCHAR(4000)
	
 AS 
 BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 	BEGIN TRY
		INSERT INTO [dbo].[ERROR_LOG] (USER_ID,FUNCTION_NAME,SCREEN_PAGE,ERROR_DATE,ERROR_MESSAGE)
		VALUES(@USER_ID,@FUNCTION_NAME,@SCREEN_PAGE,@ERROR_DATE,@ERROR_MESSAGE)
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END


















/****** Object:  StoredProcedure [dbo].[USP_Partial_Search_Previous_Complaints]    Script Date: 16-Jan-18 8:32:31 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Partial_Search_Previous_Complaints]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 27 June 2017
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Partial_Search_Previous_Complaints]

	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30),
	@p_var_Clinic_ID   NVARCHAR(30),
	@p_var_Patient_ID   NVARCHAR(32),
	@p_date_TodyasVisitDate	DATE
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		
		;WITH  PreviousVisits AS 
                (
                        SELECT     DISTINCT ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      PV.Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,PV.Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,PV.Instructions,PV.Fees_To_Collect,
									PV.Fees_Collected,Medicine_Name=STUFF((SELECT ', ' + Medicine_Name
									FROM Visit_Prescription_Overwrite b 
									WHERE b.Patient_ID=PV.Patient_ID
															AND	b.Visit_Date=PV.Visit_Date
															AND	b.Patient_Visit_No=PV.Patient_Visit_No
															AND	b.Doctor_ID=pv.Doctor_ID
															AND	b.Clinic_ID=PV.Clinic_ID
															AND b.Delete_Indicator=0
									FOR XML PATH('')), 1, 2, ''),
									PV.Weight_IN_KGS,PV.Visit_Comments,Observation,
									'Patient_Visit' AS Visit_Type,

									Complaints=STUFF((SELECT ', ' + Complaint_Description
									FROM Visit_Complaints b 
									WHERE	b.Patient_ID=PV.Patient_ID
											AND	b.Visit_Date=PV.Visit_Date
											AND	b.Patient_Visit_No=PV.Patient_Visit_No
											AND	b.Doctor_ID=pv.Doctor_ID
											AND	b.Clinic_ID=PV.Clinic_ID
											AND b.Delete_Flag=0
									FOR XML PATH('')), 1, 2, ''),

									FUT.[FollowUp_Description] AS FollowUp_Description,
									Diagnosis=STUFF((SELECT ', ' + Desease_Description
									FROM Visit_Diagnosis b 
									WHERE	b.Patient_ID=PV.Patient_ID
											AND	b.Visit_Date=PV.Visit_Date
											AND	b.Patient_Visit_No=PV.Patient_Visit_No
											AND	b.Doctor_ID=pv.Doctor_ID
											AND	b.Clinic_ID=PV.Clinic_ID
											AND b.Delete_Flag=0
									FOR XML PATH('')), 1, 2, ''),
									DM.Prefix+' '+DM.First_Name  AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END,
									ISNULL(PV.[Addendum],'') AS Addendum
													 
                        FROM        Patient_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									LEFT JOIN [dbo].[Follow-Up_type] FUT
									ON	  PV.[follow_up_type]	=	FUT.ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID
                                   
                        WHERE        
                                    --PV.Doctor_ID  =	'DR-00003'
                                 CONVERT(DATETIME, CONVERT(CHAR(8),PV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < CONVERT(DATETIME, CONVERT(CHAR(8),GETDATE(),112) + ' ' + CONVERT(CHAR(8), GETDATE(),108))
                                                                           
                        AND         Status_ID = 5 
                        AND         PV.Delete_Flag = 0
						AND			PV.Patient_ID	=	@p_var_Patient_ID
						--AND			PV.Clinic_ID=  @p_var_Clinic_Id	--newly added
             
                )

				SELECT    replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') AS Visit_Date , 
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ISNULL(Medicine_Name,'') AS Medicine_Name,
								Instructions,
								Fees_To_Collect,
								Fees_Collected,
								ISNULL(Weight_IN_KGS,0) AS Weight_IN_KGS,
								ISNULL(Visit_Comments,'') AS Visit_Comments,
								
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' * '  +	CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) +'!'+CONVERT(NVARCHAR(15),Patient_Visit_No)+'!'+replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') AS DATE_TIME_NUMBER,
								Visit_Type,
								Complaints,
								Observation,
								FollowUp_Description,
								Diagnosis,
								DoctorName,
								P+' '+L+' '+R AS PLR,
								Addendum,
									Doctor_ID as prevDoctor_ID 
					
					FROM PreviousVisits 

				WHERE Complaints   LIKE '%' + @p_var_search_str + '%'
				OR  Diagnosis   LIKE '%' + @p_var_search_str + '%'
				OR	Medicine_Name LIKE '%' + @p_var_search_str + '%'

				order by ROWNUM ASC

	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END







/****** Object:  StoredProcedure [dbo].[USP_Get_Patient_Previous_Visits]    Script Date: 25-Jan-18 5:15:41 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_PartialSearch_AreaDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 12 Sep 2016
-- Description  : This stored procedure will Search the Area Wise Patient Count List
--  created By  : Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_PartialSearch_AreaDetails]

@p_var_Language_ID		INT,
@p_var_areaname			NVARCHAR(100)



AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		;WITH PatientCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,AM.ID
										FROM [dbo].[Patient_Master]	PM
                                        INNER JOIN   Area_Master AM  ON AM.ID=PM.Area_ID
                                        GROUP BY AM.ID
							)

		SELECT	Area_ID,AT.Area_Name,ISNULL([Is_Activate],0) AS Is_Activate,ISNULL(CONVERT(NVARCHAR,MRC.PatientCount,100),'--') AS PatientCount
	    FROM	Area_Translations AT 
		
		INNER JOIN Area_Master AM 
		ON		AT.Area_ID=AM.ID 
		AND		AT.City_ID = AM.City_ID
		AND		AT.Country_ID = AM.Country_ID

		 LEFT JOIN PatientCount MRC ON
		 AM.ID = MRC.ID

	    WHERE	
	    		AT.Area_Name LIKE '%'+@p_var_areaname+'%' 
		OR		MRC.PatientCount LIKE '%'+@p_var_areaname+'%' 
		AND		( AT.Language_Id = @p_var_Language_ID )

		--ORDER BY MRC.PatientCount DESC



		;WITH PatientVisitCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,PV.Patient_ID
										FROM [dbo].[Patient_Master]	PM
                                        
										INNER JOIN   Patient_Visits PV  ON PM.ID=PV.Patient_ID
										AND		PM.Doctor_ID	=	PV.Doctor_ID
										
										WHERE	Status_ID = 5
										AND		Delete_Flag = 0
										
										GROUP BY PV.Patient_ID
									) 
		 

	   SELECT	PM.ID,pm.First_Name+' '+pm.Middle_Name+' '+ pm.Last_Name as Full_Name,
					pm.Folder_No,
					Mobile_1 = CASE WHEN datalength(Mobile_1)=0 
			            THEN '--' 
						ELSE Mobile_1 END,

					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
					,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
					,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
					GT.Gender_Description,
					AT.Area_Name,
					ISNULL(CONVERT(NVARCHAR,PVC.PatientCount,100),'--') AS PatientCount,
					ISNULL(PVC.PatientCount,0) AS PC
					
			FROM	Patient_Master pm
			
			
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			INNER JOIN	Area_Translations AT
			ON		PM.Area_ID = AT.Area_ID

			LEFT JOIN PatientVisitCount PVC
			ON	pm.ID = PVC.Patient_ID

			WHERE	
					(PM.First_Name LIKE '%'+@p_var_areaname+'%' 
			OR		PM.Last_Name LIKE '%'+@p_var_areaname+'%' 
			OR		PM.Mobile_1 LIKE '%'+@p_var_areaname+'%' )
			AND		GT.Language_Id = @p_var_Language_ID
			AND		AT.Language_Id = @p_var_Language_ID

		--	ORDER BY PVC.PatientCount DESC


		;WITH LabCount AS (
          --                             SELECT  COUNT(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										--FROM Patient_Visit_LabTestResults	PVL
          --                              INNER JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description and am.Doctor_ID=PVL.Doctor_ID
          --                              INNER JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										--AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
										--AND	PV.Status_ID = 5
										--AND PV.Delete_Flag = 0
										--AND PVL.Delete_Flag=0
										--GROUP BY PVL.Lab_Test_Description
										SELECT count(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										FROM Patient_Visit_LabTestAsked	PVL


                                      inner JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description and am.Doctor_ID=PVL.Doctor_ID
                                        inner JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
									AND	PV.Status_ID = 5
										AND PV.Delete_Flag = 0
										AND PVL.Delete_Flag=0

										GROUP BY PVL.Lab_Test_Description
							)

		SELECT DISTINCT	AM.ID,AM.Lab_Test_Description,ISNULL(CONVERT(NVARCHAR,MRC.LabCount,100),'--') AS LabCount,
				ISNULL(MRC.LabCount,0) AS PC
		FROM		Lab_Test_Master AM

		 INNER JOIN LabCount MRC ON
		 AM.Lab_Test_Description = MRC.Lab_Test_Description

		 WHERE AM.Lab_Test_Description LIKE '%'+@p_var_areaname+'%' 
		 or   MRC.LabCount LIKE '%'+@p_var_areaname+'%' 
		
		--ORDER BY MRC.LabCount DESC
		

	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_PartialSearch_PrescriptionDetails]    Script Date: 16-Jan-18 8:33:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_PartialSearch_Insurance_Company]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author : INCRUST
-- Create date : 06 Sep 2016
-- Description : This stored procedure will Search the Prescription Record.
-- created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_PartialSearch_Insurance_Company]

@p_var_cat_short_name NVARCHAR(100)



AS
BEGIN

SET NOCOUNT ON;
BEGIN TRY

SELECT Company_Id as ID, Company_Name as Name
FROM Insurance_Company_Master
WHERE Company_Name LIKE '%'+@p_var_cat_short_name+'%'
-- OR Medicine_Description LIKE '%'+@p_var_cat_short_name+'%'
--OR CONVERT(NVARCHAR(50),ISNULL(Priority_Value,0)) LIKE '%'+@p_var_cat_short_name+'%')
--AND DOCTOR_ID = @p_var_DoctorID





END TRY
BEGIN CATCH
SELECT
ERROR_NUMBER() AS ErrorNumber,
ERROR_MESSAGE() AS ErrorMessage;
END CATCH


END
















GO
/****** Object:  StoredProcedure [dbo].[USP_PartialSearch_PrescriptionDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 06 Sep 2016
-- Description  : This stored procedure will Search the Prescription Record.
--  created By  : Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_PartialSearch_PrescriptionDetails]

@p_var_cat_short_name		NVARCHAR(100),
@p_var_DoctorID				NVARCHAR(30)


AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction
		FROM    Prescription_Medicines  
		WHERE	(Cat_Short_Name  LIKE '%'+@p_var_cat_short_name+'%'
		OR		CatSub_Description  LIKE '%'+@p_var_cat_short_name+'%'
		OR		Medicine_Name  LIKE '%'+@p_var_cat_short_name+'%'
		OR		Brand_Name  LIKE '%'+@p_var_cat_short_name+'%'
		OR		Marketed_By  LIKE '%'+@p_var_cat_short_name+'%'
		OR		CONVERT(NVARCHAR(50),isnull(Priority_Value,0))  LIKE '%'+@p_var_cat_short_name+'%')
		AND		DOCTOR_ID	=	@p_var_DoctorID
		
		SELECT  Short_Description,Medicine_Description,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction
		FROM    Medicine_Master  
		WHERE	(Short_Description		 LIKE '%'+@p_var_cat_short_name+'%'
		OR		Medicine_Description	 LIKE '%'+@p_var_cat_short_name+'%'
		OR		CONVERT(NVARCHAR(50),ISNULL(Priority_Value,0)) LIKE '%'+@p_var_cat_short_name+'%')
		AND		DOCTOR_ID	=	@p_var_DoctorID

		SELECT  Short_Description,Complaint_Description,Priority_Value, ISNULL([Display_to_Operator],0) AS Display_to_Operator
		FROM    [dbo].[Complaint_Master]
		WHERE	(Short_Description					LIKE '%'+@p_var_cat_short_name+'%'
		OR		Complaint_Description				LIKE '%'+@p_var_cat_short_name+'%'
		OR		CONVERT(NVARCHAR(50),ISNULL(Priority_Value,0)) LIKE '%'+@p_var_cat_short_name+'%')
		AND		DOCTOR_ID	=	@p_var_DoctorID

		SELECT  Short_Description,Diagnosis_Description,Priority_Value
		FROM    [dbo].[Diagnosis_Master]
		WHERE	(Short_Description					LIKE '%'+@p_var_cat_short_name+'%'
		OR		Diagnosis_Description				LIKE '%'+@p_var_cat_short_name+'%'
		OR		CONVERT(NVARCHAR(50),ISNULL(Priority_Value,0)) LIKE '%'+@p_var_cat_short_name+'%')
		AND		DOCTOR_ID	=	@p_var_DoctorID

		SELECT  ID,Lab_Test_Description,Priority_Value
		FROM    [dbo].[Lab_Test_Master]

		WHERE DOCTOR_ID	=	@p_var_DoctorID and Lab_Test_Description	LIKE '%'+@p_var_cat_short_name+'%'
		

		SELECT UPPER(Company_Name) AS Company_Name,Company_Description,LoginName,LoginPassword
		FROM Company_Master
		WHERE	Company_Name LIKE '%'+@p_var_cat_short_name+'%'
		OR		Company_Description	LIKE '%'+@p_var_cat_short_name+'%'
		OR		LoginName	LIKE '%'+@p_var_cat_short_name+'%'
		--OR		LoginPassword	LIKE '%'+@p_var_cat_short_name+'%'

		SELECT  UPPER(Company_Name) AS Company_Name,MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name AS MRName,MM.Short_Name,MM.Mobile_No,MR_ID 
		FROM MR_Master MM
		
		WHERE	(Company_Name LIKE '%'+@p_var_cat_short_name+'%'
		OR		First_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		Last_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		Short_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		Mobile_No	LIKE '%'+@p_var_cat_short_name+'%'
		)
		AND	Delete_Flag=0


		 /************Company Names with MR Count************/
		 ;WITH MRCount AS (SELECT UPPER(CM.Company_Name) AS Company_Name,
                                        COUNT(MM.MR_ID) AS MRCOUNT
							FROM [dbo].[Company_Master] CM
                            INNER JOIN   MR_Master MM  ON                  
							
							MM.[Company_Name]=CM.[Company_Name]
                            WHERE MM.Delete_Flag=0
                            GROUP BY UPPER(CM.Company_Name) 
							)

		SELECT   UPPER(CM.Company_Name) AS Company_Name,CM.Company_Description,CM.LoginName,CM.LoginPassword,ISNULL(CM.Delete_Flag,0) AS Delete_Flag,
		ISNULL(MRC.MRCOUNT,0) AS MRCount
               FROM              [dbo].[Company_Master] CM

               
              
               LEFT JOIN MRCount MRC 
               ON CM.[Company_Name] = MRC.Company_Name

               WHERE	CM.Delete_Flag=0
			   AND	CM.Company_Name LIKE '%'+@p_var_cat_short_name+'%'
				OR	CM.Company_Description	LIKE '%'+@p_var_cat_short_name+'%'
				OR	CM.LoginName	LIKE '%'+@p_var_cat_short_name+'%'
				--OR	CM.LoginPassword	LIKE '%'+@p_var_cat_short_name+'%'

		SELECT  Cat_Short_Name,Cat_Long_Description
		FROM    [dbo].[Prescription_Category]
		WHERE
				DOCTOR_ID	=	@p_var_DoctorID AND	
				(Cat_Short_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		[Cat_Long_Description]	LIKE '%'+@p_var_cat_short_name+'%')
		

		SELECT  Cat_Short_Name,CatSub_Description
		FROM    [dbo].[Prescription_SubCategory]
		WHERE	DOCTOR_ID	=	@p_var_DoctorID AND	
		(Cat_Short_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		CatSub_Description	LIKE '%'+@p_var_cat_short_name+'%')
		

		SELECT  Procedure_Description,Priority_Value
		FROM    Doctor_Procedure_Master
		WHERE	DOCTOR_ID	=	@p_var_DoctorID AND	
		        Procedure_Description	LIKE '%'+@p_var_cat_short_name+'%'
		OR		CONVERT(NVARCHAR(50),ISNULL(Priority_Value,0)) LIKE '%'+@p_var_cat_short_name+'%'
		

		SELECT  Procedure_Description,Findings_Description,Priority_Value
		FROM    Doctor_Procedure_Findings
		WHERE	DOCTOR_ID	=	@p_var_DoctorID AND
		        Procedure_Description	LIKE '%'+@p_var_cat_short_name+'%'
		OR		Findings_Description	LIKE '%'+@p_var_cat_short_name+'%'
		OR		CONVERT(NVARCHAR(50),ISNULL(Priority_Value,0)) LIKE '%'+@p_var_cat_short_name+'%'
		
		SELECT	Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,ISNULL(Sequence_No,0) AS Sequence_No,isnull(Isdefault,0) as Isdefault,ISNULL(Visit_Type,'') AS Visit_Type,
				Isnull(BVT.Billing_VisitType_Description,'' ) AS Billing_VisitType_Description,BVT.Billing_VisitType_ID
		FROM	[dbo].[Billing_Details_Master] BDM


		INNER JOIN Billing_VisitType_Translations BVT
		ON	BDM.Visit_Type=BVT.Billing_VisitType_ID

		WHERE   DOCTOR_ID	=	@p_var_DoctorID AND
			    Billing_Details	LIKE '%'+@p_var_cat_short_name+'%'
		OR		Billing_Group_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		Billing_Subgroup_Name	LIKE '%'+@p_var_cat_short_name+'%'
		OR		ISNULL(CAST(Default_Fees AS nvarchar(10)),'')  LIKE '%'+@p_var_cat_short_name+'%'
		OR		ISNULL(CAST(Sequence_No AS nvarchar(10)),'')  LIKE '%'+@p_var_cat_short_name+'%'
		OR		BVT.Billing_VisitType_Description	LIKE '%'+@p_var_cat_short_name+'%'
		

		SELECT		[Keyword],[Description]
		FROM		[dbo].[IPD_Keywords] DM
		WHERE		DM.[Keyword] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Description] LIKE '%'+@p_var_cat_short_name+'%' 

		SELECT * 
		FROM	IPD_DischargeData p
		WHERE	p.[IPD_Keyword] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	p.[Diagnosis] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	p.[Complaints] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	p.[History] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	p.[Investigations] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	p.[OE]  LIKE '%' + @p_var_cat_short_name + '%'
					OR	p.[SE]  LIKE '%' + @p_var_cat_short_name + '%'
					OR	p.[Procedure]  LIKE '%' + @p_var_cat_short_name + '%'
					OR	p.[Treatment]  LIKE '%' + @p_var_cat_short_name + '%'
					OR	p.[Discharge]  LIKE '%' + @p_var_cat_short_name + '%'
					OR	p.[Instructions]  LIKE '%' + @p_var_cat_short_name + '%'
					OR	p.[Operative_Notes_Description]  LIKE '%' + @p_var_cat_short_name + '%'
					AND (p.Delete_Flag=0)

		SELECT		[Charges_Category],[Charges_SubCategory],[Comments],[Amount],[SortOrder]
		FROM		[dbo].[IPD_BillData_CHARGESMASTER] DM
		WHERE		DM.[Charges_Category] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Charges_SubCategory] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Comments] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Amount] LIKE '%'+@p_var_cat_short_name+'%' 
					AND(DM.[Delete_Flag]=0)
		ORDER BY	[SortOrder]

		SELECT		[IPD_Keyword],[Charges_Category],[Charges_SubCategory],[Comments],[SortOrder]
		FROM		[dbo].[IPD_BillData] DM
		WHERE		DM.[IPD_Keyword] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Charges_Category] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Charges_SubCategory] LIKE '%'+@p_var_cat_short_name+'%' 
					OR	DM.[Comments] LIKE '%'+@p_var_cat_short_name+'%' 
					AND(DM.[Delete_Flag]=0)
		ORDER BY	[IPD_Keyword],[SortOrder]


		SELECT	[Description],[Unit_Price],[SortOrder]
		FROM	[dbo].[IPD_INVOICE_MEDICINEMASTER] DM
		WHERE	DM.[Description] LIKE '%'+@p_var_cat_short_name+'%' 
		OR		DM.[Unit_Price] LIKE '%'+@p_var_cat_short_name+'%' 
		AND		(DM.[Delete_Flag] = 0)
		ORDER BY	[SortOrder]

		SELECT	[IPD_Keyword],[Description],[Quantity],[SortOrder]
		FROM	[dbo].[IPD_INVOICEDATA] DM
		WHERE	
				DM.IPD_Keyword LIKE '%'+@p_var_cat_short_name+'%' 
		OR		DM.[Description] LIKE '%'+@p_var_cat_short_name+'%' 
		OR		DM.[Quantity] LIKE '%'+@p_var_cat_short_name+'%' 
		AND		(DM.[Delete_Flag] = 0)
		ORDER BY [IPD_Keyword],	[SortOrder]

		SELECT	[Category_Description],[Findings_Description]
		FROM	[dbo].[Gynec_Abdominal_Examination_Master] DM
		WHERE	
				DM.[Category_Description] LIKE '%'+@p_var_cat_short_name+'%' 
		OR		DM.[Findings_Description] LIKE '%'+@p_var_cat_short_name+'%' 
		AND		(ISNULL(DM.[Delete_Flag],0) = 0)

		SELECT		[Charges_SubCategory],[SortOrder]
		FROM		[dbo].[IPD_SubCategory_CHARGESMASTER] DM
		WHERE		
					DM.[Charges_SubCategory] LIKE '%'+@p_var_cat_short_name+'%' 
					AND(DM.[Delete_Flag]=0)
		ORDER BY	[SortOrder]

		SELECT	[Charges_SubCategory],ISNULL(CAST([SortOrder] AS nvarchar(10)),'') AS SortOrder
		FROM	[dbo].[IPD_SubCategory_CHARGESMASTER] BDM
		
		WHERE	[Charges_SubCategory]		=	@p_var_cat_short_name
		ORDER BY	[SortOrder]

		SELECT	VGI.IPD_RefNo,[Bill_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
				ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,
				ISNULL(CONVERT(VARCHAR(11),VGI.[Bill_Date],106),'') AS Bill_Date,
				PM.First_Name + ' ' +PM.Last_Name AS Name,
				ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name
			
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	
					--VGI.Doctor_ID	=   @p_var_Doctor_Id 
					ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
					[Bill_No] LIKE '%' + @p_var_cat_short_name + '%'
			OR		DD.[IPD_RefNo] LIKE '%' + @p_var_cat_short_name + '%'
			OR		First_Name  LIKE '%' + @p_var_cat_short_name + '%'
			--OR		Middle_Name LIKE '%' + @p_var_search_str + '%'
			OR		Last_Name	 LIKE '%' + @p_var_cat_short_name + '%'
			OR		First_Name+' '+Last_Name LIKE '%' + @p_var_cat_short_name + '%'
			
			)	

			ORDER BY VGI.IPD_RefNo DESC


			SELECT	VGI.[IPD_RefNo],[Invoice_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Invoice_Date],106),'') AS Invoice_Date
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	
					--VGI.Doctor_ID	=   @p_var_Doctor_Id 
					ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
					[Invoice_No] LIKE '%' + @p_var_cat_short_name + '%'
			OR		DD.[IPD_RefNo] LIKE '%' + @p_var_cat_short_name + '%'
			OR		First_Name  LIKE '%' + @p_var_cat_short_name + '%'
			
			OR		Last_Name	 LIKE '%' + @p_var_cat_short_name + '%'
			OR		First_Name+' '+Last_Name LIKE '%' + @p_var_cat_short_name + '%'
					)
			ORDER BY VGI.IPD_RefNo DESC

			SELECT [IPD_RefNo],[Admission_Time],[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Time],[Weight],[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],ISNULL([Keyword],'') AS Keyword,
			First_Name + ' ' +Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),[Admission_Date],106),'') AS Admission_Date,
			ISNULL(CONVERT(VARCHAR(11),[Discharge_Date],106),'') AS Discharge_Date,
			ISNULL(CONVERT(VARCHAR(11),DD.Modified_On,106),'') AS Modified_On,DD.ModifiedBy_Name
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Discharge_Data] DD
			ON	DD.Patient_ID = p.ID	

			 WHERE 
			 		ISNULL(DD.Is_Printed,0)	=	0
			  AND ( 
			 			DD.[IPD_RefNo] LIKE '%' + @p_var_cat_short_name + '%'
				  OR	p.First_Name  LIKE '%' + @p_var_cat_short_name + '%'
				  --OR	p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			      OR	p.Last_Name	 LIKE '%' + @p_var_cat_short_name + '%'
				  OR	p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_cat_short_name + '%'
			 )
	
			ORDER BY DD.[IPD_RefNo] DESC

	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END

















GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Area]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  23-Mar-2016
-- Description	:  This stored procedure will used to search area
--				   If not a valid user will return 0 else will return 1   
-- Created By	:  Snehal Shinde
-- Modified By	:
-- =============================================

CREATE PROCEDURE [dbo].[USP_Search_Area]

	@p_var_search_str  NVARCHAR(60),
	@P_var_Language_Id INT
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
  SET NOCOUNT ON;

   BEGIN TRY
		SELECT	Area_Name,Area_ID,AT.City_ID,AT.State_ID
	    FROM	Area_Translations AT INNER JOIN 
				Area_Master AM 
		ON		AT.Area_ID=AM.ID 
		AND		AT.City_ID = AM.City_ID
		AND		AT.Country_ID = AM.Country_ID
	    WHERE	AT.Language_Id=@P_var_Language_Id 
	    AND		AT.Area_Name LIKE '%'+@p_var_search_str+'%' 
		AND		ISNULL(AM.Is_Activate,0) = 1


		;WITH PatientCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,AM.ID
										FROM [dbo].[Patient_Master]	PM
                                        INNER JOIN   Area_Master AM  ON AM.ID=PM.Area_ID
                                        GROUP BY AM.ID
							)

		SELECT	Isnull(AT.Area_Name,'')+'   :   '+CAST(ISNULL(MRC.PatientCount,0) AS varchar(10)) AS Search_Value
	    FROM	Area_Translations AT 
		
		INNER JOIN Area_Master AM 
		ON		AT.Area_ID=AM.ID 
		AND		AT.City_ID = AM.City_ID
		AND		AT.Country_ID = AM.Country_ID

		 LEFT JOIN PatientCount MRC ON
		 AM.ID = MRC.ID

	    WHERE	AT.Language_Id=@P_var_Language_Id 
	    AND		AT.Area_Name LIKE '%'+@p_var_search_str+'%' ;


		;WITH LabCount AS (
                                       SELECT COUNT(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										FROM Patient_Visit_LabTestAsked	PVL
                                        INNER JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description
                                        INNER JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
										AND	PV.Status_ID = 5
										AND PV.Delete_Flag = 0
										AND PVL.Delete_Flag=0
										GROUP BY PVL.Lab_Test_Description
							)

		SELECT distinct	Isnull(AM.Lab_Test_Description,'')+'   :   '+CAST(ISNULL(MRC.LabCount,0) AS varchar(10)) AS Search_Value

		FROM		Lab_Test_Master AM

		 INNER JOIN LabCount MRC ON
		 AM.Lab_Test_Description = MRC.Lab_Test_Description

		 WHERE AM.Lab_Test_Description LIKE '%'+@p_var_search_str+'%' ;
		 

   END TRY
   BEGIN CATCH
	  SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_Area_Wise_Patient]    Script Date: 16-Jan-18 8:07:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Area_Wise_Patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	:  05 Jul 2017
-- Description	:  This stored procedure will search patient whose amount is pending
-- Created By	:  Varsha Khandre
-- =============================================

 CREATE PROCEDURE [dbo].[USP_Search_Area_Wise_Patient]
	
	@p_var_Language_ID		INT,
	@p_var_Pat_Count		INT,
	@p_var_AreaName			NVARCHAR(100)

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	;WITH PatientCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,AM.ID
										FROM [dbo].[Patient_Master]	PM
                                        INNER JOIN   Area_Master AM  ON AM.ID=PM.Area_ID
                                        GROUP BY AM.ID
							)

		SELECT	Area_ID,AT.Area_Name,ISNULL([Is_Activate],0) AS Is_Activate,ISNULL(CONVERT(NVARCHAR,MRC.PatientCount,100),'--') AS PatientCount
	    FROM	Area_Translations AT 
		
		INNER JOIN Area_Master AM 
		ON		AT.Area_ID=AM.ID 
		AND		AT.City_ID = AM.City_ID
		AND		AT.Country_ID = AM.Country_ID

		 LEFT JOIN PatientCount MRC ON
		 AM.ID = MRC.ID

	    WHERE	AT.Language_Id=@P_var_Language_Id 
	    AND		AT.Area_Name = @p_var_AreaName
		AND		ISNULL(MRC.PatientCount,0) = @p_var_Pat_Count


		;WITH LabCount AS (
                                       SELECT COUNT(PVL.Lab_Test_Description) AS LabCount,PVL.Lab_Test_Description
										FROM Patient_Visit_LabTestAsked	PVL
                                        INNER JOIN   Lab_Test_Master AM  ON AM.Lab_Test_Description=PVL.Lab_Test_Description
                                        INNER JOIN Patient_Visits PV ON PV.Patient_ID = PVL.Patient_ID
										AND	PV.Patient_Visit_No = PVL.Patient_Visit_No
										AND	PV.Status_ID = 5
										AND PV.Delete_Flag = 0
										AND PVL.Delete_Flag=0
										GROUP BY PVL.Lab_Test_Description
							)

		SELECT  distinct	AM.ID,AM.Lab_Test_Description,ISNULL(CONVERT(NVARCHAR,MRC.LabCount,100),'--') AS LabCount,
				ISNULL(MRC.LabCount,0) AS PC

		FROM	Lab_Test_Master AM

		 INNER JOIN LabCount MRC ON
		 AM.Lab_Test_Description = MRC.Lab_Test_Description

		 WHERE AM.Lab_Test_Description = @p_var_AreaName
		 AND	ISNULL(MRC.LabCount,0) = @p_var_Pat_Count
		
	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END




















/****** Object:  StoredProcedure [dbo].[USP_Search_BillCharges_ForManageMasterData]    Script Date: 16-Jan-18 8:07:57 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_BillCharges_ForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  02 May 2017
-- Description :  This stored procedure will Search billing details for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_BillCharges_ForManageMasterData]
	
	@p_var_search_str  VARCHAR(60)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull([Charges_Category],'')+'   :   '+Isnull([Charges_SubCategory],'' )+'   :   '+Isnull([Comments],'' )+'   :   '+ISNULL(CAST([Amount] AS nvarchar(10)),'') as SEARCH_VALUE

			  FROM  [dbo].[IPD_BillData_CHARGESMASTER] BDM

			 WHERE 
			
					(
						BDM.[Charges_Category] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Charges_SubCategory] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Comments] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Amount] LIKE '%'+@p_var_search_str+'%' 
					
					OR  Isnull([Charges_Category],'')+'   :   '+Isnull([Charges_SubCategory],'' )+'   :   '+Isnull([Comments],'' )+'   :   '+ISNULL(CAST([Amount] AS nvarchar(10)),'') LIKE '%' + @p_var_search_str + '%'
					)


			SELECT Isnull([IPD_Keyword],'')+'   :   '+Isnull([Charges_Category],'')+'   :   '+Isnull([Charges_SubCategory],'' )+'   :   '+Isnull([Comments],'' ) as SEARCH_VALUE

			FROM  [dbo].[IPD_BillData] BDM

			WHERE 
			
					(
						BDM.[Charges_Category] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Charges_SubCategory] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Comments] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[IPD_Keyword] LIKE '%'+@p_var_search_str+'%' 
					
					OR  Isnull([IPD_Keyword],'')+'   :   '+Isnull([Charges_Category],'')+'   :   '+Isnull([Charges_SubCategory],'' )+'   :   '+Isnull([Comments],'' ) LIKE '%' + @p_var_search_str + '%'
					)



			SELECT Isnull([Description],'')+'   :   '+ISNULL(CAST([Unit_Price] AS nvarchar(10)),'') as SEARCH_VALUE

			FROM [dbo].[IPD_INVOICE_MEDICINEMASTER] BDM

			WHERE 
					(
						BDM.[Description] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Unit_Price] LIKE '%'+@p_var_search_str+'%' 
					
					OR Isnull([Description],'')+'   :   '+ISNULL(CAST([Unit_Price] AS nvarchar(10)),'') LIKE '%' + @p_var_search_str + '%'
					)

			SELECT Isnull([IPD_Keyword],'')+'   :   '+Isnull([Description],'')+'   :   '+ISNULL(CAST([Quantity] AS nvarchar(10)),'') as SEARCH_VALUE

			FROM  [dbo].[IPD_INVOICEDATA]	BDM

			WHERE 
					(
						BDM.[IPD_Keyword] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Description] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Quantity] LIKE '%'+@p_var_search_str+'%' 
					
					OR Isnull([IPD_Keyword],'')+'   :   '+Isnull([Description],'')+'   :   '+ISNULL(CAST([Quantity] AS nvarchar(10)),'') LIKE '%' + @p_var_search_str + '%'
					)


			SELECT Isnull([Category_Description],'')+'   :   '+Isnull([Findings_Description],'') as SEARCH_VALUE

			FROM  [dbo].[Gynec_Abdominal_Examination_Master]	BDM

			WHERE 
					(
						BDM.[Category_Description] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Findings_Description] LIKE '%'+@p_var_search_str+'%' 
					OR Isnull([Category_Description],'')+'   :   '+Isnull([Findings_Description],'') LIKE '%' + @p_var_search_str + '%'
					)

			SELECT Isnull([Charges_SubCategory],'' )+'   :   '+ISNULL(CAST([SortOrder] AS nvarchar(10)),'') as SEARCH_VALUE

			  FROM  [dbo].[IPD_SubCategory_CHARGESMASTER] BDM

			 WHERE 
			
					(
						
						BDM.[Charges_SubCategory] LIKE '%'+@p_var_search_str+'%' 
					OR	ISNULL(CAST([SortOrder] AS nvarchar(10)),'') LIKE '%'+@p_var_search_str+'%' 
					
					)
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_BillingDetail_ForManageMasterData]    Script Date: 16-Jan-18 8:08:08 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_BillingDetail_ForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  02 May 2017
-- Description :  This stored procedure will Search billing details for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_BillingDetail_ForManageMasterData]
	
	@p_var_search_str  VARCHAR(60),
    @p_var_Doctor_ID   NVARCHAR(30)
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull([Billing_Group_Name],'')+'   :   '+Isnull([Billing_Subgroup_Name],'' )+'   :   '+Isnull([Billing_Details],'' )+'   :   '+ISNULL(CAST(Default_Fees AS nvarchar(10)),'')+'   :   '+ISNULL(CAST(Sequence_No AS nvarchar(10)),'')+'   :   '+Isnull(BVT.Billing_VisitType_Description,'' ) as SEARCH_VALUE

			  FROM [dbo].[Billing_Details_Master] BDM

			  INNER JOIN Billing_VisitType_Translations BVT
			  ON	BDM.Visit_Type=BVT.Billing_VisitType_ID

			 WHERE 
			
					(
						BDM.[Billing_Group_Name] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Billing_Subgroup_Name] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Billing_Details] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.[Default_Fees] LIKE '%'+@p_var_search_str+'%' 
					OR	BDM.Sequence_No LIKE '%'+@p_var_search_str+'%' 
					OR	BVT.Billing_VisitType_Description LIKE '%'+@p_var_search_str+'%' 
					OR  Isnull([Billing_Group_Name],'')+'   :   '+Isnull([Billing_Subgroup_Name],'' )+'   :   '+Isnull([Billing_Details],'' )+'   :   '+ISNULL(CAST(Default_Fees AS nvarchar(10)),'')+'   :   '+ISNULL(CAST(Sequence_No AS nvarchar(10)),'')+'   :   '+Isnull(BVT.Billing_VisitType_Description,'' ) LIKE '%' + @p_var_search_str + '%'
					)
					AND BDM.Doctor_ID=@p_var_Doctor_ID


			

			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_BillingDetails]    Script Date: 16-Jan-18 8:08:17 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_BillingDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 03 May 2017
-- Description  : This stored procedure will Search the bILLING Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_BillingDetails]

@p_var_group						NVARCHAR(100),
@p_var_subgroup						NVARCHAR(100),
@p_var_billingdetails				NVARCHAR(100),
@p_var_DoctorID				         NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT	Billing_Details,Billing_Group_Name,Billing_Subgroup_Name,Default_Fees,ISNULL(Sequence_No,0) AS Sequence_No,isnull(Isdefault,0) as Isdefault,ISNULL(Visit_Type,'') AS Visit_Type,
				Isnull(BVT.Billing_VisitType_Description,'' ) AS Billing_VisitType_Description,BVT.Billing_VisitType_ID
		FROM	[dbo].[Billing_Details_Master] BDM

		INNER JOIN Billing_VisitType_Translations BVT
		ON	BDM.Visit_Type=BVT.Billing_VisitType_ID


		WHERE	Billing_Group_Name					=@p_var_group
		AND		Billing_Subgroup_Name				=@p_var_subgroup
		AND		Billing_Details						=@p_var_billingdetails
		AND     DOCTOR_ID	=	@p_var_DoctorID


		SELECT	*
		FROM	[dbo].[IPD_BillData_CHARGESMASTER] BDM
		
		WHERE	[Charges_Category]					=@p_var_group
		AND		[Charges_SubCategory]				=@p_var_subgroup

		
		
		SELECT	*
		FROM	[dbo].[IPD_BillData] BDM
		
		WHERE	[IPD_Keyword]				=	@p_var_group
		AND		[Charges_Category]			=	@p_var_subgroup
		AND		[Charges_SubCategory]		=	@p_var_billingdetails

		SELECT	*
		FROM	[dbo].[IPD_INVOICE_MEDICINEMASTER] DM
		WHERE	[Description]				=	@p_var_group
		AND		[Unit_Price]				=	@p_var_subgroup

		SELECT	*
		FROM	[dbo].[IPD_INVOICEDATA] DM
		WHERE	IPD_Keyword					=	@p_var_group
		AND		[Description]				=	@p_var_subgroup
		AND		[Quantity]					=	@p_var_billingdetails

		SELECT	[Category_Description],[Findings_Description]
		FROM	[dbo].[Gynec_Abdominal_Examination_Master] DM
		WHERE	[Category_Description]		=	@p_var_group
		AND		[Findings_Description]		=	@p_var_subgroup
		AND		ISNULL(Delete_Flag,0)		=	0

		SELECT	VGI.IPD_RefNo,[Bill_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Bill_Date],106),'') AS Bill_Date,
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name
				
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	
					
			ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
					[Bill_No] LIKE '%' + @p_var_billingdetails + '%'
			AND		DD.[IPD_RefNo] LIKE '%' + @p_var_subgroup + '%'
			
			)	
		
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_CategoryDetails]    Script Date: 16-Jan-18 8:08:29 PM ******/
SET ANSI_NULLS ON



/****** Object:  StoredProcedure [dbo].[USP_Insert_Billing_MasterData]    Script Date: 31-Jan-18 2:02:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_CategoryDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       : INCRUST
-- Create date  : 08 Sep 2016
-- Description  : This stored procedure will Search the LabTest Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_CategoryDetails]

@p_var_catshort_desc		NVARCHAR(60),
@p_var_catlong_desc			NVARCHAR(300),
@p_var_DoctorID				NVARCHAR(30)


AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Cat_Short_Name,Cat_Long_Description
		FROM    [dbo].[Prescription_Category]
		WHERE	Cat_Short_Name	=	@p_var_catshort_desc
		AND		Cat_Long_Description = @p_var_catlong_desc
		AND		DOCTOR_ID	=	@p_var_DoctorID
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_CategoryForManageMasterData]    Script Date: 16-Jan-18 8:09:45 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_CategoryForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  08 Sep 2016
-- Description :  This stored procedure will Search Category for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_CategoryForManageMasterData]
	
	@p_var_search_str  VARCHAR(60),
	@p_var_DoctorID		NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Cat_Short_Name,'')+'   :   '+ISNULL(Cat_Long_Description,'') as SEARCH_VALUE

			FROM [dbo].[Prescription_Category] PC
			WHERE 
			
					(
						(PC.Cat_Short_Name LIKE '%'+@p_var_search_str+'%' OR
						PC.Cat_Long_Description LIKE '%'+@p_var_search_str+'%')
					AND DOCTOR_ID = @p_var_DoctorID
					)
					

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_City]    Script Date: 16-Jan-18 8:09:58 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_City]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:  INCRUST
-- Create date	:  23-Mar-2016
-- Description	:  This stored procedure will used to search area
--				   If not a valid user will return 0 else will return 1   
-- Created By	:  Snehal Shinde
-- Modified By	:
-- =============================================

CREATE PROCEDURE [dbo].[USP_Search_City]
	@p_var_search_str  NVARCHAR(60),
	@P_var_Language_Id INT
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
  SET NOCOUNT ON;

   BEGIN TRY
		SELECT City_Name,CT.City_ID,CT.State_ID
	    FROM	City_Translations CT INNER JOIN 
				City_Master AM on CT.City_ID=AM.ID 
	    WHERE	CT.Language_Id=@P_var_Language_Id 
	    AND		CT.City_Name LIKE '%'+@p_var_search_str+'%' ;
   END TRY
   BEGIN CATCH
	  SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
   END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_CompanyDetails]    Script Date: 16-Jan-18 8:10:05 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_CompanyDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :26 Dec 2016
-- Description  : This stored procedure will Search the Company Record.
--  created By  : Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_CompanyDetails]
@p_var_company_name					NVARCHAR(200),
@p_var_company_desc					NVARCHAR(300),
@p_var_login						NVARCHAR(15)
--@p_var_password						NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY

		 /************Company Names with MR Count************/
		 ;WITH MRCount AS (SELECT UPPER(CM.Company_Name) AS Company_Name,
                                        COUNT(MM.MR_ID) AS MRCOUNT
							FROM [dbo].[Company_Master] CM
                            INNER JOIN   MR_Master MM  ON                  
							
							MM.[Company_Name]=CM.[Company_Name]
                            WHERE MM.Delete_Flag=0
                            GROUP BY UPPER(CM.Company_Name) 
							)

		SELECT   UPPER(CM.Company_Name) AS Company_Name,CM.Company_Description,CM.LoginName,CM.LoginPassword,ISNULL(CM.Delete_Flag,0) AS Delete_Flag,
		ISNULL(MRC.MRCOUNT,0) AS MRCount
        FROM              [dbo].[Company_Master] CM

		LEFT JOIN MRCount MRC 
               ON CM.[Company_Name] = MRC.Company_Name

		WHERE	CM.Company_Name				=	@p_var_company_name
		AND		CM.Company_Description			=	@p_var_company_desc
		AND		CM.LoginName					=	@p_var_login
		AND		CM.Delete_Flag=0
		--AND		LoginPassword				=	@p_var_password
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_CompanyForManageMasterData]    Script Date: 16-Jan-18 8:10:14 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_CompanyForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  26 Dec 2016
-- Description :  This stored procedure will Search Company for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_CompanyForManageMasterData]
	
	@p_var_search_str  VARCHAR(100)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Company_Name,'')+'   :   '+Isnull(Company_Description,'' )+'   :   ' +Isnull(LoginName,'' ) as SEARCH_VALUE

			FROM Company_Master CM
			WHERE 
			
					(
						CM.Company_Name LIKE '%'+@p_var_search_str+'%' 
					OR	CM.Company_Description LIKE '%'+@p_var_search_str+'%' 
					OR	CM.LoginName LIKE '%'+ @p_var_search_str +'%'
					--OR	CM.LoginPassword LIKE '%'+ @p_var_search_str +'%'
					)
					AND CM.Delete_Flag=0

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Search_DischargeDetails]    Script Date: 16-Jan-18 8:10:23 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_DischargeDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 06 Sep 2016
-- Description  : This stored procedure will Search the Prescription Record.
--  created By  : Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_DischargeDetails]
@p_var_keyword					NVARCHAR(60),
@p_var_diagnosis				NVARCHAR(1000),
@p_var_complaint				NVARCHAR(1000),
@p_var_history					NVARCHAR(1000),
@p_var_investigation			NVARCHAR(1000),
@p_var_OE						NVARCHAR(1000),
@p_var_SE						NVARCHAR(1000),
@p_var_procedure				NVARCHAR(1000),
@p_var_treatment				NVARCHAR(1000),
@p_var_discharge				NVARCHAR(1000),
@p_var_instruction				NVARCHAR(1000),
@p_var_operative                NVARCHAR(2000)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		
		SELECT * 
		FROM		IPD_DischargeData p
		WHERE		p.[IPD_Keyword]			=	@p_var_keyword
					AND	p.[Diagnosis]		=	@p_var_diagnosis
					AND	p.[Complaints]		=	@p_var_complaint
					AND	p.[History]			=	@p_var_history
					AND	p.[Investigations]	=	@p_var_investigation
					AND	p.[OE]				=	@p_var_OE
					AND	p.[SE]				=	@p_var_SE
					AND	p.[Procedure]		=	@p_var_procedure
					AND	p.[Treatment]		=	@p_var_treatment
					AND	p.[Discharge]		=	@p_var_discharge
					AND	p.[Instructions]	=	@p_var_instruction
					AND	p.[Operative_Notes_Description]	=	@p_var_operative
					AND (p.Delete_Flag=0)
		
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_DiseaseDetails]    Script Date: 16-Jan-18 8:10:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_DiseaseDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 06 Sep 2016
-- Description  : This stored procedure will Search the Disease Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_DiseaseDetails]

@p_var_disease_short_desc			NVARCHAR(50),
@p_var_diagnosis_desc				NVARCHAR(1000),
@p_var_priority						INT,
@p_var_DoctorID						NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Short_Description,Diagnosis_Description,Priority_Value
		FROM    [dbo].[Diagnosis_Master]
		WHERE	Short_Description			 	like '%'+@p_var_disease_short_desc+'%'
		AND		Diagnosis_Description			like '%'+@p_var_diagnosis_desc+'%'
		AND		ISNULL(Priority_Value,0)	=	@p_var_Priority
		AND		DOCTOR_ID					=	@p_var_DoctorID


		SELECT		[Keyword],ISNULL([Description],'') AS Description
		FROM		[dbo].[IPD_Keywords] DM
		WHERE		DM.Keyword	=	@p_var_disease_short_desc
		AND			ISNULL(DM.Description,'')	=	@p_var_diagnosis_desc
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_DiseaseForManageMasterData]    Script Date: 16-Jan-18 8:11:02 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_DiseaseForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  07 Sep 2016
-- Description :  This stored procedure will Search Disease for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_DiseaseForManageMasterData]
	
	@p_var_search_str  VARCHAR(100),
	@p_var_DoctorID				NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Short_Description,'')+'   :   '+Isnull(Diagnosis_Description,'' )+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			FROM [dbo].[Diagnosis_Master] DM
			WHERE 
			
					(
						(DM.Short_Description LIKE '%'+@p_var_search_str+'%' 
					OR	DM.Diagnosis_Description LIKE '%'+@p_var_search_str+'%' 
					OR	DM.Priority_Value LIKE '%'+ @p_var_search_str +'%')
					AND	DM.DOCTOR_ID	=	@p_var_DoctorID
					)

			SELECT Isnull([Keyword],'')+'   :   '+Isnull([Description],'' ) as SEARCH_VALUE

			FROM [dbo].[IPD_Keywords] DM
			WHERE 
			
					(
						DM.[Keyword] LIKE '%'+@p_var_search_str+'%' 
					OR	DM.[Description] LIKE '%'+@p_var_search_str+'%' 
					
					)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_FindingDetails]    Script Date: 16-Jan-18 8:11:14 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_FindingDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 28 Feb 2017
-- Description  : This stored procedure will Search the Findings Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_FindingDetails]

@p_var_Procedure_desc				NVARCHAR(100),
@p_var_priority						INT,
@p_var_Finding_desc					NVARCHAR(200)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Procedure_Description,Priority_Value,Findings_Description
		FROM    Doctor_Procedure_Findings
		WHERE	Procedure_Description				=@p_var_Procedure_desc
		AND		ISNULL(Priority_Value,0)			=@p_var_Priority
		AND		Findings_Description				=@p_var_Finding_desc
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_FolderName]    Script Date: 16-Jan-18 8:11:22 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_FolderName]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author      :  INCRUST
-- Create date :  29-Mar-2016
-- Description :  This stored procedure will validate the user and password.
--                If not a valid user will return 0 else will return 1   
--  created By :  suyog khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_FolderName]
	@p_var_search_FolderName  NVARCHAR(30)
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
			   
		SELECT  Folder_No
		FROM   Patient_Master
        WHERE
               Folder_No LIKE '%'+@p_var_search_FolderName+'%' 
			   GROUP BY Folder_No;
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_LabTestDetails]    Script Date: 16-Jan-18 8:11:33 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Insurance_Company_Master]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author : INCRUST
-- Create date : 08 Sep 2016
-- Description : This stored procedure will Search Category for manage master data
-- created By : Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Insurance_Company_Master]

@p_var_search_str VARCHAR(60)--,
--@p_var_DoctorID NVARCHAR(30)

AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;

BEGIN TRY


SELECT Isnull(Company_Name,'') as SEARCH_VALUE

FROM [dbo].[Insurance_Company_Master] PC
WHERE

(
PC.Company_Name LIKE '%'+@p_var_search_str+'%' --OR
--PC.Cat_Long_Description LIKE '%'+@p_var_search_str+'%')
--AND DOCTOR_ID = @p_var_DoctorID
)


END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS ErrorNumber,
ERROR_MESSAGE() AS ErrorMessage;
END CATCH
END

















/***** Object: StoredProcedure [dbo].[USP_Search_City] Script Date: 16-Jan-18 8:09:58 PM *****/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_LabTestDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       : INCRUST
-- Create date  : 08 Sep 2016
-- Description  : This stored procedure will Search the LabTest Record.
--  created By  : Varsha Khanre  
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_LabTestDetails]
@p_var_search_str		NVARCHAR(80),
@p_var_Doctor_ID			NVARCHAR(100)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT distinct ID,Lab_Test_Description,Priority_Value
		FROM    [dbo].[Lab_Test_Master]
		WHERE Doctor_ID=@p_var_Doctor_ID and
			Lab_Test_Description like	'%'+@p_var_search_str+'%' 

		
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_LabTestForManageMasterData]    Script Date: 16-Jan-18 8:11:43 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_LabTestForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  08 Sep 2016
-- Description :  This stored procedure will Search Labtest for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_LabTestForManageMasterData]
	
	@p_var_search_str		VARCHAR(60),
	@p_var_Doctor_ID		NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Lab_Test_Description,'')+'   :   '+CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			FROM [dbo].[Lab_Test_Master] LTM
			WHERE 
			
					(
						(LTM.Lab_Test_Description LIKE '%'+@p_var_search_str+'%' 
					OR	LTM.Priority_Value LIKE '%'+@p_var_search_str+'%' )
					AND (LTM.Doctor_ID = @p_var_Doctor_ID)
					)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_MedicineDetails]    Script Date: 16-Jan-18 8:11:52 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_MedicineDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 06 Sep 2016
-- Description  : This stored procedure will Search the Medicine Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_MedicineDetails]

@p_var_med_short_desc		NVARCHAR(40),
@p_var_med_desc				NVARCHAR(1000),
@p_var_priority				INT,
@p_var_DoctorID				NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Short_Description,Medicine_Description,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction
		FROM    Medicine_Master  
		WHERE	Short_Description		=	@p_var_med_short_desc
		AND		Medicine_Description	=	@p_var_med_desc
		AND		ISNULL(Priority_Value,0)=	@p_var_Priority
		AND		DOCTOR_ID				=	@p_var_DoctorID
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_MedicineForManageMasterData]    Script Date: 16-Jan-18 8:12:03 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_MedicineForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  06 Sep 2016
-- Description :  This stored procedure will Search Medicines for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_MedicineForManageMasterData]
	
	@p_var_search_str  VARCHAR(60),
	@p_var_DoctorID				NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Short_Description,'')+'   :   '+Isnull(Medicine_Description,'' )+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			  FROM Medicine_Master M
			 WHERE 
			
					(
						(M.Short_Description LIKE '%'+@p_var_search_str+'%' 
					OR	M.Medicine_Description LIKE '%'+@p_var_search_str+'%' 
					OR	M.Priority_Value LIKE '%' + @p_var_search_str + '%')
					AND	M.DOCTOR_ID	=	@p_var_DoctorID
					)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_MR]    Script Date: 16-Jan-18 8:12:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_MR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		: INCRUST
-- Create date	: 13 Dec 2016
-- Description	: This stored procedure will search MR
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_MR]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		IF EXISTS 
				(
				SELECT [MR_ID] from  [dbo].[MR_Master] MR
				 WHERE (MR.Doctor_ID=@p_var_Doctor_Id)
				  AND (MR.MR_ID			LIKE '%' + @p_var_search_str +	'%'
				 OR    MR.First_Name	LIKE '%' + @p_var_search_str + '%' 
				 OR    MR.Middle_Name	LIKE '%' + @p_var_search_str + '%'
				 OR    MR.Last_Name		LIKE '%' + @p_var_search_str + '%'
				 OR    MR.Short_Name	LIKE '%' + @p_var_search_str + '%'
				 OR    MR.Mobile_No		LIKE '%' + @p_var_search_str + '%' 
				 OR    MR.Company_Name  LIKE '%' + @p_var_search_str + '%'
				 OR	   MR.First_Name+' '+ MR.Last_Name LIKE '%' + @p_var_search_str + '%'
				 )
				 AND	MR.Delete_Flag=0
				)
		BEGIN
			SELECT CAST(ISNULL(MR_ID,'') AS varchar(10))+'   :   '+ Isnull(Company_Name,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Short_Name,'')+'   :   '+ISNULL(Mobile_No,'') as SEARCH_VALUE
			FROM [dbo].[MR_Master] MR
			 WHERE (MR.Doctor_ID=@p_var_Doctor_Id)
				  AND (MR.MR_ID			 LIKE '%' + @p_var_search_str +	'%'
				 OR    MR.First_Name  LIKE '%' + @p_var_search_str + '%' 
				 OR    MR.Middle_Name LIKE '%' + @p_var_search_str + '%'
				 OR    MR.Last_Name   LIKE '%' + @p_var_search_str + '%'
				 OR    MR.Short_Name   LIKE '%' + @p_var_search_str + '%'
				 OR    MR.Mobile_No    LIKE '%' + @p_var_search_str + '%' 
				 OR    MR.Company_Name   LIKE '%' + @p_var_search_str + '%'
				 OR	   MR.First_Name+' '+ MR.Last_Name LIKE '%' + @p_var_search_str + '%'
			 )
			 AND	MR.Delete_Flag=0
	
		END
		
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_MRDetails]    Script Date: 16-Jan-18 8:12:34 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_MRDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :26 Dec 2016
-- Description  : This stored procedure will Search the Company Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_MRDetails]
@p_var_company_name					NVARCHAR(200),
@p_var_MR_Full_Name					NVARCHAR(300),
@p_var_MR_Short_Name				NVARCHAR(15),
@p_var_mobile						NVARCHAR(30)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  UPPER(Company_Name) AS Company_Name,MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name AS MRName,MM.Short_Name,MM.Mobile_No,MR_ID
		FROM    [dbo].[MR_Master] MM
		WHERE	Company_Name				=	@p_var_company_name
		AND		MM.First_Name+' '+MM.Middle_Name+' '+MM.Last_Name =	@p_var_MR_Full_Name
		AND		Short_Name					=	@p_var_MR_Short_Name
		AND		Mobile_No=@p_var_mobile
		AND		Delete_Flag=0
		--AND		LoginPassword				=	@p_var_password
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_MRForManageMasterData]    Script Date: 16-Jan-18 8:12:43 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_MRForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  03 JAN 2017
-- Description :  This stored procedure will Search Company for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_MRForManageMasterData]
	
	@p_var_search_str  VARCHAR(100)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Company_Name,'')+'   :   '+Isnull(First_Name+' '+Middle_Name+' '+Last_Name,'' )+'   :   ' +Isnull(Short_Name,'' )+'   :   ' +Isnull(Mobile_No,'' ) as SEARCH_VALUE

			FROM MR_Master CM
			WHERE 
			
					(
						CM.Company_Name LIKE '%'+@p_var_search_str+'%' 
					OR	CM.First_Name LIKE '%'+@p_var_search_str+'%' 
					OR	CM.Last_Name LIKE '%'+ @p_var_search_str +'%'
					OR	CM.Short_Name LIKE '%'+ @p_var_search_str +'%'
					OR	CM.Mobile_No LIKE '%'+ @p_var_search_str +'%'
					OR	CM.First_Name+' '+ CM.Last_Name LIKE '%' + @p_var_search_str + '%'
					)
					AND CM.Delete_Flag=0

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_NonPrintedIPD]    Script Date: 16-Jan-18 8:12:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_NonPrintedIPD]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ================================================================================
-- Author       : INCRUST
-- Create date  : 06 Nov 2017
-- Description  : This stored procedure will Search the bILLING Record.
-- Created By   : Varsha Khanre
-- ================================================================================

CREATE  PROCEDURE [dbo].[USP_Search_NonPrintedIPD]

@p_var_IPDNo						NVARCHAR(100),
@p_var_BillNo						NVARCHAR(100)
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		

		SELECT	VGI.IPD_RefNo,[Bill_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],DD.IPD_No,
			ISNULL(DD.Treating_Doctor,'') AS Treating_Doctor,ISNULL(DD.Consulting_Doctor,'') AS Consulting_Doctor,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Bill_Date],106),'') AS Bill_Date,
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name
				
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	
					
			ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
					[Bill_No] LIKE '%' + @p_var_BillNo + '%'
			AND		DD.[IPD_RefNo] LIKE '%' + @p_var_IPDNo + '%'
			
			)	

			ORDER BY VGI.IPD_RefNo DESC
		

		SELECT	VGI.[IPD_RefNo],[Invoice_No],[Total_Amount],[Collected_Amount],[Discount],[Balance],[Net_Amount],[Comments],
			PM.First_Name + ' ' +PM.Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.Modified_On,106),'') AS Modified_On,VGI.ModifiedBy_Name,
			ISNULL(CONVERT(VARCHAR(11),VGI.[Invoice_Date],106),'') AS Invoice_Date
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID
			
			WHERE
					
			ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
					[Invoice_No] LIKE '%' + @p_var_BillNo + '%'
			AND		DD.[IPD_RefNo] LIKE '%' + @p_var_IPDNo + '%'
			
			)	

			ORDER BY VGI.IPD_RefNo DESC


			SELECT [IPD_RefNo],[Admission_Time],[Treating_Doctor],
			[Consulting_Doctor],[Discharge_Time],[Weight],[IPD_No],[Diagnosis],[Complaints],[History]
			,[Investigations],[OE],[SE],[Procedure],[Treatment],[Discharge],[Instructions],ISNULL([Keyword],'') AS Keyword,
			First_Name + ' ' +Last_Name AS Name,
			ISNULL(CONVERT(VARCHAR(11),[Admission_Date],106),'') AS Admission_Date,
			ISNULL(CONVERT(VARCHAR(11),[Discharge_Date],106),'') AS Discharge_Date,
			ISNULL(CONVERT(VARCHAR(11),DD.Modified_On,106),'') AS Modified_On,DD.ModifiedBy_Name
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Discharge_Data] DD
			ON	DD.Patient_ID = p.ID	

			 WHERE 
			 		ISNULL(DD.Is_Printed,0)	=	0
			  AND ( 
			 			DD.[IPD_RefNo] = @p_var_IPDNo 
			 )
	
			ORDER BY DD.[IPD_RefNo] DESC
		
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_Patient]    Script Date: 16-Jan-18 8:13:02 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		--IF EXISTS 
		--		(
		--		SELECT Mobile_2 from  [dbo].[Patient_Master] P
		--		 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
		--		   (p.ID			 LIKE '%' + @p_var_search_str +	'%'
		--		 OR    p.First_Name  LIKE '%' + @p_var_search_str + '%' 
		--		 OR    p.Middle_Name LIKE '%' + @p_var_search_str + '%'
		--		 OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%'
		--		 OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%' 
		--	     OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
		--		 OR	   p.First_Name+' '+ p.Last_Name LIKE '%' + @p_var_search_str + '%'
		--		 OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
		--		 )
		--		)
		--BEGIN
		--	SELECT Isnull(ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'')+'   :   '+ISNULL(Folder_No,'') as SEARCH_VALUE
		--	FROM [dbo].[Patient_Master] p
		--	 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
		--	   ( p.ID			 LIKE '%' + @p_var_search_str + '%' 
		--	 OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
		--	 OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
		--	 OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
		--	 OR	   p.Mobile_1	 LIKE '%' + @p_var_search_str + '%'
		--	 OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
		--	 OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
		--	 OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
		--	 )
	
		--END
		--ELSE
		--    SELECT  Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'')+' / '+Isnull(Mobile_2,'')+'   :   '+ISNULL(Folder_No,'') as SEARCH_VALUE 
		--    FROM [dbo].[Patient_Master] p
		--    WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
		--		(		  p.ID	LIKE '%' + @p_var_search_str + '%' 
		--			OR    p.First_Name  LIKE '%' + @p_var_search_str + '%' 
		--			OR    p.Middle_Name LIKE '%' + @p_var_search_str + '%'
		--			OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
		--			OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%'
		--			OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%'
		--			OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
		--		)

		
		
	
	
		    SELECT  Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'') as SEARCH_VALUE --+'  :   '+ISNULL(Folder_No,'')
		    FROM [dbo].[Patient_Master] p
		    WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				(	p.ID  LIKE '%' + @p_var_search_str + '%' 
				Or
					  p.First_Name  LIKE '%' + @p_var_search_str + '%' 
					
					OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
					OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%'
					OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%'
					OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
				)


	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END



/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_For_Collection]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_For_Collection]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
	
	  --  SELECT  distinct Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'') as SEARCH_VALUE --+'  :   '+ISNULL(Folder_No,'')
		 --   FROM [dbo].[Patient_Master] p
			--INNER JOIN [dbo].[Patient_Visits] PV
			--ON	PV.Patient_ID = p.ID	
			--INNER JOIN [dbo].[Patient_Visits_Services] PVS
			--ON	PVS.Patient_ID = p.ID	
		 --   WHERE 
			--	(	p.ID  LIKE '%' + @p_var_search_str + '%' 
			--	Or
			--		  p.First_Name  LIKE '%' + @p_var_search_str + '%' 
					
			--		OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
			--		OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%'
			--		OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%'
			--		OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			--	)
			    SELECT  distinct Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'') as SEARCH_VALUE --+'  :   '+ISNULL(Folder_No,'')
		    FROM [dbo].[Patient_Master] p
			INNER JOIN [dbo].[Patient_Visits] PV
			ON	PV.Patient_ID = p.ID	 
			
		    WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				(	p.ID  LIKE '%' + @p_var_search_str + '%' 
				Or
					  p.First_Name  LIKE '%' + @p_var_search_str + '%' 
					
					OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
					OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%' 
					OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%' 
					OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%' 
				)
			--	Union all
			--	 SELECT  distinct Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'') as SEARCH_VALUE --+'  :   '+ISNULL(Folder_No,'')
		 --   FROM [dbo].[Patient_Master] p
			 
			--INNER JOIN [dbo].[Patient_Visits_Services] PVS
			--ON	PVS.Patient_ID = p.ID		
		 --    WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
			--	(	p.ID  LIKE '%' + @p_var_search_str + '%' 
			--	Or
			--		  p.First_Name  LIKE '%' + @p_var_search_str + '%' 
					
			--		OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
			--		OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%' 
			--		OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%' 
			--		OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%' 
			--	)
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_forPatreg]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_forPatreg]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		IF EXISTS 
				(
				SELECT Mobile_1 from  [dbo].[Patient_Master] P
				 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				   (--p.ID			 LIKE '%' + @p_var_search_str +	'%'
				-- OR    p.First_Name  LIKE '%' + @p_var_search_str + '%' 
				-- OR    p.Middle_Name LIKE '%' + @p_var_search_str + '%'
				-- OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%'
				    p.Mobile_1    LIKE '%' + @p_var_search_str + '%' 
			     OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
				 --OR	   p.First_Name+' '+ p.Last_Name LIKE '%' + @p_var_search_str + '%'
				-- OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
				 )
				)
		BEGIN
			SELECT Isnull(Mobile_1,'')+'   :  '+ Isnull(ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )as SEARCH_VALUE--+'   :   '+ISNULL(Folder_No,'') 
			FROM [dbo].[Patient_Master] p
			 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
			   ( --p.ID			 LIKE '%' + @p_var_search_str + '%' 
			-- OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
			-- OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			-- OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
				   p.Mobile_1	 LIKE '%' + @p_var_search_str + '%'
			 OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
			-- OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			-- OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
			 )
	
		END
		ELSE
		    SELECT   Isnull(Mobile_1,'')+' / '+Isnull(Mobile_2,'')+'   :  '+ Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'')+' / '+Isnull(Mobile_2,'')as SEARCH_VALUE--+'   :   '+ISNULL(Folder_No,'') as SEARCH_VALUE 
		    FROM [dbo].[Patient_Master] p
		    WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				(		 -- p.ID	LIKE '%' + @p_var_search_str + '%' 
					--OR    p.First_Name  LIKE '%' + @p_var_search_str + '%' 
					--OR    p.Middle_Name LIKE '%' + @p_var_search_str + '%'
					--OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
					   p.Mobile_1    LIKE '%' + @p_var_search_str + '%'
					OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%'
					--OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
				)



	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_Recepit]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_Recepit]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
	
		    SELECT distinct Isnull(P.ID,'')+' : '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+' : '+Isnull(Mobile_1,'')as SEARCH_VALUE--+' : '+ISNULL(p.Folder_No,'') as SEARCH_VALUE 
				FROM [dbo].[Patient_Master] p


				left JOIN [dbo].[Patient_Visits] pv
				ON	pv.Patient_ID= p.ID

				left join Patient_Payments_AdHoc pa on pa.Patient_ID=p.ID

				WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				(pv.Receipt_Number != '' or pa.Receipt_Number!='') AND 
				(	p.ID LIKE '%' + @p_var_search_str + '%' 
				Or
				p.First_Name LIKE '%' + @p_var_search_str + '%' 

				OR p.Last_Name LIKE '%' + @p_var_search_str + '%' 
				OR p.Mobile_1 LIKE '%' + @p_var_search_str + '%'
				OR p.Mobile_2 LIKE '%' + @p_var_search_str + '%'
				OR	p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
				)


	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_Recepit_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author		:  INCRUST
-- Create date	: 13-Dec-2019
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Vasudha
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_Recepit_Services]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
	
		    SELECT distinct Isnull(P.ID,'')+' : '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+' : '+Isnull(Mobile_1,'')as SEARCH_VALUE--+' : '+ISNULL(p.Folder_No,'') as SEARCH_VALUE 
				FROM [dbo].[Patient_Master] p


				INNER JOIN [dbo].[Patient_Visits_Services] pv
				ON	pv.Patient_ID= p.ID
						

				WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				(pv.Receipt_Number != '' or pv.Receipt_Number IS NOT NULL) AND 
				(	p.ID LIKE '%' + @p_var_search_str + '%' 
				Or
				p.First_Name LIKE '%' + @p_var_search_str + '%' 

				OR p.Last_Name LIKE '%' + @p_var_search_str + '%' 
				OR p.Mobile_1 LIKE '%' + @p_var_search_str + '%'
				OR p.Mobile_2 LIKE '%' + @p_var_search_str + '%'
				OR	p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
				)


	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_AdmissionCard]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_With_AdmissionCard]

	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		
		BEGIN
			SELECT Isnull(AD.IPD_RefNo,'') +'   :  '+ Isnull(P.id,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'') as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Admission_Data] AD
			ON	AD.Patient_ID = p.ID	
			Inner Join Discharge_Data DD
			ON DD.IPD_RefNo = AD.IPD_RefNo

			 WHERE  
				 ( 
				   AD.Patient_ID	 LIKE '%' + @p_var_search_str + '%' 
			 OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			 OR    AD.IPD_RefNo  LIKE '%' + @p_var_search_str + '%'
				  ) 
				  --and DD.Discharge_Date is null


				  ORDER BY AD.[IPD_RefNo] desc
		END
		
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_PatientDetails]    Script Date: 16-Jan-18 8:13:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_AdvanceCard]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_Search_Patient_With_AdvanceCard]

	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		
		BEGIN
			SELECT Isnull(AD.IPD_RefNo,'') +'   :  '+ Isnull(P.id,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'')+'   :  '+
			ISNULL(CONVERT(VARCHAR(11),DD.Visit_Date,106),'') as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Admission_Data] AD
			ON	AD.Patient_ID = p.ID	
			Inner Join Discharge_Data DD
			ON DD.IPD_RefNo = AD.IPD_RefNo

			 WHERE  
				 ( 
				   AD.Patient_ID	 LIKE '%' + @p_var_search_str + '%' 
			 OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			 OR    AD.IPD_RefNo  LIKE '%' + @p_var_search_str + '%'
				  ) 
				  --and DD.Discharge_Date is null


				  ORDER BY AD.[IPD_RefNo] desc
		END
		
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_With_OPD]

	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		
		BEGIN
			SELECT Isnull(ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'') as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p

			--LEFT JOIN [dbo].[Discharge_Data] DD
			--ON	DD.Patient_ID = p.ID	

			 WHERE --(p.Doctor_ID=@p_var_Doctor_Id)
			  --AND 
				 ( p.ID			 LIKE '%' + @p_var_search_str + '%' 
			 OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Mobile_1	 LIKE '%' + @p_var_search_str + '%'
			 OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			 --OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
			 --OR	  DD.[IPD_RefNo] LIKE '%' + @p_var_search_str + '%'
			 )


			-- SELECT Isnull(DD.IPD_RefNo,'')+'   :  '+ Isnull(ID,'')+'   :  '+ISNULL(CONVERT(VARCHAR(11),DD.Visit_Date,106),'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )  as SEARCH_VALUE
			SELECT Isnull(DD.IPD_RefNo,'')+'   :  '+ Isnull(ID,'')+'     :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'')  as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Discharge_Data] DD
			ON	DD.Patient_ID = p.ID	

			 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
			   ( 
			             p.ID	 LIKE '%' + @p_var_search_str + '%' 
			 		OR	DD.[IPD_RefNo] LIKE '%' + @p_var_search_str + '%'
				  OR	p.First_Name  LIKE '%' + @p_var_search_str + '%'
				  OR	p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			      OR	p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
				  OR	p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
				   OR	   p.Mobile_1	 LIKE '%' + @p_var_search_str + '%'
			 )
	
			ORDER BY DD.[IPD_RefNo] DESC



				
			SELECT PM.First_Name + ' ' +PM.Last_Name  +'   :  '+  DD.IPD_RefNo+'   :  '+[Bill_No]+'   :  '+ISNULL(CONVERT(VARCHAR(11),VGI.[Bill_Date],106),'') as SEARCH_VALUE
			
			FROM	[dbo].[Discharge_Bill_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	
					VGI.Doctor_ID	=   @p_var_Doctor_Id 
			AND		ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
			 PM.ID	 LIKE '%' + @p_var_search_str + '%' 
			OR		[Bill_No] LIKE '%' + @p_var_search_str + '%'
			OR		DD.[IPD_RefNo] LIKE '%' + @p_var_search_str + '%'
			OR		First_Name  LIKE '%' + @p_var_search_str + '%'
			--OR		Middle_Name LIKE '%' + @p_var_search_str + '%'
			OR		Last_Name	 LIKE '%' + @p_var_search_str + '%'
			OR		First_Name+' '+Last_Name LIKE '%' + @p_var_search_str + '%'
			
			)	
			ORDER BY DD.[IPD_RefNo] DESC

			SELECT	PM.First_Name + ' ' +PM.Last_Name +'   :  '+ DD.IPD_RefNo+'   :  '+[Invoice_No]+'   :  '+ISNULL(CONVERT(VARCHAR(11),VGI.[Invoice_Date],106),'') as SEARCH_VALUE
				
			FROM	[dbo].[Discharge_Invoice_Hdr] VGI

			INNER JOIN Discharge_Data DD
			ON		DD.IPD_RefNo=VGI.IPD_RefNo

			INNER JOIN	Patient_Master PM
			ON			VGI.Patient_ID = PM.ID

			WHERE	
					VGI.Doctor_ID	=   @p_var_Doctor_Id 
			AND		ISNULL(VGI.Is_Printed,0)	=	0
			AND		(
			PM.ID	 LIKE '%' + @p_var_search_str + '%' 
			OR		[Invoice_No] LIKE '%' + @p_var_search_str + '%'
			OR		DD.[IPD_RefNo] LIKE '%' + @p_var_search_str + '%'
			OR		First_Name  LIKE '%' + @p_var_search_str + '%'
			
			OR		Last_Name	 LIKE '%' + @p_var_search_str + '%'
			OR		First_Name+' '+Last_Name LIKE '%' + @p_var_search_str + '%'
					)
			ORDER BY DD.[IPD_RefNo] DESC


			SELECT Isnull(First_Name,'' )+' '+Isnull(Last_Name,'' )+'   :   '+ Isnull(DD.IPD_RefNo,'')+'   :  '+ISNULL(CONVERT(VARCHAR(11),DD.Visit_Date,106),'')  as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Discharge_Data] DD
			ON	DD.Patient_ID = p.ID	

			 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
			 		ISNULL(DD.Is_Printed,0)	=	0
			  AND ( 
			  p.ID	 LIKE '%' + @p_var_search_str + '%' 
			 		or	DD.[IPD_RefNo] LIKE '%' + @p_var_search_str + '%'
				  OR	p.First_Name  LIKE '%' + @p_var_search_str + '%'
				  --OR	p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			      OR	p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
				  OR	p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			 )
	
			ORDER BY DD.[IPD_RefNo] DESC
		END
		
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_PatientDetails]    Script Date: 16-Jan-18 8:13:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_Services]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ================================
-- Author		:  INCRUST
-- Create date	: 13-Dec-2019
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Vasudha
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Patient_With_Services]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		SELECT DISTINCT Isnull(ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'') as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p

			INNER JOIN [dbo].[Patient_Visits_Services] DD
			ON	DD.Patient_ID = p.ID	

			 WHERE --(p.Doctor_ID=@p_var_Doctor_Id)
			  --AND 
				 ( p.ID			 LIKE '%' + @p_var_search_str + '%' 
			 OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Mobile_1	 LIKE '%' + @p_var_search_str + '%'
			 OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			 )
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PatientDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 26-Mar-2016
-- Description  : This stored procedure will Search the Pending Record.
--  created By  : Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_PatientDetails]
@p_nvar_Patient_Id		NVARCHAR(32),
@p_nvar_Searchtext		NVARCHAR(32),
@p_var_Language_ID		INT	
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  
				PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
				PM.Date_Of_Registration,PM.Registration_Status,
				PM.ID,
				PM.Folder_No,
				PM.Mobile_1,
				RT.RegistrationStatus_Description
		FROM    Patient_Master PM
		 INNER JOIN [dbo].[RegistrationStatus_Translations] RT
		ON	PM.[Registration_Status]=[RegistrationStatus_ID] 
      
	   WHERE	ID= @p_nvar_Patient_Id OR First_Name = @p_nvar_Searchtext OR Last_Name = @p_nvar_Searchtext



	   ;WITH PatientVisitCount AS (
                                        SELECT COUNT(PM.ID) AS PatientCount,PV.Patient_ID
										FROM [dbo].[Patient_Master]	PM
                                        
										INNER JOIN   Patient_Visits PV  ON PM.ID=PV.Patient_ID
										AND		PM.Doctor_ID	=	PV.Doctor_ID
										
										WHERE	Status_ID = 5
										AND		Delete_Flag = 0
										AND		PM.ID = @p_nvar_Patient_Id
                                        
										GROUP BY PV.Patient_ID
									) 
		 

	   SELECT	PM.ID,pm.First_Name+' '+pm.Middle_Name+' '+ pm.Last_Name as Full_Name,
					pm.Folder_No,
					Mobile_1 = CASE WHEN datalength(Mobile_1)=0 
			            THEN '--' 
						ELSE Mobile_1 END,

					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
					,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
					,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
					GT.Gender_Description,
					AT.Area_Name,
					ISNULL(CONVERT(NVARCHAR,PVC.PatientCount,100),'--') AS PatientCount
					
			FROM	Patient_Master pm
			
			
			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			INNER JOIN	Area_Translations AT
			ON		PM.Area_ID = AT.Area_ID

			LEFT JOIN PatientVisitCount PVC
			ON	pm.ID = PVC.Patient_ID

			WHERE	
					GT.Language_Id = @p_var_Language_ID
			AND		AT.Language_Id = @p_var_Language_ID
			AND		pm.ID = @p_nvar_Patient_Id
			-------------------------------------------------------------------------

	
					;with Newdata as
					(
						select patient_Id , max(Patient_Visit_No) as Patient_Visit_No from Patient_Visits group by patient_Id
					)
					select 				PM.First_Name+' '+PM.Middle_Name+' '+PM.Last_Name as Name,
					--PM.Date_Of_Registration,
					PM.ID,
					PM.Folder_No,
					PM.Mobile_1,
					PM.Registration_Status,
					GDR.ModifiedOn,
						Date_Of_Registration = GDR.[Delivery_Registraion_Date],
					EDD = CASE WHEN GDR.EDD is not null THEN GDR.EDD ELSE pv.edd  END,
					GDR.PrintedOn
					from patient_master pm 
					left join Newdata pv1 on pv1.Patient_ID = pm.ID
					left join [Patient_Visits] pv on pv.Patient_ID=pv1.Patient_ID and pv.Patient_Visit_No = pv1.Patient_Visit_No
					left join [dbo].[Gynec_Delivery_Registration] GDR ON PM.ID=  GDR.Patient_ID
      
	   WHERE	ID= @p_nvar_Patient_Id OR First_Name = @p_nvar_Searchtext OR Last_Name = @p_nvar_Searchtext
						 ORDER BY GDR.PrintedOn desc, gdr.[Delivery_Registraion_Date] desc,PM.ID DESC 

	   

	 

		 



	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_PendingPatient]    Script Date: 16-Jan-18 8:14:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PatientRegi]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_PatientRegi]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		IF EXISTS 
				(
				SELECT Mobile_2 from  [dbo].[Patient_Master] P
				 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				   (p.ID			 LIKE '%' + @p_var_search_str +	'%'
				 OR    p.First_Name  LIKE '%' + @p_var_search_str + '%' 
				 OR    p.Middle_Name LIKE '%' + @p_var_search_str + '%'
				 OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%'
				 OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%' 
			     OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
				 OR	   p.First_Name+' '+ p.Last_Name LIKE '%' + @p_var_search_str + '%'
				 OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
				 )
				)
		BEGIN
			SELECT Isnull(ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'   :  '+Isnull(Mobile_1,'')as SEARCH_VALUE--+'   :   '+ISNULL(Folder_No,'') as SEARCH_VALUE
			FROM [dbo].[Patient_Master] p
			 WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
			   ( p.ID			 LIKE '%' + @p_var_search_str + '%' 
			 OR	   p.First_Name  LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Middle_Name LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Last_Name	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Mobile_1	 LIKE '%' + @p_var_search_str + '%'
			 OR    p.Mobile_2	 LIKE '%' + @p_var_search_str + '%'
			 OR	   p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
			 OR	   p.Folder_No	 LIKE '%' + @p_var_search_str + '%'
			 )
	
		END
		ELSE
		    SELECT  Isnull(P.ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'')+' / '+Isnull(Mobile_2,'')as SEARCH_VALUE--+'   :   '+ISNULL(Folder_No,'') as SEARCH_VALUE 
		    FROM [dbo].[Patient_Master] p
		    WHERE --(p.Doctor_ID=@p_var_Doctor_Id) AND
				(		  p.ID	LIKE '%' + @p_var_search_str + '%' 
					OR    p.First_Name  LIKE '%' + @p_var_search_str + '%' 
					OR    p.Middle_Name LIKE '%' + @p_var_search_str + '%'
					OR    p.Last_Name   LIKE '%' + @p_var_search_str + '%' 
					OR    p.Mobile_1    LIKE '%' + @p_var_search_str + '%'
					OR    p.Mobile_2    LIKE '%' + @p_var_search_str + '%'
					OR	  p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
				)



	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END


















/****** Object:  StoredProcedure [dbo].[USP_Search_Patient_With_OPD]    Script Date: 16-Jan-18 8:13:21 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PendingPatient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  26-Mar-2016
-- Description :  This stored procedure will Search Pending Patient
--  created By :  Suyog khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_PendingPatient]
	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30)
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
			SELECT Isnull(ID,'')+'   :   '+Isnull(First_Name,'' )+' '+Isnull(Middle_Name,'' )+' '+Isnull(Last_Name,'' )+'  :  '+Isnull(Mobile_1,'') as SEARCH_VALUE

			  FROM [dbo].[Patient_Master] p
			 WHERE 
			 --(p.Registration_Status!='F') 
					--AND
					(
						p.Doctor_ID=@p_var_Doctor_Id)
					AND(
						p.ID LIKE '%'+@p_var_search_str+'%' 
					OR	p.First_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Middle_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Last_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Mobile_1 LIKE '%'+@p_var_search_str+'%' 
					OR	p.First_Name+' '+p.Last_Name LIKE '%' + @p_var_search_str + '%'
					)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionDetails]    Script Date: 16-Jan-18 8:14:18 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 06 Sep 2016
-- Description  : This stored procedure will Search the Prescription Record.
--  created By  : Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_PrescriptionDetails]
@p_var_cat_short_name		NVARCHAR(60),
@p_var_cat_sub_desc			NVARCHAR(200),
@p_var_medicine_name		NVARCHAR(200),
@p_var_brand_name			NVARCHAR(200),
@p_var_marketed_by			NVARCHAR(200),
@p_var_priority				INT,
@p_var_DoctorID				NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Cat_Short_Name,CatSub_Description,Medicine_Name,Brand_Name,Marketed_By,Priority_Value,Morning,Afternoon,Night,No_Of_Days,Instruction
		FROM    Prescription_Medicines  
		WHERE	Cat_Short_Name=@p_var_cat_short_name
		AND		CatSub_Description=@p_var_cat_sub_desc
		AND		Medicine_Name=@p_var_medicine_name
		AND		Brand_Name=@p_var_brand_name
		--AND		Marketed_By=@p_var_marketed_by
		AND		isnull(Priority_Value,0) = @p_var_Priority
		AND		DOCTOR_ID	=	@p_var_DoctorID
		
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionForManageMasterData]    Script Date: 16-Jan-18 8:14:28 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  02 Sep 2016
-- Description :  This stored procedure will Search Prescriptions for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_PrescriptionForManageMasterData]
	
	@p_var_search_str			NVARCHAR(MAX),
	@p_var_DoctorID				NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Cat_Short_Name,'')+'   :   '+Isnull(CatSub_Description,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+Isnull(Brand_Name,'' )+'   :   '+Isnull(Marketed_By,'')+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			  FROM Prescription_Medicines p
			 WHERE 
			
					(
						(	DOCTOR_ID	=	@p_var_DoctorID AND p.Cat_Short_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.CatSub_Description LIKE '%'+@p_var_search_str+'%' 
					OR	p.Medicine_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Brand_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Marketed_By LIKE '%'+@p_var_search_str+'%' 
					OR	p.Priority_Value  LIKE '%' + @p_var_search_str + '%'
					OR  Isnull(Cat_Short_Name,'')+'   :   '+Isnull(CatSub_Description,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+Isnull(Brand_Name,'' )+'   :   '+Isnull(Marketed_By,'')+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) LIKE '%' + @p_var_search_str + '%')
					
					)


			SELECT Isnull(Cat_Short_Name,'')+'   :   '+Isnull(CatSub_Description,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+Isnull(Brand_Name,'' )+'   :   '+Isnull(Marketed_By,'')+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			  FROM Prescription_Medicines p
			 WHERE 
			
					(
						(p.Cat_Short_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.CatSub_Description LIKE '%'+@p_var_search_str+'%' 
					OR	p.Medicine_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Brand_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Marketed_By LIKE '%'+@p_var_search_str+'%' 
					OR	p.Priority_Value  LIKE '%' + @p_var_search_str + '%'
					OR  Isnull(Cat_Short_Name,'')+'   :   '+Isnull(CatSub_Description,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+Isnull(Brand_Name,'' )+'   :   '+Isnull(Marketed_By,'')+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) LIKE '%' + @p_var_search_str + '%')
					AND	p.Active=1
					AND	DOCTOR_ID	=	@p_var_DoctorID
					
					)
					ORDER BY p.Priority_Value,p.Medicine_Name ASC


					--SELECT   CAST(Isnull([IPD_Keyword],'') AS nvarchar(MAX))+'   :   '+CAST(Isnull([Diagnosis],'' ) AS nvarchar(MAX))+'   :   '+CAST(Isnull([Complaints],'' ) AS nvarchar(MAX))+'   :   '+CAST(Isnull([History],'' ) AS nvarchar(MAX))+'   :  '+
					--CAST(Isnull([Investigations],'') AS nvarchar(MAX))+'   :   ' +CAST(ISNULL([OE],'') AS nvarchar(MAX))+'   :   ' +
					-- CAST(Isnull([SE],'') AS nvarchar(MAX))+'   :   '+ CAST(Isnull([Procedure],'') AS nvarchar(MAX))+'   :   '+ CAST(Isnull([Treatment],'') AS nvarchar(MAX))+'   :   '+ CAST(Isnull([Discharge],'') AS nvarchar(MAX))
					-- +'   :   '+ CAST( Isnull([Instructions],'') AS nvarchar(MAX))+' : '+ CAST( Isnull([Operative_Notes_Description],'') AS nvarchar(MAX))  AS SEARCH_VALUE

					--FROM IPD_DischargeData p

					SELECT   CAST(Isnull([IPD_Keyword],'') AS nvarchar(MAX))    AS SEARCH_VALUE
                    FROM IPD_DischargeData p
					WHERE 
			
					(
						(p.[IPD_Keyword] LIKE '%'+@p_var_search_str+'%' 
					OR	p.[Diagnosis] LIKE '%'+@p_var_search_str+'%' 
					OR	p.[Complaints] LIKE '%'+@p_var_search_str+'%' 
					OR	p.[History] LIKE '%'+@p_var_search_str+'%' 
					OR	p.[Investigations] LIKE '%'+@p_var_search_str+'%' 
					OR	p.[OE]  LIKE '%' + @p_var_search_str + '%'
					OR	p.[SE]  LIKE '%' + @p_var_search_str + '%'
					OR	p.[Procedure]  LIKE '%' + @p_var_search_str + '%'
					OR	p.[Treatment]  LIKE '%' + @p_var_search_str + '%'
					OR	p.[Discharge]  LIKE '%' + @p_var_search_str + '%'
					OR	p.[Instructions]  LIKE '%' + @p_var_search_str + '%'
					OR  P.[Operative_Notes_Description] LIKE '%' + @p_var_search_str + '%'

					OR  Isnull([IPD_Keyword],'')+'   :   '+Isnull([Diagnosis],'' )+'   :   '+Isnull([Complaints],'' )
						+'   :   '+Isnull([History],'' )+'   :   '+Isnull([Investigations],'')+'   :   ' +
						ISNULL([OE],'')+'   :   '+Isnull([SE],'')+'   :   '+Isnull([Procedure],'')
						+'   :   '+Isnull([Treatment],'')+'   :   '+Isnull([Discharge],'')+'   :   '+Isnull([Instructions],'')+' : '+Isnull([Operative_Notes_Description],'')  LIKE '%' + @p_var_search_str + '%') 

					
					)
					ORDER BY IPD_Keyword ASC


			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionForMR]    Script Date: 16-Jan-18 8:14:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionForMR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  15 Dec 2016
-- Description :  This stored procedure will Search Prescriptions for MR to add medicine
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_PrescriptionForMR]
	
	@p_var_search_str  VARCHAR(60),
	@p_var_company_name	VARCHAR(100)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Cat_Short_Name,'')+'   :   '+Isnull(CatSub_Description,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+ISNULL(Brand_Name,'')  as SEARCH_VALUE

			  FROM Prescription_Medicines p
			 WHERE 
			
					(
						(	p.Cat_Short_Name LIKE '%'+@p_var_search_str+'%' 
							OR	p.CatSub_Description LIKE '%'+@p_var_search_str+'%' 
							OR	p.Medicine_Name LIKE '%'+@p_var_search_str+'%' 
							OR	p.Marketed_By LIKE '%'+@p_var_search_str+'%'
							OR	p.Brand_Name LIKE '%'+@p_var_search_str+'%'
						 )
						AND	p.Marketed_By=@p_var_company_name
					
					)

		--UNION
			
		--	SELECT Isnull(Cat_Short_Name,'')+'   :   '+Isnull(CatSub_Description,'' )+'   :   '+Isnull(Medicine_Name,'' )+'   :   '+ISNULL(Brand_Name,'')  as SEARCH_VALUE

		--	  FROM MR_Added_Prescriptions MR
		--	 WHERE 
			
		--			(
		--				(MR.Cat_Short_Name LIKE '%'+@p_var_search_str+'%' 
		--					OR	MR.CatSub_Description LIKE '%'+@p_var_search_str+'%' 
		--					OR	MR.Medicine_Name LIKE '%'+@p_var_search_str+'%' 
		--					OR	MR.Marketed_By LIKE '%'+@p_var_search_str+'%'
		--				 )
		--				AND	MR.Marketed_By=@p_var_company_name
		--			)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionForPatientProfile]    Script Date: 16-Jan-18 8:14:47 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionForPatientProfile]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  03 Feb 2017
-- Description :  This stored procedure will Search Prescriptions for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_PrescriptionForPatientProfile]
	
	@p_var_search_str	VARCHAR(60),
	@p_var_Doctor_ID	VARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			

			SELECT Isnull(Medicine_Name,'' )+'        |        '+Isnull(Brand_Name,'' )+'        |        '+CAST(Isnull(Morning,'') AS varchar(10))+'-'+CAST(ISNULL(Afternoon,'') AS varchar(10))+'-'+CAST(ISNULL(Night,'') AS varchar(10))+'        |       ' +CAST(ISNULL(No_Of_Days,'') AS varchar(10)) + '        |        ' + ISNULL(Instruction,'') as SEARCH_VALUE

			  FROM Prescription_Medicines p
			 WHERE 
			
					(
					(
					
						p.Medicine_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Brand_Name LIKE '%'+@p_var_search_str+'%' 
					OR  Isnull(Brand_Name,'' )+'        |        '+Isnull(Medicine_Name,'' ) LIKE '%' + @p_var_search_str + '%'
					)
					AND	p.Active=1
					AND	DOCTOR_ID = @p_var_Doctor_ID
					
					)
					ORDER BY p.Priority_Value,p.Medicine_Name ASC


			SELECT Isnull(Medicine_Name,'' )+'        |        '+Isnull(Brand_Name,'' )+'        |        '+CAST(Isnull(Morning,'') AS varchar(10))+'-'+CAST(ISNULL(Afternoon,'') AS varchar(10))+'-'+CAST(ISNULL(Night,'') AS varchar(10))+'        |        ' +CAST(ISNULL(No_Of_Days,'') AS varchar(10)) + '        |        ' + ISNULL(Instruction,'') as SEARCH_VALUE

			  FROM Prescription_Medicines p
			 WHERE 
			
					(
					(
					
						p.Medicine_Name LIKE '%'+@p_var_search_str+'%' 
					OR	p.Brand_Name LIKE '%'+@p_var_search_str+'%' 
					OR  Isnull(Brand_Name,'' )+'        |        '+Isnull(Medicine_Name,'' ) LIKE '%' + @p_var_search_str + '%'
					)
					AND	p.Active=1
					--AND	DOCTOR_ID = @p_var_Doctor_ID
					
					)
					ORDER BY p.Priority_Value,p.Medicine_Name ASC


			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_Previous_Complaints]    Script Date: 16-Jan-18 8:14:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Previous_Complaints]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 27 June 2017
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Previous_Complaints]

	@p_var_search_str  NVARCHAR(60),
    @p_var_Doctor_Id   NVARCHAR(30),
	@p_var_Clinic_ID   NVARCHAR(30),
	@p_var_Patient_ID   NVARCHAR(32),
	@p_date_TodyasVisitDate	DATE
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		
		;WITH  PreviousVisits AS 
                (
                        SELECT     DISTINCT ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      PV.Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,PV.Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,PV.Instructions,PV.Fees_To_Collect,
									PV.Fees_Collected,Medicine_Name=STUFF((SELECT ', ' + Medicine_Name
									FROM Visit_Prescription_Overwrite b 
									WHERE b.Patient_ID=PV.Patient_ID
															AND	b.Visit_Date=PV.Visit_Date
															AND	b.Patient_Visit_No=PV.Patient_Visit_No
															AND	b.Doctor_ID=pv.Doctor_ID
															AND	b.Clinic_ID=PV.Clinic_ID
															AND b.Delete_Indicator=0
									FOR XML PATH('')), 1, 2, ''),
									PV.Weight_IN_KGS,PV.Visit_Comments,
									'Patient_Visit' AS Visit_Type,

									Complaints=STUFF((SELECT ', ' + Complaint_Description
									FROM Visit_Complaints b 
									WHERE	b.Patient_ID=PV.Patient_ID
											AND	b.Visit_Date=PV.Visit_Date
											AND	b.Patient_Visit_No=PV.Patient_Visit_No
											AND	b.Doctor_ID=pv.Doctor_ID
											AND	b.Clinic_ID=PV.Clinic_ID
											AND b.Delete_Flag=0
									FOR XML PATH('')), 1, 2, ''),

									FUT.[FollowUp_Description] AS FollowUp_Description,
									Diagnosis=STUFF((SELECT ', ' + Desease_Description
									FROM Visit_Diagnosis b 
									WHERE	b.Patient_ID=PV.Patient_ID
											AND	b.Visit_Date=PV.Visit_Date
											AND	b.Patient_Visit_No=PV.Patient_Visit_No
											AND	b.Doctor_ID=pv.Doctor_ID
											AND	b.Clinic_ID=PV.Clinic_ID
											AND b.Delete_Flag=0
									FOR XML PATH('')), 1, 2, ''),
									DM.First_Name +' '+DM.Last_Name AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END
													 
                        FROM        Patient_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									LEFT JOIN [dbo].[Follow-Up_type] FUT
									ON	  PV.[follow_up_type]	=	FUT.ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID
                                   
                        WHERE        
                                    --PV.Doctor_ID  =	'DR-00003'
                                 CONVERT(DATETIME, CONVERT(CHAR(8),PV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < CONVERT(DATETIME, CONVERT(CHAR(8),GETDATE(),112) + ' ' + CONVERT(CHAR(8), GETDATE(),108))
                                                                           
                        AND         Status_ID = 5 
                        AND         PV.Delete_Flag = 0
						AND			PV.Patient_ID	=	@p_var_Patient_ID
						--AND			PV.Clinic_ID=  @p_var_Clinic_Id	--newly added
             
                )

				SELECT ISNULL(Complaints,'')+' : '+ ISNULL(Diagnosis,'') +' : '+  ISNULL(Medicine_Name,'') AS SEARCH_VALUE 

				FROM PreviousVisits

				WHERE Complaints   LIKE '%' + @p_var_search_str + '%'
				OR  Diagnosis   LIKE '%' + @p_var_search_str + '%'
				OR	Medicine_Name LIKE '%' + @p_var_search_str + '%'

	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END








----------------------------



/****** Object:  StoredProcedure [dbo].[USP_Search_Previous_Complaints_Pres_Diag]    Script Date: 11-Jan-18 12:25:00 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Previous_Complaints_Pres_Diag]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 27 June 2017
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Previous_Complaints_Pres_Diag]

	@p_var_complaint		NVARCHAR(MAX),
	@p_var_diagnosis		NVARCHAR(MAX),
	@p_var_prescription		NVARCHAR(MAX),
    @p_var_Doctor_Id		NVARCHAR(30),
	@p_var_Clinic_ID		NVARCHAR(30),
	@p_var_Patient_ID		NVARCHAR(32),
	@p_date_TodyasVisitDate	DATE
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY
		
		;WITH  PreviousVisits AS 
                (
                        SELECT     DISTINCT ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      PV.Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    PV.Doctor_ID,PV.Patient_ID,PV.Patient_Visit_No,PV.Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Status_ID,PV.Instructions,PV.Fees_To_Collect,
									PV.Fees_Collected,Medicine_Name=STUFF((SELECT ', ' + Medicine_Name
									FROM Visit_Prescription_Overwrite b 
									WHERE b.Patient_ID=PV.Patient_ID
															AND	b.Visit_Date=PV.Visit_Date
															AND	b.Patient_Visit_No=PV.Patient_Visit_No
															AND	b.Doctor_ID=pv.Doctor_ID
															AND	b.Clinic_ID=PV.Clinic_ID
															AND b.Delete_Indicator=0
									FOR XML PATH('')), 1, 2, ''),
									PV.Weight_IN_KGS,PV.Visit_Comments,Observation,
									'Patient_Visit' AS Visit_Type,

									Complaints=STUFF((SELECT ', ' + Complaint_Description
									FROM Visit_Complaints b 
									WHERE	b.Patient_ID=PV.Patient_ID
											AND	b.Visit_Date=PV.Visit_Date
											AND	b.Patient_Visit_No=PV.Patient_Visit_No
											AND	b.Doctor_ID=pv.Doctor_ID
											AND	b.Clinic_ID=PV.Clinic_ID
											AND b.Delete_Flag=0
									FOR XML PATH('')), 1, 2, ''),

									FUT.[FollowUp_Description] AS FollowUp_Description,
									Diagnosis=STUFF((SELECT ', ' + Desease_Description
									FROM Visit_Diagnosis b 
									WHERE	b.Patient_ID=PV.Patient_ID
											AND	b.Visit_Date=PV.Visit_Date
											AND	b.Patient_Visit_No=PV.Patient_Visit_No
											AND	b.Doctor_ID=pv.Doctor_ID
											AND	b.Clinic_ID=PV.Clinic_ID
											AND b.Delete_Flag=0
									FOR XML PATH('')), 1, 2, ''),
									DM.First_Name +' '+DM.Last_Name AS DoctorName,
									P=CASE WHEN EXISTS (SELECT * FROM Visit_Prescription_Overwrite b
													  WHERE	b.Patient_ID=PV.Patient_ID
													AND	b.Visit_Date=PV.Visit_Date
													AND	b.Patient_Visit_No=PV.Patient_Visit_No
													AND	b.Doctor_ID=pv.Doctor_ID
													AND	b.Clinic_ID=PV.Clinic_ID
													AND b.Delete_Flag=0)
									THEN 'P' ELSE '' END,
									L=CASE WHEN EXISTS (SELECT * FROM Patient_Visit_LabTestAsked b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'L' ELSE '' END,
									R=CASE WHEN EXISTS (SELECT * FROM Visit_Procedure_Findings b
													  WHERE	b.Patient_ID=PV.Patient_ID
														AND	b.Visit_Date=PV.Visit_Date
														AND	b.Patient_Visit_No=PV.Patient_Visit_No
														AND	b.Doctor_ID=pv.Doctor_ID
														AND	b.Clinic_ID=PV.Clinic_ID
														AND b.Delete_Flag=0)
									THEN 'R' ELSE '' END,
									ISNULL(PV.[Addendum],'') AS Addendum
													 
                        FROM        Patient_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

									LEFT JOIN [dbo].[Follow-Up_type] FUT
									ON	  PV.[follow_up_type]	=	FUT.ID

									INNER JOIN Doctor_Master DM
									ON DM.Doctor_ID = PV.Doctor_ID
                                   
                        WHERE        
                                    --PV.Doctor_ID  =	'DR-00003'
                                 CONVERT(DATETIME, CONVERT(CHAR(8),PV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < CONVERT(DATETIME, CONVERT(CHAR(8),GETDATE(),112) + ' ' + CONVERT(CHAR(8), GETDATE(),108))
                                                                           
                        AND         Status_ID = 5 
                        AND         PV.Delete_Flag = 0
						AND			PV.Patient_ID	=	@p_var_Patient_ID
						--AND			PV.Clinic_ID=  @p_var_Clinic_Id	--newly added
             
                )

				SELECT    replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') AS Visit_Date , 
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' - '  + CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) AS Visit_DateTime,
								Patient_ID,
								Patient_Visit_No,
								Shift_id, 
								Status_ID,
								ISNULL(Medicine_Name,'') AS Medicine_Name,
								Instructions,
								Fees_To_Collect,
								Fees_Collected,
								ISNULL(Weight_IN_KGS,0) AS Weight_IN_KGS,
								ISNULL(Visit_Comments,'') AS Visit_Comments,
								
								replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-')  + ' * '  +	CONVERT(varchar(15), CAST(Visit_Time AS TIME),100) +'!'+CONVERT(NVARCHAR(15),Patient_Visit_No)+'!'+replace(CONVERT(NVARCHAR, Visit_Date, 106), ' ', '-') AS DATE_TIME_NUMBER,
								Visit_Type,
								Complaints,
								Observation,
								FollowUp_Description,
								Diagnosis,
								DoctorName,
								P+' '+L+' '+R AS PLR,
								Addendum,
								Doctor_ID as prevDoctor_ID 

					
					FROM PreviousVisits 

				WHERE	ISNULL(Complaints,'')	=	@p_var_complaint
				AND		ISNULL(Diagnosis,'')		=	@p_var_diagnosis
				AND		ISNULL(Medicine_Name,'')	=	@p_var_prescription

				ORDER by ROWNUM ASC

	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END








----------------------------




/****** Object:  StoredProcedure [dbo].[USP_Update_Addendum]    Script Date: 11-Jan-18 12:26:01 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_ProcedureDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 28 Feb 2017
-- Description  : This stored procedure will Search the Procedures Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_ProcedureDetails]

@p_var_Procedure_desc				NVARCHAR(100),
@p_var_priority						INT,
@p_Str_DoctorId                     NVARCHAR(100)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Procedure_Description,Priority_Value
		FROM    Doctor_Procedure_Master
		WHERE	Procedure_Description				=@p_var_Procedure_desc
		AND		Doctor_ID						    =@p_Str_DoctorId
		AND		ISNULL(Priority_Value,0)			=@p_var_Priority
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_ProcedureForManageMasterData]    Script Date: 16-Jan-18 8:15:18 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_ProcedureForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  28 Feb 2016
-- Description :  This stored procedure will Search Procedure for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_ProcedureForManageMasterData]
	
	@p_var_search_str     VARCHAR(100),
	@p_var_Doctor_ID	  NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Procedure_Description,'' )+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			FROM  Doctor_Procedure_Master DPM
			WHERE 
			
					(
						DPM.Procedure_Description LIKE '%'+@p_var_search_str+'%' 
					
					OR	DPM.Priority_Value LIKE '%'+ @p_var_search_str +'%'
					)
			AND Doctor_ID=@p_var_Doctor_ID

			SELECT Isnull(Procedure_Description,'' )+'   :   ' +ISNULL(Findings_Description,'')+'   :   '+CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			FROM  Doctor_Procedure_Findings DPM
			WHERE 
			
					(
						DPM.Procedure_Description LIKE '%'+@p_var_search_str+'%' 
					OR	DPM.Findings_Description LIKE '%'+@p_var_search_str+'%' 
					OR	DPM.Priority_Value LIKE '%'+ @p_var_search_str +'%'
					)
			AND Doctor_ID=@p_var_Doctor_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_SubCategoryDetails]    Script Date: 16-Jan-18 8:15:26 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Referral_Doctor_list]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  25-dec-2018
-- Description :  This stored procedure will Search referal doctor
--  created By :  Shubham kule 
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_Referral_Doctor_list]
	@p_var_search_str  NVARCHAR(60)
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	SELECT ISNULL(CONVERT(VARCHAR(10),[RD_ID]), '') +'   :   '+Isnull([Doctor_Name],'' )   as SEARCH_VALUE
	--SELECT Isnull([Doctor_Name],'' )   as SEARCH_VALUE
	FROM [dbo].[Referrel_Doctors_List] RDL
	WHERE RDL.[Doctor_Name] LIKE '%'+@p_var_search_str+'%' 
			
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_PrescriptionDetails]    Script Date: 16-Jan-18 8:14:18 PM ******/
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[USP_Search_Schedule]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  03 Feb 2017
-- Description :  This stored procedure will Search Prescriptions for manage master data
--  created By :  Varsha Khandre
-- =============================================
Create  PROCEDURE [dbo].[USP_Search_Schedule]
	
	@p_var_search_str	VARCHAR(60)
	
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			

			SELECT Isnull(Schedule_Description,'' ) as SEARCH_VALUE

			  FROM  [dbo].[Schedule_Master] p
			 WHERE 
			
					(
					(
					
						p.Schedule_Description LIKE '%'+@p_var_search_str+'%' 
					--OR	p.Brand_Name LIKE '%'+@p_var_search_str+'%' 
					OR  Isnull(Schedule_Description,'' )LIKE '%' + @p_var_search_str + '%'
					)
				--	AND	p.Active=1
					
					
					)
					ORDER BY p.Schedule_Description ASC


			

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_Previous_Complaints]    Script Date: 16-Jan-18 8:14:54 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_SubCategoryDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       : INCRUST
-- Create date  : 08 Sep 2016
-- Description  : This stored procedure will Search the SubCategory Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_SubCategoryDetails]

@p_var_catshort_desc		NVARCHAR(60),
@p_var_catsub_desc			NVARCHAR(200),
@p_var_DoctorID				NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Cat_Short_Name,CatSub_Description
		FROM    [dbo].[Prescription_SubCategory]
		WHERE	Cat_Short_Name		=	@p_var_catshort_desc
		AND		CatSub_Description	=	@p_var_catsub_desc
		AND		DOCTOR_ID			=	@p_var_DoctorID


		SELECT	[Category_Description],[Findings_Description]
		FROM	[dbo].[Gynec_Abdominal_Examination_Master] DM
		WHERE	[Category_Description]		=	@p_var_catshort_desc
		AND		[Findings_Description]		=	@p_var_catsub_desc
		AND		ISNULL(Delete_Flag,0)		=	0

	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_SubCategoryForManageMasterData]    Script Date: 16-Jan-18 8:15:33 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_SubCategoryForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  08 Sep 2016
-- Description :  This stored procedure will Search Sub Category for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_SubCategoryForManageMasterData]
	
	@p_var_search_str	VARCHAR(60),
	@p_var_Doctor_ID	NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Cat_Short_Name,'')+'   :   '+ISNULL(CatSub_Description,'') as SEARCH_VALUE

			FROM [dbo].[Prescription_SubCategory] PS
			WHERE 
			
				(
						(	PS.Cat_Short_Name		LIKE '%'+@p_var_search_str+'%' 
					OR
							PS.CatSub_Description	LIKE '%'+@p_var_search_str+'%'
						)
					AND		DOCTOR_ID = @p_var_Doctor_ID
				)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_SymptomDetails]    Script Date: 16-Jan-18 8:15:40 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_SymptomDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  : 06 Sep 2016
-- Description  : This stored procedure will Search the Symptom Record.
--  created By  : Varsha Khanre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_SymptomDetails]

@p_var_symptom_short_desc			NVARCHAR(50),
@p_var_complaint_desc				NVARCHAR(1000),
@p_var_priority						INT,
@p_var_DoctorID						NVARCHAR(30)

AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		SELECT  Short_Description,Complaint_Description,Priority_Value,ISNULL([Display_to_Operator],0) AS Display_to_Operator
		FROM    [dbo].[Complaint_Master]
		WHERE	Short_Description					=@p_var_symptom_short_desc
		AND		Complaint_Description				=@p_var_complaint_desc
		AND		ISNULL(Priority_Value,0)			=@p_var_Priority
		AND		DOCTOR_ID	=	@p_var_DoctorID
	END TRY
	BEGIN CATCH
			SELECT 
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_MESSAGE() AS ErrorMessage;
	END CATCH      
       
        
END
















/****** Object:  StoredProcedure [dbo].[USP_Search_SymptomForManageMasterData]    Script Date: 16-Jan-18 8:15:49 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_SymptomForManageMasterData]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author      :  INCRUST
-- Create date :  07 Sep 2016
-- Description :  This stored procedure will Search Symptoms for manage master data
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_SymptomForManageMasterData]
	
	@p_var_search_str	VARCHAR(100),
	@p_var_DoctorID		NVARCHAR(30)
    
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
			
			
			SELECT Isnull(Short_Description,'')+'   :   '+Isnull(Complaint_Description,'' )+'   :   ' +CAST(ISNULL(Priority_Value,'') AS varchar(10)) as SEARCH_VALUE

			FROM Complaint_Master CM
			WHERE 
			
					(
						(CM.Short_Description LIKE '%'+@p_var_search_str+'%' 
					OR	CM.Complaint_Description LIKE '%'+@p_var_search_str+'%' 
					OR	CM.Priority_Value LIKE '%'+ @p_var_search_str +'%')
					AND	CM.DOCTOR_ID	=	@p_var_DoctorID
					)

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END

















/****** Object:  StoredProcedure [dbo].[USP_Search_TodaysVisitForMR]    Script Date: 16-Jan-18 8:15:58 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_TodaysVisitDetails_For_Pharmacist]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  15 Oct 2019
-- Description  :  This stored procedure will Search the Todyas Visit Details Record for all Pharmacist
-- Created By   :  Neha
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Search_TodaysVisitDetails_For_Pharmacist]
   
    @p_var_PatientId			NVARCHAR(60),
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT

	
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY
WITH TodaysVisitCount AS (
--This CTE takes the count of visits per patient for a particular date.
--It is used below in case statement to derive the appropraite row number for a record 
--e.g.
SELECT Patient_ID,COUNT(*) AS TodaysVisitCount FROM Patient_Visits
WHERE Visit_Date = @p_date_TodyasVisitDate and Delete_Flag = 0 and(Status_ID =5 or Status_ID=4)
GROUP BY Patient_ID
/*==========================================================================================================
Patient ID			TodaysVisitCount
01-01-2018-002661	1
01-03-2017-000155	2
01-04-2017-000391	3
01-09-2017-001628	2
08-01-2018-002694	5
============================================================================================================*/
),
TodaysVisitCompleteCount AS (
---This CTE gives the count of the patients previous visits count that are completed Today.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(*) AS TodaysVisitCompleteCount FROM Patient_Visits PV
INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date = @p_date_TodyasVisitDate AND (Status_ID= 5 or Status_ID=4) 
GROUP BY PV.Patient_ID
/*============================================================================================================
Patient_ID	TodaysVisitCompleteCount
08-01-2018-002694	4
=============================================================================================================*/
),
PrevVissitCount AS (
---This CTE gives the count of the patients previous visits count that are completed before this date visits.
---We need the Prev visit date and time of the patient's completed visit.
SELECT PV.Patient_ID,COUNT(PV.Patient_ID)  AS PrevVisitCount 
FROM Patient_Visits PV INNER JOIN TodaysVisitCount TVC ON PV.Patient_ID = TVC.Patient_ID
WHERE Visit_Date < @p_date_TodyasVisitDate AND (Status_ID= 5 or Status_ID=4) 
GROUP BY PV.Patient_ID
--e.g.
/*===========================================================================================================
Patient_ID	PrevVisitCount
01-01-2018-002661	3
01-03-2017-000155	3
01-04-2017-000391	2
01-09-2017-001628	4
08-01-2018-002694	1
============================================================================================================*/
)  --------These CTEs are created becuase it was not giving correct results when a paatinet had two visits same day and one was completed
----and there were no previous date completed visits for the pationt.
--These counts are now used to change the row number by -1 inthe  ALL Visits CTE below.
, OnlyPatientsThatDay AS (
---This query / CTE is only to take the patient IDs of that date. Used later in the join below.
SELECT TVC.Patient_ID,TVC.TodaysVisitCount,ISNULL(PVC.PrevVisitCount,0) AS PrevVisistCount , ISNULL(TodaysVisitCompleteCount,0) AS 
TodaysVisitCompleteCount
FROM TodaysVisitCount TVC LEFT JOIN PrevVissitCount PVC
ON TVC.Patient_ID = PVC.Patient_ID
LEFT JOIN TodaysVisitCompleteCount TVCC ON  TVC.Patient_ID = TVCC.Patient_ID
), DischargeAndVisitData AS (
--This query is to combine the dataset of Noraml Visit data and Discharge Date
SELECT
	
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,Visit_Time,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,
	CASE WHEN TodaysVisitCount - TodaysVisitCompleteCount > 1 AND (Status_ID= 5 or status_ID = 4) THEN '23:59:00' ELSE Visit_Time END as DummyVSTime, --changed
	PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_Id, PV.Doctor_ID, CASE WHEN Status_ID != 5 THEN 1 ELSE Status_ID END AS DummyStatusID,PV.Follow_Up_Date
    FROM Patient_Visits PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  <= @p_date_TodyasVisitDate
    --AND        PV.Shift_ID		=	1
    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    AND			PV.Delete_Flag  =	0
--	UNION ALL
--SELECT       PV.Patient_ID  , -999 AS Patient_Visit_No,  NULL AS Reports_Asked, Discharge_Date, [Discharge_Time],
--CONVERT(DATETIME, CONVERT(CHAR(8),Discharge_Date, 112) + ' ' + CONVERT(CHAR(8), [Discharge_Time], 100))
--    AS LAST_VISIT_DATE,[Discharge_Time] VSTime,[Discharge_Time] ,PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,
-- NULL AS follow_up_type,NULL AS FollowUp_Description,
-- 5 as Status_ID,PV.Doctor_ID, 5  DummyStatusID,'' AS Follow_Up_Date
--FROM [Discharge_Data] PV INNER JOIN [dbo].[Shift_Master] SM	ON PV.Shift_ID = SM.Shift_ID
--INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID   
--WHERE CONVERT(DATE, PV.Discharge_Date, 112)  <= @p_date_TodyasVisitDate
----AND        PV.Shift_ID		=	1
--    AND			PV.Clinic_ID	=  @p_nvar_Clinic_ID
    
), -- select * from DischargeAndVisitData,
ALLVisitsA AS (
---This query will take only the visits of the required day.
---This has also the logic to build the correct row number to join
------with the completed visits later in the query.
   SELECT
   CASE WHEN TodaysVisitCount > 1 AND PrevVisistCount = 0 THEN
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) -1 --WHEN there are no previous visits at all and todays visit count > 1 THEn
	--the row number is generated as 0,1,2,3.....in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCount > 1 AND TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, DummyVSTime ASC ) 
	--ELSE CASE WHEN TodaysVisitCompleteCount > 1 AND PrevVisistCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--when today has at least 2 or more completed visits and there is also previous date completed visit then the rownumber are generated as 
	-- 1,2,3......in the ascending order of the date and time
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 AND PrevVisistCount > 0 THEN RANK() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC,  DummyStatusID DESC )  
	--when todays complted visits are atleast 1 or more and previous as well at least 1 or more instead of row number RANK function is used
	--this way the same patient records will get the same row number assigned
	--based on the date and status id. All the status ID other than 5 are given 1 in dummy status id to make the rcords of patient 
	--as one group
	ELSE CASE WHEN TodaysVisitCompleteCount > 0 THEN ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) 
	--WHEN there is complted visit more that one for today and no complted visits pror to this date
	--the row numbers are assinged as 1,2,3......
	ELSE  1 /*PrevVisistCount */ END END END END
	----When none of the above conditions met just the previous visit count is assigned as row number
	--ELSE TodaysVisitCount - PrevVisistCount END
	--ELSE ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY     Visit_Date ASC, Visit_time ASC ) END
	 AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,TodaysVisitCount,PrevVisistCount,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate
AND        PV.Shift_ID		=	@p_int_Shift_ID --AND Status_ID != 5
    --AND			PV.Clinic_ID	= @p_nvar_Clinic_ID
    --AND			PV.Delete_Flag  =	0
/*====================================================================================================================
e.g. 
ROWNUM	Patient_ID				Patient_Visit_No	LAST_VISIT_DATE				VSTime		follow_up_type		FollowUp_Description	Status_ID	Doctor_ID	TodaysVisitCount	PrevVisistCount
2	01-04-2017-000391			3					2018-02-22 17:51:00.000	17:51:01.8326287	0											1		DR-00002		3					2
2	01-04-2017-000391			4					2018-02-22 17:51:00.000	17:51:07.2122279	0											1		DR-000A2		3					2
2	01-04-2017-000391			5					2018-02-22 17:51:00.000	17:51:13.1645097	0											1		DR-000B2		3					2
1	08-01-2018-002694			2					2018-02-22 10:41:00.000	10:41:07.3660922	4					PRN						5		DR-00002		5					1
2	08-01-2018-002694			3					2018-02-22 10:41:00.000	10:41:22.9560486	2					Follow-up				5		DR-000A2		5					1
3	08-01-2018-002694			4					2018-02-22 10:41:00.000	10:41:31.4639237	3					After Test				5		DR-000B2		5					1
4	08-01-2018-002694			5					2018-02-22 12:40:00.000	12:40:18.0617707	5					Pre-OP					5		DR-00002		5					1
5	08-01-2018-002694			6					2018-02-22 12:52:00.000	12:52:39.9776429	0											2		DR-000A2		5					1

In the above example 391 patient has 3 todays visits but none is complete for today and 2 visits are completed before today
So all the rows should get the same LAST_VISIT_DATE and Time , so the same row number is assigned.

For patient 694 there are 5 visits today and multiple visits are completed. So the previous visit date and time should get
assigned in exact order so the row numbers are generated as 1,2,3,4,5....
=======================================================================================================================*/	

	) , --SELECT * FROM ALLVisitsA 
	
	
ALLPrevVisits AS (
----This query brings in all the comleted visits prior to todays date. Later using row number only last completed vissit is kept.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  < @p_date_TodyasVisitDate AND   (PV.Status_ID= 5 or PV.Status_ID=4) 

	),
ALLTodaysVisits AS (
---This query brings in all the Completed visits of today.
   SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,
    CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
    AS LAST_VISIT_DATE,
	Visit_Time VSTime,PV.Shift_ID,LEFT(SM.Description,1) AS Description,
	ISNULL([follow_up_type],'') AS follow_up_type,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM DischargeAndVisitData PV LEFT JOIN Shift_Master SM ON PV.Shift_ID = SM.Shift_ID
   LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
   INNER JOIN    OnlyPatientsThatDay OPTD ON PV.Patient_ID =  OPTD.Patient_ID           
    WHERE CONVERT(DATE, PV.Visit_Date, 112)  = @p_date_TodyasVisitDate AND  (PV.Status_ID= 5 or PV.Status_ID=4) 

	),
	CombinedCompletedVisits AS 
	(
	---Only the latest completed visit from Previous dates date is kept and unioned with todays all ompleted vissits.
	SELECT * FROM ALLPrevVisits WHERE ROWNUM = 1
	UNION ALL 
	SELECT * FROM ALLTodaysVisits
	),
	AllCompletedVisits AS (
	----Proper row number is assigned now to use it in the below query in join
	SELECT
	ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      LAST_VISIT_DATE ASC ) AS
    ROWNUM,
	PV.Patient_ID , Patient_Visit_No, Reports_Asked, LAST_VISIT_DATE,VSTime,PV.Shift_ID,Description,follow_up_type, FollowUp_Description,
	Status_ID,PV.Doctor_ID,PV.Follow_Up_Date
    FROM  CombinedCompletedVisits PV 


	)
	--SELECT * FROM AllCompletedVisits
	
	select  
	PM.First_Name+' '+PM.Last_Name as Name ,SR.Status_Description,PV.Status_ID,
	A.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
	A.Patient_Visit_No, PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,PM.Mobile_1,
	CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
	ISNULL(B.Reports_Asked,0) AS Reports_Asked, 
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'')  
	ELSE NULL END
	AS PreVisitDate,
	CASE WHEN B.Status_ID = 5 THEN 
	ISNULL(CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106),'') +' - '+ B.Description +' - ' + DM1.Prefix+' '+DM1.First_Name 
	ELSE NULL END AS PreVisitDetails,
	PV.Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,B.Description AS ShiftDesc, B.Shift_ID,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal,
	CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
	DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
	B.Patient_Visit_No,
	DM.Prefix+' '+DM.First_Name AS DoctorName ,
	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility,
	B.FollowUp_Description,CONVERT(VARCHAR(11),B.LAST_VISIT_DATE,106) AS prevLAST_VISIT_DATE,B.Patient_Visit_No AS PrevPatient_Visit_No,
	B.Shift_ID AS PrevShift_ID,B.Doctor_ID AS prevDoctor_ID,PM.Gender_ID AS prevGender_ID,B.Follow_Up_Date
	--,	TodaysVisitCount,PrevVisistCount,A.ROWNUM
	/*,
	A.VSTime AS Visit_Time, 
	B.VSTime As Previous_VisitTime,
	A.LAST_VISIT_DATE */
	
	 
	FROM ALLVisitsA A
	LEFT JOIN AllCompletedVisits B ON A.Patient_ID = B.Patient_ID AND  A.ROWNUM  = B.ROWNUM AND A.Patient_Visit_No != B.Patient_Visit_No
	LEFT JOIN Patient_Master PM ON A.Patient_ID = PM.ID 
	LEFT JOIN Patient_Visits PV ON A.Patient_ID = PV.Patient_ID AND  A.Patient_Visit_No = PV.Patient_Visit_No
	LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID --AND PV.Doctor_ID = SR.Doctor_ID AND PV.Clinic_ID = SR.Clinic_ID 
    LEFT JOIN  dbo.Status_Order SO ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
	LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
	LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
	INNER JOIN Visit_Prescription_Overwrite VP ON	VP.Patient_ID=PV.Patient_ID  --changeddddddddddddd
	--changed --WHERE (SO.Role_Id =@p_int_Role_ID OR SO.Role_Id IS NULL ) AND (B.Status_ID = 5 ) --B.Status_ID = 5 --AND A.ROWNUM = 1
	 WHERE PV.Patient_ID	=	@p_var_PatientId
	--AND A.Patient_ID  = '01-03-2017-000159'
	
	ORDER BY SO.Sort_Order ASC,PV.Visit_Time ASC
							--select 	PM.First_Name+' '+PM.Last_Name as Name,SR.Status_Description,PV.Status_ID,
							--	PV.Patient_ID,PV.Visit_Date AS Visit_Date, PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
							--	PV.Folder_No,(convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
							--	PM.Mobile_1,CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
							--	CONVERT(int,ROUND(DATEDIFF(hour,Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound,
							--	ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
							--	ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
							-- DM.Prefix+' '+DM.First_Name AS DoctorName ,
							--	DM.Prefix+' '+DM.First_Name+' - '+ DM.Speciality AS Doctorspecility
 
							-- from Patient_Visits PV
							-- LEFT JOIN Patient_Master PM ON PV.Patient_ID = PM.ID 
							-- LEFT JOIN  Status_Ref SR ON  PV.Status_ID = SR.ID 
							-- LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID
							----LEFT JOIN dbo.Doctor_Master DM1 ON  B.Doctor_ID = DM1.Doctor_ID
							-- where (Status_ID=5 or Status_ID= 4 ) and Visit_Date = @p_date_TodyasVisitDate 

						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Clinic_ID=@p_nvar_Clinic_ID) AND (ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

--select * from Status_Ref












/****** Object:  StoredProcedure [dbo].[USP_Get_PatientProfileRefData]    Script Date: 16-Feb-18 11:36:02 AM ******/
SET ANSI_NULLS ON





/****** Object:  StoredProcedure [dbo].[USP_Get_MasterLists]    Script Date: 25-Feb-18 9:17:10 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_TodaysVisitForMR]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author       :  INCRUST
-- Create date  :  14 Dec 2016
-- Description  :  This stored procedure will Get the Todyas Visit Details Record of a MR for Doctor
-- Created By   :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Search_TodaysVisitForMR]
   
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_nvar_MR_ID				INT
AS
BEGIN



	SET NOCOUNT ON;
	BEGIN TRY


			--;WITH LastVisitDate AS 
   --                        (
   --                              SELECT MR_ID ,
   --                              CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
   --                              AS LAST_VISIT_DATE
   --                              FROM [dbo].[MR_Visits] MV
                           
                           
   --                              WHERE			MV.Doctor_ID	=	@p_nvar_Doctor_ID
   --                              AND			MV.Visit_Date	=   @p_date_TodyasVisitDate
   --                              AND			MV.Shift_ID		=	@p_int_Shift_ID
   --                              AND			MV.Clinic_ID	=   @p_nvar_Clinic_ID
   --                              AND			MV.Delete_Flag  =	0
   --                        ),

   --                        PreviousVisits AS 
   --             (
   --                     SELECT      ROW_NUMBER() OVER (  PARTITION BY MV.MR_ID  ORDER BY  Visit_Date DESC, Visit_time DESC ) AS
   --                                 ROWNUM,  
   --                                 Doctor_ID,MV.MR_ID,Visit_Date,
   --                                 Visit_Time, MV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc
   --                     FROM        [dbo].[MR_Visits] MV
			--						INNER JOIN [dbo].[Shift_Master] SM
			--						ON MV.Shift_ID = SM.Shift_ID

   --                                 LEFT JOIN       LastVisitDate LV ON MV.MR_ID = LV.MR_ID
   --                     WHERE        
   --                                 Doctor_ID  =@p_nvar_Doctor_ID
   --                     AND         CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
   --                                 < LV.LAST_VISIT_DATE
                                                                           
   --                     AND               Status_ID = 5 
   --                     AND               Delete_Flag = 0  
                                 
                                        
                                            
   --             ),
   --                        PatientWiseVisit AS
   --                 (
   --                        SELECT        
   --                                         Doctor_ID,MR_ID,Visit_Date,ShiftDesc,Shift_ID
   --                        FROM           PreviousVisits WHERE ROWNUM = 1
   --                 )    
                           
   --                        SELECT  MM.First_Name+' '+Last_Name as MRName,MM.Short_Name as Short_Name,
   --                              SR.Status_Description,SR.ID AS Status_ID,
   --                               MV.MR_ID,MV.Visit_Date,MV.Shift_ID,MV.Clinic_ID,MV.Doctor_ID,
   --                            (convert(varchar(11),MV.Visit_Time, 108)) AS Visit_Time,
   --                            MM.Mobile_No,
   --                             ISNULL(CONVERT(VARCHAR(11),PV1.Visit_Date,106),'') AS PreVisitDate,
   --                              PV1.ShiftDesc,PV1.Shift_ID,MV.Company_Name

   --                 FROM         [dbo].[MR_Master] MM
                    
   --                 INNER JOIN    [dbo].[MR_Visits] MV
   --                              ON  MM.MR_ID  = MV.MR_ID AND MM.Doctor_ID = MV.Doctor_ID




   --                 LEFT JOIN  PatientWiseVisit PV1
   --                              ON  MV.Doctor_ID = PV1.Doctor_ID AND MV.MR_ID = PV1.MR_ID 
                                                      

   --                 INNER JOIN  Status_Ref SR
   --                              ON  MV.Status_ID = SR.ID AND MV.Doctor_ID = SR.Doctor_ID
   --                 INNER JOIN  dbo.Status_Order SO
   --                              ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id


                    


   --                        WHERE		SR.Doctor_ID	=   @p_nvar_Doctor_ID
   --                        AND          MV.Visit_Date	=	@p_date_TodyasVisitDate
   --                        AND          MV.Shift_ID		=	@p_int_Shift_ID
   --                        AND          MV.Clinic_ID	=	@p_nvar_Clinic_ID
   --                        AND          MV.Doctor_ID	=	@p_nvar_Doctor_ID
   --                        AND          SO.Role_Id      =	@p_int_Role_ID
   --                        AND			MV.Delete_Flag	=	0
			--			   AND			MV.MR_ID		=	@p_nvar_MR_ID

                    
   --                        ORDER BY SO.Sort_Order, MV.Visit_Time 

   ;WITH TodaysAllVisits AS (
								SELECT	MV.MR_ID ,CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 108)) AS LAST_VISIT_DATE,
										MV.Company_Name,MM.First_name,Visit_Date,Visit_Time,MV.Doctor_ID, MM.Last_Name,MM.Short_Name,MV.Status_ID,
										MV.Shift_ID,MV.Clinic_ID,MM.Mobile_No
                                 FROM	[dbo].[MR_Visits] MV
								
								 inner join MR_Master MM ON MV.MR_ID = MM.MR_ID AND MV.Doctor_ID = MM.Doctor_ID
                           
                                 WHERE               MV.Doctor_ID	=   @p_nvar_Doctor_ID
                                 AND                 MV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND                 MV.Shift_ID    =   @p_int_Shift_ID
                                 AND                 MV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 AND                 MV.Delete_Flag =   0
								 AND				 MM.Delete_Flag	=	0
                            ),
						COMPLETEDVisists AS (

						SELECT      ROW_NUMBER() OVER (PARTITION BY MV.Company_Name ORDER BY MV.Visit_Date DESC,MV.VISIT_TIME DESC) AS ROWNUM,
									MV.Doctor_ID,MV.Visit_Date,MV.Visit_Time, MV.Shift_ID,MV.Company_Name,MV.MR_ID,MM.First_Name+' '+MM.Last_Name AS PREMR,LEFT(SM.Description,1) AS ShiftDesc,MM.Short_Name AS PreShortName,
									CONVERT(DATETIME, CONVERT(CHAR(8),MV.Visit_Date, 112) + ' ' + CONVERT(CHAR(8), MV.Visit_Time, 108)) VISITDATE
						FROM        [dbo].[MR_Visits] MV
									inner join MR_Master MM ON MV.MR_ID = MM.MR_ID AND MV.Doctor_ID = MM.Doctor_ID
									INNER JOIN [dbo].[Shift_Master] SM
									ON MV.Shift_ID = SM.Shift_ID
						WHERE        
                                         MV.Doctor_ID  =@p_nvar_Doctor_ID
                        AND               MV.Status_ID = 5 
                        AND               MV.Delete_Flag = 0 
						AND				MM.Delete_Flag=0 
						),
						GetOneRowEach AS
						(

						SELECT 
						
							MV.First_Name +' '+MV.Last_name AS MRName,
							MV.Short_Name AS Short_Name,
							MV.Visit_Time AS CurrVisitTime, /* StatusDesc*/
							MV.Status_Id,
							MV.MR_ID,
							MV.Visit_Date,
							MV.Shift_Id,
							MV.Clinic_ID,
							MV.Doctor_ID,
							convert(varchar(11),MV.Visit_Time, 108) AS GetVisitTime,
							convert(varchar(11),TCV.Visit_Time, 108) AS Visit_Time, 
							MV.Mobile_No,
							ISNULL(CONVERT(VARCHAR(11),TCV.Visit_Date,106),'') AS PreVisitDate,
							TCV.ShiftDesc, /*ShiftDesc*/ 
							TCV.Shift_ID PreShitID, 
							UPPER(MV.Company_name) AS Company_name,
							PREMR AS PreMRName,
							PreShortName AS PreShortName,
							ISNULL(CONVERT(VARCHAR(11),TCV.Visit_Date,106),'')+'-'+TCV.ShiftDesc+'-'+PreShortName AS PreVisitDetails,
							ROW_NUMBER() OVER( PARTITION BY MV.Company_Name,MV.MR_ID ORDER BY TCV.VISIT_DATE DESC,TCV.VISIT_TIME DESC) AS ROWNUM1
							 
						
							FROM TodaysAllVisits MV
							LEFT JOIN COMPLETEDVisists TCV ON 
										MV.Company_Name = TCV.Company_Name AND
                                        TCV.VISITDATE < MV.LAST_VISIT_DATE
							
                                                             
						)
						SELECT * FROM GetOneRowEach GT      
						INNER JOIN		Status_Ref SR
										ON  GT.Status_ID = SR.ID AND GT.Doctor_ID = SR.Doctor_ID
							INNER JOIN		dbo.Status_Order SO
										ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id

						WHERE ROWNUM1 = 1   

						
							AND			SR.Doctor_ID	=   @p_nvar_Doctor_ID
							AND          GT.Visit_Date	=	@p_date_TodyasVisitDate
							AND          GT.Shift_ID		=	@p_int_Shift_ID
							AND          GT.Clinic_ID	=	@p_nvar_Clinic_ID
							AND          GT.Doctor_ID	=	@p_nvar_Doctor_ID
							AND          SO.Role_Id      =	@p_int_Role_ID 
							AND			 GT.MR_ID		=	@p_nvar_MR_ID
							
							ORDER BY SO.Sort_Order, GT.GetVisitTime  

						   SELECT  ID,
						   		Status_Description as Status
						   FROM	Status_Ref   
						   WHERE	ID NOT IN(SELECT ID FROM Status_Ref WHERE (Doctor_ID=@p_nvar_Doctor_ID) AND (ID=3 or ID=4 or ID=5))
						   AND		Doctor_ID = @p_nvar_Doctor_ID

	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Search_TopDefaulters]    Script Date: 16-Jan-18 8:16:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Search_TopDefaulters]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author		:  INCRUST
-- Create date	:  05 Jul 2017
-- Description	:  This stored procedure will search patient whose amount is pending
-- Created By	:  Varsha Khandre
-- =============================================
 CREATE PROCEDURE [dbo].[USP_Search_TopDefaulters]
	
	@p_var_Doctor_ID		NVARCHAR(30),
	@p_var_Language_ID		INT,
	@p_var_defaulterCount	INT,
	@p_var_PatientID		NVARCHAR(32)

 AS
 BEGIN

     -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
     BEGIN TRY
	
		DECLARE @defaulter_count	 INT

		SET @defaulter_count=@p_var_defaulterCount;
		
		IF((@p_var_defaulterCount=null) or (@p_var_defaulterCount='')) 

		BEGIN
		
		 ;WITH FeesCollectionData AS 
		 (
			SELECT	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,
					pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,
					((pv.Fees_To_Collect-pv.Discount) - (pv.Fees_Collected )) as Balance,convert(char(8), pv.Visit_Time, 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name

			FROM	Patient_Master pm
			
			INNER JOIN Patient_Visits pv
			
			ON		pm.ID			=	Pv.Patient_ID --and
					--PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	
					--pm.Doctor_ID	=   @p_var_Doctor_ID AND
					pv.Delete_Flag= 0 
			AND		pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND		pv.Fees_Collected IS NOT NULL 
			AND		pv.Status_ID=5
			AND		GT.Language_Id=@p_var_Language_ID
			AND		pv.Patient_ID	=	@p_var_PatientID
			
			
		
			UNION ALL

			SELECT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
					Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
					[Fees_Collected] AS Collected , pm.Folder_No,	0 - [Fees_Collected]  AS Balance,
					convert(char(8), convert(time,Payment_Date), 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					
					,pm.First_Name+' '+ pm.Middle_Name +' '+pm.Last_Name as PatientFull_Name

			FROM	Patient_Payments_AdHoc PV

			INNER JOIN Patient_Master pm  
			ON		pm.ID			=	Pv.Patient_ID and
					PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	--pm.Doctor_ID	=   @p_var_Doctor_ID AND	
				pv.Delete_Flag	=	0 
			AND		GT.Language_Id=@p_var_Language_ID
			AND		pv.Patient_ID	=	@p_var_PatientID


		) 

		SELECT  DISTINCT FC.Patient_ID, Full_Name,
				Folder_No, Mobile_1,
				AgeYearsIntRound,Gender_Description--,SUM(Balance) AS Total
				,PatientFull_Name,
				Total_Bal.Total
		FROM FeesCollectionData FC
		LEFT JOIN 
		(
			SELECT (SUM(Balance)) AS Total,Patient_ID  FROM FeesCollectionData GROUP BY Patient_ID
		) Total_Bal ON Total_Bal.Patient_ID=FC.Patient_ID

		WHERE Total_Bal.Total > 0

		ORDER BY Total DESC,Full_Name ASC

		END

		ELSE

		BEGIN
			 ;WITH FeesCollectionData AS 
		 (
			SELECT	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name,
					pv.Patient_Visit_No,pv.Visit_Date AS Visit_Date,
					pv.Fees_To_Collect AS Bill,pv.Fees_Collected   as Collected,pm.Folder_No,
					((pv.Fees_To_Collect-pv.Discount) - (pv.Fees_Collected )) as Balance,convert(char(8), pv.Visit_Time, 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm. [Middle_Name] +' '+pm.Last_Name as PatientFull_Name
			FROM	Patient_Master pm
			
			INNER JOIN Patient_Visits pv
			
			ON		pm.ID			=	Pv.Patient_ID and
					PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	
					--pm.Doctor_ID	=   @p_var_Doctor_ID AND	
				pv.Delete_Flag= 0 
			AND		pv.Fees_To_Collect IS NOT NULL --use to avoid null record
			AND		pv.Fees_Collected IS NOT NULL 
			AND		pv.Status_ID=5
			AND		GT.Language_Id=@p_var_Language_ID
			
			
		
			UNION ALL

			SELECT 	Pv.Patient_ID,pm.First_Name+' '+pm.Last_Name as Full_Name, 0 AS Patient_Visit_No,
					Payment_Date AS Visit_Date, 0 AS Fees_To_Collect,
					[Fees_Collected] AS Collected , pm.Folder_No,	0 - [Fees_Collected]  AS Balance,
					convert(char(8), convert(time,Payment_Date), 108) AS Visit_Time,
					pm.Mobile_1,
					DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
						,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
						,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
						GT.Gender_Description
					,pm.First_Name+' '+ pm. [Middle_Name] +' '+pm.Last_Name as PatientFull_Name
					
			FROM	Patient_Payments_AdHoc PV

			INNER JOIN Patient_Master pm  
			ON		pm.ID			=	Pv.Patient_ID and
					PM.Doctor_ID	=	PV.Doctor_ID

			INNER JOIN	Gender_Translations GT
			ON			PM.Gender_ID=GT.Gender_ID

			WHERE	--pm.Doctor_ID	=   @p_var_Doctor_ID
			pv.Delete_Flag	=	0 
			AND		GT.Language_Id=@p_var_Language_ID
		) 

		SELECT  DISTINCT TOP(@defaulter_count) FC.Patient_ID, Full_Name,PatientFull_Name
				Folder_No, Mobile_1,
				AgeYearsIntRound,Gender_Description--,SUM(Balance) AS Total
				
				, Total_Bal.Total
		FROM FeesCollectionData FC
		LEFT JOIN 
		(
			SELECT (SUM(Balance)) AS Total,Patient_ID  FROM FeesCollectionData GROUP BY Patient_ID
		) Total_Bal ON Total_Bal.Patient_ID=FC.Patient_ID

		WHERE Total_Bal.Total > 0

		ORDER BY Total DESC,Full_Name ASC
		END
		

	 END TRY
     BEGIN CATCH
       SELECT ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	 END CATCH    
 END




















/****** Object:  StoredProcedure [dbo].[USP_SearchTodays_Patient]    Script Date: 16-Jan-18 8:16:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_SearchTodays_Patient]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_SearchTodays_Patient]

	@p_var_PatientId			NVARCHAR(60),
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY

		 ;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                 AND			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_int_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Clinic_ID
                        FROM        Patient_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
                        WHERE        
                                    --Doctor_ID  =@p_nvar_Doctor_ID AND
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,ShiftDesc,Clinic_ID
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    
                           
                           SELECT  PM.First_Name+' '+Last_Name as Name,
                                 SR.Status_Description,SR.ID AS Status_ID,
                                  PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
                                 PV.Patient_Visit_No,
                                 PV.Folder_No,
                               (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
                               PM.Mobile_1,
                                 CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
                                 ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,ISNULL(CONVERT(VARCHAR(11),PV1.Visit_Date,106),'') AS PreVisitDate,
                                 ISNULL(PV.Reports_Received,0) AS Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,PV1.ShiftDesc,
								  DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
								,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
								,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
								 ISNULL(CONVERT(VARCHAR(11),PV1.Visit_Date,106),'')+' - '+PV1.ShiftDesc AS PreVisitDetails,
								 
									ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
									ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest

                    FROM         Patient_Master PM



			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID

			LEFT JOIN  PatientWiseVisit PV1
                                 ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID 
                                                      AND PV.Patient_Visit_No != PV1.Patient_Visit_No
			
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id --AND SR.Doctor_ID = SO.Doctor_Id
			
			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Patient_ID	=	@p_var_PatientId
			AND     PV.Delete_Flag  =0
			ORDER BY SO.Sort_Order, PV.Visit_Time 

			
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_SELECT_folderdetails]    Script Date: 16-Jan-18 8:16:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_SearchTodays_Patient_doctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_SearchTodays_Patient_doctor]

	@p_var_PatientId			NVARCHAR(60),
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY

		 ;WITH LastVisitDate AS 
                           (
                                 SELECT Patient_ID ,
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                 AS LAST_VISIT_DATE
                                 FROM Patient_Visits PV
                           
                           
                                 WHERE			PV.Doctor_ID	=	@p_nvar_Doctor_ID
                                 AND			PV.Visit_Date	=   @p_date_TodyasVisitDate
                                 AND			PV.Shift_ID		=	@p_int_Shift_ID
                                 AND			PV.Clinic_ID	=   @p_nvar_Clinic_ID
                                 --AND			PV.Status_ID    =   5
                                 AND			PV.Delete_Flag  =	0
                           ),

                           PreviousVisits AS 
                (
                        SELECT      ROW_NUMBER() OVER (  PARTITION BY PV.Patient_ID  ORDER BY      Visit_Date DESC, Visit_time DESC ) AS
                                    ROWNUM,  
                                    Doctor_ID,PV.Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,
                                    Visit_Time, PV.Shift_ID,LEFT(SM.Description,1) AS ShiftDesc,Clinic_ID,ISNULL(FU.FollowUp_Description,'') AS FollowUp_Description,
									pv.Doctor_notes

                        FROM        Patient_Visits PV

									INNER JOIN [dbo].[Shift_Master] SM
									ON PV.Shift_ID = SM.Shift_ID

                                    LEFT JOIN       LastVisitDate LV ON PV.Patient_ID = LV.Patient_ID
										 LEFT JOIN [Follow-Up_type] FU ON	PV.follow_up_type = FU.ID  
                        WHERE        
                                    --Doctor_ID  =@p_nvar_Doctor_ID AND
                                 CONVERT(DATETIME, CONVERT(CHAR(8),Visit_Date, 112) + ' ' + CONVERT(CHAR(8), Visit_Time, 100))
                                    < LV.LAST_VISIT_DATE
                                                                           
                        AND               Status_ID = 5 
                        AND               Delete_Flag = 0  
                                 
                                        
                                            
                ),
                           PatientWiseVisit AS
                    (
                           SELECT        
                                            Doctor_ID,Patient_ID,Patient_Visit_No,ISNULL(Reports_Asked,0) AS Reports_Asked,Visit_Date,ShiftDesc,Clinic_ID,FollowUp_Description,Doctor_notes
                           FROM           PreviousVisits WHERE ROWNUM = 1
                    )    
                           
                           SELECT  PM.First_Name+' '+ PM.Last_Name as Name,
                                 SR.Status_Description,SR.ID AS Status_ID,
                                  PV.Patient_ID,PV.Visit_Date,PV.Shift_ID,PV.Clinic_ID,PV.Doctor_ID,
                                 PV.Patient_Visit_No,
                                 PV.Folder_No,
                               (convert(varchar(11),PV.Visit_Time, 108)) AS Visit_Time,
                               PM.Mobile_1,
                                 CASE WHEN PV.Weight_IN_KGS <= 0 THEN NULL ELSE PV.Weight_IN_KGS END AS Weight_IN_KGS,
                                 ISNULL(PV1.Reports_Asked,0) AS Reports_Asked,ISNULL(CONVERT(VARCHAR(11),PV1.Visit_Date,106),'') AS PreVisitDate,
                                 ISNULL(PV.Reports_Received,0) AS Reports_Received,ISNULL(PV.In_Person,0) AS In_Person,PV1.ShiftDesc,
								  DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0 AS AgeYearsDecimal
								,CONVERT(int,ROUND(DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766.0,0)) AS AgeYearsIntRound
								,DATEDIFF(hour,PM.Date_Of_Birth,GETDATE())/8766 AS AgeYearsIntTrunc,
								-- ISNULL(CONVERT(VARCHAR(11),PV1.Visit_Date,106),'')+' - '+PV1.ShiftDesc AS PreVisitDetails,
								  ISNULL(CONVERT(VARCHAR(11),PV1.Visit_Date,106),'') +' - '+ PV1.ShiftDesc +' - ' + DM.Prefix+' '+DM.First_Name   AS PreVisitDetails,
									ISNULL(PV.Is_Submit_Patient_Visit_Details,0) AS Is_Submit_Patient_Visit_Details,
									ISNULL(PV.Is_Submit_Patient_LabTest,0) AS Is_Submit_Patient_LabTest,
									pv1.FollowUp_Description,PV1.Doctor_notes
									,CASE WHEN CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) = '00:00' THEN null ELSE CONVERT(VARCHAR(5), PV.Online_Appointment_Time, 108) END  AS Online_Appointment_Time --Added By Neha
                    FROM         Patient_Master PM



			INNER JOIN 	Patient_Visits PV
					ON  PM.ID  = PV.Patient_ID AND PM.Clinic_ID = PV.Clinic_ID

			LEFT JOIN  PatientWiseVisit PV1
                                 ON  PV.Clinic_ID = PV1.Clinic_ID AND PV.Patient_ID = PV1.Patient_ID 
                                                      AND PV.Patient_Visit_No != PV1.Patient_Visit_No
			
			INNER JOIN  Status_Ref SR
					ON  PV.Status_ID = SR.ID AND PV.Clinic_ID = SR.Clinic_ID
			INNER JOIN  dbo.Status_Order SO
					ON  SR.ID = SO.Status_Id AND SR.Doctor_ID = SO.Doctor_Id
				LEFT JOIN dbo.Doctor_Master DM ON PV.Doctor_ID = DM.Doctor_ID

			WHERE	--SR.Doctor_ID	=	@p_nvar_Doctor_ID 
					PV.Visit_Date	=	@p_date_TodyasVisitDate
			AND		PV.Shift_ID		=	@p_int_Shift_ID 
			AND		PV.Clinic_ID	=	@p_nvar_Clinic_ID 
			AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			AND		SO.Role_Id		=	@p_int_Role_ID
			AND     PV.Patient_ID	=	@p_var_PatientId
			AND     PV.Delete_Flag  =0
			ORDER BY SO.Sort_Order, PV.Visit_Time 

			
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_SELECT_folderdetails]    Script Date: 16-Jan-18 8:16:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_SearchTodays_Patient_PatReg]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author		:  INCRUST
-- Create date	: 23-Mar-2016
-- Description	: This stored procedure will search patient
--				  If not a valid user will return 0 else will return 1   
-- Created By	: Snehal Shinde
-- =============================================
CREATE PROCEDURE [dbo].[USP_SearchTodays_Patient_PatReg]

	@p_var_PatientId			NVARCHAR(60),
	@p_date_TodyasVisitDate     DATE,
	@p_int_Shift_ID             INT,
	@p_nvar_Clinic_ID           NVARCHAR(30),
	@p_nvar_Doctor_ID           NVARCHAR(30),
	@p_int_Role_ID				INT,
	@p_str_Mobile_Num				NVARCHAR(20)
 AS
  
 BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	BEGIN TRY

		
                              

                     
                           
                           SELECT PM.First_Name+' '+Last_Name as Name,
						          PM.Age_Given as Age,
                                GT.Gender_Description   AS Gender,
								PM.Gender_ID,
								PM.Pincode as Pincode,
                               PM.Mobile_1 as Mobile,
							  PM.First_Name as First_Name,
							  PM. Last_Name as Last_Name,
							  PM.Middle_Name as Middle_Name,
							  PM.ID
							   
                               

                    FROM         Patient_Master PM

				left join Gender_Translations GT on
					pm.Gender_ID=GT.Gender_ID

					
			
			WHERE	
			--AND		PM.Shift_ID		=	@p_int_Shift_ID 
					PM.Clinic_ID	=	@p_nvar_Clinic_ID 
			--AND		PV.Doctor_ID	=	@p_nvar_Doctor_ID  
			--AND		SO.Role_Id		=	@p_int_Role_ID
			--AND     PM.ID	=	@p_var_PatientId
		   And  GT.Language_Id=1
		   AND  PM.Mobile_1= @p_str_Mobile_Num
			
	END TRY
	BEGIN CATCH
		 SELECT  ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
 END

















/****** Object:  StoredProcedure [dbo].[USP_SELECT_folderdetails]    Script Date: 16-Jan-18 8:16:37 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_SELECT_folderdetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author      :  INCRUST
-- Create date :  29-Mar-2016
-- Description :  
--  created By :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_SELECT_folderdetails]


	@p_var_folder_name	nvarchar(200),
	@p_int_LanguageId	INT
AS

BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY
	
		SELECT First_Name+' '+Middle_Name+' '+Last_Name as Name,
                               Mobile_1,Age_Given,
                               Date_Of_Birth,PM.Gender_ID,GT.Gender_Description,PM.Area_ID,AT.Area_Name,
                               Folder_No
		FROM Patient_Master PM INNER JOIN Area_Translations AT ON AT.Area_ID=PM.Area_ID
												 INNER JOIN Gender_Translations GT ON PM.Gender_ID=GT.Gender_ID AND GT.Language_Id=AT.Language_Id
												 INNER JOIN City_Translations CT ON PM.City_ID=CT.City_ID AND GT.Language_Id=CT.Language_Id

		WHERE Folder_No in
		( SELECT Folder_No
		FROM Patient_Master WHERE Folder_No = @p_var_folder_name
							AND  GT.Language_Id=@p_int_LanguageId	
							)
							
		
                       

	
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Update_Addendum]    Script Date: 16-Jan-18 8:16:48 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_Addendum]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       : INCRUST
-- Create date  : 11 Oct 2017
-- Description  : This stored procedure will update Addendum in Patient Visits Table
-- Created By  : Varsha Khandre
-- =============================================

CREATE  PROCEDURE [dbo].[USP_Update_Addendum]

	@p_var_Addendum				NVARCHAR(1000),
	@p_var_Visit_Date			DATE,
	@p_var_Patient_ID			NVARCHAR(32),
	@p_int_patientVisitNo		INT,
	@p_var_UserID					NVARCHAR(100)
	
	
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY

			UPDATE  Patient_Visits
			SET [Addendum]  = @p_var_Addendum,
				Modified_On	=	GETDATE(),
				ModifiedBy_Name	=	@p_var_UserID		
			 
			WHERE	Visit_Date	=	@p_var_Visit_Date
			AND		Patient_ID	=	@p_var_Patient_ID
			AND		Patient_Visit_No	=	@p_int_patientVisitNo
			  
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	
END









-----------------------------------




/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor]    Script Date: 11-Jan-18 12:27:46 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_Area]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       : INCRUST
-- Create date  : 12 Sep 2017
-- Description  : This stored procedure will activate or deactivate area
--  created By  : Varsha Khandre
-- =============================================

CREATE  PROCEDURE [dbo].[USP_Update_Area]
	@p_var_AreaID				INT,				
	@p_bit_IsActivate			BIT
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY

			UPDATE  [dbo].[Area_Master]
			SET  [Is_Activate] = @p_bit_IsActivate		
			 WHERE  ID = @p_var_AreaID
			  
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	
END
















/****** Object:  StoredProcedure [dbo].[USP_Update_Blood_Group]    Script Date: 16-Jan-18 8:17:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_Blood_Group]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[USP_Update_Blood_Group]
    @p_nvar_Patient_Id                     NVARCHAR(32),
	@p_int_BloodGroup_ID                   INT

	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	 IF(@p_int_BloodGroup_ID = 0)
         SET @p_int_BloodGroup_ID = NULL;


    -- Insert statements for procedure here
	UPDATE [dbo].[Patient_Master]
	SET
	BloodGroup_ID= @p_int_BloodGroup_ID
	WHERE ID = @p_nvar_Patient_Id;
END



/****** Object:  StoredProcedure [dbo].[USP_Update_FeesToBeCollectedCompounder]    Script Date: 16-Jan-18 8:17:15 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_DeliveryRegPrintdate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       : INCRUST
-- Create date  : 24 dec 2018 
-- Description  : This stored procedure is use to update printed date on delivery registration form
--  created By  : shubham kule
-- =============================================

create  PROCEDURE [dbo].[USP_Update_DeliveryRegPrintdate]
	@p_nvar_DeliveryReg_ID			nvarchar(100),
	@p_date_PrintedOn			    datetime

AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY

			if exists(select * from Gynec_Delivery_Registration where DeliveryReg_ID = @p_nvar_DeliveryReg_ID)
			begin
			update Gynec_Delivery_Registration set printedOn = @p_date_PrintedOn 
			where DeliveryReg_ID = @p_nvar_DeliveryReg_ID;
			end
			  
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	
END
















/****** Object:  StoredProcedure [dbo].[USP_Update_Blood_Group]    Script Date: 16-Jan-18 8:17:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_FeesToBeCollectedCompounder]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Varsha Khandre
-- Create date: 24 Aug 2016
-- Description:	This stored procedure is used to update fees to be collected by compounder
-- =============================================
CREATE PROCEDURE [dbo].[USP_Update_FeesToBeCollectedCompounder]
	
	@p_var_fees_to_collect		 DECIMAL(10,2),
	@p_var_Doctor_Id			 NVARCHAR(30),
	@p_var_Patient_Id			 NVARCHAR(32),
	@p_var_Clinic_Id			 NVARCHAR(30),
	@p_var_Shift_Id				 INT,
	@p_int_Patient_VisitNo		 INT
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT Default_Fees,Compounder_Overwrite
	FROM System_Params
	
				UPDATE  [dbo].[Patient_Visits]  
				SET		Fees_To_Collect = @p_var_fees_to_collect
				WHERE	Doctor_ID=@p_var_Doctor_Id
				AND		Patient_ID=@p_var_Patient_Id
				AND		Clinic_ID=@p_var_Clinic_Id
				AND		Shift_ID=@p_var_Shift_Id
				AND		Patient_Visit_No=@p_int_Patient_VisitNo
END




/****** Object:  StoredProcedure [dbo].[USP_Update_MRRegistration]    Script Date: 16-Jan-18 8:17:27 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_LicenseKey]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author     :  INCRUST
-- Create date: 14-Mar-2016
-- Description: This stored procedure will insert the data in LabTestAsked Table and Update
--				ReportAsked Flag true in Patient Visit
-- Created By : Nilesh Wani
-- =============================================
CREATE PROCEDURE [dbo].[USP_Update_LicenseKey]

	@p_date_Validfrom							datetime,
	@p_date_Validto							datetime,
	@p_date_Last_Renewal_Date							datetime,
	@p_var_LicenseKey							NVARCHAR(max)



AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
     -- interfering with SELECT statements.
     SET NOCOUNT ON;
   BEGIN TRY

   update License_Key set Valid_To = @p_date_Validto , valid_from = @p_date_Validfrom , Last_Renewal_Date = @p_date_Last_Renewal_Date ,
    License_Key = @p_var_LicenseKey;


	select * from 	License_Key			  
	END TRY
    BEGIN CATCH
		    SELECT			ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
    END CATCH    
 END
















/****** Object:  StoredProcedure [dbo].[USP_Insert_LabTestDataAll]    Script Date: 16-Jan-18 8:24:51 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_MRRegistration]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author      :  INCRUST
-- Create date :  12-Dec-2016
-- Description :  This stored procedure will Save MR Data In MR Master table
--  created By :  Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Update_MRRegistration]
		@p_nvar_Doctor_ID				NVARCHAR(30),
		@p_nvar_CompanyName				NVARCHAR(200),
		@p_nvar_First_Name				NVARCHAR(100),
		@p_nvar_Middle_Name				NVARCHAR(100),
		@p_nvar_Last_Name				NVARCHAR(100),
		@p_nvar_ShortName			    NVARCHAR(30),
		@p_nvar_Mobile					NVARCHAR(20),
		@p_nvar_MRPhoto					VARCHAR(300),
		@p_var_User_Id				    NVARCHAR(32),
		@p_var_MR_ID					INT
		--@p_var_Insert_MR_Data		[dbo].[UDT_Insert_MR]					READONLY
AS
BEGIN
	
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY

		 BEGIN
		 IF EXISTS(

			SELECT * FROM [dbo].[MR_Master]
			WHERE	First_Name=@p_nvar_First_Name
			AND		Last_Name=@p_nvar_Last_Name
			AND		Mobile_No=@p_nvar_Mobile
			AND		Company_Name=@p_nvar_CompanyName
			AND		MR_ID!=@p_var_MR_ID
			)
			BEGIN
			SELECT 0 AS SAVE_STATUS;
			END

			ELSE
			BEGIN
		
			  UPDATE  [dbo].[MR_Master]
								
								SET
							
								
								[Company_Name]=@p_nvar_CompanyName,
								First_Name=@p_nvar_First_Name,
								Middle_Name=@p_nvar_Middle_Name,
								Last_Name=@p_nvar_Last_Name,
								[Short_Name]=@p_nvar_ShortName,
								[Mobile_No]=@p_nvar_Mobile,
								[Created_On]=GetDate(),
								CreatedBy_Name=@p_var_User_Id,
								Modified_On=GetDate(),
								ModifiedBy_Name=@p_var_User_Id,
								[MR_Photo]=@p_nvar_MRPhoto
								
				WHERE	

					  MR_ID=@p_var_MR_ID
				AND	  Doctor_ID=@p_nvar_Doctor_ID

					 SELECT 1 AS SAVE_STATUS;
			END
			END
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ErrorNumber,
		       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END

















/****** Object:  StoredProcedure [dbo].[USP_Update_Password]    Script Date: 16-Jan-18 8:17:38 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_Password]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	09 Dec 2016
-- Description	:	This stored procedure will update user's password.   
-- created By	:	Varsha Khandre
-- =============================================
CREATE PROCEDURE [dbo].[USP_Update_Password]
	@p_nvar_Login_Id	NVARCHAR(60),
	@p_nvar_current_password	NVARCHAR(100),
	@p_nvar_Password	NVARCHAR(100)
	
	
AS
  
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY


	IF NOT EXISTS 
		(	
			SELECT  ID					
			FROM	User_Master
			WHERE	Login_Id = @p_nvar_Login_Id
		)
	BEGIN

	SELECT 2 AS SAVE_STATUS; 

	END

	ELSE
	 
	BEGIN

	IF EXISTS 
		(	
			SELECT  ID					
			FROM	User_Master
			WHERE	Login_Id = @p_nvar_Login_Id and Password=@p_nvar_current_password
		)
		BEGIN
			UPDATE User_Master SET Password=@p_nvar_Password WHERE Login_Id=@p_nvar_Login_Id;

			SELECT 1 AS SAVE_STATUS;

		END

	ELSE

		SELECT 3 AS SAVE_STATUS;

	END
	END TRY
	BEGIN CATCH
		SELECT	ERROR_NUMBER() AS ErrorNumber,ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
















/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor]    Script Date: 16-Jan-18 8:17:47 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_PatientAppointment_ByDoctor]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@int_Patient_Visit_No			INT,
	@p_time_Visit_Time_to				TIME(7)
	
AS
BEGIN
	
	SET NOCOUNT ON;

	
	BEGIN TRY

		BEGIN
			
			
			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			

            IF EXISTS(

			SELECT * FROM Patient_Visits
			WHERE	Patient_ID	=	@p_nvar_Patient_ID
			AND		Doctor_ID	=	@p_nvar_Doctor_ID
			AND		Clinic_ID	=	@p_nvar_Clinic_ID
			AND		Patient_Visit_No	=	@int_Patient_Visit_No
			AND		Delete_Flag			=	0
			)

			BEGIN

			 delete from  Patient_Visit_LabTestResults 
				WHERE	Patient_ID	=	@p_nvar_Patient_ID
				AND		Doctor_ID	=	@p_nvar_Doctor_ID
				AND		Clinic_ID	=	@p_nvar_Clinic_ID
				AND		Patient_Visit_No	=	@int_Patient_Visit_No
				AND		Delete_Flag			=	0


				UPDATE Patient_Visits SET  Visit_Date	=	@p_date_Visit_Date ,
				 Visit_Time	=	@p_time_Visit_Time, 
				 From_time = @p_time_Visit_Time_to,
				 Status_ID = 11,
				 Shift_ID = @p_int_Shift_ID
				WHERE	Patient_ID	=	@p_nvar_Patient_ID
				AND		Doctor_ID	=	@p_nvar_Doctor_ID
				AND		Clinic_ID	=	@p_nvar_Clinic_ID
				AND		Patient_Visit_No	=	@int_Patient_Visit_No
				AND		Delete_Flag			=	0

			SELECT 1 AS BOOKING_STATUS;

			END
   
			
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END








--------------------------




/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 11-Jan-18 12:27:52 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient's future Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_PatientAppointment_ByDoctor_For_Duplicate]

	@p_date_Visit_Date				DATETIME,
	@p_int_Shift_ID					INT,
	@p_nvar_Clinic_ID				NVARCHAR(10),
	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@p_time_Visit_Time				TIME(7),
	@p_bit_Reports_Received			BIT,
	@p_var_User_Id					NVARCHAR(32),
	@p_bit_In_Person				BIT,
	@p_nvar_scheduleday				NVARCHAR(2),
	@p_int_Patient_VisitNo			INT,
	@P_int_current_shiftID			INT,
	@p_time_Visit_Time_to			TIME(7)
	
AS
BEGIN
	
	SET NOCOUNT ON;
	
	BEGIN TRY

		
		
			
			
			DECLARE @int_StatusId  INT;

			IF(@p_nvar_scheduleday='1')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=11 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE IF(@p_nvar_scheduleday='2')
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=11))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			ELSE
			BEGIN
					SELECT	@int_StatusId = ID 
					FROM	Status_Ref 
					WHERE	ID NOT IN (SELECT ID FROM Status_Ref WHERE(Clinic_ID=@p_nvar_Clinic_ID) AND(ID=2 or ID=3 or ID=4 or ID=5 or ID=6 or ID=1 or ID=12))
					--AND		Doctor_ID=@p_nvar_Doctor_ID;
					AND		Clinic_ID = @p_nvar_Clinic_ID;
			END
			
           IF EXISTS(

			SELECT * FROM Patient_Visits
			WHERE	Patient_ID	=	@p_nvar_Patient_ID
			AND		Doctor_ID	=	@p_nvar_Doctor_ID
			AND		Clinic_ID	=	@p_nvar_Clinic_ID
			AND		Patient_Visit_No	=	@p_int_Patient_VisitNo
			AND		Delete_Flag			=	0
			)

			BEGIN

				UPDATE Patient_Visits SET Visit_Date	=	@p_date_Visit_Date , Visit_Time	=	@p_time_Visit_Time, Shift_ID = @p_int_Shift_ID,  From_time = @p_time_Visit_Time_to
				WHERE	Patient_ID	=	@p_nvar_Patient_ID
				AND		Doctor_ID	=	@p_nvar_Doctor_ID
				AND		Clinic_ID	=	@p_nvar_Clinic_ID
				AND		Patient_Visit_No	=	@p_int_Patient_VisitNo
				AND		Delete_Flag			=	0

			SELECT 1 AS BOOKING_STATUS;

			END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END







------------------------------




/****** Object:  StoredProcedure [dbo].[USP_Get_FutureAppointments_ForGivenDate]    Script Date: 12-Jan-18 12:03:07 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_PrintFlag]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       : INCRUST
-- Create date  : 03 Nov 2017
-- Description  : This stored procedure will update print flag of patient's discharge card, invoice and bill
-- Created By   : Varsha Khandre
-- =============================================

CREATE  PROCEDURE [dbo].[USP_Update_PrintFlag]

	@p_var_PatientID			NVARCHAR(32),				
	@p_var_DoctorID				NVARCHAR(30),
	@p_var_IPDNo				NVARCHAR(100),
	@p_var_UserID				NVARCHAR(90),
	@p_var_ClinicID				NVARCHAR(30),
	@p_var_Sender				int	

AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY
	DECLARE @Sender INT;

	SET @Sender = @p_var_Sender;

	IF(@Sender=1)
	BEGIN

			UPDATE  [dbo].[Discharge_Data]
			SET		Is_Printed			= 1,
					Modified_On			= GETDATE(),
					[ModifiedBy_Name]	= @p_var_UserID

			WHERE	Patient_ID	= @p_var_PatientID
			AND		Doctor_ID	= @p_var_DoctorID
			AND		Clinic_ID	= @p_var_ClinicID
			AND		[IPD_RefNo]	= @p_var_IPDNo

			SELECT 1 AS SAVE_STATUS
	END

	ELSE IF(@Sender=2)
	BEGIN

			UPDATE  Discharge_Bill_Hdr
			SET		Is_Printed			= 1,
					Modified_On			= GETDATE(),
					[ModifiedBy_Name]	= @p_var_UserID

			WHERE	Patient_ID	= @p_var_PatientID
			AND		Doctor_ID	= @p_var_DoctorID
			AND		Clinic_ID	= @p_var_ClinicID
			AND		[IPD_RefNo]	= @p_var_IPDNo

			SELECT 1 AS SAVE_STATUS
	END

	ELSE IF(@Sender=3)
	BEGIN

			UPDATE  Discharge_Invoice_Hdr
			SET		Is_Printed			= 1,
					Modified_On			= GETDATE(),
					[ModifiedBy_Name]	= @p_var_UserID

			WHERE	Patient_ID	= @p_var_PatientID
			AND		Doctor_ID	= @p_var_DoctorID
			AND		Clinic_ID	= @p_var_ClinicID
			AND		[IPD_RefNo]	= @p_var_IPDNo

			SELECT 1 AS SAVE_STATUS
	END
			  
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	
END
















/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysMRVisitDetails]    Script Date: 16-Jan-18 8:18:16 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_ReferredBy]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author		:	INCRUST
-- Create date	:	12 Oct 2017
-- Description	:	This stored procedure will Book the patient Apointment for diffrent doctor before submit
--  created By	:	Varsha Khandre
-- =============================================
Create  PROCEDURE [dbo].[USP_Update_ReferredBy]

	@p_nvar_Doctor_ID				NVARCHAR(30),
	@p_nvar_Patient_ID				NVARCHAR(32),
	@P_int_Patient_Visit_No			INT

	
AS
BEGIN
	
	SET NOCOUNT ON;

	
	BEGIN TRY

		BEGIN
			
			
					DECLARE @strrefer VARCHAR(100)


			 
	IF  EXISTS 
		(	
		
			select * from Patient_Visits
WHERE			Patient_ID						= @p_nvar_Patient_ID		
			 AND			Patient_Visit_No				= @P_int_Patient_Visit_No	
			
		)
		BEGIN
		set @strrefer='S';
		end 


				UPDATE Patient_Visits SET  Refer_ID	=	@strrefer 
				 
				WHERE	Patient_ID	=	@p_nvar_Patient_ID
				AND		Doctor_ID	=	@p_nvar_Doctor_ID
			
				AND		Patient_Visit_No	=	@P_int_Patient_Visit_No
				AND		Delete_Flag			=	0


			
		END

		
	END TRY
	BEGIN CATCH
		SELECT	 ERROR_NUMBER() AS ErrorNumber,
				 ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END








--------------------------




/****** Object:  StoredProcedure [dbo].[USP_Update_PatientAppointment_ByDoctor_For_Duplicate]    Script Date: 11-Jan-18 12:27:52 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysMRVisitDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  13 Dec 2016
-- Description  :  This stored procedure will Save The Data in Patient Visit Master
--  created By  :  Varsha Khandre
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_TodaysMRVisitDetails]
	@p_nvar_MR_ID				NVARCHAR(32),
	@p_int_MR_VisitDate			DATE,
	@p_int_Shift_Id				INT,
	@p_nvar_Clinic_Id			NVARCHAR(30),
	@p_nvar_Doctor_Id			NVARCHAR(30),
	@p_int_Status_ID			TINYINT,
	@p_nvar_User_Id				NVARCHAR(90)
	
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY

			
			
			
			UPDATE  [dbo].[MR_Visits]
			   SET  Status_ID = @p_int_Status_ID,
					ModifiedBy_Name = @p_nvar_User_Id,
					Modified_On = GetDate()
					
			 WHERE  MR_ID=@p_nvar_MR_ID
			   AND	Visit_Date=@p_int_MR_VisitDate
			   AND	Shift_ID=@p_int_Shift_Id 
			   AND	Clinic_ID=@p_nvar_Clinic_Id 
			   AND	Doctor_ID=@p_nvar_Doctor_Id

			   
			   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	
END
















/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitDetails]    Script Date: 16-Jan-18 8:18:25 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  22-Mar-2016
-- Description  :  This stored procedure will Save The Data in Patient Visit Master
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_TodaysVisitDetails]
	@p_nvar_Patient_ID       NVARCHAR(32),
	@p_int_Patient_VisitNo   INT,
	@p_int_Shift_Id          INT,
	@p_nvar_Clinic_Id        NVARCHAR(30),
	@p_nvar_Doctor_Id        NVARCHAR(30),
	@p_int_Status_ID         TINYINT,
	@p_dec_Weight_IN_KGS     DECIMAL(8,2),
	@p_nvar_User_Id          NVARCHAR(90),
	@p_bit_InPerson			 BIT
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY
	/*
			IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	 [dbo].[Visit_Prescription_Temp]
			WHERE	--Visit_Date	= @p_date_Visit_Date AND	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND     Patient_Visit_No =@p_int_Patient_VisitNo
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN */
			Delete FROM Visit_Prescription_Temp
			WHERE	--Visit_Date	= @p_date_Visit_Date AND	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND     Patient_Visit_No =@p_int_Patient_VisitNo
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			
			
		--END

		/*
				IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	 [dbo].[Visit_Complaints]
			WHERE	--Visit_Date	= @p_date_Visit_Date AND	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND     Patient_Visit_No =@p_int_Patient_VisitNo
			AND		Doctor_ID	!= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN */
			Delete FROM Visit_Complaints
			WHERE	--Visit_Date	= @p_date_Visit_Date AND	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND     Patient_Visit_No =@p_int_Patient_VisitNo
			AND		Doctor_ID	!= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			
			
		--END

			
			UPDATE  Patient_Visits
			   SET  Status_ID = @p_int_Status_ID,Doctor_ID=@p_nvar_Doctor_Id,
					--Weight_IN_KGS = @p_dec_Weight_IN_KGS,
					ModifiedBy_Name = @p_nvar_User_Id,
					Modified_On = GetDate()
					,In_Person=1
					--In_Person=@p_bit_InPerson
					
			 WHERE  Patient_ID=@p_nvar_Patient_ID
			   AND	Patient_Visit_No=@p_int_Patient_VisitNo
			   AND	Shift_ID=@p_int_Shift_Id 
			   AND	Clinic_ID=@p_nvar_Clinic_Id 
			  -- AND	Doctor_ID=@p_nvar_Doctor_Id
			
			
			   
		  
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	BEGIN TRY
			--SELECT On_Call_Status FROM Patient_Visits;
			IF(@p_int_Status_ID = 3)
			BEGIN
				UPDATE Patient_Visits
				SET On_Call_Status=1
				,In_Person=0
				WHERE  Patient_ID=@p_nvar_Patient_ID
				AND	Patient_Visit_No=@p_int_Patient_VisitNo
				AND	Shift_ID=@p_int_Shift_Id 
				AND	Clinic_ID=@p_nvar_Clinic_Id 
				AND	Doctor_ID=@p_nvar_Doctor_Id

				
			   
			END

			ELSE

			BEGIN
			UPDATE Patient_Visits
				SET On_Call_Status=0
				WHERE  Patient_ID=@p_nvar_Patient_ID
				AND	Patient_Visit_No=@p_int_Patient_VisitNo
				AND	Shift_ID=@p_int_Shift_Id 
				AND	Clinic_ID=@p_nvar_Clinic_Id 
				AND	Doctor_ID=@p_nvar_Doctor_Id
			
			END
			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END
















/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitPopUpDetails]    Script Date: 16-Jan-18 8:18:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitDetailsForServices]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  22-Mar-2016
-- Description  :  This stored procedure will Save The Data in Patient Visit Master
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_TodaysVisitDetailsForServices]
	@p_nvar_Patient_ID       NVARCHAR(32),
	@p_int_Patient_VisitNo   INT,
	@p_int_Shift_Id          INT,
	@p_nvar_Clinic_Id        NVARCHAR(30),
	@p_nvar_Doctor_Id        NVARCHAR(30),
	@p_int_Status_ID         TINYINT,
	@p_dec_Weight_IN_KGS     DECIMAL(8,2),
	@p_nvar_User_Id          NVARCHAR(90),
	@p_bit_InPerson			 BIT
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY
	/*
			IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	 [dbo].[Visit_Prescription_Temp]
			WHERE	--Visit_Date	= @p_date_Visit_Date AND	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND     Patient_Visit_No =@p_int_Patient_VisitNo
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN */
		--	Delete FROM Visit_Prescription_Temp
			--WHERE	--Visit_Date	= @p_date_Visit_Date AND	
		--		   Shift_ID	= @p_int_Shift_ID
		--	AND		Clinic_ID	= @p_nvar_Clinic_ID
		--	AND     Patient_Visit_No =@p_int_Patient_VisitNo
			--AND		Doctor_ID	= @p_nvar_Doctor_ID
		--	AND		Patient_ID	= @p_nvar_Patient_ID
			
			
		--END

		/*
				IF EXISTS 
		(	SELECT  Visit_Date,
					Shift_ID,
					Clinic_ID,
					Doctor_ID,
					Patient_Visit_No,
					Patient_ID 
			FROM	 [dbo].[Visit_Complaints]
			WHERE	--Visit_Date	= @p_date_Visit_Date AND	
				   Shift_ID	= @p_int_Shift_ID
			AND		Clinic_ID	= @p_nvar_Clinic_ID
			AND     Patient_Visit_No =@p_int_Patient_VisitNo
			AND		Doctor_ID	!= @p_nvar_Doctor_ID
			AND		Patient_ID	= @p_nvar_Patient_ID
			AND		Delete_Flag = 0
			--AND		(Status_ID = 1 OR Status_ID = 2 OR Status_ID = 3 OR Status_ID=11)
		)
		BEGIN */
		--	Delete FROM Visit_Complaints
		--	WHERE	--Visit_Date	= @p_date_Visit_Date AND	
		--		   Shift_ID	= @p_int_Shift_ID
		--	AND		Clinic_ID	= @p_nvar_Clinic_ID
		--	AND     Patient_Visit_No =@p_int_Patient_VisitNo
		--	AND		Doctor_ID	!= @p_nvar_Doctor_ID
		--	AND		Patient_ID	= @p_nvar_Patient_ID
			
			
		--END

			
			UPDATE  Patient_Visits_Services
			   SET  Status_ID = @p_int_Status_ID,Doctor_ID=@p_nvar_Doctor_Id,
					--Weight_IN_KGS = @p_dec_Weight_IN_KGS,
					ModifiedBy_Name = @p_nvar_User_Id,
					Modified_On = GetDate()
					--In_Person=@p_bit_InPerson
					
			 WHERE  Patient_ID=@p_nvar_Patient_ID
			   AND	Patient_Visit_No=@p_int_Patient_VisitNo
			   AND	Shift_ID=@p_int_Shift_Id 
			   AND	Clinic_ID=@p_nvar_Clinic_Id 
			  -- AND	Doctor_ID=@p_nvar_Doctor_Id
			
			
			   
		  
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	--BEGIN TRY
	--		--SELECT On_Call_Status FROM Patient_Visits;
	--		IF(@p_int_Status_ID = 3)
	--		BEGIN
	--			UPDATE Patient_Visits
	--			SET On_Call_Status=1
	--			WHERE  Patient_ID=@p_nvar_Patient_ID
	--			AND	Patient_Visit_No=@p_int_Patient_VisitNo
	--			AND	Shift_ID=@p_int_Shift_Id 
	--			AND	Clinic_ID=@p_nvar_Clinic_Id 
	--			AND	Doctor_ID=@p_nvar_Doctor_Id

				
			   
	--		END

	--		ELSE

	--		BEGIN
	--		UPDATE Patient_Visits
	--			SET On_Call_Status=0
	--			WHERE  Patient_ID=@p_nvar_Patient_ID
	--			AND	Patient_Visit_No=@p_int_Patient_VisitNo
	--			AND	Shift_ID=@p_int_Shift_Id 
	--			AND	Clinic_ID=@p_nvar_Clinic_Id 
	--			AND	Doctor_ID=@p_nvar_Doctor_Id
			
	--		END
			
	--END TRY
	--BEGIN CATCH
	--		SELECT ERROR_NUMBER() AS ErrorNumber,
	--		       ERROR_MESSAGE() AS ErrorMessage;
	--END CATCH
END




/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitPopUpDetails]    Script Date: 16-Jan-18 8:18:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitOnlineTimeDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  16-JAN-2020
-- Description  :  This stored procedure will Save The Data in Patient Visit Master
-- Created By   :  Neha Chavan
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_TodaysVisitOnlineTimeDetails]
	@p_nvar_Patient_ID          NVARCHAR(32),
	@p_int_Patient_VisitNo      INT,
	@p_int_Shift_Id             INT,
	@p_nvar_Clinic_Id           NVARCHAR(30),
	@p_nvar_Doctor_Id           NVARCHAR(30),
	@p_int_Status_ID            TINYINT,
	@p_nvar_User_Id             NVARCHAR(90),
	@p_Online_Appointment_Time	NVARCHAR(10)
AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY
		DECLARE @strrefer VARCHAR(100)

			
	
	IF not  EXISTS 
		(	
		 select Refer_ID from Patient_Visits pv
			 
WHERE			Patient_ID						= @p_nvar_Patient_ID		
			 AND			Patient_Visit_No				= @p_int_Patient_VisitNo	
			and Refer_ID is not null


			 
		)
		BEGIN
		set @strrefer='S';
		end 
		else

		begin
		
		set @strrefer= (select Refer_ID from Patient_Visits pv
WHERE			Patient_ID						= @p_nvar_Patient_ID		
			 AND			Patient_Visit_No				= @p_int_Patient_VisitNo	)
			
		 end

		print @strrefer;
			
			 
	
			
	 IF(@p_Online_Appointment_Time = '')
	  BEGIN
         SET @p_Online_Appointment_Time = NULL;
	  END
			
			
			UPDATE  Patient_Visits
			   SET  Online_Appointment_Time = @p_Online_Appointment_Time,Doctor_ID=@p_nvar_Doctor_Id,
					ModifiedBy_Name = @p_nvar_User_Id,
					Modified_On = GetDate(),
					Refer_ID=@strrefer
					
					
			 WHERE  Patient_ID=@p_nvar_Patient_ID
			   AND	Patient_Visit_No=@p_int_Patient_VisitNo
			   AND	Shift_ID=@p_int_Shift_Id 
			   AND	Clinic_ID=@p_nvar_Clinic_Id 
			  -- AND	Doctor_ID=@p_nvar_Doctor_Id
			
			

			
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
END





/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitPopUpDetails]    Script Date: 16-Jan-18 8:18:36 PM ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[USP_Update_TodaysVisitPopUpDetails]    Script Date: 28-Aug-25 7:53:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author       :  INCRUST
-- Create date  :  22-Mar-2016
-- Description  :  This stored procedure will Save The Data in Patient Visit Master
--  created By  :  Suyog Khairnar
-- =============================================
CREATE  PROCEDURE [dbo].[USP_Update_TodaysVisitPopUpDetails]

	@p_nvar_Patient_ID							NVARCHAR(32),
	@p_int_Patient_VisitNo						INT,
	@p_int_Shift_Id								INT,
	@p_nvar_Clinic_Id							NVARCHAR(30),
	@p_nvar_Doctor_Id							NVARCHAR(30),
	@p_var_Height_In_CMS						DECIMAL(8,2),
	@p_var_Weight_IN_KGS						DECIMAL(8,2),
	@p_var_Pulse								INT,
	@p_var_Blood_Pressure						NVARCHAR(10),
	@p_nvar_User_Id								NVARCHAR(90),
	@p_var_sugar								NVARCHAR(25),
	@p_var_THtext								NVARCHAR(1000),
	@p_bit_follow_up							BIT,
	@p_var_current_complaint					NVARCHAR(1000),
	@p_var_current_medicines					NVARCHAR(1000),
	@p_var_visit_comments						NVARCHAR(1000),
	@p_var_Previous_instructions				NVARCHAR(1000),
	@p_var_Insert_Complaint_Data				[dbo].[UDT_Insert_complaints_master]	READONLY,
	@p_bit_InPerson							    BIT,
    @p_var_refer_by_ID					        CHAR(1),
	@p_nvar_refer_doctor_details                NVARCHAR(200),
	@p_nvar_DoctorAddress						NVARCHAR(150),
	@p_nvar_Doctor_Mobile						NVARCHAR(20),
	@p_nvar_Doctor_Email						NVARCHAR(60)

AS
BEGIN

	SET NOCOUNT ON;
	
	BEGIN TRY

			
			
			
			UPDATE  Patient_Visits
			   SET  Height_In_CMS		=	@p_var_Height_In_CMS,
					Weight_IN_KGS		=	@p_var_Weight_IN_KGS,
					Pulse				=	@p_var_Pulse,
					Blood_Pressure		=	@p_var_Blood_Pressure,
					THtext				=	@p_var_THtext,
					Sugar				=	@p_var_sugar,
					Current_Complaints	=	@p_var_current_complaint,
					Current_Medicines	=	@p_var_current_medicines,
					Visit_Comments		=	@p_var_visit_comments,
					ModifiedBy_Name		=	@p_nvar_User_Id,
					Modified_On			=	GetDate(),
					Is_follow_Up		=	@p_bit_follow_up,
					
					[Is_Submit_Patient_Visit_Details] = 1,
					In_Person =@p_bit_InPerson,
					Refer_ID								=	@p_var_refer_by_ID,
					Refer_Doctor_Details					=	@p_nvar_refer_doctor_details,
					Doctor_Address							=	@p_nvar_DoctorAddress,
					Doctor_Email							=	@p_nvar_Doctor_Email,
					Doctor_Mobile							=	@p_nvar_Doctor_Mobile
					--Instructions		=	@p_var_Previous_instructions

					
			 WHERE  Patient_ID			=	@p_nvar_Patient_ID
			   AND	Patient_Visit_No	=	@p_int_Patient_VisitNo
			   AND	Shift_ID			=	@p_int_Shift_Id 
			   AND	Clinic_ID			=	@p_nvar_Clinic_Id 
			   AND	Doctor_ID			=	@p_nvar_Doctor_Id

			   /**********************************first delete all complaints*******************************************/
			   
			   UPDATE Visit_Complaints SET Delete_Flag=1
			   WHERE  Patient_ID			=	@p_nvar_Patient_ID
			   AND	Patient_Visit_No	=	@p_int_Patient_VisitNo
			   AND	Shift_ID			=	@p_int_Shift_Id 
			   AND	Clinic_ID			=	@p_nvar_Clinic_Id 
			   AND	Doctor_ID			=	@p_nvar_Doctor_Id

			    /**********************************update and insert complaints*******************************************/

			MERGE [dbo].[Visit_Complaints] as CM

	 USING(
			SELECT DISTINCT 
					 [Doctor_ID]				AS DOCTOR_ID,
					 [Clinic_ID]				AS CLINIC_ID,
					 [Shift_ID]					AS SHIFT_ID,
					 [Patient_ID]				AS PATIENT_ID,
					 [Patient_Visit_No]			AS VISITNO,
					 [Visit_Date]				AS VISIT_DATE,
					 [Short_Description]		AS SHORTDESC,
					 [Complaint_Description]	AS COMPLAINT,
					 [Complaint_Comment]			AS COMMENTS
							
							
			FROM	@p_var_Insert_Complaint_Data 
		  )
	
	 AS	 SRC (
				DOCTOR_ID,CLINIC_ID,SHIFT_ID,PATIENT_ID,VISITNO,VISIT_DATE,SHORTDESC,COMPLAINT,COMMENTS
			 )
	 ON		 (
				CM.[Doctor_ID]			=SRC.DOCTOR_ID	AND
				CM.[Clinic_ID]			=SRC.CLINIC_ID	AND
				CM.[Shift_ID]			=SRC.SHIFT_ID	AND
				CM.[Patient_ID]			=SRC.PATIENT_ID	AND
				CM.[Patient_Visit_No]	=SRC.VISITNO	AND
				CM.[Visit_Date]			=SRC.VISIT_DATE	AND
				CM.[Short_Description]	=SRC.SHORTDESC	-- AND
				--CM.[Complaint_Comment]	=SRC.COMMENTS
			 )	

	 WHEN MATCHED THEN
	
	 UPDATE 
	 SET		CM.[Complaint_Comment]=SRC.COMMENTS,
				CM.[Delete_Flag]		= 0,
				CM.[Modified_On]		= GETDATE(),
				CM.[ModifiedBy_Name]	= @p_nvar_User_Id

	WHEN NOT MATCHED THEN
			
	INSERT ([Doctor_ID],[Clinic_ID],[Shift_ID],[Patient_ID],[Patient_Visit_No],[Visit_Date],[Short_Description],[Complaint_Description],Created_On,CreatedBy_Name,Modified_On,ModifiedBy_Name,[Delete_Flag],[Complaint_Comment])
	VALUES	(SRC.DOCTOR_ID,SRC.CLINIC_ID,SRC.SHIFT_ID,SRC.PATIENT_ID,SRC.VISITNO,SRC.VISIT_DATE,SRC.SHORTDESC,SRC.COMPLAINT,GETDATE(),@p_nvar_User_Id,GETDATE(),@p_nvar_User_Id,0,COMMENTS);

	SELECT 1 AS SAVE_STATUS

			   
	END TRY
	BEGIN CATCH
			SELECT ERROR_NUMBER() AS ErrorNumber,
			       ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

	
END